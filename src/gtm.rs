/*
*****************************************************************************
	*
	* Copyright (C) 2024 Infineon Technologies AG. All rights reserved.
	*
	* Infineon Technologies AG (Infineon) is supplying this software for use with
	* Infineon's microcontrollers. This file can be freely distributed within
	* development tools that are supporting such microcontrollers.
	*
	* THIS SOFTWARE IS PROVIDED "AS IS". NO WARRANTIES, WHETHER EXPRESS, IMPLIED
	* OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
	* MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
	* INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
	* OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
	*
	******************************************************************************
*/
#![allow(clippy::identity_op)]
#![allow(clippy::module_inception)]
#![allow(clippy::derivable_impls)]
#[allow(unused_imports)]
use crate::common::sealed;
#[allow(unused_imports)]
use crate::common::*;
#[doc = r"GTM"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Gtm(pub(super) *mut u8);
unsafe impl core::marker::Send for Gtm {}
unsafe impl core::marker::Sync for Gtm {}
impl Gtm {
    #[doc = "Access Enable Register 0\n resetvalue={Application Reset:0x0FFFFFFFF}"]
    #[inline(always)]
    pub const fn accen0(&self) -> crate::common::Reg<self::Accen0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(654608usize)) }
    }

    #[doc = "GTM AEI Timeout Exception Address Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn aei_addr_xpt(
        &self,
    ) -> crate::common::Reg<self::AeiAddrXpt_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(12usize)) }
    }

    #[doc = "GTM AEI Non Zero Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn aei_sta_xpt(&self) -> crate::common::Reg<self::AeiStaXpt_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(44usize)) }
    }

    #[doc = "CAN0 CAN1 Output Select Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn canoutsel0(&self) -> crate::common::Reg<self::Canoutsel0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(655324usize)) }
    }

    #[doc = "CAN2 Output Select Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn canoutsel1(&self) -> crate::common::Reg<self::Canoutsel1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(655328usize)) }
    }

    #[doc = "GTM Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn cfg(&self) -> crate::common::Reg<self::Cfg_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(40usize)) }
    }

    #[doc = "Clock Control Register\n resetvalue={Application Reset:0x3}"]
    #[inline(always)]
    pub const fn clc(&self) -> crate::common::Reg<self::Clc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(654592usize)) }
    }

    #[doc = "GTM Cluster Clock Configuration\n resetvalue={Application Reset:0x0AAAAAA,Application Reset:0x2AAAA,Application Reset:0x0AAA,Application Reset:0x0A,Application Reset:0x0AA}"]
    #[inline(always)]
    pub const fn cls_clk_cfg(&self) -> crate::common::Reg<self::ClsClkCfg_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(176usize)) }
    }

    #[doc = "GTM Global Control Register\n resetvalue={Application Reset:0x1}"]
    #[inline(always)]
    pub const fn ctrl(&self) -> crate::common::Reg<self::Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
    }

    #[doc = "Data Input 0 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn datainn(&self) -> [crate::common::Reg<self::DataiNn_SPEC, crate::common::RW>; 5] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x9fed4usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fed4usize + 0x4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fed4usize + 0x8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fed4usize + 0xcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fed4usize + 0x10usize)),
            ]
        }
    }

    #[doc = "DSADC Input Select i Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn dsadcinsel(
        &self,
    ) -> [crate::common::Reg<self::Dsadcinsel_SPEC, crate::common::RW>; 6] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x9fe00usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fe00usize + 0x4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fe00usize + 0x8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fe00usize + 0xcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fe00usize + 0x10usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fe00usize + 0x14usize)),
            ]
        }
    }

    #[doc = "DTM AUX Input Selection Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn dtmauxinsel(
        &self,
    ) -> crate::common::Reg<self::Dtmauxinsel_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(655320usize)) }
    }

    #[doc = "Data Exchange Input Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn dxincon(&self) -> crate::common::Reg<self::Dxincon_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(655056usize)) }
    }

    #[doc = "Data Exchange Output Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn dxoutcon(&self) -> crate::common::Reg<self::Dxoutcon_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(654960usize)) }
    }

    #[doc = "GTM Error Interrupt Enable Register\n resetvalue={Application Reset:0x180}"]
    #[inline(always)]
    pub const fn eirq_en(&self) -> crate::common::Reg<self::EirqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(32usize)) }
    }

    #[doc = "GTM External Capture Trigger Enable 0\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ext_cap_en_i(
        &self,
    ) -> [crate::common::Reg<self::ExtCapEnI_SPEC, crate::common::RW>; 6] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x5cusize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x5cusize + 0x4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x5cusize + 0x8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x5cusize + 0xcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x5cusize + 0x10usize)),
                crate::common::Reg::from_ptr(self.0.add(0x5cusize + 0x14usize)),
            ]
        }
    }

    #[doc = "GTM Hardware Configuration Register\n resetvalue={Application Reset:0x084F022E}"]
    #[inline(always)]
    pub const fn hw_conf(&self) -> crate::common::Reg<self::HwConf_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(36usize)) }
    }

    #[doc = "Interrupt Output Register 0\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn intoutn(&self) -> [crate::common::Reg<self::IntouTn_SPEC, crate::common::W>; 5] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x9fe9cusize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fe9cusize + 0x4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fe9cusize + 0x8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fe9cusize + 0xcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fe9cusize + 0x10usize)),
            ]
        }
    }

    #[doc = "LCDCDC Output Select Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn lcdcdcoutsel(
        &self,
    ) -> crate::common::Reg<self::Lcdcdcoutsel_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(655316usize)) }
    }

    #[doc = "MAP Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn map_ctrl(&self) -> crate::common::Reg<self::MapCtrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3840usize)) }
    }

    #[doc = "MCFG Memory Layout Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcfg_ctrl(&self) -> crate::common::Reg<self::McfgCtrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3904usize)) }
    }

    #[doc = "MCS Interrupt Clear Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcsintclr(&self) -> crate::common::Reg<self::Mcsintclr_SPEC, crate::common::W> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(655052usize)) }
    }

    #[doc = "MCS Interrupt Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcsintstat(&self) -> crate::common::Reg<self::Mcsintstat_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(655048usize)) }
    }

    #[doc = "Trigger Output Select Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcstrigoutsel(
        &self,
    ) -> crate::common::Reg<self::Mcstrigoutsel_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(655044usize)) }
    }

    #[doc = "GTM MCS Master Port Disable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs_aem_dis(&self) -> crate::common::Reg<self::McsAemDis_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(60usize)) }
    }

    #[doc = "PSI5 Output Select Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn psi5outsel(&self) -> crate::common::Reg<self::Psi5Outsel_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(655308usize)) }
    }

    #[doc = "PSI5 S Output Select Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn psi5soutsel(
        &self,
    ) -> crate::common::Reg<self::Psi5Soutsel_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(655312usize)) }
    }

    #[doc = "Kernel Reset Register 0\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn reset1(&self) -> crate::common::Reg<self::Reset1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(654600usize)) }
    }

    #[doc = "Kernel Reset Register 1\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn reset2(&self) -> crate::common::Reg<self::Reset2_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(654604usize)) }
    }

    #[doc = "Kernel Reset Status Clear Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn reset_clr(&self) -> crate::common::Reg<self::ResetClr_SPEC, crate::common::W> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(654596usize)) }
    }

    #[doc = "GTM Version Control Register\n resetvalue={Application Reset:0x313315B9}"]
    #[inline(always)]
    pub const fn rev(&self) -> crate::common::Reg<self::Rev_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
    }

    #[doc = "GTM Global Reset Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn rst(&self) -> crate::common::Reg<self::Rst_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
    }

    #[doc = "TIM0 Input Select Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn timninsel(
        &self,
    ) -> [crate::common::Reg<self::TiMnInsel_SPEC, crate::common::RW>; 6] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x9fd40usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fd40usize + 0x4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fd40usize + 0x8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fd40usize + 0xcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fd40usize + 0x10usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fd40usize + 0x14usize)),
            ]
        }
    }

    #[doc = "Timer Output Select Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn toutseln(
        &self,
    ) -> [crate::common::Reg<self::ToutseLn_SPEC, crate::common::RW>; 19] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x9fd60usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fd60usize + 0x4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fd60usize + 0x8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fd60usize + 0xcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fd60usize + 0x10usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fd60usize + 0x14usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fd60usize + 0x18usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fd60usize + 0x1cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fd60usize + 0x20usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fd60usize + 0x24usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fd60usize + 0x28usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fd60usize + 0x2cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fd60usize + 0x30usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fd60usize + 0x34usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fd60usize + 0x38usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fd60usize + 0x3cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fd60usize + 0x40usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fd60usize + 0x44usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fd60usize + 0x48usize)),
            ]
        }
    }

    #[doc = "Trigger Output Register 0\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn trigoutn(&self) -> [crate::common::Reg<self::TrigouTn_SPEC, crate::common::W>; 5] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x9fe74usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fe74usize + 0x4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fe74usize + 0x8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fe74usize + 0xcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x9fe74usize + 0x10usize)),
            ]
        }
    }
    #[doc = "ADCTRIG"]
    #[inline(always)]
    pub fn adctrig(self) -> [self::Adctrig; 5] {
        unsafe {
            [
                self::Adctrig(self.0.add(0x9fe40usize + 0x0usize)),
                self::Adctrig(self.0.add(0x9fe40usize + 0x8usize)),
                self::Adctrig(self.0.add(0x9fe40usize + 0x10usize)),
                self::Adctrig(self.0.add(0x9fe40usize + 0x18usize)),
                self::Adctrig(self.0.add(0x9fe40usize + 0x20usize)),
            ]
        }
    }
    #[doc = "ARU"]
    #[inline(always)]
    pub fn aru(self) -> self::Aru {
        unsafe { self::Aru(self.0.add(640usize)) }
    }
    #[doc = "ATOM"]
    #[inline(always)]
    pub fn atom(self) -> [self::Atom; 6] {
        unsafe {
            [
                self::Atom(self.0.add(0xe8000usize + 0x0usize)),
                self::Atom(self.0.add(0xe8000usize + 0x800usize)),
                self::Atom(self.0.add(0xe8000usize + 0x1000usize)),
                self::Atom(self.0.add(0xe8000usize + 0x1800usize)),
                self::Atom(self.0.add(0xe8000usize + 0x2000usize)),
                self::Atom(self.0.add(0xe8000usize + 0x2800usize)),
            ]
        }
    }
    #[doc = "AUX IN SRC"]
    #[inline(always)]
    pub fn aux_in_src(self) -> self::AuxInSrc {
        unsafe { self::AuxInSrc(self.0.add(64usize)) }
    }
    #[doc = "BRC"]
    #[inline(always)]
    pub fn brc(self) -> self::Brc {
        unsafe { self::Brc(self.0.add(1024usize)) }
    }
    #[doc = "BRIDGE"]
    #[inline(always)]
    pub fn bridge(self) -> self::Bridge {
        unsafe { self::Bridge(self.0.add(48usize)) }
    }
    #[doc = "CCM"]
    #[inline(always)]
    pub fn ccm(self) -> [self::Ccm; 6] {
        unsafe {
            [
                self::Ccm(self.0.add(0xe2000usize + 0x0usize)),
                self::Ccm(self.0.add(0xe2000usize + 0x200usize)),
                self::Ccm(self.0.add(0xe2000usize + 0x400usize)),
                self::Ccm(self.0.add(0xe2000usize + 0x600usize)),
                self::Ccm(self.0.add(0xe2000usize + 0x800usize)),
                self::Ccm(self.0.add(0xe2000usize + 0xa00usize)),
            ]
        }
    }
    #[doc = "CDTM"]
    #[inline(always)]
    pub fn cdtm(self) -> [self::Cdtm; 5] {
        unsafe {
            [
                self::Cdtm(self.0.add(0xe4000usize + 0x0usize)),
                self::Cdtm(self.0.add(0xe4000usize + 0x400usize)),
                self::Cdtm(self.0.add(0xe4000usize + 0x800usize)),
                self::Cdtm(self.0.add(0xe4000usize + 0xc00usize)),
                self::Cdtm(self.0.add(0xe4000usize + 0x1000usize)),
            ]
        }
    }
    #[doc = "CMP"]
    #[inline(always)]
    pub fn cmp(self) -> self::Cmp {
        unsafe { self::Cmp(self.0.add(512usize)) }
    }
    #[doc = "CMU"]
    #[inline(always)]
    pub fn cmu(self) -> self::Cmu {
        unsafe { self::Cmu(self.0.add(768usize)) }
    }
    #[doc = "DPLL"]
    #[inline(always)]
    pub fn dpll(self) -> self::Dpll {
        unsafe { self::Dpll(self.0.add(163840usize)) }
    }
    #[doc = "DSADC"]
    #[inline(always)]
    pub fn dsadc(self) -> [self::Dsadc; 4] {
        unsafe {
            [
                self::Dsadc(self.0.add(0x9fe20usize + 0x0usize)),
                self::Dsadc(self.0.add(0x9fe20usize + 0x8usize)),
                self::Dsadc(self.0.add(0x9fe20usize + 0x10usize)),
                self::Dsadc(self.0.add(0x9fe20usize + 0x18usize)),
            ]
        }
    }
    #[doc = "ICM"]
    #[inline(always)]
    pub fn icm(self) -> self::Icm {
        unsafe { self::Icm(self.0.add(1536usize)) }
    }
    #[doc = "IRQ"]
    #[inline(always)]
    pub fn irq(self) -> self::Irq {
        unsafe { self::Irq(self.0.add(16usize)) }
    }
    #[doc = "MCS"]
    #[inline(always)]
    pub fn mcs(self) -> [self::Mcs; 5] {
        unsafe {
            [
                self::Mcs(self.0.add(0xf0000usize + 0x0usize)),
                self::Mcs(self.0.add(0xf0000usize + 0x1000usize)),
                self::Mcs(self.0.add(0xf0000usize + 0x2000usize)),
                self::Mcs(self.0.add(0xf0000usize + 0x3000usize)),
                self::Mcs(self.0.add(0xf0000usize + 0x4000usize)),
            ]
        }
    }
    #[doc = "MON"]
    #[inline(always)]
    pub fn mon(self) -> self::Mon {
        unsafe { self::Mon(self.0.add(384usize)) }
    }
    #[doc = "MSC"]
    #[inline(always)]
    pub fn msc(self) -> self::Msc {
        unsafe { self::Msc(self.0.add(655104usize)) }
    }
    #[doc = "OCDS"]
    #[inline(always)]
    pub fn ocds(self) -> self::Ocds {
        unsafe { self::Ocds(self.0.add(654616usize)) }
    }
    #[doc = "OUT"]
    #[inline(always)]
    pub fn out(self) -> self::Out {
        unsafe { self::Out(self.0.add(128usize)) }
    }
    #[doc = "PSM"]
    #[inline(always)]
    pub fn psm(self) -> self::Psm {
        unsafe { self::Psm(self.0.add(98304usize)) }
    }
    #[doc = "SPE"]
    #[inline(always)]
    pub fn spe(self) -> [self::Spe; 2] {
        unsafe {
            [
                self::Spe(self.0.add(0x800usize + 0x0usize)),
                self::Spe(self.0.add(0x800usize + 0x80usize)),
            ]
        }
    }
    #[doc = "TBU"]
    #[inline(always)]
    pub fn tbu(self) -> self::Tbu {
        unsafe { self::Tbu(self.0.add(256usize)) }
    }
    #[doc = "TIM"]
    #[inline(always)]
    pub fn tim(self) -> [self::Tim; 6] {
        unsafe {
            [
                self::Tim(self.0.add(0x1000usize + 0x0usize)),
                self::Tim(self.0.add(0x1000usize + 0x800usize)),
                self::Tim(self.0.add(0x1000usize + 0x1000usize)),
                self::Tim(self.0.add(0x1000usize + 0x1800usize)),
                self::Tim(self.0.add(0x1000usize + 0x2000usize)),
                self::Tim(self.0.add(0x1000usize + 0x2800usize)),
            ]
        }
    }
    #[doc = "TOM"]
    #[inline(always)]
    pub fn tom(self) -> [self::Tom; 3] {
        unsafe {
            [
                self::Tom(self.0.add(0x8000usize + 0x0usize)),
                self::Tom(self.0.add(0x8000usize + 0x800usize)),
                self::Tom(self.0.add(0x8000usize + 0x1000usize)),
            ]
        }
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Accen0_SPEC;
impl crate::sealed::RegSpec for Accen0_SPEC {
    type DataType = u32;
}
#[doc = "Access Enable Register 0\n resetvalue={Application Reset:0x0FFFFFFFF}"]
pub type Accen0 = crate::RegValueT<Accen0_SPEC>;

impl Accen0 {
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en0(self) -> crate::common::RegisterFieldBool<0, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<0, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en1(self) -> crate::common::RegisterFieldBool<1, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<1, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en2(self) -> crate::common::RegisterFieldBool<2, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<2, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en3(self) -> crate::common::RegisterFieldBool<3, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<3, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en4(self) -> crate::common::RegisterFieldBool<4, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<4, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en5(self) -> crate::common::RegisterFieldBool<5, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<5, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en6(self) -> crate::common::RegisterFieldBool<6, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<6, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en7(self) -> crate::common::RegisterFieldBool<7, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en8(self) -> crate::common::RegisterFieldBool<8, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<8, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en9(self) -> crate::common::RegisterFieldBool<9, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<9, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en10(
        self,
    ) -> crate::common::RegisterFieldBool<10, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<10, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en11(
        self,
    ) -> crate::common::RegisterFieldBool<11, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<11, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en12(
        self,
    ) -> crate::common::RegisterFieldBool<12, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<12, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en13(
        self,
    ) -> crate::common::RegisterFieldBool<13, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<13, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en14(
        self,
    ) -> crate::common::RegisterFieldBool<14, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<14, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en15(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<15, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en16(
        self,
    ) -> crate::common::RegisterFieldBool<16, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<16, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en17(
        self,
    ) -> crate::common::RegisterFieldBool<17, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<17, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en18(
        self,
    ) -> crate::common::RegisterFieldBool<18, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<18, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en19(
        self,
    ) -> crate::common::RegisterFieldBool<19, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<19, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en20(
        self,
    ) -> crate::common::RegisterFieldBool<20, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<20, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en21(
        self,
    ) -> crate::common::RegisterFieldBool<21, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<21, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en22(
        self,
    ) -> crate::common::RegisterFieldBool<22, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<22, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en23(
        self,
    ) -> crate::common::RegisterFieldBool<23, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<23, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en24(
        self,
    ) -> crate::common::RegisterFieldBool<24, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<24, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en25(
        self,
    ) -> crate::common::RegisterFieldBool<25, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<25, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en26(
        self,
    ) -> crate::common::RegisterFieldBool<26, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<26, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en27(
        self,
    ) -> crate::common::RegisterFieldBool<27, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<27, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en28(
        self,
    ) -> crate::common::RegisterFieldBool<28, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<28, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en29(
        self,
    ) -> crate::common::RegisterFieldBool<29, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<29, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en30(
        self,
    ) -> crate::common::RegisterFieldBool<30, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<30, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Access Enable for Master TAG ID 31. This bit enables write access to the module kernel addresses for        transactions with the Master TAG ID n"]
    #[inline(always)]
    pub fn en31(
        self,
    ) -> crate::common::RegisterFieldBool<31, 1, 0, Accen0_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<31, 1, 0, Accen0_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl core::default::Default for Accen0 {
    #[inline(always)]
    fn default() -> Accen0 {
        <crate::RegValueT<Accen0_SPEC> as RegisterValue<_>>::new(4294967295)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AeiAddrXpt_SPEC;
impl crate::sealed::RegSpec for AeiAddrXpt_SPEC {
    type DataType = u32;
}
#[doc = "GTM AEI Timeout Exception Address Register\n resetvalue={Application Reset:0x0}"]
pub type AeiAddrXpt = crate::RegValueT<AeiAddrXpt_SPEC>;

impl AeiAddrXpt {
    #[doc = "AEI timeout address. This bit field defines the AEI address for which the AEI timeout event        occurred."]
    #[inline(always)]
    pub fn to_addr(
        self,
    ) -> crate::common::RegisterField<0, 0xfffff, 1, 0, u32, AeiAddrXpt_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<0,0xfffff,1,0,u32, AeiAddrXpt_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "AEI timeout Read Write flag. This bit defines the AEI Read Write flag for which the AEI timeout event        occurred."]
    #[inline(always)]
    pub fn to_w1r0(
        self,
    ) -> crate::common::RegisterFieldBool<20, 1, 0, AeiAddrXpt_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<20,1,0,AeiAddrXpt_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl core::default::Default for AeiAddrXpt {
    #[inline(always)]
    fn default() -> AeiAddrXpt {
        <crate::RegValueT<AeiAddrXpt_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AeiStaXpt_SPEC;
impl crate::sealed::RegSpec for AeiStaXpt_SPEC {
    type DataType = u32;
}
#[doc = "GTM AEI Non Zero Status Register\n resetvalue={Application Reset:0x0}"]
pub type AeiStaXpt = crate::RegValueT<AeiStaXpt_SPEC>;

impl AeiStaXpt {
    #[doc = "AEI exception address. This bit field captures the address of the first AEI access resulting        with a non zero AEI status signal. The bit field can be cleared by        clearing the interrupt flags AEI USP ADDR AEI USP BE  and AEI IM ADDR in        the register GTM IRQ NOTIFY."]
    #[inline(always)]
    pub fn addr(
        self,
    ) -> crate::common::RegisterField<0, 0xfffff, 1, 0, u32, AeiStaXpt_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xfffff,1,0,u32, AeiStaXpt_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "AEI exception Read Write flag. This bit defines the AEI Read Write flag for which the AEI non zero        event occurred. This bit field captures the address of the first AEI        access resulting with a non zero AEI status signal. The bit field can be        cleared by clearing the interrupt flags AEI USP ADDR  AEI USP BE  and        AEI IM ADDR in the register GTM IRQ NOTIFY."]
    #[inline(always)]
    pub fn w1r0(
        self,
    ) -> crate::common::RegisterFieldBool<20, 1, 0, AeiStaXpt_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<20,1,0,AeiStaXpt_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl core::default::Default for AeiStaXpt {
    #[inline(always)]
    fn default() -> AeiStaXpt {
        <crate::RegValueT<AeiStaXpt_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Canoutsel0_SPEC;
impl crate::sealed::RegSpec for Canoutsel0_SPEC {
    type DataType = u32;
}
#[doc = "CAN0 CAN1 Output Select Register\n resetvalue={Application Reset:0x0}"]
pub type Canoutsel0 = crate::RegValueT<Canoutsel0_SPEC>;

impl Canoutsel0 {
    #[doc = "Output Selection for GTM to CAN connection 7. This bit field defines which TOM ATOM channel output is used as        CAN0 CAN1 node trigger x. Triggers        0 and 1 are also sent to the TTCAN. The decoding is defined in the specific appendix."]
    #[inline(always)]
    pub fn sel0(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Canoutsel0_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xf,1,0,u8, Canoutsel0_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Output Selection for GTM to CAN connection 7. This bit field defines which TOM ATOM channel output is used as        CAN0 CAN1 node trigger x. Triggers        0 and 1 are also sent to the TTCAN. The decoding is defined in the specific appendix."]
    #[inline(always)]
    pub fn sel1(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, Canoutsel0_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0xf,1,0,u8, Canoutsel0_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Output Selection for GTM to CAN connection 7. This bit field defines which TOM ATOM channel output is used as        CAN0 CAN1 node trigger x. Triggers        0 and 1 are also sent to the TTCAN. The decoding is defined in the specific appendix."]
    #[inline(always)]
    pub fn sel2(
        self,
    ) -> crate::common::RegisterField<8, 0xf, 1, 0, u8, Canoutsel0_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xf,1,0,u8, Canoutsel0_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Output Selection for GTM to CAN connection 7. This bit field defines which TOM ATOM channel output is used as        CAN0 CAN1 node trigger x. Triggers        0 and 1 are also sent to the TTCAN. The decoding is defined in the specific appendix."]
    #[inline(always)]
    pub fn sel3(
        self,
    ) -> crate::common::RegisterField<12, 0xf, 1, 0, u8, Canoutsel0_SPEC, crate::common::RW> {
        crate::common::RegisterField::<12,0xf,1,0,u8, Canoutsel0_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Output Selection for GTM to CAN connection 7. This bit field defines which TOM ATOM channel output is used as        CAN0 CAN1 node trigger x. Triggers        0 and 1 are also sent to the TTCAN. The decoding is defined in the specific appendix."]
    #[inline(always)]
    pub fn sel4(
        self,
    ) -> crate::common::RegisterField<16, 0xf, 1, 0, u8, Canoutsel0_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xf,1,0,u8, Canoutsel0_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Output Selection for GTM to CAN connection 7. This bit field defines which TOM ATOM channel output is used as        CAN0 CAN1 node trigger x. Triggers        0 and 1 are also sent to the TTCAN. The decoding is defined in the specific appendix."]
    #[inline(always)]
    pub fn sel5(
        self,
    ) -> crate::common::RegisterField<20, 0xf, 1, 0, u8, Canoutsel0_SPEC, crate::common::RW> {
        crate::common::RegisterField::<20,0xf,1,0,u8, Canoutsel0_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Output Selection for GTM to CAN connection 7. This bit field defines which TOM ATOM channel output is used as        CAN0 CAN1 node trigger x. Triggers        0 and 1 are also sent to the TTCAN. The decoding is defined in the specific appendix."]
    #[inline(always)]
    pub fn sel6(
        self,
    ) -> crate::common::RegisterField<24, 0xf, 1, 0, u8, Canoutsel0_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0xf,1,0,u8, Canoutsel0_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Output Selection for GTM to CAN connection 7. This bit field defines which TOM ATOM channel output is used as        CAN0 CAN1 node trigger x. Triggers        0 and 1 are also sent to the TTCAN. The decoding is defined in the specific appendix."]
    #[inline(always)]
    pub fn sel7(
        self,
    ) -> crate::common::RegisterField<28, 0xf, 1, 0, u8, Canoutsel0_SPEC, crate::common::RW> {
        crate::common::RegisterField::<28,0xf,1,0,u8, Canoutsel0_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl core::default::Default for Canoutsel0 {
    #[inline(always)]
    fn default() -> Canoutsel0 {
        <crate::RegValueT<Canoutsel0_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Canoutsel1_SPEC;
impl crate::sealed::RegSpec for Canoutsel1_SPEC {
    type DataType = u32;
}
#[doc = "CAN2 Output Select Register\n resetvalue={Application Reset:0x0}"]
pub type Canoutsel1 = crate::RegValueT<Canoutsel1_SPEC>;

impl Canoutsel1 {
    #[doc = "Output Selection for GTM to CAN connection 3. This bit field defines which TOM ATOM channel output is used as CAN2        node trigger x. The        decoding is defined in the specific appendix."]
    #[inline(always)]
    pub fn sel0(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Canoutsel1_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xf,1,0,u8, Canoutsel1_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Output Selection for GTM to CAN connection 3. This bit field defines which TOM ATOM channel output is used as CAN2        node trigger x. The        decoding is defined in the specific appendix."]
    #[inline(always)]
    pub fn sel1(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, Canoutsel1_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0xf,1,0,u8, Canoutsel1_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Output Selection for GTM to CAN connection 3. This bit field defines which TOM ATOM channel output is used as CAN2        node trigger x. The        decoding is defined in the specific appendix."]
    #[inline(always)]
    pub fn sel2(
        self,
    ) -> crate::common::RegisterField<8, 0xf, 1, 0, u8, Canoutsel1_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xf,1,0,u8, Canoutsel1_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Output Selection for GTM to CAN connection 3. This bit field defines which TOM ATOM channel output is used as CAN2        node trigger x. The        decoding is defined in the specific appendix."]
    #[inline(always)]
    pub fn sel3(
        self,
    ) -> crate::common::RegisterField<12, 0xf, 1, 0, u8, Canoutsel1_SPEC, crate::common::RW> {
        crate::common::RegisterField::<12,0xf,1,0,u8, Canoutsel1_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl core::default::Default for Canoutsel1 {
    #[inline(always)]
    fn default() -> Canoutsel1 {
        <crate::RegValueT<Canoutsel1_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Cfg_SPEC;
impl crate::sealed::RegSpec for Cfg_SPEC {
    type DataType = u32;
}
#[doc = "GTM Configuration Register\n resetvalue={Application Reset:0x0}"]
pub type Cfg = crate::RegValueT<Cfg_SPEC>;

impl Cfg {
    #[doc = "GTM TIM i  AUX IN input source selection. See CROSSREFERENCE for details."]
    #[inline(always)]
    pub fn src_in_mux(
        self,
    ) -> crate::common::RegisterFieldBool<0, 1, 0, Cfg_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<0, 1, 0, Cfg_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl core::default::Default for Cfg {
    #[inline(always)]
    fn default() -> Cfg {
        <crate::RegValueT<Cfg_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Clc_SPEC;
impl crate::sealed::RegSpec for Clc_SPEC {
    type DataType = u32;
}
#[doc = "Clock Control Register\n resetvalue={Application Reset:0x3}"]
pub type Clc = crate::RegValueT<Clc_SPEC>;

impl Clc {
    #[doc = "Module Disable Request Bit. Used for enable disable control of the GTM module."]
    #[inline(always)]
    pub fn disr(self) -> crate::common::RegisterFieldBool<0, 1, 0, Clc_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<0, 1, 0, Clc_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Module Disable Status Bit. This bit indicates the current status of the GTM module."]
    #[inline(always)]
    pub fn diss(self) -> crate::common::RegisterFieldBool<1, 1, 0, Clc_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<1, 1, 0, Clc_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
    #[doc = "Sleep Mode Enable Control. Used for module s sleep mode control."]
    #[inline(always)]
    pub fn edis(self) -> crate::common::RegisterFieldBool<3, 1, 0, Clc_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<3, 1, 0, Clc_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl core::default::Default for Clc {
    #[inline(always)]
    fn default() -> Clc {
        <crate::RegValueT<Clc_SPEC> as RegisterValue<_>>::new(3)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ClsClkCfg_SPEC;
impl crate::sealed::RegSpec for ClsClkCfg_SPEC {
    type DataType = u32;
}
#[doc = "GTM Cluster Clock Configuration\n resetvalue={Application Reset:0x0AAAAAA,Application Reset:0x2AAAA,Application Reset:0x0AAA,Application Reset:0x0A,Application Reset:0x0AA}"]
pub type ClsClkCfg = crate::RegValueT<ClsClkCfg_SPEC>;

impl ClsClkCfg {
    #[doc = "Cluster 11 Clock Divider. This bit is only writable if bit field RF PROT of        register GTM CTRL is cleared."]
    #[inline(always)]
    pub fn cls0_clk_div(
        self,
    ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, ClsClkCfg_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x3,1,0,u8, ClsClkCfg_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Cluster 11 Clock Divider. This bit is only writable if bit field RF PROT of        register GTM CTRL is cleared."]
    #[inline(always)]
    pub fn cls1_clk_div(
        self,
    ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, ClsClkCfg_SPEC, crate::common::RW> {
        crate::common::RegisterField::<2,0x3,1,0,u8, ClsClkCfg_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Cluster 11 Clock Divider. This bit is only writable if bit field RF PROT of        register GTM CTRL is cleared."]
    #[inline(always)]
    pub fn cls2_clk_div(
        self,
    ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, ClsClkCfg_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0x3,1,0,u8, ClsClkCfg_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Cluster 11 Clock Divider. This bit is only writable if bit field RF PROT of        register GTM CTRL is cleared."]
    #[inline(always)]
    pub fn cls3_clk_div(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, ClsClkCfg_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x3,1,0,u8, ClsClkCfg_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Cluster 11 Clock Divider. This bit is only writable if bit field RF PROT of        register GTM CTRL is cleared."]
    #[inline(always)]
    pub fn cls4_clk_div(
        self,
    ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, ClsClkCfg_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0x3,1,0,u8, ClsClkCfg_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Cluster 11 Clock Divider. This bit is only writable if bit field RF PROT of        register GTM CTRL is cleared."]
    #[inline(always)]
    pub fn cls5_clk_div(
        self,
    ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, ClsClkCfg_SPEC, crate::common::RW> {
        crate::common::RegisterField::<10,0x3,1,0,u8, ClsClkCfg_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl core::default::Default for ClsClkCfg {
    #[inline(always)]
    fn default() -> ClsClkCfg {
        <crate::RegValueT<ClsClkCfg_SPEC> as RegisterValue<_>>::new(10)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ctrl_SPEC;
impl crate::sealed::RegSpec for Ctrl_SPEC {
    type DataType = u32;
}
#[doc = "GTM Global Control Register\n resetvalue={Application Reset:0x1}"]
pub type Ctrl = crate::RegValueT<Ctrl_SPEC>;

impl Ctrl {
    #[doc = "RST and FORCINT protection"]
    #[inline(always)]
    pub fn rf_prot(
        self,
    ) -> crate::common::RegisterFieldBool<0, 1, 0, Ctrl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<0, 1, 0, Ctrl_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "AEI timeout mode"]
    #[inline(always)]
    pub fn to_mode(
        self,
    ) -> crate::common::RegisterFieldBool<1, 1, 0, Ctrl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<1, 1, 0, Ctrl_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "AEI timeout value. These bits define the number of cycles after which a timeout event        occurs. When TO VAL equals zero  0  the AEI timeout functionality is        disabled."]
    #[inline(always)]
    pub fn to_val(
        self,
    ) -> crate::common::RegisterField<4, 0x1f, 1, 0, u8, Ctrl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0x1f,1,0,u8, Ctrl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "AEIM cluster number. These bits show the number of the AEI master port cluster which throws        the interrupts AEIM USP ADDR         AEIM IM ADDR and AEIM USP BE depending on the AEI master port access status.Note  If one        of the corresponding irq notify bits  6 4  is set  this bit field will        be frozen until the interrupt notify bits  6 4  are cleared."]
    #[inline(always)]
    pub fn aeim_cluster(
        self,
    ) -> crate::common::RegisterField<12, 0xf, 1, 0, u8, Ctrl_SPEC, crate::common::R> {
        crate::common::RegisterField::<12,0xf,1,0,u8, Ctrl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl core::default::Default for Ctrl {
    #[inline(always)]
    fn default() -> Ctrl {
        <crate::RegValueT<Ctrl_SPEC> as RegisterValue<_>>::new(1)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct DataiNn_SPEC;
impl crate::sealed::RegSpec for DataiNn_SPEC {
    type DataType = u32;
}
#[doc = "Data Input 0 Register\n resetvalue={Application Reset:0x0}"]
pub type DataiNn = crate::RegValueT<DataiNn_SPEC>;

impl DataiNn {
    #[doc = "Data. This bit field holds the data for the RAM0 replacement."]
    #[inline(always)]
    pub fn data(
        self,
    ) -> crate::common::RegisterField<0, 0xffffffff, 1, 0, u32, DataiNn_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xffffffff,1,0,u32, DataiNn_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl core::default::Default for DataiNn {
    #[inline(always)]
    fn default() -> DataiNn {
        <crate::RegValueT<DataiNn_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Dsadcinsel_SPEC;
impl crate::sealed::RegSpec for Dsadcinsel_SPEC {
    type DataType = u32;
}
#[doc = "DSADC Input Select i Register\n resetvalue={Application Reset:0x0}"]
pub type Dsadcinsel = crate::RegValueT<Dsadcinsel_SPEC>;

impl Dsadcinsel {
    #[doc = "In Selection for DSADCn GTM connection. This bit field defines which DSADCn output is connected if the channel        input mux is configured as DSADC input for TIMi channel j."]
    #[inline(always)]
    pub fn insel0(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Dsadcinsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xf,1,0,u8, Dsadcinsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "In Selection for DSADCn GTM connection. This bit field defines which DSADCn output is connected if the channel        input mux is configured as DSADC input for TIMi channel j."]
    #[inline(always)]
    pub fn insel1(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, Dsadcinsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0xf,1,0,u8, Dsadcinsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "In Selection for DSADCn GTM connection. This bit field defines which DSADCn output is connected if the channel        input mux is configured as DSADC input for TIMi channel j."]
    #[inline(always)]
    pub fn insel2(
        self,
    ) -> crate::common::RegisterField<8, 0xf, 1, 0, u8, Dsadcinsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xf,1,0,u8, Dsadcinsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "In Selection for DSADCn GTM connection. This bit field defines which DSADCn output is connected if the channel        input mux is configured as DSADC input for TIMi channel j."]
    #[inline(always)]
    pub fn insel3(
        self,
    ) -> crate::common::RegisterField<12, 0xf, 1, 0, u8, Dsadcinsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<12,0xf,1,0,u8, Dsadcinsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "In Selection for DSADCn GTM connection. This bit field defines which DSADCn output is connected if the channel        input mux is configured as DSADC input for TIMi channel j."]
    #[inline(always)]
    pub fn insel4(
        self,
    ) -> crate::common::RegisterField<16, 0xf, 1, 0, u8, Dsadcinsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xf,1,0,u8, Dsadcinsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "In Selection for DSADCn GTM connection. This bit field defines which DSADCn output is connected if the channel        input mux is configured as DSADC input for TIMi channel j."]
    #[inline(always)]
    pub fn insel5(
        self,
    ) -> crate::common::RegisterField<20, 0xf, 1, 0, u8, Dsadcinsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<20,0xf,1,0,u8, Dsadcinsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "In Selection for DSADCn GTM connection. This bit field defines which DSADCn output is connected if the channel        input mux is configured as DSADC input for TIMi channel j."]
    #[inline(always)]
    pub fn insel6(
        self,
    ) -> crate::common::RegisterField<24, 0xf, 1, 0, u8, Dsadcinsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0xf,1,0,u8, Dsadcinsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "In Selection for DSADCn GTM connection. This bit field defines which DSADCn output is connected if the channel        input mux is configured as DSADC input for TIMi channel j."]
    #[inline(always)]
    pub fn insel7(
        self,
    ) -> crate::common::RegisterField<28, 0xf, 1, 0, u8, Dsadcinsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<28,0xf,1,0,u8, Dsadcinsel_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl core::default::Default for Dsadcinsel {
    #[inline(always)]
    fn default() -> Dsadcinsel {
        <crate::RegValueT<Dsadcinsel_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Dtmauxinsel_SPEC;
impl crate::sealed::RegSpec for Dtmauxinsel_SPEC {
    type DataType = u32;
}
#[doc = "DTM AUX Input Selection Register\n resetvalue={Application Reset:0x0}"]
pub type Dtmauxinsel = crate::RegValueT<Dtmauxinsel_SPEC>;

impl Dtmauxinsel {
    #[doc = "CDTM4 DTM4 AUX Input Selection  ATOMx CH0...3 . This bit field defines which GPIO DSADC EVADC signal is connected to the        CDTMx DTM4 AUX input."]
    #[inline(always)]
    pub fn asel0(
        self,
    ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Dtmauxinsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x3,1,0,u8, Dtmauxinsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "CDTM4 DTM4 AUX Input Selection  ATOMx CH0...3 . This bit field defines which GPIO DSADC EVADC signal is connected to the        CDTMx DTM4 AUX input."]
    #[inline(always)]
    pub fn asel1(
        self,
    ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, Dtmauxinsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<2,0x3,1,0,u8, Dtmauxinsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "CDTM4 DTM4 AUX Input Selection  ATOMx CH0...3 . This bit field defines which GPIO DSADC EVADC signal is connected to the        CDTMx DTM4 AUX input."]
    #[inline(always)]
    pub fn asel2(
        self,
    ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Dtmauxinsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0x3,1,0,u8, Dtmauxinsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "CDTM4 DTM4 AUX Input Selection  ATOMx CH0...3 . This bit field defines which GPIO DSADC EVADC signal is connected to the        CDTMx DTM4 AUX input."]
    #[inline(always)]
    pub fn asel3(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Dtmauxinsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x3,1,0,u8, Dtmauxinsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "CDTM4 DTM4 AUX Input Selection  ATOMx CH0...3 . This bit field defines which GPIO DSADC EVADC signal is connected to the        CDTMx DTM4 AUX input."]
    #[inline(always)]
    pub fn asel4(
        self,
    ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Dtmauxinsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0x3,1,0,u8, Dtmauxinsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "CDTM2 DTM0 AUX Input Selection  TOMx CH0...3 . This bit field defines which GPIO DSADC EVADC signal is connected to the        CDTMx DTM0 AUX input."]
    #[inline(always)]
    pub fn tsel0(
        self,
    ) -> crate::common::RegisterField<16, 0x3, 1, 0, u8, Dtmauxinsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0x3,1,0,u8, Dtmauxinsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "CDTM2 DTM0 AUX Input Selection  TOMx CH0...3 . This bit field defines which GPIO DSADC EVADC signal is connected to the        CDTMx DTM0 AUX input."]
    #[inline(always)]
    pub fn tsel1(
        self,
    ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Dtmauxinsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<18,0x3,1,0,u8, Dtmauxinsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "CDTM2 DTM0 AUX Input Selection  TOMx CH0...3 . This bit field defines which GPIO DSADC EVADC signal is connected to the        CDTMx DTM0 AUX input."]
    #[inline(always)]
    pub fn tsel2(
        self,
    ) -> crate::common::RegisterField<20, 0x3, 1, 0, u8, Dtmauxinsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<20,0x3,1,0,u8, Dtmauxinsel_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl core::default::Default for Dtmauxinsel {
    #[inline(always)]
    fn default() -> Dtmauxinsel {
        <crate::RegValueT<Dtmauxinsel_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Dxincon_SPEC;
impl crate::sealed::RegSpec for Dxincon_SPEC {
    type DataType = u32;
}
#[doc = "Data Exchange Input Control Register\n resetvalue={Application Reset:0x0}"]
pub type Dxincon = crate::RegValueT<Dxincon_SPEC>;

impl Dxincon {
    #[doc = "Input 04 Control. This bit defines whether register DATAINx is read from the MCS instead        of RAM0 or not."]
    #[inline(always)]
    pub fn in0(self) -> crate::common::RegisterFieldBool<0, 1, 0, Dxincon_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<0, 1, 0, Dxincon_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Input 04 Control. This bit defines whether register DATAINx is read from the MCS instead        of RAM0 or not."]
    #[inline(always)]
    pub fn in1(self) -> crate::common::RegisterFieldBool<1, 1, 0, Dxincon_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<1, 1, 0, Dxincon_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Input 04 Control. This bit defines whether register DATAINx is read from the MCS instead        of RAM0 or not."]
    #[inline(always)]
    pub fn in2(self) -> crate::common::RegisterFieldBool<2, 1, 0, Dxincon_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<2, 1, 0, Dxincon_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Input 04 Control. This bit defines whether register DATAINx is read from the MCS instead        of RAM0 or not."]
    #[inline(always)]
    pub fn in3(self) -> crate::common::RegisterFieldBool<3, 1, 0, Dxincon_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<3, 1, 0, Dxincon_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Input 04 Control. This bit defines whether register DATAINx is read from the MCS instead        of RAM0 or not."]
    #[inline(always)]
    pub fn in4(self) -> crate::common::RegisterFieldBool<4, 1, 0, Dxincon_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<4, 1, 0, Dxincon_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Data Source Select 04 Control. This bit defines whether the 12 LSB of the read operation directed to        register DATAIN0x deliver the register content or the state of 12 inputs."]
    #[inline(always)]
    pub fn dss0(
        self,
    ) -> crate::common::RegisterFieldBool<16, 1, 0, Dxincon_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<16, 1, 0, Dxincon_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Data Source Select 04 Control. This bit defines whether the 12 LSB of the read operation directed to        register DATAIN0x deliver the register content or the state of 12 inputs."]
    #[inline(always)]
    pub fn dss1(
        self,
    ) -> crate::common::RegisterFieldBool<17, 1, 0, Dxincon_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<17, 1, 0, Dxincon_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Data Source Select 04 Control. This bit defines whether the 12 LSB of the read operation directed to        register DATAIN0x deliver the register content or the state of 12 inputs."]
    #[inline(always)]
    pub fn dss2(
        self,
    ) -> crate::common::RegisterFieldBool<18, 1, 0, Dxincon_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<18, 1, 0, Dxincon_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Data Source Select 04 Control. This bit defines whether the 12 LSB of the read operation directed to        register DATAIN0x deliver the register content or the state of 12 inputs."]
    #[inline(always)]
    pub fn dss3(
        self,
    ) -> crate::common::RegisterFieldBool<19, 1, 0, Dxincon_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<19, 1, 0, Dxincon_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Data Source Select 04 Control. This bit defines whether the 12 LSB of the read operation directed to        register DATAIN0x deliver the register content or the state of 12 inputs."]
    #[inline(always)]
    pub fn dss4(
        self,
    ) -> crate::common::RegisterFieldBool<20, 1, 0, Dxincon_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<20, 1, 0, Dxincon_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl core::default::Default for Dxincon {
    #[inline(always)]
    fn default() -> Dxincon {
        <crate::RegValueT<Dxincon_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Dxoutcon_SPEC;
impl crate::sealed::RegSpec for Dxoutcon_SPEC {
    type DataType = u32;
}
#[doc = "Data Exchange Output Control Register\n resetvalue={Application Reset:0x0}"]
pub type Dxoutcon = crate::RegValueT<Dxoutcon_SPEC>;

impl Dxoutcon {
    #[doc = "Output 04 Control. This bit defines whether register TRIGOUTx INTOUTx is accessible from        the MCS instead of RAM0 or not."]
    #[inline(always)]
    pub fn out0(
        self,
    ) -> crate::common::RegisterFieldBool<0, 1, 0, Dxoutcon_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<0, 1, 0, Dxoutcon_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Output 04 Control. This bit defines whether register TRIGOUTx INTOUTx is accessible from        the MCS instead of RAM0 or not."]
    #[inline(always)]
    pub fn out1(
        self,
    ) -> crate::common::RegisterFieldBool<1, 1, 0, Dxoutcon_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<1, 1, 0, Dxoutcon_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Output 04 Control. This bit defines whether register TRIGOUTx INTOUTx is accessible from        the MCS instead of RAM0 or not."]
    #[inline(always)]
    pub fn out2(
        self,
    ) -> crate::common::RegisterFieldBool<2, 1, 0, Dxoutcon_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<2, 1, 0, Dxoutcon_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Output 04 Control. This bit defines whether register TRIGOUTx INTOUTx is accessible from        the MCS instead of RAM0 or not."]
    #[inline(always)]
    pub fn out3(
        self,
    ) -> crate::common::RegisterFieldBool<3, 1, 0, Dxoutcon_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<3, 1, 0, Dxoutcon_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Output 04 Control. This bit defines whether register TRIGOUTx INTOUTx is accessible from        the MCS instead of RAM0 or not."]
    #[inline(always)]
    pub fn out4(
        self,
    ) -> crate::common::RegisterFieldBool<4, 1, 0, Dxoutcon_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<4, 1, 0, Dxoutcon_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl core::default::Default for Dxoutcon {
    #[inline(always)]
    fn default() -> Dxoutcon {
        <crate::RegValueT<Dxoutcon_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct EirqEn_SPEC;
impl crate::sealed::RegSpec for EirqEn_SPEC {
    type DataType = u32;
}
#[doc = "GTM Error Interrupt Enable Register\n resetvalue={Application Reset:0x180}"]
pub type EirqEn = crate::RegValueT<EirqEn_SPEC>;

impl EirqEn {
    #[doc = "AEI TO XPT EIRQ error interrupt enable"]
    #[inline(always)]
    pub fn aei_to_xpt_eirq_en(
        self,
    ) -> crate::common::RegisterFieldBool<0, 1, 0, EirqEn_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<0, 1, 0, EirqEn_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "AEI USP ADDR EIRQ error interrupt enable"]
    #[inline(always)]
    pub fn aei_usp_addr_eirq_en(
        self,
    ) -> crate::common::RegisterFieldBool<1, 1, 0, EirqEn_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<1, 1, 0, EirqEn_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "AEI IM ADDR EIRQ error interrupt enable"]
    #[inline(always)]
    pub fn aei_im_addr_eirq_en(
        self,
    ) -> crate::common::RegisterFieldBool<2, 1, 0, EirqEn_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<2, 1, 0, EirqEn_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "AEI USP BE EIRQ error interrupt enable"]
    #[inline(always)]
    pub fn aei_usp_be_eirq_en(
        self,
    ) -> crate::common::RegisterFieldBool<3, 1, 0, EirqEn_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<3, 1, 0, EirqEn_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "AEIM USP ADDR EIRQ error interrupt enable"]
    #[inline(always)]
    pub fn aeim_usp_addr_eirq_en(
        self,
    ) -> crate::common::RegisterFieldBool<4, 1, 0, EirqEn_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<4, 1, 0, EirqEn_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "AEIM IM ADDR EIRQ error interrupt enable"]
    #[inline(always)]
    pub fn aeim_im_addr_eirq_en(
        self,
    ) -> crate::common::RegisterFieldBool<5, 1, 0, EirqEn_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<5, 1, 0, EirqEn_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "AEIM USP BE EIRQ error interrupt enable"]
    #[inline(always)]
    pub fn aeim_usp_be_eirq_en(
        self,
    ) -> crate::common::RegisterFieldBool<6, 1, 0, EirqEn_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<6, 1, 0, EirqEn_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "CLK EN ERR EIRQ interrupt enable. Read as zero in case of INT CLK EN GEN   0b1."]
    #[inline(always)]
    pub fn clk_en_err_eirq_en(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, EirqEn_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7, 1, 0, EirqEn_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "CLK PER ERR EIRQ interrupt enable. Read as zero in case of INT CLK EN GEN   0b1. Read as zero  shall be written as zero."]
    #[inline(always)]
    pub fn clk_per_err_eirq_en(
        self,
    ) -> crate::common::RegisterFieldBool<8, 1, 0, EirqEn_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<8, 1, 0, EirqEn_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl core::default::Default for EirqEn {
    #[inline(always)]
    fn default() -> EirqEn {
        <crate::RegValueT<EirqEn_SPEC> as RegisterValue<_>>::new(384)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ExtCapEnI_SPEC;
impl crate::sealed::RegSpec for ExtCapEnI_SPEC {
    type DataType = u32;
}
#[doc = "GTM External Capture Trigger Enable 0\n resetvalue={Application Reset:0x0}"]
pub type ExtCapEnI = crate::RegValueT<ExtCapEnI_SPEC>;

impl ExtCapEnI {
    #[doc = "TIM i  EXT CAPTURE signal forwarding enable. The trigger event forwarding is possible from TIM i  and TIM i 1  to        MCS i ."]
    #[inline(always)]
    pub fn tim_i_ext_cap_en(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, ExtCapEnI_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, ExtCapEnI_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "TIM i 1  EXT CAPTURE signal forwarding enable"]
    #[inline(always)]
    pub fn tim_ip1_ext_cap_en(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, ExtCapEnI_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8, ExtCapEnI_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl core::default::Default for ExtCapEnI {
    #[inline(always)]
    fn default() -> ExtCapEnI {
        <crate::RegValueT<ExtCapEnI_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HwConf_SPEC;
impl crate::sealed::RegSpec for HwConf_SPEC {
    type DataType = u32;
}
#[doc = "GTM Hardware Configuration Register\n resetvalue={Application Reset:0x084F022E}"]
pub type HwConf = crate::RegValueT<HwConf_SPEC>;

impl HwConf {
    #[doc = "Global Reset Enable"]
    #[inline(always)]
    pub fn grsten(
        self,
    ) -> crate::common::RegisterFieldBool<0, 1, 0, HwConf_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<0, 1, 0, HwConf_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
    #[doc = "Bridge mode after reset"]
    #[inline(always)]
    pub fn bridge_mode_rst(
        self,
    ) -> crate::common::RegisterFieldBool<1, 1, 0, HwConf_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<1, 1, 0, HwConf_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
    #[doc = "Additional pipelined stage in synchronous bridge mode"]
    #[inline(always)]
    pub fn sync_input_reg(
        self,
    ) -> crate::common::RegisterFieldBool<2, 1, 0, HwConf_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<2, 1, 0, HwConf_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
    #[doc = "Clocks per ARU transfer. This value defines also the availability of configuration bits in        register GTM CLS CLK CFG.if CFG CLOCK RATE 0  only the values 0b00 and        0b01 are valid for bit fields CLS x  CLK DIV.if CFG CLOCK RATE 1  only        the values 0b00  0b01 and 0b10 are valid for bit fields CLS x  CLK DIV."]
    #[inline(always)]
    pub fn cfg_clock_rate(
        self,
    ) -> crate::common::RegisterFieldBool<3, 1, 0, HwConf_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<3, 1, 0, HwConf_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
    #[doc = "ATOM OUT reset level. This value represents the ATOM output level after reset. The inverse        value of this bit is the reset value of bit SL in all ATOM channels."]
    #[inline(always)]
    pub fn atom_out_rst(
        self,
    ) -> crate::common::RegisterFieldBool<4, 1, 0, HwConf_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<4, 1, 0, HwConf_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
    #[doc = "ATOM trigger chain length without synchronization register. It defines after which ATOM instance count a synchronization register is        introduced into trigger chain  after ATOM TRIG  lt i gt  output if instance i and ATOM TRIG  lt i 1 gt  input of instance i 1 . Valid values are 1 to 7. 1 means that after each        instance a synchronization register is placed."]
    #[inline(always)]
    pub fn atom_trig_chain(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, HwConf_SPEC, crate::common::R> {
        crate::common::RegisterField::<5,0x7,1,0,u8, HwConf_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "TOM OUT reset level. This value represents the TOM output level after reset. The inverse        value of this bit is the reset value of bit SL in all TOM channels."]
    #[inline(always)]
    pub fn tom_out_rst(
        self,
    ) -> crate::common::RegisterFieldBool<8, 1, 0, HwConf_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<8, 1, 0, HwConf_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
    #[doc = "TOM trigger chain length without synchronization register. It defines after which TOM instance count a synchronization register is        introduced into trigger chain  after TOM TRIG  lt i gt  output if instance i and TOM TRIG  lt i 1 gt  input of instance i 1 . Valid values are 1 to 7. 1 means that after each        instance a synchronization register is placed."]
    #[inline(always)]
    pub fn tom_trig_chain(
        self,
    ) -> crate::common::RegisterField<9, 0x7, 1, 0, u8, HwConf_SPEC, crate::common::R> {
        crate::common::RegisterField::<9,0x7,1,0,u8, HwConf_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "RAM initialization from reset"]
    #[inline(always)]
    pub fn ram_init_rst(
        self,
    ) -> crate::common::RegisterFieldBool<12, 1, 0, HwConf_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<12, 1, 0, HwConf_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
    #[doc = "Enable RAM1 MSB for available MCS modules. The bit reflects the state of the configuration parameter ERM mentioned        in the specification of MCFG."]
    #[inline(always)]
    pub fn erm(self) -> crate::common::RegisterFieldBool<13, 1, 0, HwConf_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<13, 1, 0, HwConf_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
    #[doc = "Defines number of parallel ARU ports"]
    #[inline(always)]
    pub fn aru_connect_config(
        self,
    ) -> crate::common::RegisterFieldBool<14, 1, 0, HwConf_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<14, 1, 0, HwConf_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
    #[doc = "IRQ MODE LEVEL"]
    #[inline(always)]
    pub fn irq_mode_level(
        self,
    ) -> crate::common::RegisterFieldBool<16, 1, 0, HwConf_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<16, 1, 0, HwConf_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
    #[doc = "IRQ MODE PULSE"]
    #[inline(always)]
    pub fn irq_mode_pulse(
        self,
    ) -> crate::common::RegisterFieldBool<17, 1, 0, HwConf_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<17, 1, 0, HwConf_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
    #[doc = "IRQ MODE PULSE NOTIFY"]
    #[inline(always)]
    pub fn irq_mode_pulse_notify(
        self,
    ) -> crate::common::RegisterFieldBool<18, 1, 0, HwConf_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<18, 1, 0, HwConf_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
    #[doc = "IRQ MODE SINGLE PULSE"]
    #[inline(always)]
    pub fn irq_mode_single_pulse(
        self,
    ) -> crate::common::RegisterFieldBool<19, 1, 0, HwConf_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<19, 1, 0, HwConf_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
    #[doc = "ATOM internal trigger chain length without synchronization register. It defines after which ATOM channel count a synchronization register is        introduced into trigger chain. Valid values are 1 to 8. 4 means that in        channel 4 of the atom instances a synchronization register is placed."]
    #[inline(always)]
    pub fn atom_trig_intchain(
        self,
    ) -> crate::common::RegisterField<20, 0xf, 1, 0, u8, HwConf_SPEC, crate::common::R> {
        crate::common::RegisterField::<20,0xf,1,0,u8, HwConf_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "TOM internal trigger chain length without synchronization register. It defines after which TOM channel count a synchronization register is        introduced into trigger chain. Valid values are 1 to 16. 8 means that in        channel 8 of the tom instances a synchronization register is placed."]
    #[inline(always)]
    pub fn tom_trig_intchain(
        self,
    ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, HwConf_SPEC, crate::common::R> {
        crate::common::RegisterField::<24,0x1f,1,0,u8, HwConf_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Internal clock enable generation"]
    #[inline(always)]
    pub fn int_clk_en_gen(
        self,
    ) -> crate::common::RegisterFieldBool<29, 1, 0, HwConf_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<29, 1, 0, HwConf_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl core::default::Default for HwConf {
    #[inline(always)]
    fn default() -> HwConf {
        <crate::RegValueT<HwConf_SPEC> as RegisterValue<_>>::new(139395630)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct IntouTn_SPEC;
impl crate::sealed::RegSpec for IntouTn_SPEC {
    type DataType = u32;
}
#[doc = "Interrupt Output Register 0\n resetvalue={Application Reset:0x0}"]
pub type IntouTn = crate::RegValueT<IntouTn_SPEC>;

impl IntouTn {
    #[doc = "Interrupt Trigger Request 0. This bit field defines whether an interrupt request 0 is generated or        not.In case of read  the value 0x00000000 is returned"]
    #[inline(always)]
    pub fn int0(
        self,
    ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, IntouTn_SPEC, crate::common::W> {
        crate::common::RegisterField::<0,0x3,1,0,u8, IntouTn_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl core::default::Default for IntouTn {
    #[inline(always)]
    fn default() -> IntouTn {
        <crate::RegValueT<IntouTn_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Lcdcdcoutsel_SPEC;
impl crate::sealed::RegSpec for Lcdcdcoutsel_SPEC {
    type DataType = u32;
}
#[doc = "LCDCDC Output Select Register\n resetvalue={Application Reset:0x0}"]
pub type Lcdcdcoutsel = crate::RegValueT<Lcdcdcoutsel_SPEC>;

impl Lcdcdcoutsel {
    #[doc = "Output Selection for GTM to LCDCDC connection. This bit field defines which TOM ATOM channel output is used as LCDCDC        signal. Decoding is        defined in the specific appendix."]
    #[inline(always)]
    pub fn sel(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Lcdcdcoutsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xf,1,0,u8, Lcdcdcoutsel_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl core::default::Default for Lcdcdcoutsel {
    #[inline(always)]
    fn default() -> Lcdcdcoutsel {
        <crate::RegValueT<Lcdcdcoutsel_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct MapCtrl_SPEC;
impl crate::sealed::RegSpec for MapCtrl_SPEC {
    type DataType = u32;
}
#[doc = "MAP Control Register\n resetvalue={Application Reset:0x0}"]
pub type MapCtrl = crate::RegValueT<MapCtrl_SPEC>;

impl MapCtrl {
    #[doc = "TRIGGER signal output select"]
    #[inline(always)]
    pub fn tsel(
        self,
    ) -> crate::common::RegisterFieldBool<0, 1, 0, MapCtrl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<0, 1, 0, MapCtrl_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "STATE signal output select"]
    #[inline(always)]
    pub fn ssl(
        self,
    ) -> crate::common::RegisterField<1, 0x7, 1, 0, u8, MapCtrl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x7,1,0,u8, MapCtrl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "TIM0 IN6 input level selection"]
    #[inline(always)]
    pub fn lsel(
        self,
    ) -> crate::common::RegisterFieldBool<4, 1, 0, MapCtrl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<4, 1, 0, MapCtrl_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Enable of TSPP0 subunit"]
    #[inline(always)]
    pub fn tspp0_en(
        self,
    ) -> crate::common::RegisterFieldBool<16, 1, 0, MapCtrl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<16, 1, 0, MapCtrl_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "DIR level definition bit"]
    #[inline(always)]
    pub fn tspp0_dld(
        self,
    ) -> crate::common::RegisterFieldBool<17, 1, 0, MapCtrl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<17, 1, 0, MapCtrl_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Disable of TSPP0 TIM0 CHx 48  input line"]
    #[inline(always)]
    pub fn tspp0_i0v(
        self,
    ) -> crate::common::RegisterFieldBool<20, 1, 0, MapCtrl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<20, 1, 0, MapCtrl_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Disable of TSPP0 TIM0 CHy 48  input line"]
    #[inline(always)]
    pub fn tspp0_i1v(
        self,
    ) -> crate::common::RegisterFieldBool<21, 1, 0, MapCtrl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<21, 1, 0, MapCtrl_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Disable of TSPP0 TIM0 CHz 48  input line"]
    #[inline(always)]
    pub fn tspp0_i2v(
        self,
    ) -> crate::common::RegisterFieldBool<22, 1, 0, MapCtrl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<22, 1, 0, MapCtrl_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Enable of TSPP1 subunit"]
    #[inline(always)]
    pub fn tspp1_en(
        self,
    ) -> crate::common::RegisterFieldBool<24, 1, 0, MapCtrl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<24, 1, 0, MapCtrl_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "DIR level definition bit"]
    #[inline(always)]
    pub fn tspp1_dld(
        self,
    ) -> crate::common::RegisterFieldBool<25, 1, 0, MapCtrl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<25, 1, 0, MapCtrl_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Disable of TSPP1 TIM0 CHx 48  input line"]
    #[inline(always)]
    pub fn tspp1_i0v(
        self,
    ) -> crate::common::RegisterFieldBool<28, 1, 0, MapCtrl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<28, 1, 0, MapCtrl_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Disable of TSPP1 TIM0 CHy 48  input line"]
    #[inline(always)]
    pub fn tspp1_i1v(
        self,
    ) -> crate::common::RegisterFieldBool<29, 1, 0, MapCtrl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<29, 1, 0, MapCtrl_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Disable of TSPP1 TIM0 CHz 48  input line"]
    #[inline(always)]
    pub fn tspp1_i2v(
        self,
    ) -> crate::common::RegisterFieldBool<30, 1, 0, MapCtrl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<30, 1, 0, MapCtrl_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl core::default::Default for MapCtrl {
    #[inline(always)]
    fn default() -> MapCtrl {
        <crate::RegValueT<MapCtrl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct McfgCtrl_SPEC;
impl crate::sealed::RegSpec for McfgCtrl_SPEC {
    type DataType = u32;
}
#[doc = "MCFG Memory Layout Configuration Register\n resetvalue={Application Reset:0x0}"]
pub type McfgCtrl = crate::RegValueT<McfgCtrl_SPEC>;

impl McfgCtrl {
    #[doc = "Configure Memory pages for MCS instance MCS9"]
    #[inline(always)]
    pub fn mem0(
        self,
    ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, McfgCtrl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x3,1,0,u8, McfgCtrl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Configure Memory pages for MCS instance MCS9"]
    #[inline(always)]
    pub fn mem1(
        self,
    ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, McfgCtrl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<2,0x3,1,0,u8, McfgCtrl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Configure Memory pages for MCS instance MCS9"]
    #[inline(always)]
    pub fn mem2(
        self,
    ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, McfgCtrl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0x3,1,0,u8, McfgCtrl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Configure Memory pages for MCS instance MCS9"]
    #[inline(always)]
    pub fn mem3(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, McfgCtrl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x3,1,0,u8, McfgCtrl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Configure Memory pages for MCS instance MCS9"]
    #[inline(always)]
    pub fn mem4(
        self,
    ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, McfgCtrl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0x3,1,0,u8, McfgCtrl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl core::default::Default for McfgCtrl {
    #[inline(always)]
    fn default() -> McfgCtrl {
        <crate::RegValueT<McfgCtrl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Mcsintclr_SPEC;
impl crate::sealed::RegSpec for Mcsintclr_SPEC {
    type DataType = u32;
}
#[doc = "MCS Interrupt Clear Register\n resetvalue={Application Reset:0x0}"]
pub type Mcsintclr = crate::RegValueT<Mcsintclr_SPEC>;

impl Mcsintclr {
    #[doc = "MCSn RAM0 Interrupt 0 Status Clear Bit. This bit is always read as zero."]
    #[inline(always)]
    pub fn mcs0(
        self,
    ) -> crate::common::RegisterFieldBool<0, 1, 0, Mcsintclr_SPEC, crate::common::W> {
        crate::common::RegisterFieldBool::<0, 1, 0, Mcsintclr_SPEC, crate::common::W>::from_register(
            self, 0,
        )
    }
    #[doc = "MCSn RAM0 Interrupt 0 Status Clear Bit. This bit is always read as zero."]
    #[inline(always)]
    pub fn mcs1(
        self,
    ) -> crate::common::RegisterFieldBool<1, 1, 0, Mcsintclr_SPEC, crate::common::W> {
        crate::common::RegisterFieldBool::<1, 1, 0, Mcsintclr_SPEC, crate::common::W>::from_register(
            self, 0,
        )
    }
    #[doc = "MCSn RAM0 Interrupt 0 Status Clear Bit. This bit is always read as zero."]
    #[inline(always)]
    pub fn mcs2(
        self,
    ) -> crate::common::RegisterFieldBool<2, 1, 0, Mcsintclr_SPEC, crate::common::W> {
        crate::common::RegisterFieldBool::<2, 1, 0, Mcsintclr_SPEC, crate::common::W>::from_register(
            self, 0,
        )
    }
    #[doc = "MCSn RAM0 Interrupt 0 Status Clear Bit. This bit is always read as zero."]
    #[inline(always)]
    pub fn mcs3(
        self,
    ) -> crate::common::RegisterFieldBool<3, 1, 0, Mcsintclr_SPEC, crate::common::W> {
        crate::common::RegisterFieldBool::<3, 1, 0, Mcsintclr_SPEC, crate::common::W>::from_register(
            self, 0,
        )
    }
    #[doc = "MCSn RAM0 Interrupt 0 Status Clear Bit. This bit is always read as zero."]
    #[inline(always)]
    pub fn mcs4(
        self,
    ) -> crate::common::RegisterFieldBool<4, 1, 0, Mcsintclr_SPEC, crate::common::W> {
        crate::common::RegisterFieldBool::<4, 1, 0, Mcsintclr_SPEC, crate::common::W>::from_register(
            self, 0,
        )
    }
}
impl core::default::Default for Mcsintclr {
    #[inline(always)]
    fn default() -> Mcsintclr {
        <crate::RegValueT<Mcsintclr_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Mcsintstat_SPEC;
impl crate::sealed::RegSpec for Mcsintstat_SPEC {
    type DataType = u32;
}
#[doc = "MCS Interrupt Status Register\n resetvalue={Application Reset:0x0}"]
pub type Mcsintstat = crate::RegValueT<Mcsintstat_SPEC>;

impl Mcsintstat {
    #[doc = "MCS4 RAM0 Interrupt 0 Status Flag. The requested interrupt is SRC GTMMCSWn0.  This bit is cleared when       bit MCSINTCLR.MCSn is set."]
    #[inline(always)]
    pub fn mcs00(
        self,
    ) -> crate::common::RegisterFieldBool<0, 1, 0, Mcsintstat_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<0,1,0,Mcsintstat_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "MCS4 RAM0 Interrupt 0 Status Flag. The requested interrupt is SRC GTMMCSWn0.  This bit is cleared when       bit MCSINTCLR.MCSn is set."]
    #[inline(always)]
    pub fn mcs10(
        self,
    ) -> crate::common::RegisterFieldBool<1, 1, 0, Mcsintstat_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<1,1,0,Mcsintstat_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "MCS4 RAM0 Interrupt 0 Status Flag. The requested interrupt is SRC GTMMCSWn0.  This bit is cleared when       bit MCSINTCLR.MCSn is set."]
    #[inline(always)]
    pub fn mcs20(
        self,
    ) -> crate::common::RegisterFieldBool<2, 1, 0, Mcsintstat_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<2,1,0,Mcsintstat_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "MCS4 RAM0 Interrupt 0 Status Flag. The requested interrupt is SRC GTMMCSWn0.  This bit is cleared when       bit MCSINTCLR.MCSn is set."]
    #[inline(always)]
    pub fn mcs30(
        self,
    ) -> crate::common::RegisterFieldBool<3, 1, 0, Mcsintstat_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<3,1,0,Mcsintstat_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "MCS4 RAM0 Interrupt 0 Status Flag. The requested interrupt is SRC GTMMCSWn0.  This bit is cleared when       bit MCSINTCLR.MCSn is set."]
    #[inline(always)]
    pub fn mcs40(
        self,
    ) -> crate::common::RegisterFieldBool<4, 1, 0, Mcsintstat_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<4,1,0,Mcsintstat_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl core::default::Default for Mcsintstat {
    #[inline(always)]
    fn default() -> Mcsintstat {
        <crate::RegValueT<Mcsintstat_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Mcstrigoutsel_SPEC;
impl crate::sealed::RegSpec for Mcstrigoutsel_SPEC {
    type DataType = u32;
}
#[doc = "Trigger Output Select Register\n resetvalue={Application Reset:0x0}"]
pub type Mcstrigoutsel = crate::RegValueT<Mcstrigoutsel_SPEC>;

impl Mcstrigoutsel {
    #[doc = "Selects which MCS triggers go to FC7BFDAT SEL"]
    #[inline(always)]
    pub fn sel0(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Mcstrigoutsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xf,1,0,u8, Mcstrigoutsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Selects which MCS triggers go to FC7BFDAT SEL"]
    #[inline(always)]
    pub fn sel1(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, Mcstrigoutsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0xf,1,0,u8, Mcstrigoutsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Selects which MCS triggers go to FC7BFDAT SEL"]
    #[inline(always)]
    pub fn sel2(
        self,
    ) -> crate::common::RegisterField<8, 0xf, 1, 0, u8, Mcstrigoutsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xf,1,0,u8, Mcstrigoutsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Selects which MCS triggers go to FC7BFDAT SEL"]
    #[inline(always)]
    pub fn sel3(
        self,
    ) -> crate::common::RegisterField<12, 0xf, 1, 0, u8, Mcstrigoutsel_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<12,0xf,1,0,u8, Mcstrigoutsel_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl core::default::Default for Mcstrigoutsel {
    #[inline(always)]
    fn default() -> Mcstrigoutsel {
        <crate::RegValueT<Mcstrigoutsel_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct McsAemDis_SPEC;
impl crate::sealed::RegSpec for McsAemDis_SPEC {
    type DataType = u32;
}
#[doc = "GTM MCS Master Port Disable Register\n resetvalue={Application Reset:0x0}"]
pub type McsAemDis = crate::RegValueT<McsAemDis_SPEC>;

impl McsAemDis {
    #[doc = "Disable MCS AEIM access in cluster 0. Multicore encoding in use   DIS CLSx 1  defines the state of the signal  Any read access to a DIS CLSx bit field        will always result in a value 00 or 11 indicating current state. A        modification of the state is only performed with the values 01 and 10.        Writing the values 00 and 11 is always ignored."]
    #[inline(always)]
    pub fn dis_cls0(
        self,
    ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, McsAemDis_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x3,1,0,u8, McsAemDis_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Disable MCS AEIM access in cluster 1  see bit DIS CLS0"]
    #[inline(always)]
    pub fn dis_cls1(
        self,
    ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, McsAemDis_SPEC, crate::common::RW> {
        crate::common::RegisterField::<2,0x3,1,0,u8, McsAemDis_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Disable MCS AEIM access in cluster 2  see bit DIS CLS0"]
    #[inline(always)]
    pub fn dis_cls2(
        self,
    ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, McsAemDis_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0x3,1,0,u8, McsAemDis_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Disable MCS AEIM access in cluster 3  see bit DIS CLS0"]
    #[inline(always)]
    pub fn dis_cls3(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, McsAemDis_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x3,1,0,u8, McsAemDis_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Disable MCS AEIM access in cluster 4  see bit DIS CLS0"]
    #[inline(always)]
    pub fn dis_cls4(
        self,
    ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, McsAemDis_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0x3,1,0,u8, McsAemDis_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Disable MCS AEIM access in cluster 5  see bit DIS CLS0"]
    #[inline(always)]
    pub fn dis_cls5(
        self,
    ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, McsAemDis_SPEC, crate::common::RW> {
        crate::common::RegisterField::<10,0x3,1,0,u8, McsAemDis_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Disable MCS AEIM access in cluster 6  see bit DIS CLS0"]
    #[inline(always)]
    pub fn dis_cls6(
        self,
    ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, McsAemDis_SPEC, crate::common::RW> {
        crate::common::RegisterField::<12,0x3,1,0,u8, McsAemDis_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Disable MCS AEIM access in cluster 7  see bit DIS CLS0"]
    #[inline(always)]
    pub fn dis_cls7(
        self,
    ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, McsAemDis_SPEC, crate::common::RW> {
        crate::common::RegisterField::<14,0x3,1,0,u8, McsAemDis_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Disable MCS AEIM access in cluster 8  see bit DIS CLS0"]
    #[inline(always)]
    pub fn dis_cls8(
        self,
    ) -> crate::common::RegisterField<16, 0x3, 1, 0, u8, McsAemDis_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0x3,1,0,u8, McsAemDis_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Disable MCS AEIM access in cluster 9  see bit DIS CLS0"]
    #[inline(always)]
    pub fn dis_cls9(
        self,
    ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, McsAemDis_SPEC, crate::common::RW> {
        crate::common::RegisterField::<18,0x3,1,0,u8, McsAemDis_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Disable MCS AEIM access in cluster 10  see bit DIS CLS0"]
    #[inline(always)]
    pub fn dis_cls10(
        self,
    ) -> crate::common::RegisterField<20, 0x3, 1, 0, u8, McsAemDis_SPEC, crate::common::RW> {
        crate::common::RegisterField::<20,0x3,1,0,u8, McsAemDis_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Disable MCS AEIM access in cluster 11  see bit DIS CLS0"]
    #[inline(always)]
    pub fn dis_cls11(
        self,
    ) -> crate::common::RegisterField<22, 0x3, 1, 0, u8, McsAemDis_SPEC, crate::common::RW> {
        crate::common::RegisterField::<22,0x3,1,0,u8, McsAemDis_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl core::default::Default for McsAemDis {
    #[inline(always)]
    fn default() -> McsAemDis {
        <crate::RegValueT<McsAemDis_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Psi5Outsel_SPEC;
impl crate::sealed::RegSpec for Psi5Outsel_SPEC {
    type DataType = u32;
}
#[doc = "PSI5 Output Select Register\n resetvalue={Application Reset:0x0}"]
pub type Psi5Outsel = crate::RegValueT<Psi5Outsel_SPEC>;

impl Psi5Outsel {
    #[doc = "Output Selection for GTM to PSI55 connection. This bit field defines which TOM ATOM channel output is used as PSI5        trigger x. Decoding is        defined in the specific appendix."]
    #[inline(always)]
    pub fn sel0(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Psi5Outsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xf,1,0,u8, Psi5Outsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Output Selection for GTM to PSI55 connection. This bit field defines which TOM ATOM channel output is used as PSI5        trigger x. Decoding is        defined in the specific appendix."]
    #[inline(always)]
    pub fn sel1(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, Psi5Outsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0xf,1,0,u8, Psi5Outsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Output Selection for GTM to PSI55 connection. This bit field defines which TOM ATOM channel output is used as PSI5        trigger x. Decoding is        defined in the specific appendix."]
    #[inline(always)]
    pub fn sel2(
        self,
    ) -> crate::common::RegisterField<8, 0xf, 1, 0, u8, Psi5Outsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xf,1,0,u8, Psi5Outsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Output Selection for GTM to PSI55 connection. This bit field defines which TOM ATOM channel output is used as PSI5        trigger x. Decoding is        defined in the specific appendix."]
    #[inline(always)]
    pub fn sel3(
        self,
    ) -> crate::common::RegisterField<12, 0xf, 1, 0, u8, Psi5Outsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<12,0xf,1,0,u8, Psi5Outsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Output Selection for GTM to PSI55 connection. This bit field defines which TOM ATOM channel output is used as PSI5        trigger x. Decoding is        defined in the specific appendix."]
    #[inline(always)]
    pub fn sel4(
        self,
    ) -> crate::common::RegisterField<16, 0xf, 1, 0, u8, Psi5Outsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xf,1,0,u8, Psi5Outsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Output Selection for GTM to PSI55 connection. This bit field defines which TOM ATOM channel output is used as PSI5        trigger x. Decoding is        defined in the specific appendix."]
    #[inline(always)]
    pub fn sel5(
        self,
    ) -> crate::common::RegisterField<20, 0xf, 1, 0, u8, Psi5Outsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<20,0xf,1,0,u8, Psi5Outsel_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl core::default::Default for Psi5Outsel {
    #[inline(always)]
    fn default() -> Psi5Outsel {
        <crate::RegValueT<Psi5Outsel_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Psi5Soutsel_SPEC;
impl crate::sealed::RegSpec for Psi5Soutsel_SPEC {
    type DataType = u32;
}
#[doc = "PSI5 S Output Select Register\n resetvalue={Application Reset:0x0}"]
pub type Psi5Soutsel = crate::RegValueT<Psi5Soutsel_SPEC>;

impl Psi5Soutsel {
    #[doc = "Output Selection for GTM to PSI5 S connection. This bit field defines which TOM ATOM channel output is used as PSI5 S        trigger x. Decoding is        defined in the specific appendix."]
    #[inline(always)]
    pub fn sel0(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Psi5Soutsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xf,1,0,u8, Psi5Soutsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Output Selection for GTM to PSI5 S connection. This bit field defines which TOM ATOM channel output is used as PSI5 S        trigger x. Decoding is        defined in the specific appendix."]
    #[inline(always)]
    pub fn sel1(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, Psi5Soutsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0xf,1,0,u8, Psi5Soutsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Output Selection for GTM to PSI5 S connection. This bit field defines which TOM ATOM channel output is used as PSI5 S        trigger x. Decoding is        defined in the specific appendix."]
    #[inline(always)]
    pub fn sel2(
        self,
    ) -> crate::common::RegisterField<8, 0xf, 1, 0, u8, Psi5Soutsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xf,1,0,u8, Psi5Soutsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Output Selection for GTM to PSI5 S connection. This bit field defines which TOM ATOM channel output is used as PSI5 S        trigger x. Decoding is        defined in the specific appendix."]
    #[inline(always)]
    pub fn sel3(
        self,
    ) -> crate::common::RegisterField<12, 0xf, 1, 0, u8, Psi5Soutsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<12,0xf,1,0,u8, Psi5Soutsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Output Selection for GTM to PSI5 S connection. This bit field defines which TOM ATOM channel output is used as PSI5 S        trigger x. Decoding is        defined in the specific appendix."]
    #[inline(always)]
    pub fn sel4(
        self,
    ) -> crate::common::RegisterField<16, 0xf, 1, 0, u8, Psi5Soutsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xf,1,0,u8, Psi5Soutsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Output Selection for GTM to PSI5 S connection. This bit field defines which TOM ATOM channel output is used as PSI5 S        trigger x. Decoding is        defined in the specific appendix."]
    #[inline(always)]
    pub fn sel5(
        self,
    ) -> crate::common::RegisterField<20, 0xf, 1, 0, u8, Psi5Soutsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<20,0xf,1,0,u8, Psi5Soutsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Output Selection for GTM to PSI5 S connection. This bit field defines which TOM ATOM channel output is used as PSI5 S        trigger x. Decoding is        defined in the specific appendix."]
    #[inline(always)]
    pub fn sel6(
        self,
    ) -> crate::common::RegisterField<24, 0xf, 1, 0, u8, Psi5Soutsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0xf,1,0,u8, Psi5Soutsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Output Selection for GTM to PSI5 S connection. This bit field defines which TOM ATOM channel output is used as PSI5 S        trigger x. Decoding is        defined in the specific appendix."]
    #[inline(always)]
    pub fn sel7(
        self,
    ) -> crate::common::RegisterField<28, 0xf, 1, 0, u8, Psi5Soutsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<28,0xf,1,0,u8, Psi5Soutsel_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl core::default::Default for Psi5Soutsel {
    #[inline(always)]
    fn default() -> Psi5Soutsel {
        <crate::RegValueT<Psi5Soutsel_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Reset1_SPEC;
impl crate::sealed::RegSpec for Reset1_SPEC {
    type DataType = u32;
}
#[doc = "Kernel Reset Register 0\n resetvalue={Application Reset:0x0}"]
pub type Reset1 = crate::RegValueT<Reset1_SPEC>;

impl Reset1 {
    #[doc = "Kernel Reset. This reset bit can be used to request for a kernel reset. The kernel        reset will be executed if the reset bits of both kernel registers are        set. The RST bit will be cleared  re set to   180 0  180   by the BPI FPI after the        kernel reset was executed."]
    #[inline(always)]
    pub fn rst(self) -> crate::common::RegisterFieldBool<0, 1, 0, Reset1_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<0, 1, 0, Reset1_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Kernel Reset Status. This bit indicates whether a kernel reset was executed or not. This bit        is set by the BPI FPI after the execution of a kernel reset in the same        clock cycle both reset bits. This bit can be cleared by writing with   180 1  180  to the CLR bit in the        related RESET CLR register."]
    #[inline(always)]
    pub fn rststat(
        self,
    ) -> crate::common::RegisterFieldBool<1, 1, 0, Reset1_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<1, 1, 0, Reset1_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl core::default::Default for Reset1 {
    #[inline(always)]
    fn default() -> Reset1 {
        <crate::RegValueT<Reset1_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Reset2_SPEC;
impl crate::sealed::RegSpec for Reset2_SPEC {
    type DataType = u32;
}
#[doc = "Kernel Reset Register 1\n resetvalue={Application Reset:0x0}"]
pub type Reset2 = crate::RegValueT<Reset2_SPEC>;

impl Reset2 {
    #[doc = "Kernel Reset. This reset bit can be used to request a kernel reset. The kernel reset        will be executed if the reset bits of both kernel reset registers are        set. The RST bit will be cleared  re set to   180 0  180   after the kernel reset was        executed."]
    #[inline(always)]
    pub fn rst(self) -> crate::common::RegisterFieldBool<0, 1, 0, Reset2_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<0, 1, 0, Reset2_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl core::default::Default for Reset2 {
    #[inline(always)]
    fn default() -> Reset2 {
        <crate::RegValueT<Reset2_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ResetClr_SPEC;
impl crate::sealed::RegSpec for ResetClr_SPEC {
    type DataType = u32;
}
#[doc = "Kernel Reset Status Clear Register\n resetvalue={Application Reset:0x0}"]
pub type ResetClr = crate::RegValueT<ResetClr_SPEC>;

impl ResetClr {
    #[doc = "Kernel Reset Status Clear. Read always as 0."]
    #[inline(always)]
    pub fn clr(self) -> crate::common::RegisterFieldBool<0, 1, 0, ResetClr_SPEC, crate::common::W> {
        crate::common::RegisterFieldBool::<0, 1, 0, ResetClr_SPEC, crate::common::W>::from_register(
            self, 0,
        )
    }
}
impl core::default::Default for ResetClr {
    #[inline(always)]
    fn default() -> ResetClr {
        <crate::RegValueT<ResetClr_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rev_SPEC;
impl crate::sealed::RegSpec for Rev_SPEC {
    type DataType = u32;
}
#[doc = "GTM Version Control Register\n resetvalue={Application Reset:0x313315B9}"]
pub type Rev = crate::RegValueT<Rev_SPEC>;

impl Rev {
    #[doc = "Release step. GTM Release step"]
    #[inline(always)]
    pub fn step(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Rev_SPEC, crate::common::R> {
        crate::common::RegisterField::<0, 0xff, 1, 0, u8, Rev_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
    #[doc = "Delivery number. Define delivery number of GTM specification."]
    #[inline(always)]
    pub fn no(self) -> crate::common::RegisterField<8, 0xf, 1, 0, u8, Rev_SPEC, crate::common::R> {
        crate::common::RegisterField::<8, 0xf, 1, 0, u8, Rev_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
    #[doc = "Minor version number. Define minor version number of GTM specification."]
    #[inline(always)]
    pub fn minor(
        self,
    ) -> crate::common::RegisterField<12, 0xf, 1, 0, u8, Rev_SPEC, crate::common::R> {
        crate::common::RegisterField::<12, 0xf, 1, 0, u8, Rev_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
    #[doc = "Major version number. Define major version number of GTM specification."]
    #[inline(always)]
    pub fn major(
        self,
    ) -> crate::common::RegisterField<16, 0xf, 1, 0, u8, Rev_SPEC, crate::common::R> {
        crate::common::RegisterField::<16, 0xf, 1, 0, u8, Rev_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
    #[doc = "Device encoding digit 0. Device encoding digit 0."]
    #[inline(always)]
    pub fn dev_code0(
        self,
    ) -> crate::common::RegisterField<20, 0xf, 1, 0, u8, Rev_SPEC, crate::common::R> {
        crate::common::RegisterField::<20, 0xf, 1, 0, u8, Rev_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
    #[doc = "Device encoding digit 1. Device encoding digit 1."]
    #[inline(always)]
    pub fn dev_code1(
        self,
    ) -> crate::common::RegisterField<24, 0xf, 1, 0, u8, Rev_SPEC, crate::common::R> {
        crate::common::RegisterField::<24, 0xf, 1, 0, u8, Rev_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
    #[doc = "Device encoding digit 2. Device encoding digit 2."]
    #[inline(always)]
    pub fn dev_code2(
        self,
    ) -> crate::common::RegisterField<28, 0xf, 1, 0, u8, Rev_SPEC, crate::common::R> {
        crate::common::RegisterField::<28, 0xf, 1, 0, u8, Rev_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl core::default::Default for Rev {
    #[inline(always)]
    fn default() -> Rev {
        <crate::RegValueT<Rev_SPEC> as RegisterValue<_>>::new(825431481)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rst_SPEC;
impl crate::sealed::RegSpec for Rst_SPEC {
    type DataType = u32;
}
#[doc = "GTM Global Reset Register\n resetvalue={Application Reset:0x0}"]
pub type Rst = crate::RegValueT<Rst_SPEC>;

impl Rst {
    #[doc = "GTM BRIDGE MODE write disable. This bit is write protected by bit RF PROT"]
    #[inline(always)]
    pub fn bridge_mode_wrdis(
        self,
    ) -> crate::common::RegisterFieldBool<27, 1, 0, Rst_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<27, 1, 0, Rst_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl core::default::Default for Rst {
    #[inline(always)]
    fn default() -> Rst {
        <crate::RegValueT<Rst_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct TiMnInsel_SPEC;
impl crate::sealed::RegSpec for TiMnInsel_SPEC {
    type DataType = u32;
}
#[doc = "TIM0 Input Select Register\n resetvalue={Application Reset:0x0}"]
pub type TiMnInsel = crate::RegValueT<TiMnInsel_SPEC>;

impl TiMnInsel {
    #[doc = "TIM Channel 7 Input Selection. This bit defines which input is connected for TIMn channel x of the GTM.        The input is either derived from a port pad or from an on chip module."]
    #[inline(always)]
    pub fn ch0sel(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, TiMnInsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xf,1,0,u8, TiMnInsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "TIM Channel 7 Input Selection. This bit defines which input is connected for TIMn channel x of the GTM.        The input is either derived from a port pad or from an on chip module."]
    #[inline(always)]
    pub fn ch1sel(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, TiMnInsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0xf,1,0,u8, TiMnInsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "TIM Channel 7 Input Selection. This bit defines which input is connected for TIMn channel x of the GTM.        The input is either derived from a port pad or from an on chip module."]
    #[inline(always)]
    pub fn ch2sel(
        self,
    ) -> crate::common::RegisterField<8, 0xf, 1, 0, u8, TiMnInsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xf,1,0,u8, TiMnInsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "TIM Channel 7 Input Selection. This bit defines which input is connected for TIMn channel x of the GTM.        The input is either derived from a port pad or from an on chip module."]
    #[inline(always)]
    pub fn ch3sel(
        self,
    ) -> crate::common::RegisterField<12, 0xf, 1, 0, u8, TiMnInsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<12,0xf,1,0,u8, TiMnInsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "TIM Channel 7 Input Selection. This bit defines which input is connected for TIMn channel x of the GTM.        The input is either derived from a port pad or from an on chip module."]
    #[inline(always)]
    pub fn ch4sel(
        self,
    ) -> crate::common::RegisterField<16, 0xf, 1, 0, u8, TiMnInsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xf,1,0,u8, TiMnInsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "TIM Channel 7 Input Selection. This bit defines which input is connected for TIMn channel x of the GTM.        The input is either derived from a port pad or from an on chip module."]
    #[inline(always)]
    pub fn ch5sel(
        self,
    ) -> crate::common::RegisterField<20, 0xf, 1, 0, u8, TiMnInsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<20,0xf,1,0,u8, TiMnInsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "TIM Channel 7 Input Selection. This bit defines which input is connected for TIMn channel x of the GTM.        The input is either derived from a port pad or from an on chip module."]
    #[inline(always)]
    pub fn ch6sel(
        self,
    ) -> crate::common::RegisterField<24, 0xf, 1, 0, u8, TiMnInsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0xf,1,0,u8, TiMnInsel_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "TIM Channel 7 Input Selection. This bit defines which input is connected for TIMn channel x of the GTM.        The input is either derived from a port pad or from an on chip module."]
    #[inline(always)]
    pub fn ch7sel(
        self,
    ) -> crate::common::RegisterField<28, 0xf, 1, 0, u8, TiMnInsel_SPEC, crate::common::RW> {
        crate::common::RegisterField::<28,0xf,1,0,u8, TiMnInsel_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl core::default::Default for TiMnInsel {
    #[inline(always)]
    fn default() -> TiMnInsel {
        <crate::RegValueT<TiMnInsel_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ToutseLn_SPEC;
impl crate::sealed::RegSpec for ToutseLn_SPEC {
    type DataType = u32;
}
#[doc = "Timer Output Select Register\n resetvalue={Application Reset:0x0}"]
pub type ToutseLn = crate::RegValueT<ToutseLn_SPEC>;

impl ToutseLn {
    #[doc = "TOUT n 8   7  Output Selection. This bit field defines which timer output is connected as TOUT n 8 x . The mapping is defined in the specific appendix. If TOUT n 8 x  is not defined in the specific appendix  this bit field          has to be treated as reserved   0   TOUT not routed to any ports . SELx values not explicitly defined here are equivalent to the last          defined SELx setting."]
    #[inline(always)]
    pub fn sel0(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, ToutseLn_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xf,1,0,u8, ToutseLn_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "TOUT n 8   7  Output Selection. This bit field defines which timer output is connected as TOUT n 8 x . The mapping is defined in the specific appendix. If TOUT n 8 x  is not defined in the specific appendix  this bit field          has to be treated as reserved   0   TOUT not routed to any ports . SELx values not explicitly defined here are equivalent to the last          defined SELx setting."]
    #[inline(always)]
    pub fn sel1(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, ToutseLn_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0xf,1,0,u8, ToutseLn_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "TOUT n 8   7  Output Selection. This bit field defines which timer output is connected as TOUT n 8 x . The mapping is defined in the specific appendix. If TOUT n 8 x  is not defined in the specific appendix  this bit field          has to be treated as reserved   0   TOUT not routed to any ports . SELx values not explicitly defined here are equivalent to the last          defined SELx setting."]
    #[inline(always)]
    pub fn sel2(
        self,
    ) -> crate::common::RegisterField<8, 0xf, 1, 0, u8, ToutseLn_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xf,1,0,u8, ToutseLn_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "TOUT n 8   7  Output Selection. This bit field defines which timer output is connected as TOUT n 8 x . The mapping is defined in the specific appendix. If TOUT n 8 x  is not defined in the specific appendix  this bit field          has to be treated as reserved   0   TOUT not routed to any ports . SELx values not explicitly defined here are equivalent to the last          defined SELx setting."]
    #[inline(always)]
    pub fn sel3(
        self,
    ) -> crate::common::RegisterField<12, 0xf, 1, 0, u8, ToutseLn_SPEC, crate::common::RW> {
        crate::common::RegisterField::<12,0xf,1,0,u8, ToutseLn_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "TOUT n 8   7  Output Selection. This bit field defines which timer output is connected as TOUT n 8 x . The mapping is defined in the specific appendix. If TOUT n 8 x  is not defined in the specific appendix  this bit field          has to be treated as reserved   0   TOUT not routed to any ports . SELx values not explicitly defined here are equivalent to the last          defined SELx setting."]
    #[inline(always)]
    pub fn sel4(
        self,
    ) -> crate::common::RegisterField<16, 0xf, 1, 0, u8, ToutseLn_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xf,1,0,u8, ToutseLn_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "TOUT n 8   7  Output Selection. This bit field defines which timer output is connected as TOUT n 8 x . The mapping is defined in the specific appendix. If TOUT n 8 x  is not defined in the specific appendix  this bit field          has to be treated as reserved   0   TOUT not routed to any ports . SELx values not explicitly defined here are equivalent to the last          defined SELx setting."]
    #[inline(always)]
    pub fn sel5(
        self,
    ) -> crate::common::RegisterField<20, 0xf, 1, 0, u8, ToutseLn_SPEC, crate::common::RW> {
        crate::common::RegisterField::<20,0xf,1,0,u8, ToutseLn_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "TOUT n 8   7  Output Selection. This bit field defines which timer output is connected as TOUT n 8 x . The mapping is defined in the specific appendix. If TOUT n 8 x  is not defined in the specific appendix  this bit field          has to be treated as reserved   0   TOUT not routed to any ports . SELx values not explicitly defined here are equivalent to the last          defined SELx setting."]
    #[inline(always)]
    pub fn sel6(
        self,
    ) -> crate::common::RegisterField<24, 0xf, 1, 0, u8, ToutseLn_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0xf,1,0,u8, ToutseLn_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "TOUT n 8   7  Output Selection. This bit field defines which timer output is connected as TOUT n 8 x . The mapping is defined in the specific appendix. If TOUT n 8 x  is not defined in the specific appendix  this bit field          has to be treated as reserved   0   TOUT not routed to any ports . SELx values not explicitly defined here are equivalent to the last          defined SELx setting."]
    #[inline(always)]
    pub fn sel7(
        self,
    ) -> crate::common::RegisterField<28, 0xf, 1, 0, u8, ToutseLn_SPEC, crate::common::RW> {
        crate::common::RegisterField::<28,0xf,1,0,u8, ToutseLn_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl core::default::Default for ToutseLn {
    #[inline(always)]
    fn default() -> ToutseLn {
        <crate::RegValueT<ToutseLn_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct TrigouTn_SPEC;
impl crate::sealed::RegSpec for TrigouTn_SPEC {
    type DataType = u32;
}
#[doc = "Trigger Output Register 0\n resetvalue={Application Reset:0x0}"]
pub type TrigouTn = crate::RegValueT<TrigouTn_SPEC>;

impl TrigouTn {
    #[doc = "Trigger 7. This bit field defines whether a trigger x request is generated or not.        In case of read  the value 0x00000000 is returned."]
    #[inline(always)]
    pub fn trig0(
        self,
    ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, TrigouTn_SPEC, crate::common::W> {
        crate::common::RegisterField::<0,0x3,1,0,u8, TrigouTn_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Trigger 7. This bit field defines whether a trigger x request is generated or not.        In case of read  the value 0x00000000 is returned."]
    #[inline(always)]
    pub fn trig1(
        self,
    ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, TrigouTn_SPEC, crate::common::W> {
        crate::common::RegisterField::<2,0x3,1,0,u8, TrigouTn_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Trigger 7. This bit field defines whether a trigger x request is generated or not.        In case of read  the value 0x00000000 is returned."]
    #[inline(always)]
    pub fn trig2(
        self,
    ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, TrigouTn_SPEC, crate::common::W> {
        crate::common::RegisterField::<4,0x3,1,0,u8, TrigouTn_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Trigger 7. This bit field defines whether a trigger x request is generated or not.        In case of read  the value 0x00000000 is returned."]
    #[inline(always)]
    pub fn trig3(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, TrigouTn_SPEC, crate::common::W> {
        crate::common::RegisterField::<6,0x3,1,0,u8, TrigouTn_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Trigger 7. This bit field defines whether a trigger x request is generated or not.        In case of read  the value 0x00000000 is returned."]
    #[inline(always)]
    pub fn trig4(
        self,
    ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, TrigouTn_SPEC, crate::common::W> {
        crate::common::RegisterField::<8,0x3,1,0,u8, TrigouTn_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Trigger 7. This bit field defines whether a trigger x request is generated or not.        In case of read  the value 0x00000000 is returned."]
    #[inline(always)]
    pub fn trig5(
        self,
    ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, TrigouTn_SPEC, crate::common::W> {
        crate::common::RegisterField::<10,0x3,1,0,u8, TrigouTn_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Trigger 7. This bit field defines whether a trigger x request is generated or not.        In case of read  the value 0x00000000 is returned."]
    #[inline(always)]
    pub fn trig6(
        self,
    ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, TrigouTn_SPEC, crate::common::W> {
        crate::common::RegisterField::<12,0x3,1,0,u8, TrigouTn_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Trigger 7. This bit field defines whether a trigger x request is generated or not.        In case of read  the value 0x00000000 is returned."]
    #[inline(always)]
    pub fn trig7(
        self,
    ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, TrigouTn_SPEC, crate::common::W> {
        crate::common::RegisterField::<14,0x3,1,0,u8, TrigouTn_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl core::default::Default for TrigouTn {
    #[inline(always)]
    fn default() -> TrigouTn {
        <crate::RegValueT<TrigouTn_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc = "ADCTRIG"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Adctrig(pub(super) *mut u8);
unsafe impl core::marker::Send for Adctrig {}
unsafe impl core::marker::Sync for Adctrig {}
impl Adctrig {
    #[doc = "ADC Trigger 0 Output Select 0 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn adctrigiout0(
        &self,
    ) -> crate::common::Reg<adctrig::AdctriGiOut0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
    }
    #[doc = "ADC Trigger 0 Output Select 1 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn adctrigiout1(
        &self,
    ) -> crate::common::Reg<adctrig::AdctriGiOut1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
    }
}
pub mod adctrig {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct AdctriGiOut0_SPEC;
    impl crate::sealed::RegSpec for AdctriGiOut0_SPEC {
        type DataType = u32;
    }
    #[doc = "ADC Trigger 0 Output Select 0 Register\n resetvalue={Application Reset:0x0}"]
    pub type AdctriGiOut0 = crate::RegValueT<AdctriGiOut0_SPEC>;

    impl AdctriGiOut0 {
        #[doc = "Output Selection for GTM to ADC7 connection. This bit field defines which TOM ATOM channel output is used as ADCx        trigger i. The decoding is        defined in the specific appendix depending on the ADC."]
        #[inline(always)]
        pub fn sel0(
            self,
        ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, AdctriGiOut0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xf,1,0,u8, AdctriGiOut0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output Selection for GTM to ADC7 connection. This bit field defines which TOM ATOM channel output is used as ADCx        trigger i. The decoding is        defined in the specific appendix depending on the ADC."]
        #[inline(always)]
        pub fn sel1(
            self,
        ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, AdctriGiOut0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0xf,1,0,u8, AdctriGiOut0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output Selection for GTM to ADC7 connection. This bit field defines which TOM ATOM channel output is used as ADCx        trigger i. The decoding is        defined in the specific appendix depending on the ADC."]
        #[inline(always)]
        pub fn sel2(
            self,
        ) -> crate::common::RegisterField<8, 0xf, 1, 0, u8, AdctriGiOut0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0xf,1,0,u8, AdctriGiOut0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output Selection for GTM to ADC7 connection. This bit field defines which TOM ATOM channel output is used as ADCx        trigger i. The decoding is        defined in the specific appendix depending on the ADC."]
        #[inline(always)]
        pub fn sel3(
            self,
        ) -> crate::common::RegisterField<12, 0xf, 1, 0, u8, AdctriGiOut0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0xf,1,0,u8, AdctriGiOut0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output Selection for GTM to ADC7 connection. This bit field defines which TOM ATOM channel output is used as ADCx        trigger i. The decoding is        defined in the specific appendix depending on the ADC."]
        #[inline(always)]
        pub fn sel4(
            self,
        ) -> crate::common::RegisterField<16, 0xf, 1, 0, u8, AdctriGiOut0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xf,1,0,u8, AdctriGiOut0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output Selection for GTM to ADC7 connection. This bit field defines which TOM ATOM channel output is used as ADCx        trigger i. The decoding is        defined in the specific appendix depending on the ADC."]
        #[inline(always)]
        pub fn sel5(
            self,
        ) -> crate::common::RegisterField<20, 0xf, 1, 0, u8, AdctriGiOut0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<20,0xf,1,0,u8, AdctriGiOut0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output Selection for GTM to ADC7 connection. This bit field defines which TOM ATOM channel output is used as ADCx        trigger i. The decoding is        defined in the specific appendix depending on the ADC."]
        #[inline(always)]
        pub fn sel6(
            self,
        ) -> crate::common::RegisterField<24, 0xf, 1, 0, u8, AdctriGiOut0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0xf,1,0,u8, AdctriGiOut0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output Selection for GTM to ADC7 connection. This bit field defines which TOM ATOM channel output is used as ADCx        trigger i. The decoding is        defined in the specific appendix depending on the ADC."]
        #[inline(always)]
        pub fn sel7(
            self,
        ) -> crate::common::RegisterField<28, 0xf, 1, 0, u8, AdctriGiOut0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<28,0xf,1,0,u8, AdctriGiOut0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for AdctriGiOut0 {
        #[inline(always)]
        fn default() -> AdctriGiOut0 {
            <crate::RegValueT<AdctriGiOut0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct AdctriGiOut1_SPEC;
    impl crate::sealed::RegSpec for AdctriGiOut1_SPEC {
        type DataType = u32;
    }
    #[doc = "ADC Trigger 0 Output Select 1 Register\n resetvalue={Application Reset:0x0}"]
    pub type AdctriGiOut1 = crate::RegValueT<AdctriGiOut1_SPEC>;

    impl AdctriGiOut1 {
        #[doc = "Output Selection for GTM to ADC3 connection. This bit field defines which TOM ATOM channel output is used as ADCx 8        trigger i. Decoding is        defined in the specific appendix."]
        #[inline(always)]
        pub fn sel0(
            self,
        ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, AdctriGiOut1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xf,1,0,u8, AdctriGiOut1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output Selection for GTM to ADC3 connection. This bit field defines which TOM ATOM channel output is used as ADCx 8        trigger i. Decoding is        defined in the specific appendix."]
        #[inline(always)]
        pub fn sel1(
            self,
        ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, AdctriGiOut1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0xf,1,0,u8, AdctriGiOut1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output Selection for GTM to ADC3 connection. This bit field defines which TOM ATOM channel output is used as ADCx 8        trigger i. Decoding is        defined in the specific appendix."]
        #[inline(always)]
        pub fn sel2(
            self,
        ) -> crate::common::RegisterField<8, 0xf, 1, 0, u8, AdctriGiOut1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0xf,1,0,u8, AdctriGiOut1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output Selection for GTM to ADC3 connection. This bit field defines which TOM ATOM channel output is used as ADCx 8        trigger i. Decoding is        defined in the specific appendix."]
        #[inline(always)]
        pub fn sel3(
            self,
        ) -> crate::common::RegisterField<12, 0xf, 1, 0, u8, AdctriGiOut1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0xf,1,0,u8, AdctriGiOut1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for AdctriGiOut1 {
        #[inline(always)]
        fn default() -> AdctriGiOut1 {
            <crate::RegValueT<AdctriGiOut1_SPEC> as RegisterValue<_>>::new(0)
        }
    }
}
#[doc = "ARU"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Aru(pub(super) *mut u8);
unsafe impl core::marker::Send for Aru {}
unsafe impl core::marker::Sync for Aru {}
impl Aru {
    #[doc = "ARU Access Register\n resetvalue={Application Reset:0x1FE}"]
    #[inline(always)]
    pub const fn access(&self) -> crate::common::Reg<aru::Access_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
    }
    #[doc = "ARU 0 Dynamic Routing Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn aru_z_dyn_ctrl(
        &self,
    ) -> [crate::common::Reg<aru::AruZDynCtrl_SPEC, crate::common::RW>; 2] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x40usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x40usize + 0x4usize)),
            ]
        }
    }
    #[doc = "ARU 0 Read ID for Dynamic Routing\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn aru_z_dyn_rdaddr(
        &self,
    ) -> [crate::common::Reg<aru::AruZDynRdaddr_SPEC, crate::common::RW>; 2] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x68usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x68usize + 0x4usize)),
            ]
        }
    }
    #[doc = "ARU 0 Higher Bits of DYN ROUTE Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn aru_z_dyn_route_high(
        &self,
    ) -> [crate::common::Reg<aru::AruZDynRouteHigh_SPEC, crate::common::RW>; 2] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x50usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x50usize + 0x4usize)),
            ]
        }
    }
    #[doc = "ARU 0 Lower Bits of DYN ROUTE Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn aru_z_dyn_route_low(
        &self,
    ) -> [crate::common::Reg<aru::AruZDynRouteLow_SPEC, crate::common::RW>; 2] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x48usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x48usize + 0x4usize)),
            ]
        }
    }
    #[doc = "ARU 0 Shadow Register for ARU 0 DYN ROUTE HIGH\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn aru_z_dyn_route_sr_high(
        &self,
    ) -> [crate::common::Reg<aru::AruZDynRouteSrHigh_SPEC, crate::common::RW>; 2] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x60usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x60usize + 0x4usize)),
            ]
        }
    }
    #[doc = "ARU 0 Shadow Register for ARU 0 DYN ROUTE LOW\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn aru_z_dyn_route_sr_low(
        &self,
    ) -> [crate::common::Reg<aru::AruZDynRouteSrLow_SPEC, crate::common::RW>; 2] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x58usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x58usize + 0x4usize)),
            ]
        }
    }
    #[doc = "ARU caddr Counter Value\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn caddr(&self) -> crate::common::Reg<aru::Caddr_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(124usize)) }
    }
    #[doc = "ARU caddr Counter End Value Register\n resetvalue={Application Reset:0x60}"]
    #[inline(always)]
    pub const fn caddr_end(&self) -> crate::common::Reg<aru::CaddrEnd_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(52usize)) }
    }
    #[doc = "ARU Enable Dynamic Routing Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ctrl(&self) -> crate::common::Reg<aru::Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(60usize)) }
    }
    #[doc = "ARU Access Register Upper Data Word\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn data_h(&self) -> crate::common::Reg<aru::DataH_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
    }
    #[doc = "ARU Access Register Lower Data Word\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn data_l(&self) -> crate::common::Reg<aru::DataL_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
    }
    #[doc = "DBG"]
    #[inline(always)]
    pub fn dbg(self) -> aru::Dbg {
        unsafe { aru::Dbg(self.0.add(12usize)) }
    }
    #[doc = "IRQ"]
    #[inline(always)]
    pub fn irq(self) -> aru::Irq {
        unsafe { aru::Irq(self.0.add(36usize)) }
    }
}
pub mod aru {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Access_SPEC;
    impl crate::sealed::RegSpec for Access_SPEC {
        type DataType = u32;
    }
    #[doc = "ARU Access Register\n resetvalue={Application Reset:0x1FE}"]
    pub type Access = crate::RegValueT<Access_SPEC>;

    impl Access {
        #[doc = "ARU address. Define the ARU address used for transferring data. For an ARU write request  the preferred address 0x0 have to be used. A write request to the address 0x1FF  always full address  or 0x1FE         always empty address  are ignored and doesn t have any effect. ARU address bits ADDR are only writable if RREQ and WREQ bits are zero."]
        #[inline(always)]
        pub fn addr(
            self,
        ) -> crate::common::RegisterField<0, 0x1ff, 1, 0, u16, Access_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x1ff,1,0,u16, Access_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initiate read request. This bit is cleared automatically after transaction. Moreover  it can be        cleared by software to cancel a read request. RREQ bit is only writable if WREQ bit is zero  so to switch from RREQ to        WREQ a cancel request has to be performed before. Configuring both RREQ and WREQ bits results in a read request  so RREQ        bit will be set if the WREQ bit of the register isn t already set. The ARU read request on address ADDR is served immediately when no other        destination has actually a read request when the RREQ bit is set by CPU.        In a worst case scenario  the read request is served after one round        trip of the ARU  but this is only the case when every destination        channel issues a read request at consecutive points in time."]
        #[inline(always)]
        pub fn rreq(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, Access_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<12,1,0,Access_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initiate write request. This bit is cleared automatically after transaction. Moreover  it can be        cleared by software to cancel a write request. WREQ bit is only writable if RREQ bit is zero  so to switch from WREQ to        RREQ a cancel request has to be performed before. Configuring both RREQ and WREQ bits results in a read request  so WREQ        bit will not be set The data is provided at address ADDR. This address has to be programmed        as the source address in the destination sub module channel. In worst        case  the data is provided after one full ARU round trip."]
        #[inline(always)]
        pub fn wreq(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, Access_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<13,1,0,Access_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Access {
        #[inline(always)]
        fn default() -> Access {
            <crate::RegValueT<Access_SPEC> as RegisterValue<_>>::new(510)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct AruZDynCtrl_SPEC;
    impl crate::sealed::RegSpec for AruZDynCtrl_SPEC {
        type DataType = u32;
    }
    #[doc = "ARU 0 Dynamic Routing Control Register\n resetvalue={Application Reset:0x0}"]
    pub type AruZDynCtrl = crate::RegValueT<AruZDynCtrl_SPEC>;

    impl AruZDynCtrl {
        #[doc = "Enable reload of DYN ROUTE register from ARU itself. Enable reload of DYN ROUTE register from ARU itself."]
        #[inline(always)]
        pub fn dyn_aru_update_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, AruZDynCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,AruZDynCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable swapping DYN ROUTE SR with DYN ROUTE register. Enable swapping DYN ROUTE SR with DYN ROUTE register."]
        #[inline(always)]
        pub fn dyn_route_swap(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, AruZDynCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,AruZDynCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for AruZDynCtrl {
        #[inline(always)]
        fn default() -> AruZDynCtrl {
            <crate::RegValueT<AruZDynCtrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct AruZDynRdaddr_SPEC;
    impl crate::sealed::RegSpec for AruZDynRdaddr_SPEC {
        type DataType = u32;
    }
    #[doc = "ARU 0 Read ID for Dynamic Routing\n resetvalue={Application Reset:0x0}"]
    pub type AruZDynRdaddr = crate::RegValueT<AruZDynRdaddr_SPEC>;

    impl AruZDynRdaddr {
        #[doc = "ARU read address ID to reload the DYN ROUTE register. ARU read address ID to reload the DYN ROUTE register from ARU itself."]
        #[inline(always)]
        pub fn dyn_aru_rdaddr(
            self,
        ) -> crate::common::RegisterField<0, 0x1ff, 1, 0, u16, AruZDynRdaddr_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x1ff,1,0,u16, AruZDynRdaddr_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for AruZDynRdaddr {
        #[inline(always)]
        fn default() -> AruZDynRdaddr {
            <crate::RegValueT<AruZDynRdaddr_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct AruZDynRouteHigh_SPEC;
    impl crate::sealed::RegSpec for AruZDynRouteHigh_SPEC {
        type DataType = u32;
    }
    #[doc = "ARU 0 Higher Bits of DYN ROUTE Register\n resetvalue={Application Reset:0x0}"]
    pub type AruZDynRouteHigh = crate::RegValueT<AruZDynRouteHigh_SPEC>;

    impl AruZDynRouteHigh {
        #[doc = "ARU read ID 3. ARU read ID 3 for dynamic routing."]
        #[inline(always)]
        pub fn dyn_read_id3(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, AruZDynRouteHigh_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                0,
                0xff,
                1,
                0,
                u8,
                AruZDynRouteHigh_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "ARU read ID 4. ARU read ID 4 for dynamic routing."]
        #[inline(always)]
        pub fn dyn_read_id4(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, AruZDynRouteHigh_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                8,
                0xff,
                1,
                0,
                u8,
                AruZDynRouteHigh_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "ARU read ID 5. ARU read ID 5 for dynamic routing."]
        #[inline(always)]
        pub fn dyn_read_id5(
            self,
        ) -> crate::common::RegisterField<
            16,
            0xff,
            1,
            0,
            u8,
            AruZDynRouteHigh_SPEC,
            crate::common::RW,
        > {
            crate::common::RegisterField::<
                16,
                0xff,
                1,
                0,
                u8,
                AruZDynRouteHigh_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Number of clk cycles for dynamic routing. Defines the number of clk cycles between each dynamic routing ID."]
        #[inline(always)]
        pub fn dyn_clk_wait(
            self,
        ) -> crate::common::RegisterField<24, 0xf, 1, 0, u8, AruZDynRouteHigh_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                24,
                0xf,
                1,
                0,
                u8,
                AruZDynRouteHigh_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
    }
    impl core::default::Default for AruZDynRouteHigh {
        #[inline(always)]
        fn default() -> AruZDynRouteHigh {
            <crate::RegValueT<AruZDynRouteHigh_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct AruZDynRouteLow_SPEC;
    impl crate::sealed::RegSpec for AruZDynRouteLow_SPEC {
        type DataType = u32;
    }
    #[doc = "ARU 0 Lower Bits of DYN ROUTE Register\n resetvalue={Application Reset:0x0}"]
    pub type AruZDynRouteLow = crate::RegValueT<AruZDynRouteLow_SPEC>;

    impl AruZDynRouteLow {
        #[doc = "ARU read ID 0. ARU read ID 0 for dynamic routing."]
        #[inline(always)]
        pub fn dyn_read_id0(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, AruZDynRouteLow_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, AruZDynRouteLow_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU read ID 2. ARU read ID 1 for dynamic routing."]
        #[inline(always)]
        pub fn dyn_read_id1(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, AruZDynRouteLow_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, AruZDynRouteLow_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU read ID 2. ARU read ID 2 for dynamic routing."]
        #[inline(always)]
        pub fn dyn_read_id2(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, AruZDynRouteLow_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                16,
                0xff,
                1,
                0,
                u8,
                AruZDynRouteLow_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
    }
    impl core::default::Default for AruZDynRouteLow {
        #[inline(always)]
        fn default() -> AruZDynRouteLow {
            <crate::RegValueT<AruZDynRouteLow_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct AruZDynRouteSrHigh_SPEC;
    impl crate::sealed::RegSpec for AruZDynRouteSrHigh_SPEC {
        type DataType = u32;
    }
    #[doc = "ARU 0 Shadow Register for ARU 0 DYN ROUTE HIGH\n resetvalue={Application Reset:0x0}"]
    pub type AruZDynRouteSrHigh = crate::RegValueT<AruZDynRouteSrHigh_SPEC>;

    impl AruZDynRouteSrHigh {
        #[doc = "ARU read ID 9. ARU read ID 9 for dynamic routing. These bits are mapped to ARU data bits aru data 31 24 ."]
        #[inline(always)]
        pub fn dyn_read_id9(
            self,
        ) -> crate::common::RegisterField<
            0,
            0xff,
            1,
            0,
            u8,
            AruZDynRouteSrHigh_SPEC,
            crate::common::RW,
        > {
            crate::common::RegisterField::<
                0,
                0xff,
                1,
                0,
                u8,
                AruZDynRouteSrHigh_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "ARU read ID 10. ARU read ID 10 for dynamic routing. These bits are mapped to ARU data bits aru data 39 32 ."]
        #[inline(always)]
        pub fn dyn_read_id10(
            self,
        ) -> crate::common::RegisterField<
            8,
            0xff,
            1,
            0,
            u8,
            AruZDynRouteSrHigh_SPEC,
            crate::common::RW,
        > {
            crate::common::RegisterField::<
                8,
                0xff,
                1,
                0,
                u8,
                AruZDynRouteSrHigh_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "ARU read ID 11. ARU read ID 11 for dynamic routing. These bits are mapped to ARU data bits aru data 47 40 ."]
        #[inline(always)]
        pub fn dyn_read_id11(
            self,
        ) -> crate::common::RegisterField<
            16,
            0xff,
            1,
            0,
            u8,
            AruZDynRouteSrHigh_SPEC,
            crate::common::RW,
        > {
            crate::common::RegisterField::<
                16,
                0xff,
                1,
                0,
                u8,
                AruZDynRouteSrHigh_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Number of clk cycles for dynamic routing. Defines the number of clk cycles between each dynamic routing ID. These bits are mapped to ARU data bits aru data 51 48 ."]
        #[inline(always)]
        pub fn dyn_clk_wait(
            self,
        ) -> crate::common::RegisterField<
            24,
            0xf,
            1,
            0,
            u8,
            AruZDynRouteSrHigh_SPEC,
            crate::common::RW,
        > {
            crate::common::RegisterField::<
                24,
                0xf,
                1,
                0,
                u8,
                AruZDynRouteSrHigh_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Update enable from shadow register. Enable update ARU  z  DYN ROUTE LOW  HIGH registers from shadow registers ARU  z  DYN ROUTE SR LOW  HIGH . This bit is mapped to ARU data bit aru data 52 ."]
        #[inline(always)]
        pub fn dyn_update_en(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, AruZDynRouteSrHigh_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<28,1,0,AruZDynRouteSrHigh_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for AruZDynRouteSrHigh {
        #[inline(always)]
        fn default() -> AruZDynRouteSrHigh {
            <crate::RegValueT<AruZDynRouteSrHigh_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct AruZDynRouteSrLow_SPEC;
    impl crate::sealed::RegSpec for AruZDynRouteSrLow_SPEC {
        type DataType = u32;
    }
    #[doc = "ARU 0 Shadow Register for ARU 0 DYN ROUTE LOW\n resetvalue={Application Reset:0x0}"]
    pub type AruZDynRouteSrLow = crate::RegValueT<AruZDynRouteSrLow_SPEC>;

    impl AruZDynRouteSrLow {
        #[doc = "ARU read ID 6. ARU read ID 6 for dynamic routing. These bits are mapped to ARU data bits aru data 7 0 ."]
        #[inline(always)]
        pub fn dyn_read_id6(
            self,
        ) -> crate::common::RegisterField<
            0,
            0xff,
            1,
            0,
            u8,
            AruZDynRouteSrLow_SPEC,
            crate::common::RW,
        > {
            crate::common::RegisterField::<
                0,
                0xff,
                1,
                0,
                u8,
                AruZDynRouteSrLow_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "ARU read ID 7. ARU read ID 7 for dynamic routing. These bits are mapped to ARU data bits aru data 15 8 ."]
        #[inline(always)]
        pub fn dyn_read_id7(
            self,
        ) -> crate::common::RegisterField<
            8,
            0xff,
            1,
            0,
            u8,
            AruZDynRouteSrLow_SPEC,
            crate::common::RW,
        > {
            crate::common::RegisterField::<
                8,
                0xff,
                1,
                0,
                u8,
                AruZDynRouteSrLow_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "ARU read ID 8. ARU read ID 8 for dynamic routing. These bits are mapped to ARU data bits aru data 23 16 ."]
        #[inline(always)]
        pub fn dyn_read_id8(
            self,
        ) -> crate::common::RegisterField<
            16,
            0xff,
            1,
            0,
            u8,
            AruZDynRouteSrLow_SPEC,
            crate::common::RW,
        > {
            crate::common::RegisterField::<
                16,
                0xff,
                1,
                0,
                u8,
                AruZDynRouteSrLow_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
    }
    impl core::default::Default for AruZDynRouteSrLow {
        #[inline(always)]
        fn default() -> AruZDynRouteSrLow {
            <crate::RegValueT<AruZDynRouteSrLow_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Caddr_SPEC;
    impl crate::sealed::RegSpec for Caddr_SPEC {
        type DataType = u32;
    }
    #[doc = "ARU caddr Counter Value\n resetvalue={Application Reset:0x0}"]
    pub type Caddr = crate::RegValueT<Caddr_SPEC>;

    impl Caddr {
        #[doc = "Value of ARU 0 caddr counter"]
        #[inline(always)]
        pub fn caddr_0(
            self,
        ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Caddr_SPEC, crate::common::R> {
            crate::common::RegisterField::<0,0x7f,1,0,u8, Caddr_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Value of ARU 1 caddr counter"]
        #[inline(always)]
        pub fn caddr_1(
            self,
        ) -> crate::common::RegisterField<16, 0x7f, 1, 0, u8, Caddr_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0x7f,1,0,u8, Caddr_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Caddr {
        #[inline(always)]
        fn default() -> Caddr {
            <crate::RegValueT<Caddr_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct CaddrEnd_SPEC;
    impl crate::sealed::RegSpec for CaddrEnd_SPEC {
        type DataType = u32;
    }
    #[doc = "ARU caddr Counter End Value Register\n resetvalue={Application Reset:0x60}"]
    pub type CaddrEnd = crate::RegValueT<CaddrEnd_SPEC>;

    impl CaddrEnd {
        #[doc = "Set end value of ARU caddr counter. The ARU roundtrip counter aru caddr runs from zero to caddr end value. Shorten the ARU roundtrip cycle by setting a smaller number than the        defined reset value will cause that not all ARU connected modules will        be served. Making the roundtrip cycle longer than the reset value would cause        longer ARU roundtrip time and as a result some ARU connected modules        will not be served as fast as possible for this device. This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn caddr_end(
            self,
        ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, CaddrEnd_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x7f,1,0,u8, CaddrEnd_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for CaddrEnd {
        #[inline(always)]
        fn default() -> CaddrEnd {
            <crate::RegValueT<CaddrEnd_SPEC> as RegisterValue<_>>::new(96)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "ARU Enable Dynamic Routing Register\n resetvalue={Application Reset:0x0}"]
    pub type Ctrl = crate::RegValueT<Ctrl_SPEC>;

    impl Ctrl {
        #[doc = "Enable dynamic routing for ARU 0. Dynamic routing enable of ARU 0. Write of following double bit values is        possible  If dynamic routing is disabled  the normal ARU routing scheme for ARU 0        is executed."]
        #[inline(always)]
        pub fn aru_0_dyn_en(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable dynamic routing for ARU 1. Dynamic routing enable of ARU 1. Write of following double bit values is        possible  If dynamic routing is disabled  the normal ARU routing scheme for ARU 1        is executed."]
        #[inline(always)]
        pub fn aru_1_dyn_en(
            self,
        ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterField::<2,0x3,1,0,u8, Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable dynamic routing ring mode. Dynamic routing ring mode for both ARU 0 and ARU 1."]
        #[inline(always)]
        pub fn aru_dyn_ring_mode(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4, 1, 0, Ctrl_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
    }
    impl core::default::Default for Ctrl {
        #[inline(always)]
        fn default() -> Ctrl {
            <crate::RegValueT<Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct DataH_SPEC;
    impl crate::sealed::RegSpec for DataH_SPEC {
        type DataType = u32;
    }
    #[doc = "ARU Access Register Upper Data Word\n resetvalue={Application Reset:0x0}"]
    pub type DataH = crate::RegValueT<DataH_SPEC>;

    impl DataH {
        #[doc = "Upper ARU data word. Transfer upper ARU data word addressed by ADDR. The data bits 24 to 52        of an ARU word are mapped to the data bits 0 to 28 of this register."]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0x1fffffff, 1, 0, u32, DataH_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x1fffffff,1,0,u32, DataH_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for DataH {
        #[inline(always)]
        fn default() -> DataH {
            <crate::RegValueT<DataH_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct DataL_SPEC;
    impl crate::sealed::RegSpec for DataL_SPEC {
        type DataType = u32;
    }
    #[doc = "ARU Access Register Lower Data Word\n resetvalue={Application Reset:0x0}"]
    pub type DataL = crate::RegValueT<DataL_SPEC>;

    impl DataL {
        #[doc = "Lower ARU data word. Transfer lower ARU data word addressed by ADDR. The data bits 0 to 23 of        an ARU word are mapped to the data bits 0 to 23 of this register and the        data bits 48 to 52 of an ARU word are mapped to the data bits 24 to 28        of this register when data is read by the CPU. For writing data into the ARU by the CPU the bits 24 to 28 are not transferred to bit 48 to 52 of the ARU word. Only bits 0 to 23 are        written to bits 0 to 23 of the ARU word."]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0x1fffffff, 1, 0, u32, DataL_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x1fffffff,1,0,u32, DataL_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for DataL {
        #[inline(always)]
        fn default() -> DataL {
            <crate::RegValueT<DataL_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc = "DBG"]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Dbg(pub(super) *mut u8);
    unsafe impl core::marker::Send for Dbg {}
    unsafe impl core::marker::Sync for Dbg {}
    impl Dbg {
        #[doc = "ARU Debug Access Channel 0\n resetvalue={Application Reset:0x1FE}"]
        #[inline(always)]
        pub const fn access0(&self) -> crate::common::Reg<dbg::Access0_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
        }
        #[doc = "ARU Debug Access Channel 1\n resetvalue={Application Reset:0x1FE}"]
        #[inline(always)]
        pub const fn access1(&self) -> crate::common::Reg<dbg::Access1_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(12usize)) }
        }
        #[doc = "ARU Debug Access 0 Transfer Register Upper Data Word\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn data0_h(&self) -> crate::common::Reg<dbg::Data0H_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
        }
        #[doc = "ARU Debug Access 0 Transfer Register Lower Data Word\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn data0_l(&self) -> crate::common::Reg<dbg::Data0L_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
        }
        #[doc = "ARU Debug Access 1 Transfer Register Upper Data Word\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn data1_h(&self) -> crate::common::Reg<dbg::Data1H_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(16usize)) }
        }
        #[doc = "ARU Debug Access 1 Transfer Register Lower Data Word\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn data1_l(&self) -> crate::common::Reg<dbg::Data1L_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(20usize)) }
        }
    }
    pub mod dbg {
        #[allow(unused_imports)]
        use crate::common::*;
        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Access0_SPEC;
        impl crate::sealed::RegSpec for Access0_SPEC {
            type DataType = u32;
        }
        #[doc = "ARU Debug Access Channel 0\n resetvalue={Application Reset:0x1FE}"]
        pub type Access0 = crate::RegValueT<Access0_SPEC>;

        impl Access0 {
            #[doc = "ARU debugging address. Define address of ARU debugging channel 0."]
            #[inline(always)]
            pub fn addr(
                self,
            ) -> crate::common::RegisterField<0, 0x1ff, 1, 0, u16, Access0_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<0,0x1ff,1,0,u16, Access0_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for Access0 {
            #[inline(always)]
            fn default() -> Access0 {
                <crate::RegValueT<Access0_SPEC> as RegisterValue<_>>::new(510)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Access1_SPEC;
        impl crate::sealed::RegSpec for Access1_SPEC {
            type DataType = u32;
        }
        #[doc = "ARU Debug Access Channel 1\n resetvalue={Application Reset:0x1FE}"]
        pub type Access1 = crate::RegValueT<Access1_SPEC>;

        impl Access1 {
            #[doc = "ARU debugging address. Define address of ARU debugging channel 1."]
            #[inline(always)]
            pub fn addr(
                self,
            ) -> crate::common::RegisterField<0, 0x1ff, 1, 0, u16, Access1_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<0,0x1ff,1,0,u16, Access1_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for Access1 {
            #[inline(always)]
            fn default() -> Access1 {
                <crate::RegValueT<Access1_SPEC> as RegisterValue<_>>::new(510)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Data0H_SPEC;
        impl crate::sealed::RegSpec for Data0H_SPEC {
            type DataType = u32;
        }
        #[doc = "ARU Debug Access 0 Transfer Register Upper Data Word\n resetvalue={Application Reset:0x0}"]
        pub type Data0H = crate::RegValueT<Data0H_SPEC>;

        impl Data0H {
            #[doc = "Upper debug data word. Transfer upper ARU data word addressed by register DBG ACCESS0 .        The data bits 24 to 52 of an ARU word are mapped to the data bits 0 to        28 of this register The interrupt ARU NEW DATA0 IRQ is raised if a new data word is available."]
            #[inline(always)]
            pub fn data(
                self,
            ) -> crate::common::RegisterField<0, 0x1fffffff, 1, 0, u32, Data0H_SPEC, crate::common::R>
            {
                crate::common::RegisterField::<
                    0,
                    0x1fffffff,
                    1,
                    0,
                    u32,
                    Data0H_SPEC,
                    crate::common::R,
                >::from_register(self, 0)
            }
        }
        impl core::default::Default for Data0H {
            #[inline(always)]
            fn default() -> Data0H {
                <crate::RegValueT<Data0H_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Data0L_SPEC;
        impl crate::sealed::RegSpec for Data0L_SPEC {
            type DataType = u32;
        }
        #[doc = "ARU Debug Access 0 Transfer Register Lower Data Word\n resetvalue={Application Reset:0x0}"]
        pub type Data0L = crate::RegValueT<Data0L_SPEC>;

        impl Data0L {
            #[doc = "Lower debug data word. Transfer lower ARU data word addressed by register DBG ACCESS0 .        The data bits 0 to 23 of an ARU word are mapped to the data bits 0 to 23        of this register and the data bits 48 to 52 of an ARU word is mapped to        the data bits 24 to 28 of this register. The interrupt ARU NEW DATA0 IRQ is raised if a new data word is available."]
            #[inline(always)]
            pub fn data(
                self,
            ) -> crate::common::RegisterField<0, 0x1fffffff, 1, 0, u32, Data0L_SPEC, crate::common::R>
            {
                crate::common::RegisterField::<
                    0,
                    0x1fffffff,
                    1,
                    0,
                    u32,
                    Data0L_SPEC,
                    crate::common::R,
                >::from_register(self, 0)
            }
        }
        impl core::default::Default for Data0L {
            #[inline(always)]
            fn default() -> Data0L {
                <crate::RegValueT<Data0L_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Data1H_SPEC;
        impl crate::sealed::RegSpec for Data1H_SPEC {
            type DataType = u32;
        }
        #[doc = "ARU Debug Access 1 Transfer Register Upper Data Word\n resetvalue={Application Reset:0x0}"]
        pub type Data1H = crate::RegValueT<Data1H_SPEC>;

        impl Data1H {
            #[doc = "Upper debug data word. Transfer upper ARU data word addressed by register DBG ACCESS1 .        The data bits 24 to 52 of an ARU word are mapped to the data bits 0 to        28 of this register. The interrupt ARU NEW DATA1 IRQ is raised if a new data word is available."]
            #[inline(always)]
            pub fn data(
                self,
            ) -> crate::common::RegisterField<0, 0x1fffffff, 1, 0, u32, Data1H_SPEC, crate::common::R>
            {
                crate::common::RegisterField::<
                    0,
                    0x1fffffff,
                    1,
                    0,
                    u32,
                    Data1H_SPEC,
                    crate::common::R,
                >::from_register(self, 0)
            }
        }
        impl core::default::Default for Data1H {
            #[inline(always)]
            fn default() -> Data1H {
                <crate::RegValueT<Data1H_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Data1L_SPEC;
        impl crate::sealed::RegSpec for Data1L_SPEC {
            type DataType = u32;
        }
        #[doc = "ARU Debug Access 1 Transfer Register Lower Data Word\n resetvalue={Application Reset:0x0}"]
        pub type Data1L = crate::RegValueT<Data1L_SPEC>;

        impl Data1L {
            #[doc = "Lower debug data word   DATA. Transfer lower ARU data word addressed by register DBG ACCESS1 .        The data bits 0 to 23 of an ARU word are mapped to the data bits 0 to 23        of this register and the data bits 48 to 52 of an ARU word is mapped to        the data bits 24 to 28 of this register. The interrupt ARU NEW DATA1 IRQ is raised if a new data word is available."]
            #[inline(always)]
            pub fn data(
                self,
            ) -> crate::common::RegisterField<0, 0x1fffffff, 1, 0, u32, Data1L_SPEC, crate::common::R>
            {
                crate::common::RegisterField::<
                    0,
                    0x1fffffff,
                    1,
                    0,
                    u32,
                    Data1L_SPEC,
                    crate::common::R,
                >::from_register(self, 0)
            }
        }
        impl core::default::Default for Data1L {
            #[inline(always)]
            fn default() -> Data1L {
                <crate::RegValueT<Data1L_SPEC> as RegisterValue<_>>::new(0)
            }
        }
    }
    #[doc = "IRQ"]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Irq(pub(super) *mut u8);
    unsafe impl core::marker::Send for Irq {}
    unsafe impl core::marker::Sync for Irq {}
    impl Irq {
        #[doc = "ARU Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn en(&self) -> crate::common::Reg<irq::En_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
        }
        #[doc = "ARU Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn forcint(&self) -> crate::common::Reg<irq::Forcint_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
        }
        #[doc = "ARU Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn mode(&self) -> crate::common::Reg<irq::Mode_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(12usize)) }
        }
        #[doc = "ARU Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn notify(&self) -> crate::common::Reg<irq::Notify_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
        }
    }
    pub mod irq {
        #[allow(unused_imports)]
        use crate::common::*;
        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct En_SPEC;
        impl crate::sealed::RegSpec for En_SPEC {
            type DataType = u32;
        }
        #[doc = "ARU Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
        pub type En = crate::RegValueT<En_SPEC>;

        impl En {
            #[doc = "ARU NEW DATA0 IRQ interrupt enable"]
            #[inline(always)]
            pub fn new_data0_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<0,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "ARU NEW DATA1 IRQ interrupt enable"]
            #[inline(always)]
            pub fn new_data1_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<1,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "ACC ACK IRQ interrupt enable"]
            #[inline(always)]
            pub fn acc_ack_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<2,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for En {
            #[inline(always)]
            fn default() -> En {
                <crate::RegValueT<En_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Forcint_SPEC;
        impl crate::sealed::RegSpec for Forcint_SPEC {
            type DataType = u32;
        }
        #[doc = "ARU Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
        pub type Forcint = crate::RegValueT<Forcint_SPEC>;

        impl Forcint {
            #[doc = "Trigger new data 0 interrupt. Note  This bit is cleared automatically after write. This bit is write        protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_new_data0(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<0,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger new data 1 interrupt. Note  This bit is cleared automatically after write. This bit is write        protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_new_data1(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<1,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger ACC ACK interrupt. Note  This bit is cleared automatically after write. This bit is write        protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_acc_ack(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<2,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for Forcint {
            #[inline(always)]
            fn default() -> Forcint {
                <crate::RegValueT<Forcint_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Mode_SPEC;
        impl crate::sealed::RegSpec for Mode_SPEC {
            type DataType = u32;
        }
        #[doc = "ARU Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
        pub type Mode = crate::RegValueT<Mode_SPEC>;

        impl Mode {
            #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
            #[inline(always)]
            pub fn irq_mode(
                self,
            ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Mode_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<0,0x3,1,0,u8, Mode_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for Mode {
            #[inline(always)]
            fn default() -> Mode {
                <crate::RegValueT<Mode_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Notify_SPEC;
        impl crate::sealed::RegSpec for Notify_SPEC {
            type DataType = u32;
        }
        #[doc = "ARU Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
        pub type Notify = crate::RegValueT<Notify_SPEC>;

        impl Notify {
            #[doc = "Data was transferred for addr ARU DBG ACCESS0. This bit will be cleared on a CPU write access of value  1 .  As the bit is rw  otherwise no clear.  A read access leaves the bit unchanged."]
            #[inline(always)]
            pub fn new_data0(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<0,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Data was transferred for addr ARU DBG ACCESS1. This bit will be cleared on a CPU write access of value  1 .  As the bit is rw  otherwise no clear.  A read access leaves the bit unchanged."]
            #[inline(always)]
            pub fn new_data1(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<1,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "AEI to ARU access finished  on read access data are valid. This bit will be cleared on a CPU write access of value  1 .   As the bit is rw  otherwise no clear.  A read access leaves the bit unchanged."]
            #[inline(always)]
            pub fn acc_ack(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<2,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for Notify {
            #[inline(always)]
            fn default() -> Notify {
                <crate::RegValueT<Notify_SPEC> as RegisterValue<_>>::new(0)
            }
        }
    }
}
#[doc = "ATOM"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Atom(pub(super) *mut u8);
unsafe impl core::marker::Send for Atom {}
unsafe impl core::marker::Sync for Atom {}
impl Atom {
    #[doc = "ATOM0 AGC Action Time Base Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn atom0_agc_act_tb(
        &self,
    ) -> crate::common::Reg<atom::Atom0AgcActTb_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(76usize)) }
    }
    #[doc = "ATOM0 AGC Enable Disable Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn atom0_agc_endis_ctrl(
        &self,
    ) -> crate::common::Reg<atom::Atom0AgcEndisCtrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(68usize)) }
    }
    #[doc = "ATOM0 AGC Enable Disable Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn atom0_agc_endis_stat(
        &self,
    ) -> crate::common::Reg<atom::Atom0AgcEndisStat_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(72usize)) }
    }
    #[doc = "ATOM0 AGC Force Update Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn atom0_agc_fupd_ctrl(
        &self,
    ) -> crate::common::Reg<atom::Atom0AgcFupdCtrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(88usize)) }
    }
    #[doc = "ATOM0 AGC Global Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn atom0_agc_glb_ctrl(
        &self,
    ) -> crate::common::Reg<atom::Atom0AgcGlbCtrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(64usize)) }
    }
    #[doc = "ATOM0 AGC Internal Trigger Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn atom0_agc_int_trig(
        &self,
    ) -> crate::common::Reg<atom::Atom0AgcIntTrig_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(92usize)) }
    }
    #[doc = "ATOM0 AGC Output Enable Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn atom0_agc_outen_ctrl(
        &self,
    ) -> crate::common::Reg<atom::Atom0AgcOutenCtrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(80usize)) }
    }
    #[doc = "ATOM0 AGC Output Enable Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn atom0_agc_outen_stat(
        &self,
    ) -> crate::common::Reg<atom::Atom0AgcOutenStat_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(84usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_cm0(&self) -> crate::common::Reg<atom::Ch0Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(16usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_cm1(&self) -> crate::common::Reg<atom::Ch0Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(20usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_cn0(&self) -> crate::common::Reg<atom::Ch0Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(24usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_ctrl(&self) -> crate::common::Reg<atom::Ch0Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_irq_en(&self) -> crate::common::Reg<atom::Ch0IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(36usize)) }
    }
    #[doc = "ATOM0 Channel 7 Software Interrupt Generation Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_irq_forcint(
        &self,
    ) -> crate::common::Reg<atom::Ch0IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(40usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_irq_mode(
        &self,
    ) -> crate::common::Reg<atom::Ch0IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(44usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_irq_notify(
        &self,
    ) -> crate::common::Reg<atom::Ch0IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(32usize)) }
    }
    #[doc = "ATOM0 Channel 7 ARU read address Register\n resetvalue={Application Reset:0x1FE01FE}"]
    #[inline(always)]
    pub const fn ch0_rdaddr(&self) -> crate::common::Reg<atom::Ch0Rdaddr_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMB Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_somb(&self) -> crate::common::Reg<atom::Ch0Somb_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMC Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_somc(&self) -> crate::common::Reg<atom::Ch0Somc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMI Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_somi(&self) -> crate::common::Reg<atom::Ch0Somi_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMP Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_somp(&self) -> crate::common::Reg<atom::Ch0Somp_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMS Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_soms(&self) -> crate::common::Reg<atom::Ch0Soms_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_sr0(&self) -> crate::common::Reg<atom::Ch0Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_sr1(&self) -> crate::common::Reg<atom::Ch0Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(12usize)) }
    }
    #[doc = "ATOM0 Channel 7 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_stat(&self) -> crate::common::Reg<atom::Ch0Stat_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(28usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_cm0(&self) -> crate::common::Reg<atom::Ch1Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(144usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_cm1(&self) -> crate::common::Reg<atom::Ch1Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(148usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_cn0(&self) -> crate::common::Reg<atom::Ch1Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(152usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_ctrl(&self) -> crate::common::Reg<atom::Ch1Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(132usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_irq_en(&self) -> crate::common::Reg<atom::Ch1IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(164usize)) }
    }
    #[doc = "ATOM0 Channel 7 Software Interrupt Generation Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_irq_forcint(
        &self,
    ) -> crate::common::Reg<atom::Ch1IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(168usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_irq_mode(
        &self,
    ) -> crate::common::Reg<atom::Ch1IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(172usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_irq_notify(
        &self,
    ) -> crate::common::Reg<atom::Ch1IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(160usize)) }
    }
    #[doc = "ATOM0 Channel 7 ARU read address Register\n resetvalue={Application Reset:0x1FE01FE}"]
    #[inline(always)]
    pub const fn ch1_rdaddr(&self) -> crate::common::Reg<atom::Ch1Rdaddr_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(128usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMB Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_somb(&self) -> crate::common::Reg<atom::Ch1Somb_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(132usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMC Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_somc(&self) -> crate::common::Reg<atom::Ch1Somc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(132usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMI Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_somi(&self) -> crate::common::Reg<atom::Ch1Somi_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(132usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMP Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_somp(&self) -> crate::common::Reg<atom::Ch1Somp_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(132usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMS Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_soms(&self) -> crate::common::Reg<atom::Ch1Soms_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(132usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_sr0(&self) -> crate::common::Reg<atom::Ch1Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(136usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_sr1(&self) -> crate::common::Reg<atom::Ch1Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(140usize)) }
    }
    #[doc = "ATOM0 Channel 7 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_stat(&self) -> crate::common::Reg<atom::Ch1Stat_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(156usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_cm0(&self) -> crate::common::Reg<atom::Ch2Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(272usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_cm1(&self) -> crate::common::Reg<atom::Ch2Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(276usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_cn0(&self) -> crate::common::Reg<atom::Ch2Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(280usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_ctrl(&self) -> crate::common::Reg<atom::Ch2Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(260usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_irq_en(&self) -> crate::common::Reg<atom::Ch2IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(292usize)) }
    }
    #[doc = "ATOM0 Channel 7 Software Interrupt Generation Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_irq_forcint(
        &self,
    ) -> crate::common::Reg<atom::Ch2IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(296usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_irq_mode(
        &self,
    ) -> crate::common::Reg<atom::Ch2IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(300usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_irq_notify(
        &self,
    ) -> crate::common::Reg<atom::Ch2IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(288usize)) }
    }
    #[doc = "ATOM0 Channel 7 ARU read address Register\n resetvalue={Application Reset:0x1FE01FE}"]
    #[inline(always)]
    pub const fn ch2_rdaddr(&self) -> crate::common::Reg<atom::Ch2Rdaddr_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(256usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMB Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_somb(&self) -> crate::common::Reg<atom::Ch2Somb_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(260usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMC Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_somc(&self) -> crate::common::Reg<atom::Ch2Somc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(260usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMI Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_somi(&self) -> crate::common::Reg<atom::Ch2Somi_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(260usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMP Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_somp(&self) -> crate::common::Reg<atom::Ch2Somp_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(260usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMS Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_soms(&self) -> crate::common::Reg<atom::Ch2Soms_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(260usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_sr0(&self) -> crate::common::Reg<atom::Ch2Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(264usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_sr1(&self) -> crate::common::Reg<atom::Ch2Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(268usize)) }
    }
    #[doc = "ATOM0 Channel 7 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_stat(&self) -> crate::common::Reg<atom::Ch2Stat_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(284usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_cm0(&self) -> crate::common::Reg<atom::Ch3Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(400usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_cm1(&self) -> crate::common::Reg<atom::Ch3Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(404usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_cn0(&self) -> crate::common::Reg<atom::Ch3Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(408usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_ctrl(&self) -> crate::common::Reg<atom::Ch3Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(388usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_irq_en(&self) -> crate::common::Reg<atom::Ch3IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(420usize)) }
    }
    #[doc = "ATOM0 Channel 7 Software Interrupt Generation Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_irq_forcint(
        &self,
    ) -> crate::common::Reg<atom::Ch3IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(424usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_irq_mode(
        &self,
    ) -> crate::common::Reg<atom::Ch3IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(428usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_irq_notify(
        &self,
    ) -> crate::common::Reg<atom::Ch3IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(416usize)) }
    }
    #[doc = "ATOM0 Channel 7 ARU read address Register\n resetvalue={Application Reset:0x1FE01FE}"]
    #[inline(always)]
    pub const fn ch3_rdaddr(&self) -> crate::common::Reg<atom::Ch3Rdaddr_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(384usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMB Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_somb(&self) -> crate::common::Reg<atom::Ch3Somb_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(388usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMC Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_somc(&self) -> crate::common::Reg<atom::Ch3Somc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(388usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMI Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_somi(&self) -> crate::common::Reg<atom::Ch3Somi_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(388usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMP Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_somp(&self) -> crate::common::Reg<atom::Ch3Somp_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(388usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMS Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_soms(&self) -> crate::common::Reg<atom::Ch3Soms_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(388usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_sr0(&self) -> crate::common::Reg<atom::Ch3Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(392usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_sr1(&self) -> crate::common::Reg<atom::Ch3Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(396usize)) }
    }
    #[doc = "ATOM0 Channel 7 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_stat(&self) -> crate::common::Reg<atom::Ch3Stat_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(412usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_cm0(&self) -> crate::common::Reg<atom::Ch4Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(528usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_cm1(&self) -> crate::common::Reg<atom::Ch4Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(532usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_cn0(&self) -> crate::common::Reg<atom::Ch4Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(536usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_ctrl(&self) -> crate::common::Reg<atom::Ch4Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(516usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_irq_en(&self) -> crate::common::Reg<atom::Ch4IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(548usize)) }
    }
    #[doc = "ATOM0 Channel 7 Software Interrupt Generation Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_irq_forcint(
        &self,
    ) -> crate::common::Reg<atom::Ch4IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(552usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_irq_mode(
        &self,
    ) -> crate::common::Reg<atom::Ch4IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(556usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_irq_notify(
        &self,
    ) -> crate::common::Reg<atom::Ch4IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(544usize)) }
    }
    #[doc = "ATOM0 Channel 7 ARU read address Register\n resetvalue={Application Reset:0x1FE01FE}"]
    #[inline(always)]
    pub const fn ch4_rdaddr(&self) -> crate::common::Reg<atom::Ch4Rdaddr_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(512usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMB Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_somb(&self) -> crate::common::Reg<atom::Ch4Somb_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(516usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMC Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_somc(&self) -> crate::common::Reg<atom::Ch4Somc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(516usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMI Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_somi(&self) -> crate::common::Reg<atom::Ch4Somi_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(516usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMP Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_somp(&self) -> crate::common::Reg<atom::Ch4Somp_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(516usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMS Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_soms(&self) -> crate::common::Reg<atom::Ch4Soms_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(516usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_sr0(&self) -> crate::common::Reg<atom::Ch4Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(520usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_sr1(&self) -> crate::common::Reg<atom::Ch4Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(524usize)) }
    }
    #[doc = "ATOM0 Channel 7 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_stat(&self) -> crate::common::Reg<atom::Ch4Stat_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(540usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_cm0(&self) -> crate::common::Reg<atom::Ch5Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(656usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_cm1(&self) -> crate::common::Reg<atom::Ch5Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(660usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_cn0(&self) -> crate::common::Reg<atom::Ch5Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(664usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_ctrl(&self) -> crate::common::Reg<atom::Ch5Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(644usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_irq_en(&self) -> crate::common::Reg<atom::Ch5IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(676usize)) }
    }
    #[doc = "ATOM0 Channel 7 Software Interrupt Generation Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_irq_forcint(
        &self,
    ) -> crate::common::Reg<atom::Ch5IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(680usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_irq_mode(
        &self,
    ) -> crate::common::Reg<atom::Ch5IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(684usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_irq_notify(
        &self,
    ) -> crate::common::Reg<atom::Ch5IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(672usize)) }
    }
    #[doc = "ATOM0 Channel 7 ARU read address Register\n resetvalue={Application Reset:0x1FE01FE}"]
    #[inline(always)]
    pub const fn ch5_rdaddr(&self) -> crate::common::Reg<atom::Ch5Rdaddr_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(640usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMB Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_somb(&self) -> crate::common::Reg<atom::Ch5Somb_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(644usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMC Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_somc(&self) -> crate::common::Reg<atom::Ch5Somc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(644usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMI Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_somi(&self) -> crate::common::Reg<atom::Ch5Somi_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(644usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMP Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_somp(&self) -> crate::common::Reg<atom::Ch5Somp_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(644usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMS Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_soms(&self) -> crate::common::Reg<atom::Ch5Soms_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(644usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_sr0(&self) -> crate::common::Reg<atom::Ch5Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(648usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_sr1(&self) -> crate::common::Reg<atom::Ch5Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(652usize)) }
    }
    #[doc = "ATOM0 Channel 7 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_stat(&self) -> crate::common::Reg<atom::Ch5Stat_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(668usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_cm0(&self) -> crate::common::Reg<atom::Ch6Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(784usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_cm1(&self) -> crate::common::Reg<atom::Ch6Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(788usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_cn0(&self) -> crate::common::Reg<atom::Ch6Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(792usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_ctrl(&self) -> crate::common::Reg<atom::Ch6Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(772usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_irq_en(&self) -> crate::common::Reg<atom::Ch6IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(804usize)) }
    }
    #[doc = "ATOM0 Channel 7 Software Interrupt Generation Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_irq_forcint(
        &self,
    ) -> crate::common::Reg<atom::Ch6IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(808usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_irq_mode(
        &self,
    ) -> crate::common::Reg<atom::Ch6IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(812usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_irq_notify(
        &self,
    ) -> crate::common::Reg<atom::Ch6IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(800usize)) }
    }
    #[doc = "ATOM0 Channel 7 ARU read address Register\n resetvalue={Application Reset:0x1FE01FE}"]
    #[inline(always)]
    pub const fn ch6_rdaddr(&self) -> crate::common::Reg<atom::Ch6Rdaddr_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(768usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMB Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_somb(&self) -> crate::common::Reg<atom::Ch6Somb_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(772usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMC Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_somc(&self) -> crate::common::Reg<atom::Ch6Somc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(772usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMI Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_somi(&self) -> crate::common::Reg<atom::Ch6Somi_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(772usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMP Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_somp(&self) -> crate::common::Reg<atom::Ch6Somp_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(772usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMS Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_soms(&self) -> crate::common::Reg<atom::Ch6Soms_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(772usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_sr0(&self) -> crate::common::Reg<atom::Ch6Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(776usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_sr1(&self) -> crate::common::Reg<atom::Ch6Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(780usize)) }
    }
    #[doc = "ATOM0 Channel 7 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_stat(&self) -> crate::common::Reg<atom::Ch6Stat_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(796usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_cm0(&self) -> crate::common::Reg<atom::Ch7Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(912usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_cm1(&self) -> crate::common::Reg<atom::Ch7Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(916usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_cn0(&self) -> crate::common::Reg<atom::Ch7Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(920usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_ctrl(&self) -> crate::common::Reg<atom::Ch7Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(900usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_irq_en(&self) -> crate::common::Reg<atom::Ch7IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(932usize)) }
    }
    #[doc = "ATOM0 Channel 7 Software Interrupt Generation Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_irq_forcint(
        &self,
    ) -> crate::common::Reg<atom::Ch7IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(936usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_irq_mode(
        &self,
    ) -> crate::common::Reg<atom::Ch7IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(940usize)) }
    }
    #[doc = "ATOM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_irq_notify(
        &self,
    ) -> crate::common::Reg<atom::Ch7IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(928usize)) }
    }
    #[doc = "ATOM0 Channel 7 ARU read address Register\n resetvalue={Application Reset:0x1FE01FE}"]
    #[inline(always)]
    pub const fn ch7_rdaddr(&self) -> crate::common::Reg<atom::Ch7Rdaddr_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(896usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMB Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_somb(&self) -> crate::common::Reg<atom::Ch7Somb_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(900usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMC Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_somc(&self) -> crate::common::Reg<atom::Ch7Somc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(900usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMI Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_somi(&self) -> crate::common::Reg<atom::Ch7Somi_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(900usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMP Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_somp(&self) -> crate::common::Reg<atom::Ch7Somp_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(900usize)) }
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMS Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_soms(&self) -> crate::common::Reg<atom::Ch7Soms_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(900usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_sr0(&self) -> crate::common::Reg<atom::Ch7Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(904usize)) }
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_sr1(&self) -> crate::common::Reg<atom::Ch7Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(908usize)) }
    }
    #[doc = "ATOM0 Channel 7 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_stat(&self) -> crate::common::Reg<atom::Ch7Stat_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(924usize)) }
    }
}
pub mod atom {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Atom0AgcActTb_SPEC;
    impl crate::sealed::RegSpec for Atom0AgcActTb_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 AGC Action Time Base Register\n resetvalue={Application Reset:0x0}"]
    pub type Atom0AgcActTb = crate::RegValueT<Atom0AgcActTb_SPEC>;

    impl Atom0AgcActTb {
        #[doc = "Time base value. Specifies the signed compare value with selected signal TBU TS x          x 0..2. If selected TBU TS x  value is in the interval         ACT TB 007FFFFFh ACT TB   the event is in the past  and the trigger is        generated immediately. Otherwise  the event is in the future  and the        trigger is generated if selected TBU TS x  is equal to ACT TB."]
        #[inline(always)]
        pub fn act_tb(
            self,
        ) -> crate::common::RegisterField<
            0,
            0xffffff,
            1,
            0,
            u32,
            Atom0AgcActTb_SPEC,
            crate::common::RW,
        > {
            crate::common::RegisterField::<
                0,
                0xffffff,
                1,
                0,
                u32,
                Atom0AgcActTb_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Set trigger request. Note  This flag is reset automatically if the selected time base unit   TBU TS0 or TBU TS1 or TBU TS2  if        present  has reached the value ACT TB   and        the update of the register was triggered."]
        #[inline(always)]
        pub fn tb_trig(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Atom0AgcActTb_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<24,1,0,Atom0AgcActTb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection of time base used for comparison. Note   The bit combination 0b10 is only applicable if the TBU of the device contains three time base channels. Otherwise  this bit combination is also reserved. Please refer to GTM Architecture block diagram on page 3 to determine the number of channels for TBU of this device."]
        #[inline(always)]
        pub fn tbu_sel(
            self,
        ) -> crate::common::RegisterField<25, 0x3, 1, 0, u8, Atom0AgcActTb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<25,0x3,1,0,u8, Atom0AgcActTb_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Atom0AgcActTb {
        #[inline(always)]
        fn default() -> Atom0AgcActTb {
            <crate::RegValueT<Atom0AgcActTb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Atom0AgcEndisCtrl_SPEC;
    impl crate::sealed::RegSpec for Atom0AgcEndisCtrl_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 AGC Enable Disable Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Atom0AgcEndisCtrl = crate::RegValueT<Atom0AgcEndisCtrl_SPEC>;

    impl Atom0AgcEndisCtrl {
        #[doc = "ATOM channel 7 enable disable update value. If FREEZE 0 and an ATOM channel is disabled  the counter CN0 is stopped and the output register of SOU unit is set to the       inverse value of control bit SL. On an enable event  the counter CN0 starts counting from its current value. If FREEZE 1 and an ATOM channel is disabled  the counter CN0 is       stopped  SOMP  SOMS mode  and each comparison is stopped  SOMC  SOMB mode . On an enable       event  the counter CN0 starts counting from its current value or a comparison is restarted. Write of following double bit values is possible  Note  If the output is disabled  OUTEN x  0   the ATOM channel x output ATOM OUT x  is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl0(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Atom0AgcEndisCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                0,
                0x3,
                1,
                0,
                u8,
                Atom0AgcEndisCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "ATOM channel 7 enable disable update value. If FREEZE 0 and an ATOM channel is disabled  the counter CN0 is stopped and the output register of SOU unit is set to the       inverse value of control bit SL. On an enable event  the counter CN0 starts counting from its current value. If FREEZE 1 and an ATOM channel is disabled  the counter CN0 is       stopped  SOMP  SOMS mode  and each comparison is stopped  SOMC  SOMB mode . On an enable       event  the counter CN0 starts counting from its current value or a comparison is restarted. Write of following double bit values is possible  Note  If the output is disabled  OUTEN x  0   the ATOM channel x output ATOM OUT x  is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl1(
            self,
        ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, Atom0AgcEndisCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                2,
                0x3,
                1,
                0,
                u8,
                Atom0AgcEndisCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "ATOM channel 7 enable disable update value. If FREEZE 0 and an ATOM channel is disabled  the counter CN0 is stopped and the output register of SOU unit is set to the       inverse value of control bit SL. On an enable event  the counter CN0 starts counting from its current value. If FREEZE 1 and an ATOM channel is disabled  the counter CN0 is       stopped  SOMP  SOMS mode  and each comparison is stopped  SOMC  SOMB mode . On an enable       event  the counter CN0 starts counting from its current value or a comparison is restarted. Write of following double bit values is possible  Note  If the output is disabled  OUTEN x  0   the ATOM channel x output ATOM OUT x  is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl2(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Atom0AgcEndisCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                4,
                0x3,
                1,
                0,
                u8,
                Atom0AgcEndisCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "ATOM channel 7 enable disable update value. If FREEZE 0 and an ATOM channel is disabled  the counter CN0 is stopped and the output register of SOU unit is set to the       inverse value of control bit SL. On an enable event  the counter CN0 starts counting from its current value. If FREEZE 1 and an ATOM channel is disabled  the counter CN0 is       stopped  SOMP  SOMS mode  and each comparison is stopped  SOMC  SOMB mode . On an enable       event  the counter CN0 starts counting from its current value or a comparison is restarted. Write of following double bit values is possible  Note  If the output is disabled  OUTEN x  0   the ATOM channel x output ATOM OUT x  is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl3(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Atom0AgcEndisCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                6,
                0x3,
                1,
                0,
                u8,
                Atom0AgcEndisCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "ATOM channel 7 enable disable update value. If FREEZE 0 and an ATOM channel is disabled  the counter CN0 is stopped and the output register of SOU unit is set to the       inverse value of control bit SL. On an enable event  the counter CN0 starts counting from its current value. If FREEZE 1 and an ATOM channel is disabled  the counter CN0 is       stopped  SOMP  SOMS mode  and each comparison is stopped  SOMC  SOMB mode . On an enable       event  the counter CN0 starts counting from its current value or a comparison is restarted. Write of following double bit values is possible  Note  If the output is disabled  OUTEN x  0   the ATOM channel x output ATOM OUT x  is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl4(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Atom0AgcEndisCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                8,
                0x3,
                1,
                0,
                u8,
                Atom0AgcEndisCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "ATOM channel 7 enable disable update value. If FREEZE 0 and an ATOM channel is disabled  the counter CN0 is stopped and the output register of SOU unit is set to the       inverse value of control bit SL. On an enable event  the counter CN0 starts counting from its current value. If FREEZE 1 and an ATOM channel is disabled  the counter CN0 is       stopped  SOMP  SOMS mode  and each comparison is stopped  SOMC  SOMB mode . On an enable       event  the counter CN0 starts counting from its current value or a comparison is restarted. Write of following double bit values is possible  Note  If the output is disabled  OUTEN x  0   the ATOM channel x output ATOM OUT x  is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl5(
            self,
        ) -> crate::common::RegisterField<
            10,
            0x3,
            1,
            0,
            u8,
            Atom0AgcEndisCtrl_SPEC,
            crate::common::RW,
        > {
            crate::common::RegisterField::<
                10,
                0x3,
                1,
                0,
                u8,
                Atom0AgcEndisCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "ATOM channel 7 enable disable update value. If FREEZE 0 and an ATOM channel is disabled  the counter CN0 is stopped and the output register of SOU unit is set to the       inverse value of control bit SL. On an enable event  the counter CN0 starts counting from its current value. If FREEZE 1 and an ATOM channel is disabled  the counter CN0 is       stopped  SOMP  SOMS mode  and each comparison is stopped  SOMC  SOMB mode . On an enable       event  the counter CN0 starts counting from its current value or a comparison is restarted. Write of following double bit values is possible  Note  If the output is disabled  OUTEN x  0   the ATOM channel x output ATOM OUT x  is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl6(
            self,
        ) -> crate::common::RegisterField<
            12,
            0x3,
            1,
            0,
            u8,
            Atom0AgcEndisCtrl_SPEC,
            crate::common::RW,
        > {
            crate::common::RegisterField::<
                12,
                0x3,
                1,
                0,
                u8,
                Atom0AgcEndisCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "ATOM channel 7 enable disable update value. If FREEZE 0 and an ATOM channel is disabled  the counter CN0 is stopped and the output register of SOU unit is set to the       inverse value of control bit SL. On an enable event  the counter CN0 starts counting from its current value. If FREEZE 1 and an ATOM channel is disabled  the counter CN0 is       stopped  SOMP  SOMS mode  and each comparison is stopped  SOMC  SOMB mode . On an enable       event  the counter CN0 starts counting from its current value or a comparison is restarted. Write of following double bit values is possible  Note  If the output is disabled  OUTEN x  0   the ATOM channel x output ATOM OUT x  is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl7(
            self,
        ) -> crate::common::RegisterField<
            14,
            0x3,
            1,
            0,
            u8,
            Atom0AgcEndisCtrl_SPEC,
            crate::common::RW,
        > {
            crate::common::RegisterField::<
                14,
                0x3,
                1,
                0,
                u8,
                Atom0AgcEndisCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
    }
    impl core::default::Default for Atom0AgcEndisCtrl {
        #[inline(always)]
        fn default() -> Atom0AgcEndisCtrl {
            <crate::RegValueT<Atom0AgcEndisCtrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Atom0AgcEndisStat_SPEC;
    impl crate::sealed::RegSpec for Atom0AgcEndisStat_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 AGC Enable Disable Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Atom0AgcEndisStat = crate::RegValueT<Atom0AgcEndisStat_SPEC>;

    impl Atom0AgcEndisStat {
        #[doc = "ATOM channel 7 enable disable. If FREEZE 0 and an ATOM channel is disabled  the counter CN0 is       stopped and the output register of SOU unit is set to the inverse value of control bit SL. On       an enable event  the counter CN0 starts counting from its current value. If FREEZE 1 and an ATOM channel is disabled  the counter CN0 is       stopped  SOMP  SOMS mode  and each comparison is stopped  SOMC  SOMB mode . On an enable       event  the counter CN0 starts counting from its current value or a comparison is restarted."]
        #[inline(always)]
        pub fn endis_stat0(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Atom0AgcEndisStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                0,
                0x3,
                1,
                0,
                u8,
                Atom0AgcEndisStat_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "ATOM channel 7 enable disable. If FREEZE 0 and an ATOM channel is disabled  the counter CN0 is       stopped and the output register of SOU unit is set to the inverse value of control bit SL. On       an enable event  the counter CN0 starts counting from its current value. If FREEZE 1 and an ATOM channel is disabled  the counter CN0 is       stopped  SOMP  SOMS mode  and each comparison is stopped  SOMC  SOMB mode . On an enable       event  the counter CN0 starts counting from its current value or a comparison is restarted."]
        #[inline(always)]
        pub fn endis_stat1(
            self,
        ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, Atom0AgcEndisStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                2,
                0x3,
                1,
                0,
                u8,
                Atom0AgcEndisStat_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "ATOM channel 7 enable disable. If FREEZE 0 and an ATOM channel is disabled  the counter CN0 is       stopped and the output register of SOU unit is set to the inverse value of control bit SL. On       an enable event  the counter CN0 starts counting from its current value. If FREEZE 1 and an ATOM channel is disabled  the counter CN0 is       stopped  SOMP  SOMS mode  and each comparison is stopped  SOMC  SOMB mode . On an enable       event  the counter CN0 starts counting from its current value or a comparison is restarted."]
        #[inline(always)]
        pub fn endis_stat2(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Atom0AgcEndisStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                4,
                0x3,
                1,
                0,
                u8,
                Atom0AgcEndisStat_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "ATOM channel 7 enable disable. If FREEZE 0 and an ATOM channel is disabled  the counter CN0 is       stopped and the output register of SOU unit is set to the inverse value of control bit SL. On       an enable event  the counter CN0 starts counting from its current value. If FREEZE 1 and an ATOM channel is disabled  the counter CN0 is       stopped  SOMP  SOMS mode  and each comparison is stopped  SOMC  SOMB mode . On an enable       event  the counter CN0 starts counting from its current value or a comparison is restarted."]
        #[inline(always)]
        pub fn endis_stat3(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Atom0AgcEndisStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                6,
                0x3,
                1,
                0,
                u8,
                Atom0AgcEndisStat_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "ATOM channel 7 enable disable. If FREEZE 0 and an ATOM channel is disabled  the counter CN0 is       stopped and the output register of SOU unit is set to the inverse value of control bit SL. On       an enable event  the counter CN0 starts counting from its current value. If FREEZE 1 and an ATOM channel is disabled  the counter CN0 is       stopped  SOMP  SOMS mode  and each comparison is stopped  SOMC  SOMB mode . On an enable       event  the counter CN0 starts counting from its current value or a comparison is restarted."]
        #[inline(always)]
        pub fn endis_stat4(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Atom0AgcEndisStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                8,
                0x3,
                1,
                0,
                u8,
                Atom0AgcEndisStat_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "ATOM channel 7 enable disable. If FREEZE 0 and an ATOM channel is disabled  the counter CN0 is       stopped and the output register of SOU unit is set to the inverse value of control bit SL. On       an enable event  the counter CN0 starts counting from its current value. If FREEZE 1 and an ATOM channel is disabled  the counter CN0 is       stopped  SOMP  SOMS mode  and each comparison is stopped  SOMC  SOMB mode . On an enable       event  the counter CN0 starts counting from its current value or a comparison is restarted."]
        #[inline(always)]
        pub fn endis_stat5(
            self,
        ) -> crate::common::RegisterField<
            10,
            0x3,
            1,
            0,
            u8,
            Atom0AgcEndisStat_SPEC,
            crate::common::RW,
        > {
            crate::common::RegisterField::<
                10,
                0x3,
                1,
                0,
                u8,
                Atom0AgcEndisStat_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "ATOM channel 7 enable disable. If FREEZE 0 and an ATOM channel is disabled  the counter CN0 is       stopped and the output register of SOU unit is set to the inverse value of control bit SL. On       an enable event  the counter CN0 starts counting from its current value. If FREEZE 1 and an ATOM channel is disabled  the counter CN0 is       stopped  SOMP  SOMS mode  and each comparison is stopped  SOMC  SOMB mode . On an enable       event  the counter CN0 starts counting from its current value or a comparison is restarted."]
        #[inline(always)]
        pub fn endis_stat6(
            self,
        ) -> crate::common::RegisterField<
            12,
            0x3,
            1,
            0,
            u8,
            Atom0AgcEndisStat_SPEC,
            crate::common::RW,
        > {
            crate::common::RegisterField::<
                12,
                0x3,
                1,
                0,
                u8,
                Atom0AgcEndisStat_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "ATOM channel 7 enable disable. If FREEZE 0 and an ATOM channel is disabled  the counter CN0 is       stopped and the output register of SOU unit is set to the inverse value of control bit SL. On       an enable event  the counter CN0 starts counting from its current value. If FREEZE 1 and an ATOM channel is disabled  the counter CN0 is       stopped  SOMP  SOMS mode  and each comparison is stopped  SOMC  SOMB mode . On an enable       event  the counter CN0 starts counting from its current value or a comparison is restarted."]
        #[inline(always)]
        pub fn endis_stat7(
            self,
        ) -> crate::common::RegisterField<
            14,
            0x3,
            1,
            0,
            u8,
            Atom0AgcEndisStat_SPEC,
            crate::common::RW,
        > {
            crate::common::RegisterField::<
                14,
                0x3,
                1,
                0,
                u8,
                Atom0AgcEndisStat_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
    }
    impl core::default::Default for Atom0AgcEndisStat {
        #[inline(always)]
        fn default() -> Atom0AgcEndisStat {
            <crate::RegValueT<Atom0AgcEndisStat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Atom0AgcFupdCtrl_SPEC;
    impl crate::sealed::RegSpec for Atom0AgcFupdCtrl_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 AGC Force Update Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Atom0AgcFupdCtrl = crate::RegValueT<Atom0AgcFupdCtrl_SPEC>;

    impl Atom0AgcFupdCtrl {
        #[doc = "Force update of ATOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by HOST TRIG  ACT TB compare match  or internal trigger. Write   Read   Note  In SOMP mode  the force update request is stored and executed synchronized to the selected CMU CLK. In all other modes  the force update request is executed immediately. Note  In SOMP mode  in case of ECLK SRC 1 and CLK SRC SR   0b011 0b100 0b101 0b110 a force update leads to an immediate update of CM0  CM1 and CLK SRC."]
        #[inline(always)]
        pub fn fupd_ctrl0(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Atom0AgcFupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Atom0AgcFupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Force update of ATOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by HOST TRIG  ACT TB compare match  or internal trigger. Write   Read   Note  In SOMP mode  the force update request is stored and executed synchronized to the selected CMU CLK. In all other modes  the force update request is executed immediately. Note  In SOMP mode  in case of ECLK SRC 1 and CLK SRC SR   0b011 0b100 0b101 0b110 a force update leads to an immediate update of CM0  CM1 and CLK SRC."]
        #[inline(always)]
        pub fn fupd_ctrl1(
            self,
        ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, Atom0AgcFupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<2,0x3,1,0,u8, Atom0AgcFupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Force update of ATOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by HOST TRIG  ACT TB compare match  or internal trigger. Write   Read   Note  In SOMP mode  the force update request is stored and executed synchronized to the selected CMU CLK. In all other modes  the force update request is executed immediately. Note  In SOMP mode  in case of ECLK SRC 1 and CLK SRC SR   0b011 0b100 0b101 0b110 a force update leads to an immediate update of CM0  CM1 and CLK SRC."]
        #[inline(always)]
        pub fn fupd_ctrl2(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Atom0AgcFupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Atom0AgcFupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Force update of ATOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by HOST TRIG  ACT TB compare match  or internal trigger. Write   Read   Note  In SOMP mode  the force update request is stored and executed synchronized to the selected CMU CLK. In all other modes  the force update request is executed immediately. Note  In SOMP mode  in case of ECLK SRC 1 and CLK SRC SR   0b011 0b100 0b101 0b110 a force update leads to an immediate update of CM0  CM1 and CLK SRC."]
        #[inline(always)]
        pub fn fupd_ctrl3(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Atom0AgcFupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, Atom0AgcFupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Force update of ATOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by HOST TRIG  ACT TB compare match  or internal trigger. Write   Read   Note  In SOMP mode  the force update request is stored and executed synchronized to the selected CMU CLK. In all other modes  the force update request is executed immediately. Note  In SOMP mode  in case of ECLK SRC 1 and CLK SRC SR   0b011 0b100 0b101 0b110 a force update leads to an immediate update of CM0  CM1 and CLK SRC."]
        #[inline(always)]
        pub fn fupd_ctrl4(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Atom0AgcFupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, Atom0AgcFupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Force update of ATOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by HOST TRIG  ACT TB compare match  or internal trigger. Write   Read   Note  In SOMP mode  the force update request is stored and executed synchronized to the selected CMU CLK. In all other modes  the force update request is executed immediately. Note  In SOMP mode  in case of ECLK SRC 1 and CLK SRC SR   0b011 0b100 0b101 0b110 a force update leads to an immediate update of CM0  CM1 and CLK SRC."]
        #[inline(always)]
        pub fn fupd_ctrl5(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, Atom0AgcFupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                10,
                0x3,
                1,
                0,
                u8,
                Atom0AgcFupdCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Force update of ATOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by HOST TRIG  ACT TB compare match  or internal trigger. Write   Read   Note  In SOMP mode  the force update request is stored and executed synchronized to the selected CMU CLK. In all other modes  the force update request is executed immediately. Note  In SOMP mode  in case of ECLK SRC 1 and CLK SRC SR   0b011 0b100 0b101 0b110 a force update leads to an immediate update of CM0  CM1 and CLK SRC."]
        #[inline(always)]
        pub fn fupd_ctrl6(
            self,
        ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, Atom0AgcFupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                12,
                0x3,
                1,
                0,
                u8,
                Atom0AgcFupdCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Force update of ATOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by HOST TRIG  ACT TB compare match  or internal trigger. Write   Read   Note  In SOMP mode  the force update request is stored and executed synchronized to the selected CMU CLK. In all other modes  the force update request is executed immediately. Note  In SOMP mode  in case of ECLK SRC 1 and CLK SRC SR   0b011 0b100 0b101 0b110 a force update leads to an immediate update of CM0  CM1 and CLK SRC."]
        #[inline(always)]
        pub fn fupd_ctrl7(
            self,
        ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, Atom0AgcFupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                14,
                0x3,
                1,
                0,
                u8,
                Atom0AgcFupdCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch0(
            self,
        ) -> crate::common::RegisterField<16, 0x3, 1, 0, u8, Atom0AgcFupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                16,
                0x3,
                1,
                0,
                u8,
                Atom0AgcFupdCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch1(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Atom0AgcFupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                18,
                0x3,
                1,
                0,
                u8,
                Atom0AgcFupdCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch2(
            self,
        ) -> crate::common::RegisterField<20, 0x3, 1, 0, u8, Atom0AgcFupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                20,
                0x3,
                1,
                0,
                u8,
                Atom0AgcFupdCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch3(
            self,
        ) -> crate::common::RegisterField<22, 0x3, 1, 0, u8, Atom0AgcFupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                22,
                0x3,
                1,
                0,
                u8,
                Atom0AgcFupdCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch4(
            self,
        ) -> crate::common::RegisterField<24, 0x3, 1, 0, u8, Atom0AgcFupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                24,
                0x3,
                1,
                0,
                u8,
                Atom0AgcFupdCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch5(
            self,
        ) -> crate::common::RegisterField<26, 0x3, 1, 0, u8, Atom0AgcFupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                26,
                0x3,
                1,
                0,
                u8,
                Atom0AgcFupdCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch6(
            self,
        ) -> crate::common::RegisterField<28, 0x3, 1, 0, u8, Atom0AgcFupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                28,
                0x3,
                1,
                0,
                u8,
                Atom0AgcFupdCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch7(
            self,
        ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, Atom0AgcFupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                30,
                0x3,
                1,
                0,
                u8,
                Atom0AgcFupdCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
    }
    impl core::default::Default for Atom0AgcFupdCtrl {
        #[inline(always)]
        fn default() -> Atom0AgcFupdCtrl {
            <crate::RegValueT<Atom0AgcFupdCtrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Atom0AgcGlbCtrl_SPEC;
    impl crate::sealed::RegSpec for Atom0AgcGlbCtrl_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 AGC Global Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Atom0AgcGlbCtrl = crate::RegValueT<Atom0AgcGlbCtrl_SPEC>;

    impl Atom0AgcGlbCtrl {
        #[doc = "Trigger request signal  see AGC  to update the register ENDIS STAT and OUTEN STAT. Note  this flag is reset automatically after triggering the update"]
        #[inline(always)]
        pub fn host_trig(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Atom0AgcGlbCtrl_SPEC, crate::common::W>
        {
            crate::common::RegisterFieldBool::<0,1,0,Atom0AgcGlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. Note   This bit is cleared automatically after write by CPU. The channel registers are set to their reset values and channel operation is stopped immediately. The output register of SOU unit is reset to inverse reset value of SL bit."]
        #[inline(always)]
        pub fn rst_ch0(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Atom0AgcGlbCtrl_SPEC, crate::common::W>
        {
            crate::common::RegisterFieldBool::<8,1,0,Atom0AgcGlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. Note   This bit is cleared automatically after write by CPU. The channel registers are set to their reset values and channel operation is stopped immediately. The output register of SOU unit is reset to inverse reset value of SL bit."]
        #[inline(always)]
        pub fn rst_ch1(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Atom0AgcGlbCtrl_SPEC, crate::common::W>
        {
            crate::common::RegisterFieldBool::<9,1,0,Atom0AgcGlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. Note   This bit is cleared automatically after write by CPU. The channel registers are set to their reset values and channel operation is stopped immediately. The output register of SOU unit is reset to inverse reset value of SL bit."]
        #[inline(always)]
        pub fn rst_ch2(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Atom0AgcGlbCtrl_SPEC, crate::common::W>
        {
            crate::common::RegisterFieldBool::<10,1,0,Atom0AgcGlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. Note   This bit is cleared automatically after write by CPU. The channel registers are set to their reset values and channel operation is stopped immediately. The output register of SOU unit is reset to inverse reset value of SL bit."]
        #[inline(always)]
        pub fn rst_ch3(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Atom0AgcGlbCtrl_SPEC, crate::common::W>
        {
            crate::common::RegisterFieldBool::<11,1,0,Atom0AgcGlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. Note   This bit is cleared automatically after write by CPU. The channel registers are set to their reset values and channel operation is stopped immediately. The output register of SOU unit is reset to inverse reset value of SL bit."]
        #[inline(always)]
        pub fn rst_ch4(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, Atom0AgcGlbCtrl_SPEC, crate::common::W>
        {
            crate::common::RegisterFieldBool::<12,1,0,Atom0AgcGlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. Note   This bit is cleared automatically after write by CPU. The channel registers are set to their reset values and channel operation is stopped immediately. The output register of SOU unit is reset to inverse reset value of SL bit."]
        #[inline(always)]
        pub fn rst_ch5(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, Atom0AgcGlbCtrl_SPEC, crate::common::W>
        {
            crate::common::RegisterFieldBool::<13,1,0,Atom0AgcGlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. Note   This bit is cleared automatically after write by CPU. The channel registers are set to their reset values and channel operation is stopped immediately. The output register of SOU unit is reset to inverse reset value of SL bit."]
        #[inline(always)]
        pub fn rst_ch6(
            self,
        ) -> crate::common::RegisterFieldBool<14, 1, 0, Atom0AgcGlbCtrl_SPEC, crate::common::W>
        {
            crate::common::RegisterFieldBool::<14,1,0,Atom0AgcGlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. Note   This bit is cleared automatically after write by CPU. The channel registers are set to their reset values and channel operation is stopped immediately. The output register of SOU unit is reset to inverse reset value of SL bit."]
        #[inline(always)]
        pub fn rst_ch7(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Atom0AgcGlbCtrl_SPEC, crate::common::W>
        {
            crate::common::RegisterFieldBool::<15,1,0,Atom0AgcGlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "ATOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl0(
            self,
        ) -> crate::common::RegisterField<16, 0x3, 1, 0, u8, Atom0AgcGlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x3,1,0,u8, Atom0AgcGlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl1(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Atom0AgcGlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Atom0AgcGlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl2(
            self,
        ) -> crate::common::RegisterField<20, 0x3, 1, 0, u8, Atom0AgcGlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<20,0x3,1,0,u8, Atom0AgcGlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl3(
            self,
        ) -> crate::common::RegisterField<22, 0x3, 1, 0, u8, Atom0AgcGlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<22,0x3,1,0,u8, Atom0AgcGlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl4(
            self,
        ) -> crate::common::RegisterField<24, 0x3, 1, 0, u8, Atom0AgcGlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x3,1,0,u8, Atom0AgcGlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl5(
            self,
        ) -> crate::common::RegisterField<26, 0x3, 1, 0, u8, Atom0AgcGlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<26,0x3,1,0,u8, Atom0AgcGlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl6(
            self,
        ) -> crate::common::RegisterField<28, 0x3, 1, 0, u8, Atom0AgcGlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<28,0x3,1,0,u8, Atom0AgcGlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl7(
            self,
        ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, Atom0AgcGlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<30,0x3,1,0,u8, Atom0AgcGlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Atom0AgcGlbCtrl {
        #[inline(always)]
        fn default() -> Atom0AgcGlbCtrl {
            <crate::RegValueT<Atom0AgcGlbCtrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Atom0AgcIntTrig_SPEC;
    impl crate::sealed::RegSpec for Atom0AgcIntTrig_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 AGC Internal Trigger Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Atom0AgcIntTrig = crate::RegValueT<Atom0AgcIntTrig_SPEC>;

    impl Atom0AgcIntTrig {
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig0(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Atom0AgcIntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Atom0AgcIntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig1(
            self,
        ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, Atom0AgcIntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<2,0x3,1,0,u8, Atom0AgcIntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig2(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Atom0AgcIntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Atom0AgcIntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig3(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Atom0AgcIntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, Atom0AgcIntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig4(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Atom0AgcIntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, Atom0AgcIntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig5(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, Atom0AgcIntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, Atom0AgcIntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig6(
            self,
        ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, Atom0AgcIntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x3,1,0,u8, Atom0AgcIntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig7(
            self,
        ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, Atom0AgcIntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<14,0x3,1,0,u8, Atom0AgcIntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Atom0AgcIntTrig {
        #[inline(always)]
        fn default() -> Atom0AgcIntTrig {
            <crate::RegValueT<Atom0AgcIntTrig_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Atom0AgcOutenCtrl_SPEC;
    impl crate::sealed::RegSpec for Atom0AgcOutenCtrl_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 AGC Output Enable Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Atom0AgcOutenCtrl = crate::RegValueT<Atom0AgcOutenCtrl_SPEC>;

    impl Atom0AgcOutenCtrl {
        #[doc = "Output ATOM OUT7 enable disable update value. Write of following double bit values is possible  Note   If the channel is disabled  ENDIS 0  0  or the output is disabled  OUTEN 0  0   the TOM channel 0 output ATOM OUT 0  is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl0(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Atom0AgcOutenCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                0,
                0x3,
                1,
                0,
                u8,
                Atom0AgcOutenCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Output ATOM OUT7 enable disable update value. Write of following double bit values is possible  Note   If the channel is disabled  ENDIS 0  0  or the output is disabled  OUTEN 0  0   the TOM channel 0 output ATOM OUT 0  is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl1(
            self,
        ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, Atom0AgcOutenCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                2,
                0x3,
                1,
                0,
                u8,
                Atom0AgcOutenCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Output ATOM OUT7 enable disable update value. Write of following double bit values is possible  Note   If the channel is disabled  ENDIS 0  0  or the output is disabled  OUTEN 0  0   the TOM channel 0 output ATOM OUT 0  is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl2(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Atom0AgcOutenCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                4,
                0x3,
                1,
                0,
                u8,
                Atom0AgcOutenCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Output ATOM OUT7 enable disable update value. Write of following double bit values is possible  Note   If the channel is disabled  ENDIS 0  0  or the output is disabled  OUTEN 0  0   the TOM channel 0 output ATOM OUT 0  is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl3(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Atom0AgcOutenCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                6,
                0x3,
                1,
                0,
                u8,
                Atom0AgcOutenCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Output ATOM OUT7 enable disable update value. Write of following double bit values is possible  Note   If the channel is disabled  ENDIS 0  0  or the output is disabled  OUTEN 0  0   the TOM channel 0 output ATOM OUT 0  is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl4(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Atom0AgcOutenCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                8,
                0x3,
                1,
                0,
                u8,
                Atom0AgcOutenCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Output ATOM OUT7 enable disable update value. Write of following double bit values is possible  Note   If the channel is disabled  ENDIS 0  0  or the output is disabled  OUTEN 0  0   the TOM channel 0 output ATOM OUT 0  is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl5(
            self,
        ) -> crate::common::RegisterField<
            10,
            0x3,
            1,
            0,
            u8,
            Atom0AgcOutenCtrl_SPEC,
            crate::common::RW,
        > {
            crate::common::RegisterField::<
                10,
                0x3,
                1,
                0,
                u8,
                Atom0AgcOutenCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Output ATOM OUT7 enable disable update value. Write of following double bit values is possible  Note   If the channel is disabled  ENDIS 0  0  or the output is disabled  OUTEN 0  0   the TOM channel 0 output ATOM OUT 0  is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl6(
            self,
        ) -> crate::common::RegisterField<
            12,
            0x3,
            1,
            0,
            u8,
            Atom0AgcOutenCtrl_SPEC,
            crate::common::RW,
        > {
            crate::common::RegisterField::<
                12,
                0x3,
                1,
                0,
                u8,
                Atom0AgcOutenCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Output ATOM OUT7 enable disable update value. Write of following double bit values is possible  Note   If the channel is disabled  ENDIS 0  0  or the output is disabled  OUTEN 0  0   the TOM channel 0 output ATOM OUT 0  is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl7(
            self,
        ) -> crate::common::RegisterField<
            14,
            0x3,
            1,
            0,
            u8,
            Atom0AgcOutenCtrl_SPEC,
            crate::common::RW,
        > {
            crate::common::RegisterField::<
                14,
                0x3,
                1,
                0,
                u8,
                Atom0AgcOutenCtrl_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
    }
    impl core::default::Default for Atom0AgcOutenCtrl {
        #[inline(always)]
        fn default() -> Atom0AgcOutenCtrl {
            <crate::RegValueT<Atom0AgcOutenCtrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Atom0AgcOutenStat_SPEC;
    impl crate::sealed::RegSpec for Atom0AgcOutenStat_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 AGC Output Enable Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Atom0AgcOutenStat = crate::RegValueT<Atom0AgcOutenStat_SPEC>;

    impl Atom0AgcOutenStat {
        #[doc = "Control status of output ATOM OUT7. Write   Read"]
        #[inline(always)]
        pub fn outen_stat0(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Atom0AgcOutenStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                0,
                0x3,
                1,
                0,
                u8,
                Atom0AgcOutenStat_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Control status of output ATOM OUT7. Write   Read"]
        #[inline(always)]
        pub fn outen_stat1(
            self,
        ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, Atom0AgcOutenStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                2,
                0x3,
                1,
                0,
                u8,
                Atom0AgcOutenStat_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Control status of output ATOM OUT7. Write   Read"]
        #[inline(always)]
        pub fn outen_stat2(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Atom0AgcOutenStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                4,
                0x3,
                1,
                0,
                u8,
                Atom0AgcOutenStat_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Control status of output ATOM OUT7. Write   Read"]
        #[inline(always)]
        pub fn outen_stat3(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Atom0AgcOutenStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                6,
                0x3,
                1,
                0,
                u8,
                Atom0AgcOutenStat_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Control status of output ATOM OUT7. Write   Read"]
        #[inline(always)]
        pub fn outen_stat4(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Atom0AgcOutenStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                8,
                0x3,
                1,
                0,
                u8,
                Atom0AgcOutenStat_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Control status of output ATOM OUT7. Write   Read"]
        #[inline(always)]
        pub fn outen_stat5(
            self,
        ) -> crate::common::RegisterField<
            10,
            0x3,
            1,
            0,
            u8,
            Atom0AgcOutenStat_SPEC,
            crate::common::RW,
        > {
            crate::common::RegisterField::<
                10,
                0x3,
                1,
                0,
                u8,
                Atom0AgcOutenStat_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Control status of output ATOM OUT7. Write   Read"]
        #[inline(always)]
        pub fn outen_stat6(
            self,
        ) -> crate::common::RegisterField<
            12,
            0x3,
            1,
            0,
            u8,
            Atom0AgcOutenStat_SPEC,
            crate::common::RW,
        > {
            crate::common::RegisterField::<
                12,
                0x3,
                1,
                0,
                u8,
                Atom0AgcOutenStat_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
        #[doc = "Control status of output ATOM OUT7. Write   Read"]
        #[inline(always)]
        pub fn outen_stat7(
            self,
        ) -> crate::common::RegisterField<
            14,
            0x3,
            1,
            0,
            u8,
            Atom0AgcOutenStat_SPEC,
            crate::common::RW,
        > {
            crate::common::RegisterField::<
                14,
                0x3,
                1,
                0,
                u8,
                Atom0AgcOutenStat_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
    }
    impl core::default::Default for Atom0AgcOutenStat {
        #[inline(always)]
        fn default() -> Atom0AgcOutenStat {
            <crate::RegValueT<Atom0AgcOutenStat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch0Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Cm0 = crate::RegValueT<Ch0Cm0_SPEC>;

    impl Ch0Cm0 {
        #[doc = "ATOM CCU0 compare register"]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch0Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch0Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Cm0 {
        #[inline(always)]
        fn default() -> Ch0Cm0 {
            <crate::RegValueT<Ch0Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch0Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Cm1 = crate::RegValueT<Ch0Cm1_SPEC>;

    impl Ch0Cm1 {
        #[doc = "ATOM CCU1 compare register"]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch0Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch0Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Cm1 {
        #[inline(always)]
        fn default() -> Ch0Cm1 {
            <crate::RegValueT<Ch0Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch0Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Cn0 = crate::RegValueT<Ch0Cn0_SPEC>;

    impl Ch0Cn0 {
        #[doc = "ATOM CCU0 counter register"]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch0Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch0Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Cn0 {
        #[inline(always)]
        fn default() -> Ch0Cn0 {
            <crate::RegValueT<Ch0Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch0Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch0Ctrl = crate::RegValueT<Ch0Ctrl_SPEC>;

    impl Ch0Ctrl {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch0Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. Note   This bit is only applicable in SOMC mode."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM Mode control bits. These bits have different meaning in the different ATOM channel modes.        Please refer to the mode description sections. SOMI   CROSSREFERENCE and CROSSREFERENCE for register description. SOMC   CROSSREFERENCE and CROSSREFERENCE for register description. SOMP   CROSSREFERENCE and CROSSREFERENCE for register description. SOMS   CROSSREFERENCE and CROSSREFERENCE for register description. SOMB   CROSSREFERENCE and CROSSREFERENCE for register description."]
        #[inline(always)]
        pub fn acb(
            self,
        ) -> crate::common::RegisterField<4, 0x1f, 1, 0, u8, Ch0Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x1f,1,0,u8, Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. Note   This bit is only applicable in SOMC mode."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended update mode. If EUPM 1  a write access to CM0 or CM1 never causes an AEI write          status 10 . This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level. Reset value depends on the hardware configuration chosen by silicon          vendor. If the output is disabled  the output ATOM OUT x  is set to inverse          SL  independent of the ATOM channel mode. If FREEZE 0  following notes are valid  In SOMP  SOMI  SOMS mode  if the channel is disabled  the internal        register SOUR inside ATOM sub unit SOU is set to inverse value of SL. By        enabling the channel  the register SOUR is not changed. Thus  if the        output is enabled afterwards  the output ATOM OUT x  is the inverse        value of SL. In SOMC mode  if the channel is disabled  the internal register SOUR        inside ATOM sub unit SOU is set to value of SL. By enabling the channel         the register SOUR is not changed. Thus  if the output is enabled and the        channel is disabled  the output ATOM OUT x  is the value of SL. If FREEZE 1  the following notes are valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Actual CMU clock source  SOMS   shadow register for CMU clock source  SOMP . If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done           either by an end of a period or a forced update. After  channel  reset  the selected CLK SRC value is the SYS CLK           input of Global Clock Divider . To use in SOMP mode one of the          CMU CLKx  it is recommended to perform a forced update of CLK SRC with          the value of CLK SRC SR value before with enabling the channel. In case of ECLK SRC 1 and CLK SRC SR   011   100   101   110            a force update leads to an immediate update of CM0  CM1 and CLK SRC."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch0Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. Note  This bit is only applicable in SOMP and SOMS mode. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU Write request bit for late compare register update. Note  The CPU can disable subsequent ARU read requests by the channel and can update the shadow registers with new compare values  while the compare units operate on old compare values received by former ARU accesses  if occurred. Note  On a compare match event  the WR REQ bit will be reset by hardware. Note  At the point of the force update  only the shadow registers SR0 and SR1 are transferred into the CM0  CM1 registers. The output action is still defined by the ACBI bit field described by the ARU together with the old compare values for CM0 CM1. Note   This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode. Note  This mode is only applicable in SOMP mode."]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch0Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. If RST CCU0 1 and UPEN CTRLx 1 are set  TRIG  x 1  or          TIM EXT CAPTURE x  triggers also the update of work register  CM0  CM1          and CLK SRC . This bit is only applicable in SOMP mode. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Serve last ARU communication strategy. This bit is only applicable in SOMC mode. Please note  that setting of this bit has only effect  when ACBI 4 2           is configured for serve last compare strategy   100   101   or 110  . When this bit is not set  the captured time stamps in the shadow          registers SRx are only provided after the CCU1 match occurred. The          ACBO 4 3  bits always return 10 in          that case. By setting this bit  the ATOM channel also provides the captured time          stamps after the CCU0 match event to the ARU. The ACBO 4 3  bits are          set to 01 in that case. After the CCU1          match event  the time stamps are captured again in the SRx registers          and provided to the ARU. The ACBO 4 3  bits are set to 10 .          When the data in the shadow registers after the CCU0 match was not          consumed by an ARU destination and the CCU1 match occurs  the data in          the shadow registers is overwritten by the new captured time stamps.          The ATOM channel does not request new data from the ARU when the CCU0          match values are read from an ARU destination."]
        #[inline(always)]
        pub fn sla(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. Note   This bit is only applicable in SOMP and SOMS modes."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode. Note  This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. Note   This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SOMB mode"]
        #[inline(always)]
        pub fn somb(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE. Note  if channel is disabled and ouptut is enabled  in SOMP mode with UDMODE  0b00 the output is dependng directly on SL bit  independent on FREEZE mode."]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Ctrl {
        #[inline(always)]
        fn default() -> Ch0Ctrl {
            <crate::RegValueT<Ch0Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch0IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0IrqEn = crate::RegValueT<Ch0IrqEn_SPEC>;

    impl Ch0IrqEn {
        #[doc = "ATOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch0IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch0IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM CCU1TC IRQ interrupt enable. See bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch0IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch0IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0IrqEn {
        #[inline(always)]
        fn default() -> Ch0IrqEn {
            <crate::RegValueT<Ch0IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch0IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Software Interrupt Generation Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0IrqForcint = crate::RegValueT<Ch0IrqForcint_SPEC>;

    impl Ch0IrqForcint {
        #[doc = "Trigger ATOM CCU0TC IRQ interrupt by software. Note  This bit is cleared automatically after write. Note  This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch0IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch0IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger ATOM CCU1TC IRQ interrupt by software. Note  This bit is cleared automatically after write. Note  This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch0IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch0IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0IrqForcint {
        #[inline(always)]
        fn default() -> Ch0IrqForcint {
            <crate::RegValueT<Ch0IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch0IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0IrqMode = crate::RegValueT<Ch0IrqMode_SPEC>;

    impl Ch0IrqMode {
        #[doc = "IRQ mode selection. Note  The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch0IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch0IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0IrqMode {
        #[inline(always)]
        fn default() -> Ch0IrqMode {
            <crate::RegValueT<Ch0IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch0IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0IrqNotify = crate::RegValueT<Ch0IrqNotify_SPEC>;

    impl Ch0IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch0IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch0IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1TC  CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec. Note  If bit SR0 TRIG is set to 1  only valid in SOMP mode   this        interrupt notify flag is set in case of SR0 is equal to CN0 and not set        in case of CM1  gt    lt   CN0."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch0IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch0IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0IrqNotify {
        #[inline(always)]
        fn default() -> Ch0IrqNotify {
            <crate::RegValueT<Ch0IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Rdaddr_SPEC;
    impl crate::sealed::RegSpec for Ch0Rdaddr_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 ARU read address Register\n resetvalue={Application Reset:0x1FE01FE}"]
    pub type Ch0Rdaddr = crate::RegValueT<Ch0Rdaddr_SPEC>;

    impl Ch0Rdaddr {
        #[doc = "ARU Read address 0. Note  This read address is used by the ATOM channel to receive data from ARU immediately after the channel and ARU access is enabled  see ATOM i  CH x  CTRL register for details . Note  This bit field is only writable if channel is disabled."]
        #[inline(always)]
        pub fn rdaddr0(
            self,
        ) -> crate::common::RegisterField<0, 0x1ff, 1, 0, u16, Ch0Rdaddr_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x1ff,1,0,u16, Ch0Rdaddr_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Read address 1. Note  The ATOM channel switches to this read address  when requested in the ARU control bits 52 to 48 with the pattern  111   . The channel switches back to the RDADDR0 after one ARU data package was received on RDADDR1 and the compare match event is occurred. Note  This read address is only applicable in SOMC mode. Note  This bit field is only writable if channel is disabled."]
        #[inline(always)]
        pub fn rdaddr1(
            self,
        ) -> crate::common::RegisterField<16, 0x1ff, 1, 0, u16, Ch0Rdaddr_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x1ff,1,0,u16, Ch0Rdaddr_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Rdaddr {
        #[inline(always)]
        fn default() -> Ch0Rdaddr {
            <crate::RegValueT<Ch0Rdaddr_SPEC> as RegisterValue<_>>::new(33423870)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Somb_SPEC;
    impl crate::sealed::RegSpec for Ch0Somb_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMB Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch0Somb = crate::RegValueT<Ch0Somb_SPEC>;

    impl Ch0Somb {
        #[doc = "ATOM channel mode select. Not used in ATOM SOMB mode."]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch0Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch0Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. This bit is only applicable if three time bases are present in the GTM.        Otherwise  this bit is reserved."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch0Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch0Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch0Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch0Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control bits. Note  These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_1_0(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch0Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch0Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM SOMB compare strategy. These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_4_3_2(
            self,
        ) -> crate::common::RegisterField<6, 0x7, 1, 0, u8, Ch0Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x7,1,0,u8, Ch0Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. The compare unit CCU0 or CCU1 that compares against TBU TS0  depending        on CCUx control mode defined by ACB CM 4 2   always performs a        greater equal comparison  independent of the CMP CTRL bit."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch0Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch0Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended update mode. If EUPM 1 and after a CCU0 compare match  if ARU EN 0  written CM0 value not stored. if ARU EN 1  ARU read request is continued and CM1 is updated until CCU1        compare match. Received CM0 is not stored. This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch0Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch0Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel enable. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL. If FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to        value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch0Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch0Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU Write request bit for late compare register update. The CPU can disable subsequent ARU read requests by the channel and can        update the shadow registers with new compare values  while the compare        units operate on old compare values received by former ARU accesses  if        occurred. On a compare match event  the WR REQ bit will be reset by hardware. At the point of the force update  only the shadow registers SR0 and SR1        are transferred into the CM0  CM1 registers. The output action is still        defined by the ACBI bit field described by the ARU together with the old        compare values for CM0 CM1."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch0Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch0Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch0Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch0Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch0Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch0Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode"]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch0Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch0Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SOMB  SOMB mode"]
        #[inline(always)]
        pub fn somb(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch0Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch0Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch0Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch0Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Somb {
        #[inline(always)]
        fn default() -> Ch0Somb {
            <crate::RegValueT<Ch0Somb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Somc_SPEC;
    impl crate::sealed::RegSpec for Ch0Somc_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMC Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch0Somc = crate::RegValueT<Ch0Somc_SPEC>;

    impl Ch0Somc {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch0Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch0Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. This bit is only applicable if three time bases are present in the GTM.        Otherwise  this bit is reserved."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch0Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch0Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch0Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch0Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control bits. These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_1_0(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch0Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch0Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM control bits ACB 4   ACB 3   ACB 2 . Independent of ARU EN  a writing of 0b111 cancels any pending CCU0 or        CCU1 compare. Note  These bits are defining the compare strategy only if        ARU EN   0."]
        #[inline(always)]
        pub fn acb_4_3_2(
            self,
        ) -> crate::common::RegisterField<6, 0x7, 1, 0, u8, Ch0Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x7,1,0,u8, Ch0Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. The compare unit CCU0 or CCU1 that compares against TBU TS0  depending        on CCUx control mode defined by ACBI 4 2  or ACB42  always performs a        greater equal comparison  independent on CMP CTRL bit."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch0Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch0Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended Update Mode. If EUPM 1 and after a CCU0 compare match  If ARU EN 0  written CM0 value not stored. If ARU EN 1  ARU read request is continued and CM1 is updated until CCU1        compare match. Received CM0 values are not stored. This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch0Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch0Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel enable. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL. If FREEZE 0  following note is valid  If the channel is disabled  the output register of SOU unit is set to        value of SL. If FREEZE 1  following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch0Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch0Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU write request bit. The CPU can disable subsequent ARU read requests by the channel and can        update the shadow registers with new compare values  while the compare        units operate on old compare values received by former ARU accesses  if        occurred. On a compare match event  the WR REQ bit will be reset by hardware. At the point of the force update  only the shadow registers SR0 and SR1        are transferred into the CM0  CM1 registers. The output action is still        defined by the ACBI bit field described by the ARU together with the old        compare values for CM0 CM1."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch0Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch0Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch0Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch0Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TRIGOUT  Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch0Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch0Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Serve last ARU communication strategy. Please note  that setting of this bit has only effect  when ACBI 4 2  is        configured for serve last compare strategy   quot 100 quot    quot 101 quot   or  quot 110 quot  . When this bit is not set  the captured time stamps in the shadow        registers SRx are only provided after the CCU1 match occurred. The        ACBO 4 3  bits always return  quot 10 quot  in that case. By setting this bit  the ATOM channel also provides the captured time        stamps after the CCU0 match event to the ARU. The ACBO 4 3  bits are set        to   8220 01  8221  in that case. After the CCU1 match event  the time stamps are        captured again in the SRx registers and provided to the ARU. The        ACBO 4 3  bits are set to   8220 10  8221 . When the data in the shadow registers        after the CCU0 match was not consumed by an ARU destination and the CCU1        match occurs  the data in the shadow registers is overwritten by the new        captured time stamps. The ATOM channel does not request new data from        the ARU when the CCU0 match values are read from an ARU destination."]
        #[inline(always)]
        pub fn sla(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch0Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch0Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode"]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch0Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch0Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch0Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch0Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Somc {
        #[inline(always)]
        fn default() -> Ch0Somc {
            <crate::RegValueT<Ch0Somc_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Somi_SPEC;
    impl crate::sealed::RegSpec for Ch0Somi_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMI Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch0Somi = crate::RegValueT<Ch0Somi_SPEC>;

    impl Ch0Somi {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch0Somi_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch0Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch0Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch0Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACB bit 0 . Note  Bosch name ACB 0 ."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch0Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch0Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel is enabled. Note   Reset value depends on the hardware configuration chosen by silicon vendor. Note  If the output is disabled  the output ATOM OUT x  is set to inverse value of SL. If FREEZE 0  following note is valid   If the channel is disabled  the output register of SOU unit is set to inverse value of SL. If FREEZE 1  following note is valid   If the channel is disabled  the output register of SOU unit is not changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch0Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch0Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch0Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch0Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Somi {
        #[inline(always)]
        fn default() -> Ch0Somi {
            <crate::RegValueT<Ch0Somi_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Somp_SPEC;
    impl crate::sealed::RegSpec for Ch0Somp_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMP Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch0Somp = crate::RegValueT<Ch0Somp_SPEC>;

    impl Ch0Somp {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch0Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch0Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch0Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch0Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU data select for SOMP. This bit field is only relevant in SOMP mode to select the ARU data        source."]
        #[inline(always)]
        pub fn adl(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch0Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch0Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. This bit enables the PCM mode. It is device specific  in which channel the PCM mode is available.        Please refer to device specific CROSSREFERENCE for this information."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch0Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,Ch0Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SR0 is used to generate a trigger on output ATOM i  CH x  OUT T if equal to CN0. This bit is only relevant in SOMP mode. This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch0Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch0Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for pulse of PWM. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to        inverse value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch0Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch0Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shadow register for CMU clock source register CLK SRC. If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if        the CMU CLK source for PWM generation should be changed during        operation  the old CMU CLK has to operate until the update of the ATOM        channels internal CLK SRC register by the CLK SRC SR content is done        either by an end of a period or a FORCE UPDATE. After  channel  reset  the selected CLK SRC value is the SYS CLK  input        of Global Clock Divider . To use in SOMP mode one of the CMU CLKx  it is        recommended to perform a forced update of CLK SRC with the value of        CLK SRC SR value before with enabling the channel."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch0Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch0Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch0Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch0Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch0Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch0Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode. This mode is only applicable in SOMP mode."]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch0Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch0Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. If RST CCU0 1 and UPEN CTRLx 1 are set  TRIG  x 1  or TIM  EXT CAPTURE x  triggers        also the update of work register  CM0  CM1 and CLK SRC ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch0Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch0Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch0Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch0Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch0Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch0Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch0Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch0Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch0Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch0Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode"]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch0Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch0Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch0Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch0Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch0Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch0Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Somp {
        #[inline(always)]
        fn default() -> Ch0Somp {
            <crate::RegValueT<Ch0Somp_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Soms_SPEC;
    impl crate::sealed::RegSpec for Ch0Soms_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMS Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch0Soms = crate::RegValueT<Ch0Soms_SPEC>;

    impl Ch0Soms {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch0Soms_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch0Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch0Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch0Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shift direction for CM1 register. The data that has to be shifted out has to be aligned inside the CM1        register according to the defined shift direction. This bit is only applicable if ARU EN   0. If the direction  ACB0  is changed  the output ATOM OUT x  switches        immediately to the other  first  bit of CM1  bit 0 if ACB0   0  bit 23        if ACB0  160    160 1 ."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch0Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch0Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Double Shift Output. Note  If DSO 1  only shift right is possible."]
        #[inline(always)]
        pub fn dso(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch0Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch0Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines signal level when channel and output is disabling. Reset value depends on the hardware configuration chosen by silicon          vendor. If the output is enabled  the output ATOM OUT x  is set to bit 0 or 23          of CM1 register. If the output is disabled  the output ATOM OUT x  is set to inverse          value of SL. An enable or disable of the channel x has no effect on ATOM OUT x . The inverse value of SL is shifted into the CM1 register. If FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to          inverse value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not          changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch0Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch0Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shift frequency select for channel. If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if        the CMU CLK source for PWM generation should be changed during        operation  the old CMU CLK has to operate until the update of the ATOM        channels internal CLK SRC register by the CLK SRC SR content is done        either by an end of a period or a FORCE UPDATE. After  channel  reset  the selected CLK SRC value is the SYS CLK  input        of Global Clock Divider . To use in SOMP mode one of the CMU CLKx  it is        recommended to perform a forced update of CLK SRC with the value of        CLK SRC SR value before with enabling the channel."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch0Soms_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch0Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch0Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch0Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode"]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch0Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch0Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch0Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch0Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch0Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch0Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Soms {
        #[inline(always)]
        fn default() -> Ch0Soms {
            <crate::RegValueT<Ch0Soms_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch0Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Sr0 = crate::RegValueT<Ch0Sr0_SPEC>;

    impl Ch0Sr0 {
        #[doc = "ATOM channel x shadow register SR0. Note  The SR0 register is used as shadow register for CM0 in SOMP and SOMS modes  and is used as capture register for time base TBU TS0 in SOMC mode."]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch0Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch0Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Sr0 {
        #[inline(always)]
        fn default() -> Ch0Sr0 {
            <crate::RegValueT<Ch0Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch0Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Sr1 = crate::RegValueT<Ch0Sr1_SPEC>;

    impl Ch0Sr1 {
        #[doc = "ATOM channel x shadow register SR1. Note  The SR1 register is used as shadow register for CM1 in SOMP and SOMS modes  and is used as capture register for time base TBU TS1 or TBU TS2  when selected in ATOM i  CH x  CTRL register  in SOMC mode."]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch0Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch0Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Sr1 {
        #[inline(always)]
        fn default() -> Ch0Sr1 {
            <crate::RegValueT<Ch0Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Stat_SPEC;
    impl crate::sealed::RegSpec for Ch0Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Stat = crate::RegValueT<Ch0Stat_SPEC>;

    impl Ch0Stat {
        #[doc = "Actual output signal level of ATOM CHx OUT. Note   Reset value is the inverted value of bit SL  which depends on the hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch0Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch0Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ATOM Mode control bits. Note  For ATOM SOMI  SOMC  SOMP and SOMS mode  this register serves as a mirror for the five ARU control bits received through the ARU interface. The bits are valid when the DV bit is set. Note  For SOMB mode  this bit field serves as the work register of the compare strategy. It can be updated with the value of bit field ACB of register ATOM i  CH x  CTRL  or the value of internal shadow register ACB SR."]
        #[inline(always)]
        pub fn acbi(
            self,
        ) -> crate::common::RegisterField<16, 0x1f, 1, 0, u8, Ch0Stat_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0x1f,1,0,u8, Ch0Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Valid ARU Data stored in compare registers. Note  This bit is only applicable in SOMC and SOMB mode. The CPU can determine the status of the ARU transfers with this bit. After the compare event occurred  the bit is reset by hardware ."]
        #[inline(always)]
        pub fn dv(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch0Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<21,1,0,Ch0Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Write request of CPU failed for late update. Note  This bit is only applicable in SOMC and SOMB mode. Bit WRF can be reset by writing a 1 to it."]
        #[inline(always)]
        pub fn wrf(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch0Stat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch0Stat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU data rejected flag. Note  The flag is cleared if valid data is received and stored via ARU."]
        #[inline(always)]
        pub fn dr(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch0Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<23,1,0,Ch0Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ATOM Internal status bits. ACBO 3    1  CCU0 Compare match occurred. ACBO 4    1  CCU1 Compare match occurred. Note  These bits are only set in SOMC mode. Note  ACBO is reset to 0b00000 on an update of register CM0 or CM1  via ARU or CPU . Note  In SOMC mode  these bits are sent as ARU control bits 52..48."]
        #[inline(always)]
        pub fn acbo(
            self,
        ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, Ch0Stat_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0x1f,1,0,u8, Ch0Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Stat {
        #[inline(always)]
        fn default() -> Ch0Stat {
            <crate::RegValueT<Ch0Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch1Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Cm0 = crate::RegValueT<Ch1Cm0_SPEC>;

    impl Ch1Cm0 {
        #[doc = "ATOM CCU0 compare register"]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch1Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch1Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Cm0 {
        #[inline(always)]
        fn default() -> Ch1Cm0 {
            <crate::RegValueT<Ch1Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch1Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Cm1 = crate::RegValueT<Ch1Cm1_SPEC>;

    impl Ch1Cm1 {
        #[doc = "ATOM CCU1 compare register"]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch1Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch1Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Cm1 {
        #[inline(always)]
        fn default() -> Ch1Cm1 {
            <crate::RegValueT<Ch1Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch1Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Cn0 = crate::RegValueT<Ch1Cn0_SPEC>;

    impl Ch1Cn0 {
        #[doc = "ATOM CCU0 counter register"]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch1Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch1Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Cn0 {
        #[inline(always)]
        fn default() -> Ch1Cn0 {
            <crate::RegValueT<Ch1Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch1Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch1Ctrl = crate::RegValueT<Ch1Ctrl_SPEC>;

    impl Ch1Ctrl {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch1Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. Note   This bit is only applicable in SOMC mode."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM Mode control bits. These bits have different meaning in the different ATOM channel modes.        Please refer to the mode description sections. SOMI   CROSSREFERENCE and CROSSREFERENCE for register description. SOMC   CROSSREFERENCE and CROSSREFERENCE for register description. SOMP   CROSSREFERENCE and CROSSREFERENCE for register description. SOMS   CROSSREFERENCE and CROSSREFERENCE for register description. SOMB   CROSSREFERENCE and CROSSREFERENCE for register description."]
        #[inline(always)]
        pub fn acb(
            self,
        ) -> crate::common::RegisterField<4, 0x1f, 1, 0, u8, Ch1Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x1f,1,0,u8, Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. Note   This bit is only applicable in SOMC mode."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended update mode. If EUPM 1  a write access to CM0 or CM1 never causes an AEI write          status 10 . This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level. Reset value depends on the hardware configuration chosen by silicon          vendor. If the output is disabled  the output ATOM OUT x  is set to inverse          SL  independent of the ATOM channel mode. If FREEZE 0  following notes are valid  In SOMP  SOMI  SOMS mode  if the channel is disabled  the internal        register SOUR inside ATOM sub unit SOU is set to inverse value of SL. By        enabling the channel  the register SOUR is not changed. Thus  if the        output is enabled afterwards  the output ATOM OUT x  is the inverse        value of SL. In SOMC mode  if the channel is disabled  the internal register SOUR        inside ATOM sub unit SOU is set to value of SL. By enabling the channel         the register SOUR is not changed. Thus  if the output is enabled and the        channel is disabled  the output ATOM OUT x  is the value of SL. If FREEZE 1  the following notes are valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Actual CMU clock source  SOMS   shadow register for CMU clock source  SOMP . If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done           either by an end of a period or a forced update. After  channel  reset  the selected CLK SRC value is the SYS CLK           input of Global Clock Divider . To use in SOMP mode one of the          CMU CLKx  it is recommended to perform a forced update of CLK SRC with          the value of CLK SRC SR value before with enabling the channel. In case of ECLK SRC 1 and CLK SRC SR   011   100   101   110            a force update leads to an immediate update of CM0  CM1 and CLK SRC."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch1Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. Note  This bit is only applicable in SOMP and SOMS mode. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU Write request bit for late compare register update. Note  The CPU can disable subsequent ARU read requests by the channel and can update the shadow registers with new compare values  while the compare units operate on old compare values received by former ARU accesses  if occurred. Note  On a compare match event  the WR REQ bit will be reset by hardware. Note  At the point of the force update  only the shadow registers SR0 and SR1 are transferred into the CM0  CM1 registers. The output action is still defined by the ACBI bit field described by the ARU together with the old compare values for CM0 CM1. Note   This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode. Note  This mode is only applicable in SOMP mode."]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch1Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. If RST CCU0 1 and UPEN CTRLx 1 are set  TRIG  x 1  or          TIM EXT CAPTURE x  triggers also the update of work register  CM0  CM1          and CLK SRC . This bit is only applicable in SOMP mode. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Serve last ARU communication strategy. This bit is only applicable in SOMC mode. Please note  that setting of this bit has only effect  when ACBI 4 2           is configured for serve last compare strategy   100   101   or 110  . When this bit is not set  the captured time stamps in the shadow          registers SRx are only provided after the CCU1 match occurred. The          ACBO 4 3  bits always return 10 in          that case. By setting this bit  the ATOM channel also provides the captured time          stamps after the CCU0 match event to the ARU. The ACBO 4 3  bits are          set to 01 in that case. After the CCU1          match event  the time stamps are captured again in the SRx registers          and provided to the ARU. The ACBO 4 3  bits are set to 10 .          When the data in the shadow registers after the CCU0 match was not          consumed by an ARU destination and the CCU1 match occurs  the data in          the shadow registers is overwritten by the new captured time stamps.          The ATOM channel does not request new data from the ARU when the CCU0          match values are read from an ARU destination."]
        #[inline(always)]
        pub fn sla(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. Note   This bit is only applicable in SOMP and SOMS modes."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode. Note  This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. Note   This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SOMB mode"]
        #[inline(always)]
        pub fn somb(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE. Note  if channel is disabled and ouptut is enabled  in SOMP mode with UDMODE  0b00 the output is dependng directly on SL bit  independent on FREEZE mode."]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Ctrl {
        #[inline(always)]
        fn default() -> Ch1Ctrl {
            <crate::RegValueT<Ch1Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch1IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1IrqEn = crate::RegValueT<Ch1IrqEn_SPEC>;

    impl Ch1IrqEn {
        #[doc = "ATOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch1IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch1IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM CCU1TC IRQ interrupt enable. See bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch1IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch1IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1IrqEn {
        #[inline(always)]
        fn default() -> Ch1IrqEn {
            <crate::RegValueT<Ch1IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch1IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Software Interrupt Generation Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1IrqForcint = crate::RegValueT<Ch1IrqForcint_SPEC>;

    impl Ch1IrqForcint {
        #[doc = "Trigger ATOM CCU0TC IRQ interrupt by software. Note  This bit is cleared automatically after write. Note  This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch1IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch1IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger ATOM CCU1TC IRQ interrupt by software. Note  This bit is cleared automatically after write. Note  This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch1IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch1IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1IrqForcint {
        #[inline(always)]
        fn default() -> Ch1IrqForcint {
            <crate::RegValueT<Ch1IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch1IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1IrqMode = crate::RegValueT<Ch1IrqMode_SPEC>;

    impl Ch1IrqMode {
        #[doc = "IRQ mode selection. Note  The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch1IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch1IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1IrqMode {
        #[inline(always)]
        fn default() -> Ch1IrqMode {
            <crate::RegValueT<Ch1IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch1IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1IrqNotify = crate::RegValueT<Ch1IrqNotify_SPEC>;

    impl Ch1IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch1IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch1IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1TC  CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec. Note  If bit SR0 TRIG is set to 1  only valid in SOMP mode   this        interrupt notify flag is set in case of SR0 is equal to CN0 and not set        in case of CM1  gt    lt   CN0."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch1IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch1IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1IrqNotify {
        #[inline(always)]
        fn default() -> Ch1IrqNotify {
            <crate::RegValueT<Ch1IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Rdaddr_SPEC;
    impl crate::sealed::RegSpec for Ch1Rdaddr_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 ARU read address Register\n resetvalue={Application Reset:0x1FE01FE}"]
    pub type Ch1Rdaddr = crate::RegValueT<Ch1Rdaddr_SPEC>;

    impl Ch1Rdaddr {
        #[doc = "ARU Read address 0. Note  This read address is used by the ATOM channel to receive data from ARU immediately after the channel and ARU access is enabled  see ATOM i  CH x  CTRL register for details . Note  This bit field is only writable if channel is disabled."]
        #[inline(always)]
        pub fn rdaddr0(
            self,
        ) -> crate::common::RegisterField<0, 0x1ff, 1, 0, u16, Ch1Rdaddr_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x1ff,1,0,u16, Ch1Rdaddr_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Read address 1. Note  The ATOM channel switches to this read address  when requested in the ARU control bits 52 to 48 with the pattern  111   . The channel switches back to the RDADDR0 after one ARU data package was received on RDADDR1 and the compare match event is occurred. Note  This read address is only applicable in SOMC mode. Note  This bit field is only writable if channel is disabled."]
        #[inline(always)]
        pub fn rdaddr1(
            self,
        ) -> crate::common::RegisterField<16, 0x1ff, 1, 0, u16, Ch1Rdaddr_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x1ff,1,0,u16, Ch1Rdaddr_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Rdaddr {
        #[inline(always)]
        fn default() -> Ch1Rdaddr {
            <crate::RegValueT<Ch1Rdaddr_SPEC> as RegisterValue<_>>::new(33423870)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Somb_SPEC;
    impl crate::sealed::RegSpec for Ch1Somb_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMB Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch1Somb = crate::RegValueT<Ch1Somb_SPEC>;

    impl Ch1Somb {
        #[doc = "ATOM channel mode select. Not used in ATOM SOMB mode."]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch1Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch1Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. This bit is only applicable if three time bases are present in the GTM.        Otherwise  this bit is reserved."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch1Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch1Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch1Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch1Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control bits. Note  These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_1_0(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch1Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch1Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM SOMB compare strategy. These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_4_3_2(
            self,
        ) -> crate::common::RegisterField<6, 0x7, 1, 0, u8, Ch1Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x7,1,0,u8, Ch1Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. The compare unit CCU0 or CCU1 that compares against TBU TS0  depending        on CCUx control mode defined by ACB CM 4 2   always performs a        greater equal comparison  independent of the CMP CTRL bit."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch1Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch1Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended update mode. If EUPM 1 and after a CCU0 compare match  if ARU EN 0  written CM0 value not stored. if ARU EN 1  ARU read request is continued and CM1 is updated until CCU1        compare match. Received CM0 is not stored. This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch1Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch1Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel enable. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL. If FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to        value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch1Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch1Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU Write request bit for late compare register update. The CPU can disable subsequent ARU read requests by the channel and can        update the shadow registers with new compare values  while the compare        units operate on old compare values received by former ARU accesses  if        occurred. On a compare match event  the WR REQ bit will be reset by hardware. At the point of the force update  only the shadow registers SR0 and SR1        are transferred into the CM0  CM1 registers. The output action is still        defined by the ACBI bit field described by the ARU together with the old        compare values for CM0 CM1."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch1Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch1Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch1Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch1Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch1Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch1Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode"]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch1Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch1Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SOMB  SOMB mode"]
        #[inline(always)]
        pub fn somb(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch1Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch1Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch1Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch1Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Somb {
        #[inline(always)]
        fn default() -> Ch1Somb {
            <crate::RegValueT<Ch1Somb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Somc_SPEC;
    impl crate::sealed::RegSpec for Ch1Somc_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMC Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch1Somc = crate::RegValueT<Ch1Somc_SPEC>;

    impl Ch1Somc {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch1Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch1Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. This bit is only applicable if three time bases are present in the GTM.        Otherwise  this bit is reserved."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch1Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch1Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch1Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch1Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control bits. These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_1_0(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch1Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch1Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM control bits ACB 4   ACB 3   ACB 2 . Independent of ARU EN  a writing of 0b111 cancels any pending CCU0 or        CCU1 compare. Note  These bits are defining the compare strategy only if        ARU EN   0."]
        #[inline(always)]
        pub fn acb_4_3_2(
            self,
        ) -> crate::common::RegisterField<6, 0x7, 1, 0, u8, Ch1Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x7,1,0,u8, Ch1Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. The compare unit CCU0 or CCU1 that compares against TBU TS0  depending        on CCUx control mode defined by ACBI 4 2  or ACB42  always performs a        greater equal comparison  independent on CMP CTRL bit."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch1Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch1Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended Update Mode. If EUPM 1 and after a CCU0 compare match  If ARU EN 0  written CM0 value not stored. If ARU EN 1  ARU read request is continued and CM1 is updated until CCU1        compare match. Received CM0 values are not stored. This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch1Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch1Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel enable. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL. If FREEZE 0  following note is valid  If the channel is disabled  the output register of SOU unit is set to        value of SL. If FREEZE 1  following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch1Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch1Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU write request bit. The CPU can disable subsequent ARU read requests by the channel and can        update the shadow registers with new compare values  while the compare        units operate on old compare values received by former ARU accesses  if        occurred. On a compare match event  the WR REQ bit will be reset by hardware. At the point of the force update  only the shadow registers SR0 and SR1        are transferred into the CM0  CM1 registers. The output action is still        defined by the ACBI bit field described by the ARU together with the old        compare values for CM0 CM1."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch1Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch1Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch1Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch1Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TRIGOUT  Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch1Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch1Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Serve last ARU communication strategy. Please note  that setting of this bit has only effect  when ACBI 4 2  is        configured for serve last compare strategy   quot 100 quot    quot 101 quot   or  quot 110 quot  . When this bit is not set  the captured time stamps in the shadow        registers SRx are only provided after the CCU1 match occurred. The        ACBO 4 3  bits always return  quot 10 quot  in that case. By setting this bit  the ATOM channel also provides the captured time        stamps after the CCU0 match event to the ARU. The ACBO 4 3  bits are set        to   8220 01  8221  in that case. After the CCU1 match event  the time stamps are        captured again in the SRx registers and provided to the ARU. The        ACBO 4 3  bits are set to   8220 10  8221 . When the data in the shadow registers        after the CCU0 match was not consumed by an ARU destination and the CCU1        match occurs  the data in the shadow registers is overwritten by the new        captured time stamps. The ATOM channel does not request new data from        the ARU when the CCU0 match values are read from an ARU destination."]
        #[inline(always)]
        pub fn sla(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch1Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch1Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode"]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch1Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch1Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch1Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch1Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Somc {
        #[inline(always)]
        fn default() -> Ch1Somc {
            <crate::RegValueT<Ch1Somc_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Somi_SPEC;
    impl crate::sealed::RegSpec for Ch1Somi_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMI Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch1Somi = crate::RegValueT<Ch1Somi_SPEC>;

    impl Ch1Somi {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch1Somi_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch1Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch1Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch1Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACB bit 0 . Note  Bosch name ACB 0 ."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch1Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch1Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel is enabled. Note   Reset value depends on the hardware configuration chosen by silicon vendor. Note  If the output is disabled  the output ATOM OUT x  is set to inverse value of SL. If FREEZE 0  following note is valid   If the channel is disabled  the output register of SOU unit is set to inverse value of SL. If FREEZE 1  following note is valid   If the channel is disabled  the output register of SOU unit is not changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch1Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch1Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch1Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch1Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Somi {
        #[inline(always)]
        fn default() -> Ch1Somi {
            <crate::RegValueT<Ch1Somi_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Somp_SPEC;
    impl crate::sealed::RegSpec for Ch1Somp_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMP Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch1Somp = crate::RegValueT<Ch1Somp_SPEC>;

    impl Ch1Somp {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch1Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch1Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch1Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch1Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU data select for SOMP. This bit field is only relevant in SOMP mode to select the ARU data        source."]
        #[inline(always)]
        pub fn adl(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch1Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch1Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. This bit enables the PCM mode. It is device specific  in which channel the PCM mode is available.        Please refer to device specific CROSSREFERENCE for this information."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch1Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,Ch1Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SR0 is used to generate a trigger on output ATOM i  CH x  OUT T if equal to CN0. This bit is only relevant in SOMP mode. This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch1Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch1Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for pulse of PWM. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to        inverse value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch1Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch1Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shadow register for CMU clock source register CLK SRC. If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if        the CMU CLK source for PWM generation should be changed during        operation  the old CMU CLK has to operate until the update of the ATOM        channels internal CLK SRC register by the CLK SRC SR content is done        either by an end of a period or a FORCE UPDATE. After  channel  reset  the selected CLK SRC value is the SYS CLK  input        of Global Clock Divider . To use in SOMP mode one of the CMU CLKx  it is        recommended to perform a forced update of CLK SRC with the value of        CLK SRC SR value before with enabling the channel."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch1Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch1Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch1Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch1Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch1Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch1Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode. This mode is only applicable in SOMP mode."]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch1Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch1Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. If RST CCU0 1 and UPEN CTRLx 1 are set  TRIG  x 1  or TIM  EXT CAPTURE x  triggers        also the update of work register  CM0  CM1 and CLK SRC ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch1Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch1Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch1Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch1Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch1Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch1Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch1Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch1Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch1Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch1Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode"]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch1Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch1Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch1Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch1Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch1Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch1Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Somp {
        #[inline(always)]
        fn default() -> Ch1Somp {
            <crate::RegValueT<Ch1Somp_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Soms_SPEC;
    impl crate::sealed::RegSpec for Ch1Soms_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMS Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch1Soms = crate::RegValueT<Ch1Soms_SPEC>;

    impl Ch1Soms {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch1Soms_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch1Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch1Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch1Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shift direction for CM1 register. The data that has to be shifted out has to be aligned inside the CM1        register according to the defined shift direction. This bit is only applicable if ARU EN   0. If the direction  ACB0  is changed  the output ATOM OUT x  switches        immediately to the other  first  bit of CM1  bit 0 if ACB0   0  bit 23        if ACB0  160    160 1 ."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch1Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch1Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Double Shift Output. Note  If DSO 1  only shift right is possible."]
        #[inline(always)]
        pub fn dso(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch1Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch1Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines signal level when channel and output is disabling. Reset value depends on the hardware configuration chosen by silicon          vendor. If the output is enabled  the output ATOM OUT x  is set to bit 0 or 23          of CM1 register. If the output is disabled  the output ATOM OUT x  is set to inverse          value of SL. An enable or disable of the channel x has no effect on ATOM OUT x . The inverse value of SL is shifted into the CM1 register. If FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to          inverse value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not          changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch1Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch1Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shift frequency select for channel. If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if        the CMU CLK source for PWM generation should be changed during        operation  the old CMU CLK has to operate until the update of the ATOM        channels internal CLK SRC register by the CLK SRC SR content is done        either by an end of a period or a FORCE UPDATE. After  channel  reset  the selected CLK SRC value is the SYS CLK  input        of Global Clock Divider . To use in SOMP mode one of the CMU CLKx  it is        recommended to perform a forced update of CLK SRC with the value of        CLK SRC SR value before with enabling the channel."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch1Soms_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch1Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch1Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch1Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode"]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch1Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch1Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch1Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch1Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch1Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch1Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Soms {
        #[inline(always)]
        fn default() -> Ch1Soms {
            <crate::RegValueT<Ch1Soms_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch1Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Sr0 = crate::RegValueT<Ch1Sr0_SPEC>;

    impl Ch1Sr0 {
        #[doc = "ATOM channel x shadow register SR0. Note  The SR0 register is used as shadow register for CM0 in SOMP and SOMS modes  and is used as capture register for time base TBU TS0 in SOMC mode."]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch1Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch1Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Sr0 {
        #[inline(always)]
        fn default() -> Ch1Sr0 {
            <crate::RegValueT<Ch1Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch1Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Sr1 = crate::RegValueT<Ch1Sr1_SPEC>;

    impl Ch1Sr1 {
        #[doc = "ATOM channel x shadow register SR1. Note  The SR1 register is used as shadow register for CM1 in SOMP and SOMS modes  and is used as capture register for time base TBU TS1 or TBU TS2  when selected in ATOM i  CH x  CTRL register  in SOMC mode."]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch1Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch1Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Sr1 {
        #[inline(always)]
        fn default() -> Ch1Sr1 {
            <crate::RegValueT<Ch1Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Stat_SPEC;
    impl crate::sealed::RegSpec for Ch1Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Stat = crate::RegValueT<Ch1Stat_SPEC>;

    impl Ch1Stat {
        #[doc = "Actual output signal level of ATOM CHx OUT. Note   Reset value is the inverted value of bit SL  which depends on the hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch1Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch1Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ATOM Mode control bits. Note  For ATOM SOMI  SOMC  SOMP and SOMS mode  this register serves as a mirror for the five ARU control bits received through the ARU interface. The bits are valid when the DV bit is set. Note  For SOMB mode  this bit field serves as the work register of the compare strategy. It can be updated with the value of bit field ACB of register ATOM i  CH x  CTRL  or the value of internal shadow register ACB SR."]
        #[inline(always)]
        pub fn acbi(
            self,
        ) -> crate::common::RegisterField<16, 0x1f, 1, 0, u8, Ch1Stat_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0x1f,1,0,u8, Ch1Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Valid ARU Data stored in compare registers. Note  This bit is only applicable in SOMC and SOMB mode. The CPU can determine the status of the ARU transfers with this bit. After the compare event occurred  the bit is reset by hardware ."]
        #[inline(always)]
        pub fn dv(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch1Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<21,1,0,Ch1Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Write request of CPU failed for late update. Note  This bit is only applicable in SOMC and SOMB mode. Bit WRF can be reset by writing a 1 to it."]
        #[inline(always)]
        pub fn wrf(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch1Stat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch1Stat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU data rejected flag. Note  The flag is cleared if valid data is received and stored via ARU."]
        #[inline(always)]
        pub fn dr(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch1Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<23,1,0,Ch1Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ATOM Internal status bits. ACBO 3    1  CCU0 Compare match occurred. ACBO 4    1  CCU1 Compare match occurred. Note  These bits are only set in SOMC mode. Note  ACBO is reset to 0b00000 on an update of register CM0 or CM1  via ARU or CPU . Note  In SOMC mode  these bits are sent as ARU control bits 52..48."]
        #[inline(always)]
        pub fn acbo(
            self,
        ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, Ch1Stat_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0x1f,1,0,u8, Ch1Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Stat {
        #[inline(always)]
        fn default() -> Ch1Stat {
            <crate::RegValueT<Ch1Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch2Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Cm0 = crate::RegValueT<Ch2Cm0_SPEC>;

    impl Ch2Cm0 {
        #[doc = "ATOM CCU0 compare register"]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch2Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch2Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Cm0 {
        #[inline(always)]
        fn default() -> Ch2Cm0 {
            <crate::RegValueT<Ch2Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch2Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Cm1 = crate::RegValueT<Ch2Cm1_SPEC>;

    impl Ch2Cm1 {
        #[doc = "ATOM CCU1 compare register"]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch2Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch2Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Cm1 {
        #[inline(always)]
        fn default() -> Ch2Cm1 {
            <crate::RegValueT<Ch2Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch2Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Cn0 = crate::RegValueT<Ch2Cn0_SPEC>;

    impl Ch2Cn0 {
        #[doc = "ATOM CCU0 counter register"]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch2Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch2Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Cn0 {
        #[inline(always)]
        fn default() -> Ch2Cn0 {
            <crate::RegValueT<Ch2Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch2Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch2Ctrl = crate::RegValueT<Ch2Ctrl_SPEC>;

    impl Ch2Ctrl {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch2Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. Note   This bit is only applicable in SOMC mode."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM Mode control bits. These bits have different meaning in the different ATOM channel modes.        Please refer to the mode description sections. SOMI   CROSSREFERENCE and CROSSREFERENCE for register description. SOMC   CROSSREFERENCE and CROSSREFERENCE for register description. SOMP   CROSSREFERENCE and CROSSREFERENCE for register description. SOMS   CROSSREFERENCE and CROSSREFERENCE for register description. SOMB   CROSSREFERENCE and CROSSREFERENCE for register description."]
        #[inline(always)]
        pub fn acb(
            self,
        ) -> crate::common::RegisterField<4, 0x1f, 1, 0, u8, Ch2Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x1f,1,0,u8, Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. Note   This bit is only applicable in SOMC mode."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended update mode. If EUPM 1  a write access to CM0 or CM1 never causes an AEI write          status 10 . This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level. Reset value depends on the hardware configuration chosen by silicon          vendor. If the output is disabled  the output ATOM OUT x  is set to inverse          SL  independent of the ATOM channel mode. If FREEZE 0  following notes are valid  In SOMP  SOMI  SOMS mode  if the channel is disabled  the internal        register SOUR inside ATOM sub unit SOU is set to inverse value of SL. By        enabling the channel  the register SOUR is not changed. Thus  if the        output is enabled afterwards  the output ATOM OUT x  is the inverse        value of SL. In SOMC mode  if the channel is disabled  the internal register SOUR        inside ATOM sub unit SOU is set to value of SL. By enabling the channel         the register SOUR is not changed. Thus  if the output is enabled and the        channel is disabled  the output ATOM OUT x  is the value of SL. If FREEZE 1  the following notes are valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Actual CMU clock source  SOMS   shadow register for CMU clock source  SOMP . If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done           either by an end of a period or a forced update. After  channel  reset  the selected CLK SRC value is the SYS CLK           input of Global Clock Divider . To use in SOMP mode one of the          CMU CLKx  it is recommended to perform a forced update of CLK SRC with          the value of CLK SRC SR value before with enabling the channel. In case of ECLK SRC 1 and CLK SRC SR   011   100   101   110            a force update leads to an immediate update of CM0  CM1 and CLK SRC."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch2Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. Note  This bit is only applicable in SOMP and SOMS mode. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU Write request bit for late compare register update. Note  The CPU can disable subsequent ARU read requests by the channel and can update the shadow registers with new compare values  while the compare units operate on old compare values received by former ARU accesses  if occurred. Note  On a compare match event  the WR REQ bit will be reset by hardware. Note  At the point of the force update  only the shadow registers SR0 and SR1 are transferred into the CM0  CM1 registers. The output action is still defined by the ACBI bit field described by the ARU together with the old compare values for CM0 CM1. Note   This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode. Note  This mode is only applicable in SOMP mode."]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch2Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. If RST CCU0 1 and UPEN CTRLx 1 are set  TRIG  x 1  or          TIM EXT CAPTURE x  triggers also the update of work register  CM0  CM1          and CLK SRC . This bit is only applicable in SOMP mode. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Serve last ARU communication strategy. This bit is only applicable in SOMC mode. Please note  that setting of this bit has only effect  when ACBI 4 2           is configured for serve last compare strategy   100   101   or 110  . When this bit is not set  the captured time stamps in the shadow          registers SRx are only provided after the CCU1 match occurred. The          ACBO 4 3  bits always return 10 in          that case. By setting this bit  the ATOM channel also provides the captured time          stamps after the CCU0 match event to the ARU. The ACBO 4 3  bits are          set to 01 in that case. After the CCU1          match event  the time stamps are captured again in the SRx registers          and provided to the ARU. The ACBO 4 3  bits are set to 10 .          When the data in the shadow registers after the CCU0 match was not          consumed by an ARU destination and the CCU1 match occurs  the data in          the shadow registers is overwritten by the new captured time stamps.          The ATOM channel does not request new data from the ARU when the CCU0          match values are read from an ARU destination."]
        #[inline(always)]
        pub fn sla(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. Note   This bit is only applicable in SOMP and SOMS modes."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode. Note  This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. Note   This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SOMB mode"]
        #[inline(always)]
        pub fn somb(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE. Note  if channel is disabled and ouptut is enabled  in SOMP mode with UDMODE  0b00 the output is dependng directly on SL bit  independent on FREEZE mode."]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Ctrl {
        #[inline(always)]
        fn default() -> Ch2Ctrl {
            <crate::RegValueT<Ch2Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch2IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2IrqEn = crate::RegValueT<Ch2IrqEn_SPEC>;

    impl Ch2IrqEn {
        #[doc = "ATOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch2IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch2IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM CCU1TC IRQ interrupt enable. See bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch2IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch2IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2IrqEn {
        #[inline(always)]
        fn default() -> Ch2IrqEn {
            <crate::RegValueT<Ch2IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch2IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Software Interrupt Generation Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2IrqForcint = crate::RegValueT<Ch2IrqForcint_SPEC>;

    impl Ch2IrqForcint {
        #[doc = "Trigger ATOM CCU0TC IRQ interrupt by software. Note  This bit is cleared automatically after write. Note  This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch2IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch2IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger ATOM CCU1TC IRQ interrupt by software. Note  This bit is cleared automatically after write. Note  This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch2IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch2IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2IrqForcint {
        #[inline(always)]
        fn default() -> Ch2IrqForcint {
            <crate::RegValueT<Ch2IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch2IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2IrqMode = crate::RegValueT<Ch2IrqMode_SPEC>;

    impl Ch2IrqMode {
        #[doc = "IRQ mode selection. Note  The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch2IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch2IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2IrqMode {
        #[inline(always)]
        fn default() -> Ch2IrqMode {
            <crate::RegValueT<Ch2IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch2IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2IrqNotify = crate::RegValueT<Ch2IrqNotify_SPEC>;

    impl Ch2IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch2IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch2IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1TC  CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec. Note  If bit SR0 TRIG is set to 1  only valid in SOMP mode   this        interrupt notify flag is set in case of SR0 is equal to CN0 and not set        in case of CM1  gt    lt   CN0."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch2IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch2IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2IrqNotify {
        #[inline(always)]
        fn default() -> Ch2IrqNotify {
            <crate::RegValueT<Ch2IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Rdaddr_SPEC;
    impl crate::sealed::RegSpec for Ch2Rdaddr_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 ARU read address Register\n resetvalue={Application Reset:0x1FE01FE}"]
    pub type Ch2Rdaddr = crate::RegValueT<Ch2Rdaddr_SPEC>;

    impl Ch2Rdaddr {
        #[doc = "ARU Read address 0. Note  This read address is used by the ATOM channel to receive data from ARU immediately after the channel and ARU access is enabled  see ATOM i  CH x  CTRL register for details . Note  This bit field is only writable if channel is disabled."]
        #[inline(always)]
        pub fn rdaddr0(
            self,
        ) -> crate::common::RegisterField<0, 0x1ff, 1, 0, u16, Ch2Rdaddr_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x1ff,1,0,u16, Ch2Rdaddr_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Read address 1. Note  The ATOM channel switches to this read address  when requested in the ARU control bits 52 to 48 with the pattern  111   . The channel switches back to the RDADDR0 after one ARU data package was received on RDADDR1 and the compare match event is occurred. Note  This read address is only applicable in SOMC mode. Note  This bit field is only writable if channel is disabled."]
        #[inline(always)]
        pub fn rdaddr1(
            self,
        ) -> crate::common::RegisterField<16, 0x1ff, 1, 0, u16, Ch2Rdaddr_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x1ff,1,0,u16, Ch2Rdaddr_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Rdaddr {
        #[inline(always)]
        fn default() -> Ch2Rdaddr {
            <crate::RegValueT<Ch2Rdaddr_SPEC> as RegisterValue<_>>::new(33423870)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Somb_SPEC;
    impl crate::sealed::RegSpec for Ch2Somb_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMB Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch2Somb = crate::RegValueT<Ch2Somb_SPEC>;

    impl Ch2Somb {
        #[doc = "ATOM channel mode select. Not used in ATOM SOMB mode."]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch2Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch2Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. This bit is only applicable if three time bases are present in the GTM.        Otherwise  this bit is reserved."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch2Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch2Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch2Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch2Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control bits. Note  These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_1_0(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch2Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch2Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM SOMB compare strategy. These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_4_3_2(
            self,
        ) -> crate::common::RegisterField<6, 0x7, 1, 0, u8, Ch2Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x7,1,0,u8, Ch2Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. The compare unit CCU0 or CCU1 that compares against TBU TS0  depending        on CCUx control mode defined by ACB CM 4 2   always performs a        greater equal comparison  independent of the CMP CTRL bit."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch2Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch2Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended update mode. If EUPM 1 and after a CCU0 compare match  if ARU EN 0  written CM0 value not stored. if ARU EN 1  ARU read request is continued and CM1 is updated until CCU1        compare match. Received CM0 is not stored. This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch2Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch2Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel enable. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL. If FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to        value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch2Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch2Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU Write request bit for late compare register update. The CPU can disable subsequent ARU read requests by the channel and can        update the shadow registers with new compare values  while the compare        units operate on old compare values received by former ARU accesses  if        occurred. On a compare match event  the WR REQ bit will be reset by hardware. At the point of the force update  only the shadow registers SR0 and SR1        are transferred into the CM0  CM1 registers. The output action is still        defined by the ACBI bit field described by the ARU together with the old        compare values for CM0 CM1."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch2Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch2Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch2Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch2Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch2Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch2Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode"]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch2Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch2Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SOMB  SOMB mode"]
        #[inline(always)]
        pub fn somb(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch2Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch2Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch2Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch2Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Somb {
        #[inline(always)]
        fn default() -> Ch2Somb {
            <crate::RegValueT<Ch2Somb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Somc_SPEC;
    impl crate::sealed::RegSpec for Ch2Somc_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMC Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch2Somc = crate::RegValueT<Ch2Somc_SPEC>;

    impl Ch2Somc {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch2Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch2Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. This bit is only applicable if three time bases are present in the GTM.        Otherwise  this bit is reserved."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch2Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch2Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch2Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch2Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control bits. These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_1_0(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch2Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch2Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM control bits ACB 4   ACB 3   ACB 2 . Independent of ARU EN  a writing of 0b111 cancels any pending CCU0 or        CCU1 compare. Note  These bits are defining the compare strategy only if        ARU EN   0."]
        #[inline(always)]
        pub fn acb_4_3_2(
            self,
        ) -> crate::common::RegisterField<6, 0x7, 1, 0, u8, Ch2Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x7,1,0,u8, Ch2Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. The compare unit CCU0 or CCU1 that compares against TBU TS0  depending        on CCUx control mode defined by ACBI 4 2  or ACB42  always performs a        greater equal comparison  independent on CMP CTRL bit."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch2Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch2Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended Update Mode. If EUPM 1 and after a CCU0 compare match  If ARU EN 0  written CM0 value not stored. If ARU EN 1  ARU read request is continued and CM1 is updated until CCU1        compare match. Received CM0 values are not stored. This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch2Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch2Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel enable. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL. If FREEZE 0  following note is valid  If the channel is disabled  the output register of SOU unit is set to        value of SL. If FREEZE 1  following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch2Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch2Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU write request bit. The CPU can disable subsequent ARU read requests by the channel and can        update the shadow registers with new compare values  while the compare        units operate on old compare values received by former ARU accesses  if        occurred. On a compare match event  the WR REQ bit will be reset by hardware. At the point of the force update  only the shadow registers SR0 and SR1        are transferred into the CM0  CM1 registers. The output action is still        defined by the ACBI bit field described by the ARU together with the old        compare values for CM0 CM1."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch2Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch2Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch2Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch2Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TRIGOUT  Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch2Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch2Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Serve last ARU communication strategy. Please note  that setting of this bit has only effect  when ACBI 4 2  is        configured for serve last compare strategy   quot 100 quot    quot 101 quot   or  quot 110 quot  . When this bit is not set  the captured time stamps in the shadow        registers SRx are only provided after the CCU1 match occurred. The        ACBO 4 3  bits always return  quot 10 quot  in that case. By setting this bit  the ATOM channel also provides the captured time        stamps after the CCU0 match event to the ARU. The ACBO 4 3  bits are set        to   8220 01  8221  in that case. After the CCU1 match event  the time stamps are        captured again in the SRx registers and provided to the ARU. The        ACBO 4 3  bits are set to   8220 10  8221 . When the data in the shadow registers        after the CCU0 match was not consumed by an ARU destination and the CCU1        match occurs  the data in the shadow registers is overwritten by the new        captured time stamps. The ATOM channel does not request new data from        the ARU when the CCU0 match values are read from an ARU destination."]
        #[inline(always)]
        pub fn sla(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch2Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch2Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode"]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch2Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch2Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch2Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch2Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Somc {
        #[inline(always)]
        fn default() -> Ch2Somc {
            <crate::RegValueT<Ch2Somc_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Somi_SPEC;
    impl crate::sealed::RegSpec for Ch2Somi_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMI Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch2Somi = crate::RegValueT<Ch2Somi_SPEC>;

    impl Ch2Somi {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch2Somi_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch2Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch2Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch2Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACB bit 0 . Note  Bosch name ACB 0 ."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch2Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch2Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel is enabled. Note   Reset value depends on the hardware configuration chosen by silicon vendor. Note  If the output is disabled  the output ATOM OUT x  is set to inverse value of SL. If FREEZE 0  following note is valid   If the channel is disabled  the output register of SOU unit is set to inverse value of SL. If FREEZE 1  following note is valid   If the channel is disabled  the output register of SOU unit is not changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch2Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch2Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch2Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch2Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Somi {
        #[inline(always)]
        fn default() -> Ch2Somi {
            <crate::RegValueT<Ch2Somi_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Somp_SPEC;
    impl crate::sealed::RegSpec for Ch2Somp_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMP Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch2Somp = crate::RegValueT<Ch2Somp_SPEC>;

    impl Ch2Somp {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch2Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch2Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch2Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch2Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU data select for SOMP. This bit field is only relevant in SOMP mode to select the ARU data        source."]
        #[inline(always)]
        pub fn adl(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch2Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch2Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. This bit enables the PCM mode. It is device specific  in which channel the PCM mode is available.        Please refer to device specific CROSSREFERENCE for this information."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch2Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,Ch2Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SR0 is used to generate a trigger on output ATOM i  CH x  OUT T if equal to CN0. This bit is only relevant in SOMP mode. This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch2Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch2Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for pulse of PWM. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to        inverse value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch2Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch2Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shadow register for CMU clock source register CLK SRC. If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if        the CMU CLK source for PWM generation should be changed during        operation  the old CMU CLK has to operate until the update of the ATOM        channels internal CLK SRC register by the CLK SRC SR content is done        either by an end of a period or a FORCE UPDATE. After  channel  reset  the selected CLK SRC value is the SYS CLK  input        of Global Clock Divider . To use in SOMP mode one of the CMU CLKx  it is        recommended to perform a forced update of CLK SRC with the value of        CLK SRC SR value before with enabling the channel."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch2Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch2Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch2Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch2Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch2Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch2Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode. This mode is only applicable in SOMP mode."]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch2Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch2Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. If RST CCU0 1 and UPEN CTRLx 1 are set  TRIG  x 1  or TIM  EXT CAPTURE x  triggers        also the update of work register  CM0  CM1 and CLK SRC ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch2Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch2Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch2Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch2Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch2Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch2Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch2Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch2Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch2Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch2Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode"]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch2Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch2Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch2Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch2Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch2Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch2Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Somp {
        #[inline(always)]
        fn default() -> Ch2Somp {
            <crate::RegValueT<Ch2Somp_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Soms_SPEC;
    impl crate::sealed::RegSpec for Ch2Soms_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMS Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch2Soms = crate::RegValueT<Ch2Soms_SPEC>;

    impl Ch2Soms {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch2Soms_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch2Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch2Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch2Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shift direction for CM1 register. The data that has to be shifted out has to be aligned inside the CM1        register according to the defined shift direction. This bit is only applicable if ARU EN   0. If the direction  ACB0  is changed  the output ATOM OUT x  switches        immediately to the other  first  bit of CM1  bit 0 if ACB0   0  bit 23        if ACB0  160    160 1 ."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch2Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch2Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Double Shift Output. Note  If DSO 1  only shift right is possible."]
        #[inline(always)]
        pub fn dso(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch2Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch2Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines signal level when channel and output is disabling. Reset value depends on the hardware configuration chosen by silicon          vendor. If the output is enabled  the output ATOM OUT x  is set to bit 0 or 23          of CM1 register. If the output is disabled  the output ATOM OUT x  is set to inverse          value of SL. An enable or disable of the channel x has no effect on ATOM OUT x . The inverse value of SL is shifted into the CM1 register. If FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to          inverse value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not          changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch2Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch2Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shift frequency select for channel. If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if        the CMU CLK source for PWM generation should be changed during        operation  the old CMU CLK has to operate until the update of the ATOM        channels internal CLK SRC register by the CLK SRC SR content is done        either by an end of a period or a FORCE UPDATE. After  channel  reset  the selected CLK SRC value is the SYS CLK  input        of Global Clock Divider . To use in SOMP mode one of the CMU CLKx  it is        recommended to perform a forced update of CLK SRC with the value of        CLK SRC SR value before with enabling the channel."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch2Soms_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch2Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch2Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch2Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode"]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch2Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch2Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch2Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch2Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch2Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch2Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Soms {
        #[inline(always)]
        fn default() -> Ch2Soms {
            <crate::RegValueT<Ch2Soms_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch2Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Sr0 = crate::RegValueT<Ch2Sr0_SPEC>;

    impl Ch2Sr0 {
        #[doc = "ATOM channel x shadow register SR0. Note  The SR0 register is used as shadow register for CM0 in SOMP and SOMS modes  and is used as capture register for time base TBU TS0 in SOMC mode."]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch2Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch2Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Sr0 {
        #[inline(always)]
        fn default() -> Ch2Sr0 {
            <crate::RegValueT<Ch2Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch2Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Sr1 = crate::RegValueT<Ch2Sr1_SPEC>;

    impl Ch2Sr1 {
        #[doc = "ATOM channel x shadow register SR1. Note  The SR1 register is used as shadow register for CM1 in SOMP and SOMS modes  and is used as capture register for time base TBU TS1 or TBU TS2  when selected in ATOM i  CH x  CTRL register  in SOMC mode."]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch2Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch2Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Sr1 {
        #[inline(always)]
        fn default() -> Ch2Sr1 {
            <crate::RegValueT<Ch2Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Stat_SPEC;
    impl crate::sealed::RegSpec for Ch2Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Stat = crate::RegValueT<Ch2Stat_SPEC>;

    impl Ch2Stat {
        #[doc = "Actual output signal level of ATOM CHx OUT. Note   Reset value is the inverted value of bit SL  which depends on the hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch2Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch2Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ATOM Mode control bits. Note  For ATOM SOMI  SOMC  SOMP and SOMS mode  this register serves as a mirror for the five ARU control bits received through the ARU interface. The bits are valid when the DV bit is set. Note  For SOMB mode  this bit field serves as the work register of the compare strategy. It can be updated with the value of bit field ACB of register ATOM i  CH x  CTRL  or the value of internal shadow register ACB SR."]
        #[inline(always)]
        pub fn acbi(
            self,
        ) -> crate::common::RegisterField<16, 0x1f, 1, 0, u8, Ch2Stat_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0x1f,1,0,u8, Ch2Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Valid ARU Data stored in compare registers. Note  This bit is only applicable in SOMC and SOMB mode. The CPU can determine the status of the ARU transfers with this bit. After the compare event occurred  the bit is reset by hardware ."]
        #[inline(always)]
        pub fn dv(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch2Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<21,1,0,Ch2Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Write request of CPU failed for late update. Note  This bit is only applicable in SOMC and SOMB mode. Bit WRF can be reset by writing a 1 to it."]
        #[inline(always)]
        pub fn wrf(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch2Stat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch2Stat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU data rejected flag. Note  The flag is cleared if valid data is received and stored via ARU."]
        #[inline(always)]
        pub fn dr(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch2Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<23,1,0,Ch2Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ATOM Internal status bits. ACBO 3    1  CCU0 Compare match occurred. ACBO 4    1  CCU1 Compare match occurred. Note  These bits are only set in SOMC mode. Note  ACBO is reset to 0b00000 on an update of register CM0 or CM1  via ARU or CPU . Note  In SOMC mode  these bits are sent as ARU control bits 52..48."]
        #[inline(always)]
        pub fn acbo(
            self,
        ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, Ch2Stat_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0x1f,1,0,u8, Ch2Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Stat {
        #[inline(always)]
        fn default() -> Ch2Stat {
            <crate::RegValueT<Ch2Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch3Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Cm0 = crate::RegValueT<Ch3Cm0_SPEC>;

    impl Ch3Cm0 {
        #[doc = "ATOM CCU0 compare register"]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch3Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch3Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Cm0 {
        #[inline(always)]
        fn default() -> Ch3Cm0 {
            <crate::RegValueT<Ch3Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch3Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Cm1 = crate::RegValueT<Ch3Cm1_SPEC>;

    impl Ch3Cm1 {
        #[doc = "ATOM CCU1 compare register"]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch3Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch3Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Cm1 {
        #[inline(always)]
        fn default() -> Ch3Cm1 {
            <crate::RegValueT<Ch3Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch3Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Cn0 = crate::RegValueT<Ch3Cn0_SPEC>;

    impl Ch3Cn0 {
        #[doc = "ATOM CCU0 counter register"]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch3Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch3Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Cn0 {
        #[inline(always)]
        fn default() -> Ch3Cn0 {
            <crate::RegValueT<Ch3Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch3Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch3Ctrl = crate::RegValueT<Ch3Ctrl_SPEC>;

    impl Ch3Ctrl {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch3Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. Note   This bit is only applicable in SOMC mode."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM Mode control bits. These bits have different meaning in the different ATOM channel modes.        Please refer to the mode description sections. SOMI   CROSSREFERENCE and CROSSREFERENCE for register description. SOMC   CROSSREFERENCE and CROSSREFERENCE for register description. SOMP   CROSSREFERENCE and CROSSREFERENCE for register description. SOMS   CROSSREFERENCE and CROSSREFERENCE for register description. SOMB   CROSSREFERENCE and CROSSREFERENCE for register description."]
        #[inline(always)]
        pub fn acb(
            self,
        ) -> crate::common::RegisterField<4, 0x1f, 1, 0, u8, Ch3Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x1f,1,0,u8, Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. Note   This bit is only applicable in SOMC mode."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended update mode. If EUPM 1  a write access to CM0 or CM1 never causes an AEI write          status 10 . This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level. Reset value depends on the hardware configuration chosen by silicon          vendor. If the output is disabled  the output ATOM OUT x  is set to inverse          SL  independent of the ATOM channel mode. If FREEZE 0  following notes are valid  In SOMP  SOMI  SOMS mode  if the channel is disabled  the internal        register SOUR inside ATOM sub unit SOU is set to inverse value of SL. By        enabling the channel  the register SOUR is not changed. Thus  if the        output is enabled afterwards  the output ATOM OUT x  is the inverse        value of SL. In SOMC mode  if the channel is disabled  the internal register SOUR        inside ATOM sub unit SOU is set to value of SL. By enabling the channel         the register SOUR is not changed. Thus  if the output is enabled and the        channel is disabled  the output ATOM OUT x  is the value of SL. If FREEZE 1  the following notes are valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Actual CMU clock source  SOMS   shadow register for CMU clock source  SOMP . If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done           either by an end of a period or a forced update. After  channel  reset  the selected CLK SRC value is the SYS CLK           input of Global Clock Divider . To use in SOMP mode one of the          CMU CLKx  it is recommended to perform a forced update of CLK SRC with          the value of CLK SRC SR value before with enabling the channel. In case of ECLK SRC 1 and CLK SRC SR   011   100   101   110            a force update leads to an immediate update of CM0  CM1 and CLK SRC."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch3Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. Note  This bit is only applicable in SOMP and SOMS mode. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU Write request bit for late compare register update. Note  The CPU can disable subsequent ARU read requests by the channel and can update the shadow registers with new compare values  while the compare units operate on old compare values received by former ARU accesses  if occurred. Note  On a compare match event  the WR REQ bit will be reset by hardware. Note  At the point of the force update  only the shadow registers SR0 and SR1 are transferred into the CM0  CM1 registers. The output action is still defined by the ACBI bit field described by the ARU together with the old compare values for CM0 CM1. Note   This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode. Note  This mode is only applicable in SOMP mode."]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch3Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. If RST CCU0 1 and UPEN CTRLx 1 are set  TRIG  x 1  or          TIM EXT CAPTURE x  triggers also the update of work register  CM0  CM1          and CLK SRC . This bit is only applicable in SOMP mode. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Serve last ARU communication strategy. This bit is only applicable in SOMC mode. Please note  that setting of this bit has only effect  when ACBI 4 2           is configured for serve last compare strategy   100   101   or 110  . When this bit is not set  the captured time stamps in the shadow          registers SRx are only provided after the CCU1 match occurred. The          ACBO 4 3  bits always return 10 in          that case. By setting this bit  the ATOM channel also provides the captured time          stamps after the CCU0 match event to the ARU. The ACBO 4 3  bits are          set to 01 in that case. After the CCU1          match event  the time stamps are captured again in the SRx registers          and provided to the ARU. The ACBO 4 3  bits are set to 10 .          When the data in the shadow registers after the CCU0 match was not          consumed by an ARU destination and the CCU1 match occurs  the data in          the shadow registers is overwritten by the new captured time stamps.          The ATOM channel does not request new data from the ARU when the CCU0          match values are read from an ARU destination."]
        #[inline(always)]
        pub fn sla(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. Note   This bit is only applicable in SOMP and SOMS modes."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode. Note  This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. Note   This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SOMB mode"]
        #[inline(always)]
        pub fn somb(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE. Note  if channel is disabled and ouptut is enabled  in SOMP mode with UDMODE  0b00 the output is dependng directly on SL bit  independent on FREEZE mode."]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Ctrl {
        #[inline(always)]
        fn default() -> Ch3Ctrl {
            <crate::RegValueT<Ch3Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch3IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3IrqEn = crate::RegValueT<Ch3IrqEn_SPEC>;

    impl Ch3IrqEn {
        #[doc = "ATOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch3IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch3IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM CCU1TC IRQ interrupt enable. See bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch3IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch3IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3IrqEn {
        #[inline(always)]
        fn default() -> Ch3IrqEn {
            <crate::RegValueT<Ch3IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch3IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Software Interrupt Generation Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3IrqForcint = crate::RegValueT<Ch3IrqForcint_SPEC>;

    impl Ch3IrqForcint {
        #[doc = "Trigger ATOM CCU0TC IRQ interrupt by software. Note  This bit is cleared automatically after write. Note  This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch3IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch3IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger ATOM CCU1TC IRQ interrupt by software. Note  This bit is cleared automatically after write. Note  This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch3IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch3IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3IrqForcint {
        #[inline(always)]
        fn default() -> Ch3IrqForcint {
            <crate::RegValueT<Ch3IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch3IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3IrqMode = crate::RegValueT<Ch3IrqMode_SPEC>;

    impl Ch3IrqMode {
        #[doc = "IRQ mode selection. Note  The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch3IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch3IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3IrqMode {
        #[inline(always)]
        fn default() -> Ch3IrqMode {
            <crate::RegValueT<Ch3IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch3IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3IrqNotify = crate::RegValueT<Ch3IrqNotify_SPEC>;

    impl Ch3IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch3IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch3IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1TC  CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec. Note  If bit SR0 TRIG is set to 1  only valid in SOMP mode   this        interrupt notify flag is set in case of SR0 is equal to CN0 and not set        in case of CM1  gt    lt   CN0."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch3IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch3IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3IrqNotify {
        #[inline(always)]
        fn default() -> Ch3IrqNotify {
            <crate::RegValueT<Ch3IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Rdaddr_SPEC;
    impl crate::sealed::RegSpec for Ch3Rdaddr_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 ARU read address Register\n resetvalue={Application Reset:0x1FE01FE}"]
    pub type Ch3Rdaddr = crate::RegValueT<Ch3Rdaddr_SPEC>;

    impl Ch3Rdaddr {
        #[doc = "ARU Read address 0. Note  This read address is used by the ATOM channel to receive data from ARU immediately after the channel and ARU access is enabled  see ATOM i  CH x  CTRL register for details . Note  This bit field is only writable if channel is disabled."]
        #[inline(always)]
        pub fn rdaddr0(
            self,
        ) -> crate::common::RegisterField<0, 0x1ff, 1, 0, u16, Ch3Rdaddr_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x1ff,1,0,u16, Ch3Rdaddr_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Read address 1. Note  The ATOM channel switches to this read address  when requested in the ARU control bits 52 to 48 with the pattern  111   . The channel switches back to the RDADDR0 after one ARU data package was received on RDADDR1 and the compare match event is occurred. Note  This read address is only applicable in SOMC mode. Note  This bit field is only writable if channel is disabled."]
        #[inline(always)]
        pub fn rdaddr1(
            self,
        ) -> crate::common::RegisterField<16, 0x1ff, 1, 0, u16, Ch3Rdaddr_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x1ff,1,0,u16, Ch3Rdaddr_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Rdaddr {
        #[inline(always)]
        fn default() -> Ch3Rdaddr {
            <crate::RegValueT<Ch3Rdaddr_SPEC> as RegisterValue<_>>::new(33423870)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Somb_SPEC;
    impl crate::sealed::RegSpec for Ch3Somb_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMB Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch3Somb = crate::RegValueT<Ch3Somb_SPEC>;

    impl Ch3Somb {
        #[doc = "ATOM channel mode select. Not used in ATOM SOMB mode."]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch3Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch3Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. This bit is only applicable if three time bases are present in the GTM.        Otherwise  this bit is reserved."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch3Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch3Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch3Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch3Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control bits. Note  These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_1_0(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch3Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch3Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM SOMB compare strategy. These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_4_3_2(
            self,
        ) -> crate::common::RegisterField<6, 0x7, 1, 0, u8, Ch3Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x7,1,0,u8, Ch3Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. The compare unit CCU0 or CCU1 that compares against TBU TS0  depending        on CCUx control mode defined by ACB CM 4 2   always performs a        greater equal comparison  independent of the CMP CTRL bit."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch3Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch3Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended update mode. If EUPM 1 and after a CCU0 compare match  if ARU EN 0  written CM0 value not stored. if ARU EN 1  ARU read request is continued and CM1 is updated until CCU1        compare match. Received CM0 is not stored. This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch3Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch3Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel enable. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL. If FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to        value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch3Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch3Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU Write request bit for late compare register update. The CPU can disable subsequent ARU read requests by the channel and can        update the shadow registers with new compare values  while the compare        units operate on old compare values received by former ARU accesses  if        occurred. On a compare match event  the WR REQ bit will be reset by hardware. At the point of the force update  only the shadow registers SR0 and SR1        are transferred into the CM0  CM1 registers. The output action is still        defined by the ACBI bit field described by the ARU together with the old        compare values for CM0 CM1."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch3Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch3Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch3Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch3Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch3Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch3Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode"]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch3Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch3Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SOMB  SOMB mode"]
        #[inline(always)]
        pub fn somb(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch3Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch3Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch3Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch3Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Somb {
        #[inline(always)]
        fn default() -> Ch3Somb {
            <crate::RegValueT<Ch3Somb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Somc_SPEC;
    impl crate::sealed::RegSpec for Ch3Somc_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMC Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch3Somc = crate::RegValueT<Ch3Somc_SPEC>;

    impl Ch3Somc {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch3Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch3Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. This bit is only applicable if three time bases are present in the GTM.        Otherwise  this bit is reserved."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch3Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch3Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch3Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch3Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control bits. These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_1_0(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch3Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch3Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM control bits ACB 4   ACB 3   ACB 2 . Independent of ARU EN  a writing of 0b111 cancels any pending CCU0 or        CCU1 compare. Note  These bits are defining the compare strategy only if        ARU EN   0."]
        #[inline(always)]
        pub fn acb_4_3_2(
            self,
        ) -> crate::common::RegisterField<6, 0x7, 1, 0, u8, Ch3Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x7,1,0,u8, Ch3Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. The compare unit CCU0 or CCU1 that compares against TBU TS0  depending        on CCUx control mode defined by ACBI 4 2  or ACB42  always performs a        greater equal comparison  independent on CMP CTRL bit."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch3Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch3Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended Update Mode. If EUPM 1 and after a CCU0 compare match  If ARU EN 0  written CM0 value not stored. If ARU EN 1  ARU read request is continued and CM1 is updated until CCU1        compare match. Received CM0 values are not stored. This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch3Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch3Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel enable. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL. If FREEZE 0  following note is valid  If the channel is disabled  the output register of SOU unit is set to        value of SL. If FREEZE 1  following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch3Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch3Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU write request bit. The CPU can disable subsequent ARU read requests by the channel and can        update the shadow registers with new compare values  while the compare        units operate on old compare values received by former ARU accesses  if        occurred. On a compare match event  the WR REQ bit will be reset by hardware. At the point of the force update  only the shadow registers SR0 and SR1        are transferred into the CM0  CM1 registers. The output action is still        defined by the ACBI bit field described by the ARU together with the old        compare values for CM0 CM1."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch3Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch3Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch3Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch3Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TRIGOUT  Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch3Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch3Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Serve last ARU communication strategy. Please note  that setting of this bit has only effect  when ACBI 4 2  is        configured for serve last compare strategy   quot 100 quot    quot 101 quot   or  quot 110 quot  . When this bit is not set  the captured time stamps in the shadow        registers SRx are only provided after the CCU1 match occurred. The        ACBO 4 3  bits always return  quot 10 quot  in that case. By setting this bit  the ATOM channel also provides the captured time        stamps after the CCU0 match event to the ARU. The ACBO 4 3  bits are set        to   8220 01  8221  in that case. After the CCU1 match event  the time stamps are        captured again in the SRx registers and provided to the ARU. The        ACBO 4 3  bits are set to   8220 10  8221 . When the data in the shadow registers        after the CCU0 match was not consumed by an ARU destination and the CCU1        match occurs  the data in the shadow registers is overwritten by the new        captured time stamps. The ATOM channel does not request new data from        the ARU when the CCU0 match values are read from an ARU destination."]
        #[inline(always)]
        pub fn sla(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch3Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch3Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode"]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch3Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch3Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch3Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch3Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Somc {
        #[inline(always)]
        fn default() -> Ch3Somc {
            <crate::RegValueT<Ch3Somc_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Somi_SPEC;
    impl crate::sealed::RegSpec for Ch3Somi_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMI Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch3Somi = crate::RegValueT<Ch3Somi_SPEC>;

    impl Ch3Somi {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch3Somi_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch3Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch3Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch3Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACB bit 0 . Note  Bosch name ACB 0 ."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch3Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch3Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel is enabled. Note   Reset value depends on the hardware configuration chosen by silicon vendor. Note  If the output is disabled  the output ATOM OUT x  is set to inverse value of SL. If FREEZE 0  following note is valid   If the channel is disabled  the output register of SOU unit is set to inverse value of SL. If FREEZE 1  following note is valid   If the channel is disabled  the output register of SOU unit is not changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch3Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch3Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch3Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch3Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Somi {
        #[inline(always)]
        fn default() -> Ch3Somi {
            <crate::RegValueT<Ch3Somi_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Somp_SPEC;
    impl crate::sealed::RegSpec for Ch3Somp_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMP Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch3Somp = crate::RegValueT<Ch3Somp_SPEC>;

    impl Ch3Somp {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch3Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch3Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch3Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch3Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU data select for SOMP. This bit field is only relevant in SOMP mode to select the ARU data        source."]
        #[inline(always)]
        pub fn adl(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch3Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch3Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. This bit enables the PCM mode. It is device specific  in which channel the PCM mode is available.        Please refer to device specific CROSSREFERENCE for this information."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch3Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,Ch3Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SR0 is used to generate a trigger on output ATOM i  CH x  OUT T if equal to CN0. This bit is only relevant in SOMP mode. This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch3Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch3Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for pulse of PWM. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to        inverse value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch3Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch3Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shadow register for CMU clock source register CLK SRC. If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if        the CMU CLK source for PWM generation should be changed during        operation  the old CMU CLK has to operate until the update of the ATOM        channels internal CLK SRC register by the CLK SRC SR content is done        either by an end of a period or a FORCE UPDATE. After  channel  reset  the selected CLK SRC value is the SYS CLK  input        of Global Clock Divider . To use in SOMP mode one of the CMU CLKx  it is        recommended to perform a forced update of CLK SRC with the value of        CLK SRC SR value before with enabling the channel."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch3Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch3Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch3Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch3Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch3Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch3Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode. This mode is only applicable in SOMP mode."]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch3Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch3Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. If RST CCU0 1 and UPEN CTRLx 1 are set  TRIG  x 1  or TIM  EXT CAPTURE x  triggers        also the update of work register  CM0  CM1 and CLK SRC ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch3Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch3Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch3Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch3Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch3Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch3Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch3Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch3Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch3Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch3Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode"]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch3Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch3Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch3Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch3Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch3Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch3Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Somp {
        #[inline(always)]
        fn default() -> Ch3Somp {
            <crate::RegValueT<Ch3Somp_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Soms_SPEC;
    impl crate::sealed::RegSpec for Ch3Soms_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMS Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch3Soms = crate::RegValueT<Ch3Soms_SPEC>;

    impl Ch3Soms {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch3Soms_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch3Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch3Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch3Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shift direction for CM1 register. The data that has to be shifted out has to be aligned inside the CM1        register according to the defined shift direction. This bit is only applicable if ARU EN   0. If the direction  ACB0  is changed  the output ATOM OUT x  switches        immediately to the other  first  bit of CM1  bit 0 if ACB0   0  bit 23        if ACB0  160    160 1 ."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch3Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch3Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Double Shift Output. Note  If DSO 1  only shift right is possible."]
        #[inline(always)]
        pub fn dso(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch3Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch3Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines signal level when channel and output is disabling. Reset value depends on the hardware configuration chosen by silicon          vendor. If the output is enabled  the output ATOM OUT x  is set to bit 0 or 23          of CM1 register. If the output is disabled  the output ATOM OUT x  is set to inverse          value of SL. An enable or disable of the channel x has no effect on ATOM OUT x . The inverse value of SL is shifted into the CM1 register. If FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to          inverse value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not          changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch3Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch3Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shift frequency select for channel. If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if        the CMU CLK source for PWM generation should be changed during        operation  the old CMU CLK has to operate until the update of the ATOM        channels internal CLK SRC register by the CLK SRC SR content is done        either by an end of a period or a FORCE UPDATE. After  channel  reset  the selected CLK SRC value is the SYS CLK  input        of Global Clock Divider . To use in SOMP mode one of the CMU CLKx  it is        recommended to perform a forced update of CLK SRC with the value of        CLK SRC SR value before with enabling the channel."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch3Soms_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch3Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch3Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch3Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode"]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch3Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch3Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch3Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch3Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch3Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch3Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Soms {
        #[inline(always)]
        fn default() -> Ch3Soms {
            <crate::RegValueT<Ch3Soms_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch3Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Sr0 = crate::RegValueT<Ch3Sr0_SPEC>;

    impl Ch3Sr0 {
        #[doc = "ATOM channel x shadow register SR0. Note  The SR0 register is used as shadow register for CM0 in SOMP and SOMS modes  and is used as capture register for time base TBU TS0 in SOMC mode."]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch3Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch3Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Sr0 {
        #[inline(always)]
        fn default() -> Ch3Sr0 {
            <crate::RegValueT<Ch3Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch3Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Sr1 = crate::RegValueT<Ch3Sr1_SPEC>;

    impl Ch3Sr1 {
        #[doc = "ATOM channel x shadow register SR1. Note  The SR1 register is used as shadow register for CM1 in SOMP and SOMS modes  and is used as capture register for time base TBU TS1 or TBU TS2  when selected in ATOM i  CH x  CTRL register  in SOMC mode."]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch3Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch3Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Sr1 {
        #[inline(always)]
        fn default() -> Ch3Sr1 {
            <crate::RegValueT<Ch3Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Stat_SPEC;
    impl crate::sealed::RegSpec for Ch3Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Stat = crate::RegValueT<Ch3Stat_SPEC>;

    impl Ch3Stat {
        #[doc = "Actual output signal level of ATOM CHx OUT. Note   Reset value is the inverted value of bit SL  which depends on the hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch3Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch3Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ATOM Mode control bits. Note  For ATOM SOMI  SOMC  SOMP and SOMS mode  this register serves as a mirror for the five ARU control bits received through the ARU interface. The bits are valid when the DV bit is set. Note  For SOMB mode  this bit field serves as the work register of the compare strategy. It can be updated with the value of bit field ACB of register ATOM i  CH x  CTRL  or the value of internal shadow register ACB SR."]
        #[inline(always)]
        pub fn acbi(
            self,
        ) -> crate::common::RegisterField<16, 0x1f, 1, 0, u8, Ch3Stat_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0x1f,1,0,u8, Ch3Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Valid ARU Data stored in compare registers. Note  This bit is only applicable in SOMC and SOMB mode. The CPU can determine the status of the ARU transfers with this bit. After the compare event occurred  the bit is reset by hardware ."]
        #[inline(always)]
        pub fn dv(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch3Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<21,1,0,Ch3Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Write request of CPU failed for late update. Note  This bit is only applicable in SOMC and SOMB mode. Bit WRF can be reset by writing a 1 to it."]
        #[inline(always)]
        pub fn wrf(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch3Stat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch3Stat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU data rejected flag. Note  The flag is cleared if valid data is received and stored via ARU."]
        #[inline(always)]
        pub fn dr(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch3Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<23,1,0,Ch3Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ATOM Internal status bits. ACBO 3    1  CCU0 Compare match occurred. ACBO 4    1  CCU1 Compare match occurred. Note  These bits are only set in SOMC mode. Note  ACBO is reset to 0b00000 on an update of register CM0 or CM1  via ARU or CPU . Note  In SOMC mode  these bits are sent as ARU control bits 52..48."]
        #[inline(always)]
        pub fn acbo(
            self,
        ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, Ch3Stat_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0x1f,1,0,u8, Ch3Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Stat {
        #[inline(always)]
        fn default() -> Ch3Stat {
            <crate::RegValueT<Ch3Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch4Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Cm0 = crate::RegValueT<Ch4Cm0_SPEC>;

    impl Ch4Cm0 {
        #[doc = "ATOM CCU0 compare register"]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch4Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch4Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Cm0 {
        #[inline(always)]
        fn default() -> Ch4Cm0 {
            <crate::RegValueT<Ch4Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch4Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Cm1 = crate::RegValueT<Ch4Cm1_SPEC>;

    impl Ch4Cm1 {
        #[doc = "ATOM CCU1 compare register"]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch4Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch4Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Cm1 {
        #[inline(always)]
        fn default() -> Ch4Cm1 {
            <crate::RegValueT<Ch4Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch4Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Cn0 = crate::RegValueT<Ch4Cn0_SPEC>;

    impl Ch4Cn0 {
        #[doc = "ATOM CCU0 counter register"]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch4Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch4Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Cn0 {
        #[inline(always)]
        fn default() -> Ch4Cn0 {
            <crate::RegValueT<Ch4Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch4Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch4Ctrl = crate::RegValueT<Ch4Ctrl_SPEC>;

    impl Ch4Ctrl {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch4Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. Note   This bit is only applicable in SOMC mode."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM Mode control bits. These bits have different meaning in the different ATOM channel modes.        Please refer to the mode description sections. SOMI   CROSSREFERENCE and CROSSREFERENCE for register description. SOMC   CROSSREFERENCE and CROSSREFERENCE for register description. SOMP   CROSSREFERENCE and CROSSREFERENCE for register description. SOMS   CROSSREFERENCE and CROSSREFERENCE for register description. SOMB   CROSSREFERENCE and CROSSREFERENCE for register description."]
        #[inline(always)]
        pub fn acb(
            self,
        ) -> crate::common::RegisterField<4, 0x1f, 1, 0, u8, Ch4Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x1f,1,0,u8, Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. Note   This bit is only applicable in SOMC mode."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended update mode. If EUPM 1  a write access to CM0 or CM1 never causes an AEI write          status 10 . This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level. Reset value depends on the hardware configuration chosen by silicon          vendor. If the output is disabled  the output ATOM OUT x  is set to inverse          SL  independent of the ATOM channel mode. If FREEZE 0  following notes are valid  In SOMP  SOMI  SOMS mode  if the channel is disabled  the internal        register SOUR inside ATOM sub unit SOU is set to inverse value of SL. By        enabling the channel  the register SOUR is not changed. Thus  if the        output is enabled afterwards  the output ATOM OUT x  is the inverse        value of SL. In SOMC mode  if the channel is disabled  the internal register SOUR        inside ATOM sub unit SOU is set to value of SL. By enabling the channel         the register SOUR is not changed. Thus  if the output is enabled and the        channel is disabled  the output ATOM OUT x  is the value of SL. If FREEZE 1  the following notes are valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Actual CMU clock source  SOMS   shadow register for CMU clock source  SOMP . If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done           either by an end of a period or a forced update. After  channel  reset  the selected CLK SRC value is the SYS CLK           input of Global Clock Divider . To use in SOMP mode one of the          CMU CLKx  it is recommended to perform a forced update of CLK SRC with          the value of CLK SRC SR value before with enabling the channel. In case of ECLK SRC 1 and CLK SRC SR   011   100   101   110            a force update leads to an immediate update of CM0  CM1 and CLK SRC."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch4Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. Note  This bit is only applicable in SOMP and SOMS mode. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU Write request bit for late compare register update. Note  The CPU can disable subsequent ARU read requests by the channel and can update the shadow registers with new compare values  while the compare units operate on old compare values received by former ARU accesses  if occurred. Note  On a compare match event  the WR REQ bit will be reset by hardware. Note  At the point of the force update  only the shadow registers SR0 and SR1 are transferred into the CM0  CM1 registers. The output action is still defined by the ACBI bit field described by the ARU together with the old compare values for CM0 CM1. Note   This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode. Note  This mode is only applicable in SOMP mode."]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch4Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. If RST CCU0 1 and UPEN CTRLx 1 are set  TRIG  x 1  or          TIM EXT CAPTURE x  triggers also the update of work register  CM0  CM1          and CLK SRC . This bit is only applicable in SOMP mode. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Serve last ARU communication strategy. This bit is only applicable in SOMC mode. Please note  that setting of this bit has only effect  when ACBI 4 2           is configured for serve last compare strategy   100   101   or 110  . When this bit is not set  the captured time stamps in the shadow          registers SRx are only provided after the CCU1 match occurred. The          ACBO 4 3  bits always return 10 in          that case. By setting this bit  the ATOM channel also provides the captured time          stamps after the CCU0 match event to the ARU. The ACBO 4 3  bits are          set to 01 in that case. After the CCU1          match event  the time stamps are captured again in the SRx registers          and provided to the ARU. The ACBO 4 3  bits are set to 10 .          When the data in the shadow registers after the CCU0 match was not          consumed by an ARU destination and the CCU1 match occurs  the data in          the shadow registers is overwritten by the new captured time stamps.          The ATOM channel does not request new data from the ARU when the CCU0          match values are read from an ARU destination."]
        #[inline(always)]
        pub fn sla(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. Note   This bit is only applicable in SOMP and SOMS modes."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode. Note  This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. Note   This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SOMB mode"]
        #[inline(always)]
        pub fn somb(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE. Note  if channel is disabled and ouptut is enabled  in SOMP mode with UDMODE  0b00 the output is dependng directly on SL bit  independent on FREEZE mode."]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Ctrl {
        #[inline(always)]
        fn default() -> Ch4Ctrl {
            <crate::RegValueT<Ch4Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch4IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4IrqEn = crate::RegValueT<Ch4IrqEn_SPEC>;

    impl Ch4IrqEn {
        #[doc = "ATOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch4IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch4IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM CCU1TC IRQ interrupt enable. See bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch4IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch4IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4IrqEn {
        #[inline(always)]
        fn default() -> Ch4IrqEn {
            <crate::RegValueT<Ch4IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch4IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Software Interrupt Generation Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4IrqForcint = crate::RegValueT<Ch4IrqForcint_SPEC>;

    impl Ch4IrqForcint {
        #[doc = "Trigger ATOM CCU0TC IRQ interrupt by software. Note  This bit is cleared automatically after write. Note  This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch4IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch4IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger ATOM CCU1TC IRQ interrupt by software. Note  This bit is cleared automatically after write. Note  This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch4IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch4IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4IrqForcint {
        #[inline(always)]
        fn default() -> Ch4IrqForcint {
            <crate::RegValueT<Ch4IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch4IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4IrqMode = crate::RegValueT<Ch4IrqMode_SPEC>;

    impl Ch4IrqMode {
        #[doc = "IRQ mode selection. Note  The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch4IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch4IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4IrqMode {
        #[inline(always)]
        fn default() -> Ch4IrqMode {
            <crate::RegValueT<Ch4IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch4IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4IrqNotify = crate::RegValueT<Ch4IrqNotify_SPEC>;

    impl Ch4IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch4IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch4IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1TC  CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec. Note  If bit SR0 TRIG is set to 1  only valid in SOMP mode   this        interrupt notify flag is set in case of SR0 is equal to CN0 and not set        in case of CM1  gt    lt   CN0."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch4IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch4IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4IrqNotify {
        #[inline(always)]
        fn default() -> Ch4IrqNotify {
            <crate::RegValueT<Ch4IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Rdaddr_SPEC;
    impl crate::sealed::RegSpec for Ch4Rdaddr_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 ARU read address Register\n resetvalue={Application Reset:0x1FE01FE}"]
    pub type Ch4Rdaddr = crate::RegValueT<Ch4Rdaddr_SPEC>;

    impl Ch4Rdaddr {
        #[doc = "ARU Read address 0. Note  This read address is used by the ATOM channel to receive data from ARU immediately after the channel and ARU access is enabled  see ATOM i  CH x  CTRL register for details . Note  This bit field is only writable if channel is disabled."]
        #[inline(always)]
        pub fn rdaddr0(
            self,
        ) -> crate::common::RegisterField<0, 0x1ff, 1, 0, u16, Ch4Rdaddr_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x1ff,1,0,u16, Ch4Rdaddr_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Read address 1. Note  The ATOM channel switches to this read address  when requested in the ARU control bits 52 to 48 with the pattern  111   . The channel switches back to the RDADDR0 after one ARU data package was received on RDADDR1 and the compare match event is occurred. Note  This read address is only applicable in SOMC mode. Note  This bit field is only writable if channel is disabled."]
        #[inline(always)]
        pub fn rdaddr1(
            self,
        ) -> crate::common::RegisterField<16, 0x1ff, 1, 0, u16, Ch4Rdaddr_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x1ff,1,0,u16, Ch4Rdaddr_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Rdaddr {
        #[inline(always)]
        fn default() -> Ch4Rdaddr {
            <crate::RegValueT<Ch4Rdaddr_SPEC> as RegisterValue<_>>::new(33423870)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Somb_SPEC;
    impl crate::sealed::RegSpec for Ch4Somb_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMB Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch4Somb = crate::RegValueT<Ch4Somb_SPEC>;

    impl Ch4Somb {
        #[doc = "ATOM channel mode select. Not used in ATOM SOMB mode."]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch4Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch4Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. This bit is only applicable if three time bases are present in the GTM.        Otherwise  this bit is reserved."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch4Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch4Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch4Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch4Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control bits. Note  These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_1_0(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch4Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch4Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM SOMB compare strategy. These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_4_3_2(
            self,
        ) -> crate::common::RegisterField<6, 0x7, 1, 0, u8, Ch4Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x7,1,0,u8, Ch4Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. The compare unit CCU0 or CCU1 that compares against TBU TS0  depending        on CCUx control mode defined by ACB CM 4 2   always performs a        greater equal comparison  independent of the CMP CTRL bit."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch4Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch4Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended update mode. If EUPM 1 and after a CCU0 compare match  if ARU EN 0  written CM0 value not stored. if ARU EN 1  ARU read request is continued and CM1 is updated until CCU1        compare match. Received CM0 is not stored. This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch4Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch4Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel enable. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL. If FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to        value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch4Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch4Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU Write request bit for late compare register update. The CPU can disable subsequent ARU read requests by the channel and can        update the shadow registers with new compare values  while the compare        units operate on old compare values received by former ARU accesses  if        occurred. On a compare match event  the WR REQ bit will be reset by hardware. At the point of the force update  only the shadow registers SR0 and SR1        are transferred into the CM0  CM1 registers. The output action is still        defined by the ACBI bit field described by the ARU together with the old        compare values for CM0 CM1."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch4Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch4Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch4Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch4Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch4Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch4Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode"]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch4Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch4Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SOMB  SOMB mode"]
        #[inline(always)]
        pub fn somb(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch4Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch4Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch4Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch4Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Somb {
        #[inline(always)]
        fn default() -> Ch4Somb {
            <crate::RegValueT<Ch4Somb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Somc_SPEC;
    impl crate::sealed::RegSpec for Ch4Somc_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMC Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch4Somc = crate::RegValueT<Ch4Somc_SPEC>;

    impl Ch4Somc {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch4Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch4Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. This bit is only applicable if three time bases are present in the GTM.        Otherwise  this bit is reserved."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch4Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch4Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch4Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch4Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control bits. These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_1_0(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch4Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch4Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM control bits ACB 4   ACB 3   ACB 2 . Independent of ARU EN  a writing of 0b111 cancels any pending CCU0 or        CCU1 compare. Note  These bits are defining the compare strategy only if        ARU EN   0."]
        #[inline(always)]
        pub fn acb_4_3_2(
            self,
        ) -> crate::common::RegisterField<6, 0x7, 1, 0, u8, Ch4Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x7,1,0,u8, Ch4Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. The compare unit CCU0 or CCU1 that compares against TBU TS0  depending        on CCUx control mode defined by ACBI 4 2  or ACB42  always performs a        greater equal comparison  independent on CMP CTRL bit."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch4Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch4Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended Update Mode. If EUPM 1 and after a CCU0 compare match  If ARU EN 0  written CM0 value not stored. If ARU EN 1  ARU read request is continued and CM1 is updated until CCU1        compare match. Received CM0 values are not stored. This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch4Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch4Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel enable. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL. If FREEZE 0  following note is valid  If the channel is disabled  the output register of SOU unit is set to        value of SL. If FREEZE 1  following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch4Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch4Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU write request bit. The CPU can disable subsequent ARU read requests by the channel and can        update the shadow registers with new compare values  while the compare        units operate on old compare values received by former ARU accesses  if        occurred. On a compare match event  the WR REQ bit will be reset by hardware. At the point of the force update  only the shadow registers SR0 and SR1        are transferred into the CM0  CM1 registers. The output action is still        defined by the ACBI bit field described by the ARU together with the old        compare values for CM0 CM1."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch4Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch4Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch4Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch4Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TRIGOUT  Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch4Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch4Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Serve last ARU communication strategy. Please note  that setting of this bit has only effect  when ACBI 4 2  is        configured for serve last compare strategy   quot 100 quot    quot 101 quot   or  quot 110 quot  . When this bit is not set  the captured time stamps in the shadow        registers SRx are only provided after the CCU1 match occurred. The        ACBO 4 3  bits always return  quot 10 quot  in that case. By setting this bit  the ATOM channel also provides the captured time        stamps after the CCU0 match event to the ARU. The ACBO 4 3  bits are set        to   8220 01  8221  in that case. After the CCU1 match event  the time stamps are        captured again in the SRx registers and provided to the ARU. The        ACBO 4 3  bits are set to   8220 10  8221 . When the data in the shadow registers        after the CCU0 match was not consumed by an ARU destination and the CCU1        match occurs  the data in the shadow registers is overwritten by the new        captured time stamps. The ATOM channel does not request new data from        the ARU when the CCU0 match values are read from an ARU destination."]
        #[inline(always)]
        pub fn sla(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch4Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch4Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode"]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch4Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch4Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch4Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch4Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Somc {
        #[inline(always)]
        fn default() -> Ch4Somc {
            <crate::RegValueT<Ch4Somc_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Somi_SPEC;
    impl crate::sealed::RegSpec for Ch4Somi_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMI Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch4Somi = crate::RegValueT<Ch4Somi_SPEC>;

    impl Ch4Somi {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch4Somi_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch4Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch4Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch4Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACB bit 0 . Note  Bosch name ACB 0 ."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch4Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch4Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel is enabled. Note   Reset value depends on the hardware configuration chosen by silicon vendor. Note  If the output is disabled  the output ATOM OUT x  is set to inverse value of SL. If FREEZE 0  following note is valid   If the channel is disabled  the output register of SOU unit is set to inverse value of SL. If FREEZE 1  following note is valid   If the channel is disabled  the output register of SOU unit is not changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch4Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch4Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch4Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch4Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Somi {
        #[inline(always)]
        fn default() -> Ch4Somi {
            <crate::RegValueT<Ch4Somi_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Somp_SPEC;
    impl crate::sealed::RegSpec for Ch4Somp_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMP Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch4Somp = crate::RegValueT<Ch4Somp_SPEC>;

    impl Ch4Somp {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch4Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch4Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch4Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch4Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU data select for SOMP. This bit field is only relevant in SOMP mode to select the ARU data        source."]
        #[inline(always)]
        pub fn adl(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch4Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch4Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. This bit enables the PCM mode. It is device specific  in which channel the PCM mode is available.        Please refer to device specific CROSSREFERENCE for this information."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch4Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,Ch4Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SR0 is used to generate a trigger on output ATOM i  CH x  OUT T if equal to CN0. This bit is only relevant in SOMP mode. This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch4Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch4Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for pulse of PWM. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to        inverse value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch4Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch4Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shadow register for CMU clock source register CLK SRC. If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if        the CMU CLK source for PWM generation should be changed during        operation  the old CMU CLK has to operate until the update of the ATOM        channels internal CLK SRC register by the CLK SRC SR content is done        either by an end of a period or a FORCE UPDATE. After  channel  reset  the selected CLK SRC value is the SYS CLK  input        of Global Clock Divider . To use in SOMP mode one of the CMU CLKx  it is        recommended to perform a forced update of CLK SRC with the value of        CLK SRC SR value before with enabling the channel."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch4Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch4Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch4Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch4Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch4Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch4Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode. This mode is only applicable in SOMP mode."]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch4Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch4Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. If RST CCU0 1 and UPEN CTRLx 1 are set  TRIG  x 1  or TIM  EXT CAPTURE x  triggers        also the update of work register  CM0  CM1 and CLK SRC ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch4Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch4Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch4Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch4Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch4Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch4Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch4Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch4Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch4Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch4Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode"]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch4Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch4Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch4Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch4Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch4Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch4Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Somp {
        #[inline(always)]
        fn default() -> Ch4Somp {
            <crate::RegValueT<Ch4Somp_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Soms_SPEC;
    impl crate::sealed::RegSpec for Ch4Soms_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMS Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch4Soms = crate::RegValueT<Ch4Soms_SPEC>;

    impl Ch4Soms {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch4Soms_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch4Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch4Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch4Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shift direction for CM1 register. The data that has to be shifted out has to be aligned inside the CM1        register according to the defined shift direction. This bit is only applicable if ARU EN   0. If the direction  ACB0  is changed  the output ATOM OUT x  switches        immediately to the other  first  bit of CM1  bit 0 if ACB0   0  bit 23        if ACB0  160    160 1 ."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch4Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch4Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Double Shift Output. Note  If DSO 1  only shift right is possible."]
        #[inline(always)]
        pub fn dso(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch4Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch4Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines signal level when channel and output is disabling. Reset value depends on the hardware configuration chosen by silicon          vendor. If the output is enabled  the output ATOM OUT x  is set to bit 0 or 23          of CM1 register. If the output is disabled  the output ATOM OUT x  is set to inverse          value of SL. An enable or disable of the channel x has no effect on ATOM OUT x . The inverse value of SL is shifted into the CM1 register. If FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to          inverse value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not          changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch4Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch4Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shift frequency select for channel. If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if        the CMU CLK source for PWM generation should be changed during        operation  the old CMU CLK has to operate until the update of the ATOM        channels internal CLK SRC register by the CLK SRC SR content is done        either by an end of a period or a FORCE UPDATE. After  channel  reset  the selected CLK SRC value is the SYS CLK  input        of Global Clock Divider . To use in SOMP mode one of the CMU CLKx  it is        recommended to perform a forced update of CLK SRC with the value of        CLK SRC SR value before with enabling the channel."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch4Soms_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch4Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch4Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch4Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode"]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch4Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch4Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch4Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch4Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch4Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch4Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Soms {
        #[inline(always)]
        fn default() -> Ch4Soms {
            <crate::RegValueT<Ch4Soms_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch4Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Sr0 = crate::RegValueT<Ch4Sr0_SPEC>;

    impl Ch4Sr0 {
        #[doc = "ATOM channel x shadow register SR0. Note  The SR0 register is used as shadow register for CM0 in SOMP and SOMS modes  and is used as capture register for time base TBU TS0 in SOMC mode."]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch4Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch4Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Sr0 {
        #[inline(always)]
        fn default() -> Ch4Sr0 {
            <crate::RegValueT<Ch4Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch4Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Sr1 = crate::RegValueT<Ch4Sr1_SPEC>;

    impl Ch4Sr1 {
        #[doc = "ATOM channel x shadow register SR1. Note  The SR1 register is used as shadow register for CM1 in SOMP and SOMS modes  and is used as capture register for time base TBU TS1 or TBU TS2  when selected in ATOM i  CH x  CTRL register  in SOMC mode."]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch4Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch4Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Sr1 {
        #[inline(always)]
        fn default() -> Ch4Sr1 {
            <crate::RegValueT<Ch4Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Stat_SPEC;
    impl crate::sealed::RegSpec for Ch4Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Stat = crate::RegValueT<Ch4Stat_SPEC>;

    impl Ch4Stat {
        #[doc = "Actual output signal level of ATOM CHx OUT. Note   Reset value is the inverted value of bit SL  which depends on the hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch4Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch4Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ATOM Mode control bits. Note  For ATOM SOMI  SOMC  SOMP and SOMS mode  this register serves as a mirror for the five ARU control bits received through the ARU interface. The bits are valid when the DV bit is set. Note  For SOMB mode  this bit field serves as the work register of the compare strategy. It can be updated with the value of bit field ACB of register ATOM i  CH x  CTRL  or the value of internal shadow register ACB SR."]
        #[inline(always)]
        pub fn acbi(
            self,
        ) -> crate::common::RegisterField<16, 0x1f, 1, 0, u8, Ch4Stat_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0x1f,1,0,u8, Ch4Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Valid ARU Data stored in compare registers. Note  This bit is only applicable in SOMC and SOMB mode. The CPU can determine the status of the ARU transfers with this bit. After the compare event occurred  the bit is reset by hardware ."]
        #[inline(always)]
        pub fn dv(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch4Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<21,1,0,Ch4Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Write request of CPU failed for late update. Note  This bit is only applicable in SOMC and SOMB mode. Bit WRF can be reset by writing a 1 to it."]
        #[inline(always)]
        pub fn wrf(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch4Stat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch4Stat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU data rejected flag. Note  The flag is cleared if valid data is received and stored via ARU."]
        #[inline(always)]
        pub fn dr(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch4Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<23,1,0,Ch4Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ATOM Internal status bits. ACBO 3    1  CCU0 Compare match occurred. ACBO 4    1  CCU1 Compare match occurred. Note  These bits are only set in SOMC mode. Note  ACBO is reset to 0b00000 on an update of register CM0 or CM1  via ARU or CPU . Note  In SOMC mode  these bits are sent as ARU control bits 52..48."]
        #[inline(always)]
        pub fn acbo(
            self,
        ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, Ch4Stat_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0x1f,1,0,u8, Ch4Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Stat {
        #[inline(always)]
        fn default() -> Ch4Stat {
            <crate::RegValueT<Ch4Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch5Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Cm0 = crate::RegValueT<Ch5Cm0_SPEC>;

    impl Ch5Cm0 {
        #[doc = "ATOM CCU0 compare register"]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch5Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch5Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Cm0 {
        #[inline(always)]
        fn default() -> Ch5Cm0 {
            <crate::RegValueT<Ch5Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch5Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Cm1 = crate::RegValueT<Ch5Cm1_SPEC>;

    impl Ch5Cm1 {
        #[doc = "ATOM CCU1 compare register"]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch5Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch5Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Cm1 {
        #[inline(always)]
        fn default() -> Ch5Cm1 {
            <crate::RegValueT<Ch5Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch5Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Cn0 = crate::RegValueT<Ch5Cn0_SPEC>;

    impl Ch5Cn0 {
        #[doc = "ATOM CCU0 counter register"]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch5Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch5Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Cn0 {
        #[inline(always)]
        fn default() -> Ch5Cn0 {
            <crate::RegValueT<Ch5Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch5Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch5Ctrl = crate::RegValueT<Ch5Ctrl_SPEC>;

    impl Ch5Ctrl {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch5Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. Note   This bit is only applicable in SOMC mode."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM Mode control bits. These bits have different meaning in the different ATOM channel modes.        Please refer to the mode description sections. SOMI   CROSSREFERENCE and CROSSREFERENCE for register description. SOMC   CROSSREFERENCE and CROSSREFERENCE for register description. SOMP   CROSSREFERENCE and CROSSREFERENCE for register description. SOMS   CROSSREFERENCE and CROSSREFERENCE for register description. SOMB   CROSSREFERENCE and CROSSREFERENCE for register description."]
        #[inline(always)]
        pub fn acb(
            self,
        ) -> crate::common::RegisterField<4, 0x1f, 1, 0, u8, Ch5Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x1f,1,0,u8, Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. Note   This bit is only applicable in SOMC mode."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended update mode. If EUPM 1  a write access to CM0 or CM1 never causes an AEI write          status 10 . This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level. Reset value depends on the hardware configuration chosen by silicon          vendor. If the output is disabled  the output ATOM OUT x  is set to inverse          SL  independent of the ATOM channel mode. If FREEZE 0  following notes are valid  In SOMP  SOMI  SOMS mode  if the channel is disabled  the internal        register SOUR inside ATOM sub unit SOU is set to inverse value of SL. By        enabling the channel  the register SOUR is not changed. Thus  if the        output is enabled afterwards  the output ATOM OUT x  is the inverse        value of SL. In SOMC mode  if the channel is disabled  the internal register SOUR        inside ATOM sub unit SOU is set to value of SL. By enabling the channel         the register SOUR is not changed. Thus  if the output is enabled and the        channel is disabled  the output ATOM OUT x  is the value of SL. If FREEZE 1  the following notes are valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Actual CMU clock source  SOMS   shadow register for CMU clock source  SOMP . If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done           either by an end of a period or a forced update. After  channel  reset  the selected CLK SRC value is the SYS CLK           input of Global Clock Divider . To use in SOMP mode one of the          CMU CLKx  it is recommended to perform a forced update of CLK SRC with          the value of CLK SRC SR value before with enabling the channel. In case of ECLK SRC 1 and CLK SRC SR   011   100   101   110            a force update leads to an immediate update of CM0  CM1 and CLK SRC."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch5Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. Note  This bit is only applicable in SOMP and SOMS mode. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU Write request bit for late compare register update. Note  The CPU can disable subsequent ARU read requests by the channel and can update the shadow registers with new compare values  while the compare units operate on old compare values received by former ARU accesses  if occurred. Note  On a compare match event  the WR REQ bit will be reset by hardware. Note  At the point of the force update  only the shadow registers SR0 and SR1 are transferred into the CM0  CM1 registers. The output action is still defined by the ACBI bit field described by the ARU together with the old compare values for CM0 CM1. Note   This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode. Note  This mode is only applicable in SOMP mode."]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch5Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. If RST CCU0 1 and UPEN CTRLx 1 are set  TRIG  x 1  or          TIM EXT CAPTURE x  triggers also the update of work register  CM0  CM1          and CLK SRC . This bit is only applicable in SOMP mode. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Serve last ARU communication strategy. This bit is only applicable in SOMC mode. Please note  that setting of this bit has only effect  when ACBI 4 2           is configured for serve last compare strategy   100   101   or 110  . When this bit is not set  the captured time stamps in the shadow          registers SRx are only provided after the CCU1 match occurred. The          ACBO 4 3  bits always return 10 in          that case. By setting this bit  the ATOM channel also provides the captured time          stamps after the CCU0 match event to the ARU. The ACBO 4 3  bits are          set to 01 in that case. After the CCU1          match event  the time stamps are captured again in the SRx registers          and provided to the ARU. The ACBO 4 3  bits are set to 10 .          When the data in the shadow registers after the CCU0 match was not          consumed by an ARU destination and the CCU1 match occurs  the data in          the shadow registers is overwritten by the new captured time stamps.          The ATOM channel does not request new data from the ARU when the CCU0          match values are read from an ARU destination."]
        #[inline(always)]
        pub fn sla(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. Note   This bit is only applicable in SOMP and SOMS modes."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode. Note  This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. Note   This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SOMB mode"]
        #[inline(always)]
        pub fn somb(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE. Note  if channel is disabled and ouptut is enabled  in SOMP mode with UDMODE  0b00 the output is dependng directly on SL bit  independent on FREEZE mode."]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Ctrl {
        #[inline(always)]
        fn default() -> Ch5Ctrl {
            <crate::RegValueT<Ch5Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch5IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5IrqEn = crate::RegValueT<Ch5IrqEn_SPEC>;

    impl Ch5IrqEn {
        #[doc = "ATOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch5IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch5IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM CCU1TC IRQ interrupt enable. See bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch5IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch5IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5IrqEn {
        #[inline(always)]
        fn default() -> Ch5IrqEn {
            <crate::RegValueT<Ch5IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch5IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Software Interrupt Generation Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5IrqForcint = crate::RegValueT<Ch5IrqForcint_SPEC>;

    impl Ch5IrqForcint {
        #[doc = "Trigger ATOM CCU0TC IRQ interrupt by software. Note  This bit is cleared automatically after write. Note  This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch5IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch5IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger ATOM CCU1TC IRQ interrupt by software. Note  This bit is cleared automatically after write. Note  This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch5IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch5IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5IrqForcint {
        #[inline(always)]
        fn default() -> Ch5IrqForcint {
            <crate::RegValueT<Ch5IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch5IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5IrqMode = crate::RegValueT<Ch5IrqMode_SPEC>;

    impl Ch5IrqMode {
        #[doc = "IRQ mode selection. Note  The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch5IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch5IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5IrqMode {
        #[inline(always)]
        fn default() -> Ch5IrqMode {
            <crate::RegValueT<Ch5IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch5IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5IrqNotify = crate::RegValueT<Ch5IrqNotify_SPEC>;

    impl Ch5IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch5IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch5IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1TC  CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec. Note  If bit SR0 TRIG is set to 1  only valid in SOMP mode   this        interrupt notify flag is set in case of SR0 is equal to CN0 and not set        in case of CM1  gt    lt   CN0."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch5IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch5IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5IrqNotify {
        #[inline(always)]
        fn default() -> Ch5IrqNotify {
            <crate::RegValueT<Ch5IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Rdaddr_SPEC;
    impl crate::sealed::RegSpec for Ch5Rdaddr_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 ARU read address Register\n resetvalue={Application Reset:0x1FE01FE}"]
    pub type Ch5Rdaddr = crate::RegValueT<Ch5Rdaddr_SPEC>;

    impl Ch5Rdaddr {
        #[doc = "ARU Read address 0. Note  This read address is used by the ATOM channel to receive data from ARU immediately after the channel and ARU access is enabled  see ATOM i  CH x  CTRL register for details . Note  This bit field is only writable if channel is disabled."]
        #[inline(always)]
        pub fn rdaddr0(
            self,
        ) -> crate::common::RegisterField<0, 0x1ff, 1, 0, u16, Ch5Rdaddr_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x1ff,1,0,u16, Ch5Rdaddr_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Read address 1. Note  The ATOM channel switches to this read address  when requested in the ARU control bits 52 to 48 with the pattern  111   . The channel switches back to the RDADDR0 after one ARU data package was received on RDADDR1 and the compare match event is occurred. Note  This read address is only applicable in SOMC mode. Note  This bit field is only writable if channel is disabled."]
        #[inline(always)]
        pub fn rdaddr1(
            self,
        ) -> crate::common::RegisterField<16, 0x1ff, 1, 0, u16, Ch5Rdaddr_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x1ff,1,0,u16, Ch5Rdaddr_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Rdaddr {
        #[inline(always)]
        fn default() -> Ch5Rdaddr {
            <crate::RegValueT<Ch5Rdaddr_SPEC> as RegisterValue<_>>::new(33423870)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Somb_SPEC;
    impl crate::sealed::RegSpec for Ch5Somb_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMB Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch5Somb = crate::RegValueT<Ch5Somb_SPEC>;

    impl Ch5Somb {
        #[doc = "ATOM channel mode select. Not used in ATOM SOMB mode."]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch5Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch5Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. This bit is only applicable if three time bases are present in the GTM.        Otherwise  this bit is reserved."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch5Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch5Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch5Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch5Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control bits. Note  These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_1_0(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch5Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch5Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM SOMB compare strategy. These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_4_3_2(
            self,
        ) -> crate::common::RegisterField<6, 0x7, 1, 0, u8, Ch5Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x7,1,0,u8, Ch5Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. The compare unit CCU0 or CCU1 that compares against TBU TS0  depending        on CCUx control mode defined by ACB CM 4 2   always performs a        greater equal comparison  independent of the CMP CTRL bit."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch5Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch5Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended update mode. If EUPM 1 and after a CCU0 compare match  if ARU EN 0  written CM0 value not stored. if ARU EN 1  ARU read request is continued and CM1 is updated until CCU1        compare match. Received CM0 is not stored. This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch5Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch5Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel enable. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL. If FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to        value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch5Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch5Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU Write request bit for late compare register update. The CPU can disable subsequent ARU read requests by the channel and can        update the shadow registers with new compare values  while the compare        units operate on old compare values received by former ARU accesses  if        occurred. On a compare match event  the WR REQ bit will be reset by hardware. At the point of the force update  only the shadow registers SR0 and SR1        are transferred into the CM0  CM1 registers. The output action is still        defined by the ACBI bit field described by the ARU together with the old        compare values for CM0 CM1."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch5Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch5Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch5Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch5Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch5Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch5Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode"]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch5Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch5Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SOMB  SOMB mode"]
        #[inline(always)]
        pub fn somb(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch5Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch5Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch5Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch5Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Somb {
        #[inline(always)]
        fn default() -> Ch5Somb {
            <crate::RegValueT<Ch5Somb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Somc_SPEC;
    impl crate::sealed::RegSpec for Ch5Somc_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMC Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch5Somc = crate::RegValueT<Ch5Somc_SPEC>;

    impl Ch5Somc {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch5Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch5Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. This bit is only applicable if three time bases are present in the GTM.        Otherwise  this bit is reserved."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch5Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch5Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch5Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch5Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control bits. These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_1_0(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch5Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch5Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM control bits ACB 4   ACB 3   ACB 2 . Independent of ARU EN  a writing of 0b111 cancels any pending CCU0 or        CCU1 compare. Note  These bits are defining the compare strategy only if        ARU EN   0."]
        #[inline(always)]
        pub fn acb_4_3_2(
            self,
        ) -> crate::common::RegisterField<6, 0x7, 1, 0, u8, Ch5Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x7,1,0,u8, Ch5Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. The compare unit CCU0 or CCU1 that compares against TBU TS0  depending        on CCUx control mode defined by ACBI 4 2  or ACB42  always performs a        greater equal comparison  independent on CMP CTRL bit."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch5Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch5Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended Update Mode. If EUPM 1 and after a CCU0 compare match  If ARU EN 0  written CM0 value not stored. If ARU EN 1  ARU read request is continued and CM1 is updated until CCU1        compare match. Received CM0 values are not stored. This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch5Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch5Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel enable. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL. If FREEZE 0  following note is valid  If the channel is disabled  the output register of SOU unit is set to        value of SL. If FREEZE 1  following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch5Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch5Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU write request bit. The CPU can disable subsequent ARU read requests by the channel and can        update the shadow registers with new compare values  while the compare        units operate on old compare values received by former ARU accesses  if        occurred. On a compare match event  the WR REQ bit will be reset by hardware. At the point of the force update  only the shadow registers SR0 and SR1        are transferred into the CM0  CM1 registers. The output action is still        defined by the ACBI bit field described by the ARU together with the old        compare values for CM0 CM1."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch5Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch5Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch5Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch5Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TRIGOUT  Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch5Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch5Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Serve last ARU communication strategy. Please note  that setting of this bit has only effect  when ACBI 4 2  is        configured for serve last compare strategy   quot 100 quot    quot 101 quot   or  quot 110 quot  . When this bit is not set  the captured time stamps in the shadow        registers SRx are only provided after the CCU1 match occurred. The        ACBO 4 3  bits always return  quot 10 quot  in that case. By setting this bit  the ATOM channel also provides the captured time        stamps after the CCU0 match event to the ARU. The ACBO 4 3  bits are set        to   8220 01  8221  in that case. After the CCU1 match event  the time stamps are        captured again in the SRx registers and provided to the ARU. The        ACBO 4 3  bits are set to   8220 10  8221 . When the data in the shadow registers        after the CCU0 match was not consumed by an ARU destination and the CCU1        match occurs  the data in the shadow registers is overwritten by the new        captured time stamps. The ATOM channel does not request new data from        the ARU when the CCU0 match values are read from an ARU destination."]
        #[inline(always)]
        pub fn sla(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch5Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch5Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode"]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch5Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch5Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch5Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch5Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Somc {
        #[inline(always)]
        fn default() -> Ch5Somc {
            <crate::RegValueT<Ch5Somc_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Somi_SPEC;
    impl crate::sealed::RegSpec for Ch5Somi_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMI Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch5Somi = crate::RegValueT<Ch5Somi_SPEC>;

    impl Ch5Somi {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch5Somi_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch5Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch5Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch5Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACB bit 0 . Note  Bosch name ACB 0 ."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch5Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch5Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel is enabled. Note   Reset value depends on the hardware configuration chosen by silicon vendor. Note  If the output is disabled  the output ATOM OUT x  is set to inverse value of SL. If FREEZE 0  following note is valid   If the channel is disabled  the output register of SOU unit is set to inverse value of SL. If FREEZE 1  following note is valid   If the channel is disabled  the output register of SOU unit is not changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch5Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch5Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch5Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch5Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Somi {
        #[inline(always)]
        fn default() -> Ch5Somi {
            <crate::RegValueT<Ch5Somi_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Somp_SPEC;
    impl crate::sealed::RegSpec for Ch5Somp_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMP Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch5Somp = crate::RegValueT<Ch5Somp_SPEC>;

    impl Ch5Somp {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch5Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch5Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch5Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch5Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU data select for SOMP. This bit field is only relevant in SOMP mode to select the ARU data        source."]
        #[inline(always)]
        pub fn adl(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch5Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch5Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. This bit enables the PCM mode. It is device specific  in which channel the PCM mode is available.        Please refer to device specific CROSSREFERENCE for this information."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch5Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,Ch5Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SR0 is used to generate a trigger on output ATOM i  CH x  OUT T if equal to CN0. This bit is only relevant in SOMP mode. This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch5Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch5Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for pulse of PWM. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to        inverse value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch5Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch5Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shadow register for CMU clock source register CLK SRC. If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if        the CMU CLK source for PWM generation should be changed during        operation  the old CMU CLK has to operate until the update of the ATOM        channels internal CLK SRC register by the CLK SRC SR content is done        either by an end of a period or a FORCE UPDATE. After  channel  reset  the selected CLK SRC value is the SYS CLK  input        of Global Clock Divider . To use in SOMP mode one of the CMU CLKx  it is        recommended to perform a forced update of CLK SRC with the value of        CLK SRC SR value before with enabling the channel."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch5Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch5Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch5Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch5Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch5Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch5Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode. This mode is only applicable in SOMP mode."]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch5Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch5Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. If RST CCU0 1 and UPEN CTRLx 1 are set  TRIG  x 1  or TIM  EXT CAPTURE x  triggers        also the update of work register  CM0  CM1 and CLK SRC ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch5Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch5Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch5Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch5Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch5Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch5Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch5Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch5Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch5Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch5Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode"]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch5Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch5Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch5Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch5Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch5Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch5Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Somp {
        #[inline(always)]
        fn default() -> Ch5Somp {
            <crate::RegValueT<Ch5Somp_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Soms_SPEC;
    impl crate::sealed::RegSpec for Ch5Soms_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMS Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch5Soms = crate::RegValueT<Ch5Soms_SPEC>;

    impl Ch5Soms {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch5Soms_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch5Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch5Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch5Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shift direction for CM1 register. The data that has to be shifted out has to be aligned inside the CM1        register according to the defined shift direction. This bit is only applicable if ARU EN   0. If the direction  ACB0  is changed  the output ATOM OUT x  switches        immediately to the other  first  bit of CM1  bit 0 if ACB0   0  bit 23        if ACB0  160    160 1 ."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch5Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch5Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Double Shift Output. Note  If DSO 1  only shift right is possible."]
        #[inline(always)]
        pub fn dso(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch5Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch5Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines signal level when channel and output is disabling. Reset value depends on the hardware configuration chosen by silicon          vendor. If the output is enabled  the output ATOM OUT x  is set to bit 0 or 23          of CM1 register. If the output is disabled  the output ATOM OUT x  is set to inverse          value of SL. An enable or disable of the channel x has no effect on ATOM OUT x . The inverse value of SL is shifted into the CM1 register. If FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to          inverse value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not          changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch5Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch5Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shift frequency select for channel. If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if        the CMU CLK source for PWM generation should be changed during        operation  the old CMU CLK has to operate until the update of the ATOM        channels internal CLK SRC register by the CLK SRC SR content is done        either by an end of a period or a FORCE UPDATE. After  channel  reset  the selected CLK SRC value is the SYS CLK  input        of Global Clock Divider . To use in SOMP mode one of the CMU CLKx  it is        recommended to perform a forced update of CLK SRC with the value of        CLK SRC SR value before with enabling the channel."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch5Soms_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch5Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch5Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch5Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode"]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch5Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch5Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch5Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch5Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch5Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch5Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Soms {
        #[inline(always)]
        fn default() -> Ch5Soms {
            <crate::RegValueT<Ch5Soms_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch5Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Sr0 = crate::RegValueT<Ch5Sr0_SPEC>;

    impl Ch5Sr0 {
        #[doc = "ATOM channel x shadow register SR0. Note  The SR0 register is used as shadow register for CM0 in SOMP and SOMS modes  and is used as capture register for time base TBU TS0 in SOMC mode."]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch5Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch5Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Sr0 {
        #[inline(always)]
        fn default() -> Ch5Sr0 {
            <crate::RegValueT<Ch5Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch5Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Sr1 = crate::RegValueT<Ch5Sr1_SPEC>;

    impl Ch5Sr1 {
        #[doc = "ATOM channel x shadow register SR1. Note  The SR1 register is used as shadow register for CM1 in SOMP and SOMS modes  and is used as capture register for time base TBU TS1 or TBU TS2  when selected in ATOM i  CH x  CTRL register  in SOMC mode."]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch5Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch5Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Sr1 {
        #[inline(always)]
        fn default() -> Ch5Sr1 {
            <crate::RegValueT<Ch5Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Stat_SPEC;
    impl crate::sealed::RegSpec for Ch5Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Stat = crate::RegValueT<Ch5Stat_SPEC>;

    impl Ch5Stat {
        #[doc = "Actual output signal level of ATOM CHx OUT. Note   Reset value is the inverted value of bit SL  which depends on the hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch5Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch5Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ATOM Mode control bits. Note  For ATOM SOMI  SOMC  SOMP and SOMS mode  this register serves as a mirror for the five ARU control bits received through the ARU interface. The bits are valid when the DV bit is set. Note  For SOMB mode  this bit field serves as the work register of the compare strategy. It can be updated with the value of bit field ACB of register ATOM i  CH x  CTRL  or the value of internal shadow register ACB SR."]
        #[inline(always)]
        pub fn acbi(
            self,
        ) -> crate::common::RegisterField<16, 0x1f, 1, 0, u8, Ch5Stat_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0x1f,1,0,u8, Ch5Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Valid ARU Data stored in compare registers. Note  This bit is only applicable in SOMC and SOMB mode. The CPU can determine the status of the ARU transfers with this bit. After the compare event occurred  the bit is reset by hardware ."]
        #[inline(always)]
        pub fn dv(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch5Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<21,1,0,Ch5Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Write request of CPU failed for late update. Note  This bit is only applicable in SOMC and SOMB mode. Bit WRF can be reset by writing a 1 to it."]
        #[inline(always)]
        pub fn wrf(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch5Stat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch5Stat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU data rejected flag. Note  The flag is cleared if valid data is received and stored via ARU."]
        #[inline(always)]
        pub fn dr(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch5Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<23,1,0,Ch5Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ATOM Internal status bits. ACBO 3    1  CCU0 Compare match occurred. ACBO 4    1  CCU1 Compare match occurred. Note  These bits are only set in SOMC mode. Note  ACBO is reset to 0b00000 on an update of register CM0 or CM1  via ARU or CPU . Note  In SOMC mode  these bits are sent as ARU control bits 52..48."]
        #[inline(always)]
        pub fn acbo(
            self,
        ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, Ch5Stat_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0x1f,1,0,u8, Ch5Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Stat {
        #[inline(always)]
        fn default() -> Ch5Stat {
            <crate::RegValueT<Ch5Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch6Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Cm0 = crate::RegValueT<Ch6Cm0_SPEC>;

    impl Ch6Cm0 {
        #[doc = "ATOM CCU0 compare register"]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch6Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch6Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Cm0 {
        #[inline(always)]
        fn default() -> Ch6Cm0 {
            <crate::RegValueT<Ch6Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch6Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Cm1 = crate::RegValueT<Ch6Cm1_SPEC>;

    impl Ch6Cm1 {
        #[doc = "ATOM CCU1 compare register"]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch6Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch6Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Cm1 {
        #[inline(always)]
        fn default() -> Ch6Cm1 {
            <crate::RegValueT<Ch6Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch6Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Cn0 = crate::RegValueT<Ch6Cn0_SPEC>;

    impl Ch6Cn0 {
        #[doc = "ATOM CCU0 counter register"]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch6Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch6Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Cn0 {
        #[inline(always)]
        fn default() -> Ch6Cn0 {
            <crate::RegValueT<Ch6Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch6Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch6Ctrl = crate::RegValueT<Ch6Ctrl_SPEC>;

    impl Ch6Ctrl {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch6Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. Note   This bit is only applicable in SOMC mode."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM Mode control bits. These bits have different meaning in the different ATOM channel modes.        Please refer to the mode description sections. SOMI   CROSSREFERENCE and CROSSREFERENCE for register description. SOMC   CROSSREFERENCE and CROSSREFERENCE for register description. SOMP   CROSSREFERENCE and CROSSREFERENCE for register description. SOMS   CROSSREFERENCE and CROSSREFERENCE for register description. SOMB   CROSSREFERENCE and CROSSREFERENCE for register description."]
        #[inline(always)]
        pub fn acb(
            self,
        ) -> crate::common::RegisterField<4, 0x1f, 1, 0, u8, Ch6Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x1f,1,0,u8, Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. Note   This bit is only applicable in SOMC mode."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended update mode. If EUPM 1  a write access to CM0 or CM1 never causes an AEI write          status 10 . This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level. Reset value depends on the hardware configuration chosen by silicon          vendor. If the output is disabled  the output ATOM OUT x  is set to inverse          SL  independent of the ATOM channel mode. If FREEZE 0  following notes are valid  In SOMP  SOMI  SOMS mode  if the channel is disabled  the internal        register SOUR inside ATOM sub unit SOU is set to inverse value of SL. By        enabling the channel  the register SOUR is not changed. Thus  if the        output is enabled afterwards  the output ATOM OUT x  is the inverse        value of SL. In SOMC mode  if the channel is disabled  the internal register SOUR        inside ATOM sub unit SOU is set to value of SL. By enabling the channel         the register SOUR is not changed. Thus  if the output is enabled and the        channel is disabled  the output ATOM OUT x  is the value of SL. If FREEZE 1  the following notes are valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Actual CMU clock source  SOMS   shadow register for CMU clock source  SOMP . If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done           either by an end of a period or a forced update. After  channel  reset  the selected CLK SRC value is the SYS CLK           input of Global Clock Divider . To use in SOMP mode one of the          CMU CLKx  it is recommended to perform a forced update of CLK SRC with          the value of CLK SRC SR value before with enabling the channel. In case of ECLK SRC 1 and CLK SRC SR   011   100   101   110            a force update leads to an immediate update of CM0  CM1 and CLK SRC."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch6Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. Note  This bit is only applicable in SOMP and SOMS mode. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU Write request bit for late compare register update. Note  The CPU can disable subsequent ARU read requests by the channel and can update the shadow registers with new compare values  while the compare units operate on old compare values received by former ARU accesses  if occurred. Note  On a compare match event  the WR REQ bit will be reset by hardware. Note  At the point of the force update  only the shadow registers SR0 and SR1 are transferred into the CM0  CM1 registers. The output action is still defined by the ACBI bit field described by the ARU together with the old compare values for CM0 CM1. Note   This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode. Note  This mode is only applicable in SOMP mode."]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch6Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. If RST CCU0 1 and UPEN CTRLx 1 are set  TRIG  x 1  or          TIM EXT CAPTURE x  triggers also the update of work register  CM0  CM1          and CLK SRC . This bit is only applicable in SOMP mode. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Serve last ARU communication strategy. This bit is only applicable in SOMC mode. Please note  that setting of this bit has only effect  when ACBI 4 2           is configured for serve last compare strategy   100   101   or 110  . When this bit is not set  the captured time stamps in the shadow          registers SRx are only provided after the CCU1 match occurred. The          ACBO 4 3  bits always return 10 in          that case. By setting this bit  the ATOM channel also provides the captured time          stamps after the CCU0 match event to the ARU. The ACBO 4 3  bits are          set to 01 in that case. After the CCU1          match event  the time stamps are captured again in the SRx registers          and provided to the ARU. The ACBO 4 3  bits are set to 10 .          When the data in the shadow registers after the CCU0 match was not          consumed by an ARU destination and the CCU1 match occurs  the data in          the shadow registers is overwritten by the new captured time stamps.          The ATOM channel does not request new data from the ARU when the CCU0          match values are read from an ARU destination."]
        #[inline(always)]
        pub fn sla(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. Note   This bit is only applicable in SOMP and SOMS modes."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode. Note  This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. Note   This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SOMB mode"]
        #[inline(always)]
        pub fn somb(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE. Note  if channel is disabled and ouptut is enabled  in SOMP mode with UDMODE  0b00 the output is dependng directly on SL bit  independent on FREEZE mode."]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Ctrl {
        #[inline(always)]
        fn default() -> Ch6Ctrl {
            <crate::RegValueT<Ch6Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch6IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6IrqEn = crate::RegValueT<Ch6IrqEn_SPEC>;

    impl Ch6IrqEn {
        #[doc = "ATOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch6IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch6IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM CCU1TC IRQ interrupt enable. See bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch6IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch6IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6IrqEn {
        #[inline(always)]
        fn default() -> Ch6IrqEn {
            <crate::RegValueT<Ch6IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch6IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Software Interrupt Generation Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6IrqForcint = crate::RegValueT<Ch6IrqForcint_SPEC>;

    impl Ch6IrqForcint {
        #[doc = "Trigger ATOM CCU0TC IRQ interrupt by software. Note  This bit is cleared automatically after write. Note  This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch6IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch6IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger ATOM CCU1TC IRQ interrupt by software. Note  This bit is cleared automatically after write. Note  This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch6IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch6IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6IrqForcint {
        #[inline(always)]
        fn default() -> Ch6IrqForcint {
            <crate::RegValueT<Ch6IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch6IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6IrqMode = crate::RegValueT<Ch6IrqMode_SPEC>;

    impl Ch6IrqMode {
        #[doc = "IRQ mode selection. Note  The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch6IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch6IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6IrqMode {
        #[inline(always)]
        fn default() -> Ch6IrqMode {
            <crate::RegValueT<Ch6IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch6IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6IrqNotify = crate::RegValueT<Ch6IrqNotify_SPEC>;

    impl Ch6IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch6IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch6IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1TC  CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec. Note  If bit SR0 TRIG is set to 1  only valid in SOMP mode   this        interrupt notify flag is set in case of SR0 is equal to CN0 and not set        in case of CM1  gt    lt   CN0."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch6IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch6IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6IrqNotify {
        #[inline(always)]
        fn default() -> Ch6IrqNotify {
            <crate::RegValueT<Ch6IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Rdaddr_SPEC;
    impl crate::sealed::RegSpec for Ch6Rdaddr_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 ARU read address Register\n resetvalue={Application Reset:0x1FE01FE}"]
    pub type Ch6Rdaddr = crate::RegValueT<Ch6Rdaddr_SPEC>;

    impl Ch6Rdaddr {
        #[doc = "ARU Read address 0. Note  This read address is used by the ATOM channel to receive data from ARU immediately after the channel and ARU access is enabled  see ATOM i  CH x  CTRL register for details . Note  This bit field is only writable if channel is disabled."]
        #[inline(always)]
        pub fn rdaddr0(
            self,
        ) -> crate::common::RegisterField<0, 0x1ff, 1, 0, u16, Ch6Rdaddr_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x1ff,1,0,u16, Ch6Rdaddr_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Read address 1. Note  The ATOM channel switches to this read address  when requested in the ARU control bits 52 to 48 with the pattern  111   . The channel switches back to the RDADDR0 after one ARU data package was received on RDADDR1 and the compare match event is occurred. Note  This read address is only applicable in SOMC mode. Note  This bit field is only writable if channel is disabled."]
        #[inline(always)]
        pub fn rdaddr1(
            self,
        ) -> crate::common::RegisterField<16, 0x1ff, 1, 0, u16, Ch6Rdaddr_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x1ff,1,0,u16, Ch6Rdaddr_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Rdaddr {
        #[inline(always)]
        fn default() -> Ch6Rdaddr {
            <crate::RegValueT<Ch6Rdaddr_SPEC> as RegisterValue<_>>::new(33423870)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Somb_SPEC;
    impl crate::sealed::RegSpec for Ch6Somb_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMB Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch6Somb = crate::RegValueT<Ch6Somb_SPEC>;

    impl Ch6Somb {
        #[doc = "ATOM channel mode select. Not used in ATOM SOMB mode."]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch6Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch6Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. This bit is only applicable if three time bases are present in the GTM.        Otherwise  this bit is reserved."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch6Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch6Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch6Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch6Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control bits. Note  These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_1_0(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch6Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch6Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM SOMB compare strategy. These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_4_3_2(
            self,
        ) -> crate::common::RegisterField<6, 0x7, 1, 0, u8, Ch6Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x7,1,0,u8, Ch6Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. The compare unit CCU0 or CCU1 that compares against TBU TS0  depending        on CCUx control mode defined by ACB CM 4 2   always performs a        greater equal comparison  independent of the CMP CTRL bit."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch6Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch6Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended update mode. If EUPM 1 and after a CCU0 compare match  if ARU EN 0  written CM0 value not stored. if ARU EN 1  ARU read request is continued and CM1 is updated until CCU1        compare match. Received CM0 is not stored. This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch6Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch6Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel enable. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL. If FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to        value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch6Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch6Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU Write request bit for late compare register update. The CPU can disable subsequent ARU read requests by the channel and can        update the shadow registers with new compare values  while the compare        units operate on old compare values received by former ARU accesses  if        occurred. On a compare match event  the WR REQ bit will be reset by hardware. At the point of the force update  only the shadow registers SR0 and SR1        are transferred into the CM0  CM1 registers. The output action is still        defined by the ACBI bit field described by the ARU together with the old        compare values for CM0 CM1."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch6Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch6Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch6Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch6Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch6Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch6Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode"]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch6Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch6Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SOMB  SOMB mode"]
        #[inline(always)]
        pub fn somb(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch6Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch6Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch6Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch6Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Somb {
        #[inline(always)]
        fn default() -> Ch6Somb {
            <crate::RegValueT<Ch6Somb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Somc_SPEC;
    impl crate::sealed::RegSpec for Ch6Somc_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMC Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch6Somc = crate::RegValueT<Ch6Somc_SPEC>;

    impl Ch6Somc {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch6Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch6Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. This bit is only applicable if three time bases are present in the GTM.        Otherwise  this bit is reserved."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch6Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch6Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch6Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch6Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control bits. These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_1_0(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch6Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch6Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM control bits ACB 4   ACB 3   ACB 2 . Independent of ARU EN  a writing of 0b111 cancels any pending CCU0 or        CCU1 compare. Note  These bits are defining the compare strategy only if        ARU EN   0."]
        #[inline(always)]
        pub fn acb_4_3_2(
            self,
        ) -> crate::common::RegisterField<6, 0x7, 1, 0, u8, Ch6Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x7,1,0,u8, Ch6Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. The compare unit CCU0 or CCU1 that compares against TBU TS0  depending        on CCUx control mode defined by ACBI 4 2  or ACB42  always performs a        greater equal comparison  independent on CMP CTRL bit."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch6Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch6Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended Update Mode. If EUPM 1 and after a CCU0 compare match  If ARU EN 0  written CM0 value not stored. If ARU EN 1  ARU read request is continued and CM1 is updated until CCU1        compare match. Received CM0 values are not stored. This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch6Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch6Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel enable. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL. If FREEZE 0  following note is valid  If the channel is disabled  the output register of SOU unit is set to        value of SL. If FREEZE 1  following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch6Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch6Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU write request bit. The CPU can disable subsequent ARU read requests by the channel and can        update the shadow registers with new compare values  while the compare        units operate on old compare values received by former ARU accesses  if        occurred. On a compare match event  the WR REQ bit will be reset by hardware. At the point of the force update  only the shadow registers SR0 and SR1        are transferred into the CM0  CM1 registers. The output action is still        defined by the ACBI bit field described by the ARU together with the old        compare values for CM0 CM1."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch6Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch6Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch6Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch6Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TRIGOUT  Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch6Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch6Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Serve last ARU communication strategy. Please note  that setting of this bit has only effect  when ACBI 4 2  is        configured for serve last compare strategy   quot 100 quot    quot 101 quot   or  quot 110 quot  . When this bit is not set  the captured time stamps in the shadow        registers SRx are only provided after the CCU1 match occurred. The        ACBO 4 3  bits always return  quot 10 quot  in that case. By setting this bit  the ATOM channel also provides the captured time        stamps after the CCU0 match event to the ARU. The ACBO 4 3  bits are set        to   8220 01  8221  in that case. After the CCU1 match event  the time stamps are        captured again in the SRx registers and provided to the ARU. The        ACBO 4 3  bits are set to   8220 10  8221 . When the data in the shadow registers        after the CCU0 match was not consumed by an ARU destination and the CCU1        match occurs  the data in the shadow registers is overwritten by the new        captured time stamps. The ATOM channel does not request new data from        the ARU when the CCU0 match values are read from an ARU destination."]
        #[inline(always)]
        pub fn sla(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch6Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch6Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode"]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch6Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch6Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch6Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch6Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Somc {
        #[inline(always)]
        fn default() -> Ch6Somc {
            <crate::RegValueT<Ch6Somc_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Somi_SPEC;
    impl crate::sealed::RegSpec for Ch6Somi_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMI Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch6Somi = crate::RegValueT<Ch6Somi_SPEC>;

    impl Ch6Somi {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch6Somi_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch6Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch6Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch6Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACB bit 0 . Note  Bosch name ACB 0 ."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch6Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch6Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel is enabled. Note   Reset value depends on the hardware configuration chosen by silicon vendor. Note  If the output is disabled  the output ATOM OUT x  is set to inverse value of SL. If FREEZE 0  following note is valid   If the channel is disabled  the output register of SOU unit is set to inverse value of SL. If FREEZE 1  following note is valid   If the channel is disabled  the output register of SOU unit is not changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch6Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch6Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch6Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch6Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Somi {
        #[inline(always)]
        fn default() -> Ch6Somi {
            <crate::RegValueT<Ch6Somi_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Somp_SPEC;
    impl crate::sealed::RegSpec for Ch6Somp_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMP Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch6Somp = crate::RegValueT<Ch6Somp_SPEC>;

    impl Ch6Somp {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch6Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch6Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch6Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch6Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU data select for SOMP. This bit field is only relevant in SOMP mode to select the ARU data        source."]
        #[inline(always)]
        pub fn adl(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch6Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch6Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. This bit enables the PCM mode. It is device specific  in which channel the PCM mode is available.        Please refer to device specific CROSSREFERENCE for this information."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch6Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,Ch6Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SR0 is used to generate a trigger on output ATOM i  CH x  OUT T if equal to CN0. This bit is only relevant in SOMP mode. This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch6Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch6Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for pulse of PWM. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to        inverse value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch6Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch6Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shadow register for CMU clock source register CLK SRC. If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if        the CMU CLK source for PWM generation should be changed during        operation  the old CMU CLK has to operate until the update of the ATOM        channels internal CLK SRC register by the CLK SRC SR content is done        either by an end of a period or a FORCE UPDATE. After  channel  reset  the selected CLK SRC value is the SYS CLK  input        of Global Clock Divider . To use in SOMP mode one of the CMU CLKx  it is        recommended to perform a forced update of CLK SRC with the value of        CLK SRC SR value before with enabling the channel."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch6Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch6Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch6Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch6Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch6Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch6Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode. This mode is only applicable in SOMP mode."]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch6Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch6Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. If RST CCU0 1 and UPEN CTRLx 1 are set  TRIG  x 1  or TIM  EXT CAPTURE x  triggers        also the update of work register  CM0  CM1 and CLK SRC ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch6Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch6Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch6Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch6Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch6Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch6Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch6Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch6Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch6Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch6Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode"]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch6Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch6Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch6Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch6Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch6Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch6Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Somp {
        #[inline(always)]
        fn default() -> Ch6Somp {
            <crate::RegValueT<Ch6Somp_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Soms_SPEC;
    impl crate::sealed::RegSpec for Ch6Soms_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMS Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch6Soms = crate::RegValueT<Ch6Soms_SPEC>;

    impl Ch6Soms {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch6Soms_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch6Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch6Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch6Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shift direction for CM1 register. The data that has to be shifted out has to be aligned inside the CM1        register according to the defined shift direction. This bit is only applicable if ARU EN   0. If the direction  ACB0  is changed  the output ATOM OUT x  switches        immediately to the other  first  bit of CM1  bit 0 if ACB0   0  bit 23        if ACB0  160    160 1 ."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch6Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch6Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Double Shift Output. Note  If DSO 1  only shift right is possible."]
        #[inline(always)]
        pub fn dso(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch6Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch6Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines signal level when channel and output is disabling. Reset value depends on the hardware configuration chosen by silicon          vendor. If the output is enabled  the output ATOM OUT x  is set to bit 0 or 23          of CM1 register. If the output is disabled  the output ATOM OUT x  is set to inverse          value of SL. An enable or disable of the channel x has no effect on ATOM OUT x . The inverse value of SL is shifted into the CM1 register. If FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to          inverse value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not          changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch6Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch6Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shift frequency select for channel. If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if        the CMU CLK source for PWM generation should be changed during        operation  the old CMU CLK has to operate until the update of the ATOM        channels internal CLK SRC register by the CLK SRC SR content is done        either by an end of a period or a FORCE UPDATE. After  channel  reset  the selected CLK SRC value is the SYS CLK  input        of Global Clock Divider . To use in SOMP mode one of the CMU CLKx  it is        recommended to perform a forced update of CLK SRC with the value of        CLK SRC SR value before with enabling the channel."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch6Soms_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch6Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch6Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch6Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode"]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch6Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch6Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch6Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch6Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch6Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch6Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Soms {
        #[inline(always)]
        fn default() -> Ch6Soms {
            <crate::RegValueT<Ch6Soms_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch6Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Sr0 = crate::RegValueT<Ch6Sr0_SPEC>;

    impl Ch6Sr0 {
        #[doc = "ATOM channel x shadow register SR0. Note  The SR0 register is used as shadow register for CM0 in SOMP and SOMS modes  and is used as capture register for time base TBU TS0 in SOMC mode."]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch6Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch6Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Sr0 {
        #[inline(always)]
        fn default() -> Ch6Sr0 {
            <crate::RegValueT<Ch6Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch6Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Sr1 = crate::RegValueT<Ch6Sr1_SPEC>;

    impl Ch6Sr1 {
        #[doc = "ATOM channel x shadow register SR1. Note  The SR1 register is used as shadow register for CM1 in SOMP and SOMS modes  and is used as capture register for time base TBU TS1 or TBU TS2  when selected in ATOM i  CH x  CTRL register  in SOMC mode."]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch6Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch6Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Sr1 {
        #[inline(always)]
        fn default() -> Ch6Sr1 {
            <crate::RegValueT<Ch6Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Stat_SPEC;
    impl crate::sealed::RegSpec for Ch6Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Stat = crate::RegValueT<Ch6Stat_SPEC>;

    impl Ch6Stat {
        #[doc = "Actual output signal level of ATOM CHx OUT. Note   Reset value is the inverted value of bit SL  which depends on the hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch6Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch6Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ATOM Mode control bits. Note  For ATOM SOMI  SOMC  SOMP and SOMS mode  this register serves as a mirror for the five ARU control bits received through the ARU interface. The bits are valid when the DV bit is set. Note  For SOMB mode  this bit field serves as the work register of the compare strategy. It can be updated with the value of bit field ACB of register ATOM i  CH x  CTRL  or the value of internal shadow register ACB SR."]
        #[inline(always)]
        pub fn acbi(
            self,
        ) -> crate::common::RegisterField<16, 0x1f, 1, 0, u8, Ch6Stat_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0x1f,1,0,u8, Ch6Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Valid ARU Data stored in compare registers. Note  This bit is only applicable in SOMC and SOMB mode. The CPU can determine the status of the ARU transfers with this bit. After the compare event occurred  the bit is reset by hardware ."]
        #[inline(always)]
        pub fn dv(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch6Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<21,1,0,Ch6Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Write request of CPU failed for late update. Note  This bit is only applicable in SOMC and SOMB mode. Bit WRF can be reset by writing a 1 to it."]
        #[inline(always)]
        pub fn wrf(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch6Stat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch6Stat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU data rejected flag. Note  The flag is cleared if valid data is received and stored via ARU."]
        #[inline(always)]
        pub fn dr(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch6Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<23,1,0,Ch6Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ATOM Internal status bits. ACBO 3    1  CCU0 Compare match occurred. ACBO 4    1  CCU1 Compare match occurred. Note  These bits are only set in SOMC mode. Note  ACBO is reset to 0b00000 on an update of register CM0 or CM1  via ARU or CPU . Note  In SOMC mode  these bits are sent as ARU control bits 52..48."]
        #[inline(always)]
        pub fn acbo(
            self,
        ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, Ch6Stat_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0x1f,1,0,u8, Ch6Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Stat {
        #[inline(always)]
        fn default() -> Ch6Stat {
            <crate::RegValueT<Ch6Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch7Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Cm0 = crate::RegValueT<Ch7Cm0_SPEC>;

    impl Ch7Cm0 {
        #[doc = "ATOM CCU0 compare register"]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch7Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch7Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Cm0 {
        #[inline(always)]
        fn default() -> Ch7Cm0 {
            <crate::RegValueT<Ch7Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch7Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Cm1 = crate::RegValueT<Ch7Cm1_SPEC>;

    impl Ch7Cm1 {
        #[doc = "ATOM CCU1 compare register"]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch7Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch7Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Cm1 {
        #[inline(always)]
        fn default() -> Ch7Cm1 {
            <crate::RegValueT<Ch7Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch7Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Cn0 = crate::RegValueT<Ch7Cn0_SPEC>;

    impl Ch7Cn0 {
        #[doc = "ATOM CCU0 counter register"]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch7Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch7Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Cn0 {
        #[inline(always)]
        fn default() -> Ch7Cn0 {
            <crate::RegValueT<Ch7Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch7Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch7Ctrl = crate::RegValueT<Ch7Ctrl_SPEC>;

    impl Ch7Ctrl {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch7Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. Note   This bit is only applicable in SOMC mode."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM Mode control bits. These bits have different meaning in the different ATOM channel modes.        Please refer to the mode description sections. SOMI   CROSSREFERENCE and CROSSREFERENCE for register description. SOMC   CROSSREFERENCE and CROSSREFERENCE for register description. SOMP   CROSSREFERENCE and CROSSREFERENCE for register description. SOMS   CROSSREFERENCE and CROSSREFERENCE for register description. SOMB   CROSSREFERENCE and CROSSREFERENCE for register description."]
        #[inline(always)]
        pub fn acb(
            self,
        ) -> crate::common::RegisterField<4, 0x1f, 1, 0, u8, Ch7Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x1f,1,0,u8, Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. Note   This bit is only applicable in SOMC mode."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended update mode. If EUPM 1  a write access to CM0 or CM1 never causes an AEI write          status 10 . This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level. Reset value depends on the hardware configuration chosen by silicon          vendor. If the output is disabled  the output ATOM OUT x  is set to inverse          SL  independent of the ATOM channel mode. If FREEZE 0  following notes are valid  In SOMP  SOMI  SOMS mode  if the channel is disabled  the internal        register SOUR inside ATOM sub unit SOU is set to inverse value of SL. By        enabling the channel  the register SOUR is not changed. Thus  if the        output is enabled afterwards  the output ATOM OUT x  is the inverse        value of SL. In SOMC mode  if the channel is disabled  the internal register SOUR        inside ATOM sub unit SOU is set to value of SL. By enabling the channel         the register SOUR is not changed. Thus  if the output is enabled and the        channel is disabled  the output ATOM OUT x  is the value of SL. If FREEZE 1  the following notes are valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Actual CMU clock source  SOMS   shadow register for CMU clock source  SOMP . If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done           either by an end of a period or a forced update. After  channel  reset  the selected CLK SRC value is the SYS CLK           input of Global Clock Divider . To use in SOMP mode one of the          CMU CLKx  it is recommended to perform a forced update of CLK SRC with          the value of CLK SRC SR value before with enabling the channel. In case of ECLK SRC 1 and CLK SRC SR   011   100   101   110            a force update leads to an immediate update of CM0  CM1 and CLK SRC."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch7Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. Note  This bit is only applicable in SOMP and SOMS mode. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU Write request bit for late compare register update. Note  The CPU can disable subsequent ARU read requests by the channel and can update the shadow registers with new compare values  while the compare units operate on old compare values received by former ARU accesses  if occurred. Note  On a compare match event  the WR REQ bit will be reset by hardware. Note  At the point of the force update  only the shadow registers SR0 and SR1 are transferred into the CM0  CM1 registers. The output action is still defined by the ACBI bit field described by the ARU together with the old compare values for CM0 CM1. Note   This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode. Note  This mode is only applicable in SOMP mode."]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch7Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. If RST CCU0 1 and UPEN CTRLx 1 are set  TRIG  x 1  or          TIM EXT CAPTURE x  triggers also the update of work register  CM0  CM1          and CLK SRC . This bit is only applicable in SOMP mode. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Serve last ARU communication strategy. This bit is only applicable in SOMC mode. Please note  that setting of this bit has only effect  when ACBI 4 2           is configured for serve last compare strategy   100   101   or 110  . When this bit is not set  the captured time stamps in the shadow          registers SRx are only provided after the CCU1 match occurred. The          ACBO 4 3  bits always return 10 in          that case. By setting this bit  the ATOM channel also provides the captured time          stamps after the CCU0 match event to the ARU. The ACBO 4 3  bits are          set to 01 in that case. After the CCU1          match event  the time stamps are captured again in the SRx registers          and provided to the ARU. The ACBO 4 3  bits are set to 10 .          When the data in the shadow registers after the CCU0 match was not          consumed by an ARU destination and the CCU1 match occurs  the data in          the shadow registers is overwritten by the new captured time stamps.          The ATOM channel does not request new data from the ARU when the CCU0          match values are read from an ARU destination."]
        #[inline(always)]
        pub fn sla(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. Note   This bit is only applicable in SOMP and SOMS modes."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode. Note  This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. Note   This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SOMB mode"]
        #[inline(always)]
        pub fn somb(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE. Note  if channel is disabled and ouptut is enabled  in SOMP mode with UDMODE  0b00 the output is dependng directly on SL bit  independent on FREEZE mode."]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Ctrl {
        #[inline(always)]
        fn default() -> Ch7Ctrl {
            <crate::RegValueT<Ch7Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch7IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7IrqEn = crate::RegValueT<Ch7IrqEn_SPEC>;

    impl Ch7IrqEn {
        #[doc = "ATOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch7IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch7IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM CCU1TC IRQ interrupt enable. See bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch7IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch7IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7IrqEn {
        #[inline(always)]
        fn default() -> Ch7IrqEn {
            <crate::RegValueT<Ch7IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch7IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Software Interrupt Generation Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7IrqForcint = crate::RegValueT<Ch7IrqForcint_SPEC>;

    impl Ch7IrqForcint {
        #[doc = "Trigger ATOM CCU0TC IRQ interrupt by software. Note  This bit is cleared automatically after write. Note  This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch7IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch7IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger ATOM CCU1TC IRQ interrupt by software. Note  This bit is cleared automatically after write. Note  This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch7IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch7IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7IrqForcint {
        #[inline(always)]
        fn default() -> Ch7IrqForcint {
            <crate::RegValueT<Ch7IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch7IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7IrqMode = crate::RegValueT<Ch7IrqMode_SPEC>;

    impl Ch7IrqMode {
        #[doc = "IRQ mode selection. Note  The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch7IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch7IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7IrqMode {
        #[inline(always)]
        fn default() -> Ch7IrqMode {
            <crate::RegValueT<Ch7IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch7IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7IrqNotify = crate::RegValueT<Ch7IrqNotify_SPEC>;

    impl Ch7IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch7IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch7IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1TC  CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec. Note  If bit SR0 TRIG is set to 1  only valid in SOMP mode   this        interrupt notify flag is set in case of SR0 is equal to CN0 and not set        in case of CM1  gt    lt   CN0."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch7IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch7IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7IrqNotify {
        #[inline(always)]
        fn default() -> Ch7IrqNotify {
            <crate::RegValueT<Ch7IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Rdaddr_SPEC;
    impl crate::sealed::RegSpec for Ch7Rdaddr_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 ARU read address Register\n resetvalue={Application Reset:0x1FE01FE}"]
    pub type Ch7Rdaddr = crate::RegValueT<Ch7Rdaddr_SPEC>;

    impl Ch7Rdaddr {
        #[doc = "ARU Read address 0. Note  This read address is used by the ATOM channel to receive data from ARU immediately after the channel and ARU access is enabled  see ATOM i  CH x  CTRL register for details . Note  This bit field is only writable if channel is disabled."]
        #[inline(always)]
        pub fn rdaddr0(
            self,
        ) -> crate::common::RegisterField<0, 0x1ff, 1, 0, u16, Ch7Rdaddr_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x1ff,1,0,u16, Ch7Rdaddr_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Read address 1. Note  The ATOM channel switches to this read address  when requested in the ARU control bits 52 to 48 with the pattern  111   . The channel switches back to the RDADDR0 after one ARU data package was received on RDADDR1 and the compare match event is occurred. Note  This read address is only applicable in SOMC mode. Note  This bit field is only writable if channel is disabled."]
        #[inline(always)]
        pub fn rdaddr1(
            self,
        ) -> crate::common::RegisterField<16, 0x1ff, 1, 0, u16, Ch7Rdaddr_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x1ff,1,0,u16, Ch7Rdaddr_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Rdaddr {
        #[inline(always)]
        fn default() -> Ch7Rdaddr {
            <crate::RegValueT<Ch7Rdaddr_SPEC> as RegisterValue<_>>::new(33423870)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Somb_SPEC;
    impl crate::sealed::RegSpec for Ch7Somb_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMB Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch7Somb = crate::RegValueT<Ch7Somb_SPEC>;

    impl Ch7Somb {
        #[doc = "ATOM channel mode select. Not used in ATOM SOMB mode."]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch7Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch7Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. This bit is only applicable if three time bases are present in the GTM.        Otherwise  this bit is reserved."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch7Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch7Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch7Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch7Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control bits. Note  These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_1_0(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch7Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch7Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM SOMB compare strategy. These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_4_3_2(
            self,
        ) -> crate::common::RegisterField<6, 0x7, 1, 0, u8, Ch7Somb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x7,1,0,u8, Ch7Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. The compare unit CCU0 or CCU1 that compares against TBU TS0  depending        on CCUx control mode defined by ACB CM 4 2   always performs a        greater equal comparison  independent of the CMP CTRL bit."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch7Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch7Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended update mode. If EUPM 1 and after a CCU0 compare match  if ARU EN 0  written CM0 value not stored. if ARU EN 1  ARU read request is continued and CM1 is updated until CCU1        compare match. Received CM0 is not stored. This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch7Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch7Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel enable. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL. If FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to        value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch7Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch7Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU Write request bit for late compare register update. The CPU can disable subsequent ARU read requests by the channel and can        update the shadow registers with new compare values  while the compare        units operate on old compare values received by former ARU accesses  if        occurred. On a compare match event  the WR REQ bit will be reset by hardware. At the point of the force update  only the shadow registers SR0 and SR1        are transferred into the CM0  CM1 registers. The output action is still        defined by the ACBI bit field described by the ARU together with the old        compare values for CM0 CM1."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch7Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch7Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch7Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch7Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch7Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch7Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode"]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch7Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch7Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SOMB  SOMB mode"]
        #[inline(always)]
        pub fn somb(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch7Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch7Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch7Somb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch7Somb_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Somb {
        #[inline(always)]
        fn default() -> Ch7Somb {
            <crate::RegValueT<Ch7Somb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Somc_SPEC;
    impl crate::sealed::RegSpec for Ch7Somc_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMC Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch7Somc = crate::RegValueT<Ch7Somc_SPEC>;

    impl Ch7Somc {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch7Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch7Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select time base value TBU TS1 or TBU TS2. This bit is only applicable if three time bases are present in the GTM.        Otherwise  this bit is reserved."]
        #[inline(always)]
        pub fn tb12_sel(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch7Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch7Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch7Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch7Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control bits. These bits are only applicable if ARU EN   0."]
        #[inline(always)]
        pub fn acb_1_0(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch7Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch7Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ATOM control bits ACB 4   ACB 3   ACB 2 . Independent of ARU EN  a writing of 0b111 cancels any pending CCU0 or        CCU1 compare. Note  These bits are defining the compare strategy only if        ARU EN   0."]
        #[inline(always)]
        pub fn acb_4_3_2(
            self,
        ) -> crate::common::RegisterField<6, 0x7, 1, 0, u8, Ch7Somc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x7,1,0,u8, Ch7Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCUx compare strategy select. The compare unit CCU0 or CCU1 that compares against TBU TS0  depending        on CCUx control mode defined by ACBI 4 2  or ACB42  always performs a        greater equal comparison  independent on CMP CTRL bit."]
        #[inline(always)]
        pub fn cmp_ctrl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch7Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ch7Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended Update Mode. If EUPM 1 and after a CCU0 compare match  If ARU EN 0  written CM0 value not stored. If ARU EN 1  ARU read request is continued and CM1 is updated until CCU1        compare match. Received CM0 values are not stored. This bit is only applicable in SOMC and SOMB mode."]
        #[inline(always)]
        pub fn eupm(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch7Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ch7Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel enable. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL. If FREEZE 0  following note is valid  If the channel is disabled  the output register of SOU unit is set to        value of SL. If FREEZE 1  following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch7Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch7Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CPU write request bit. The CPU can disable subsequent ARU read requests by the channel and can        update the shadow registers with new compare values  while the compare        units operate on old compare values received by former ARU accesses  if        occurred. On a compare match event  the WR REQ bit will be reset by hardware. At the point of the force update  only the shadow registers SR0 and SR1        are transferred into the CM0  CM1 registers. The output action is still        defined by the ACBI bit field described by the ARU together with the old        compare values for CM0 CM1."]
        #[inline(always)]
        pub fn wr_req(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch7Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch7Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch7Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch7Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TRIGOUT  Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch7Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch7Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Serve last ARU communication strategy. Please note  that setting of this bit has only effect  when ACBI 4 2  is        configured for serve last compare strategy   quot 100 quot    quot 101 quot   or  quot 110 quot  . When this bit is not set  the captured time stamps in the shadow        registers SRx are only provided after the CCU1 match occurred. The        ACBO 4 3  bits always return  quot 10 quot  in that case. By setting this bit  the ATOM channel also provides the captured time        stamps after the CCU0 match event to the ARU. The ACBO 4 3  bits are set        to   8220 01  8221  in that case. After the CCU1 match event  the time stamps are        captured again in the SRx registers and provided to the ARU. The        ACBO 4 3  bits are set to   8220 10  8221 . When the data in the shadow registers        after the CCU0 match was not consumed by an ARU destination and the CCU1        match occurs  the data in the shadow registers is overwritten by the new        captured time stamps. The ATOM channel does not request new data from        the ARU when the CCU0 match values are read from an ARU destination."]
        #[inline(always)]
        pub fn sla(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch7Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch7Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU blocking mode"]
        #[inline(always)]
        pub fn abm(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch7Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch7Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch7Somc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch7Somc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Somc {
        #[inline(always)]
        fn default() -> Ch7Somc {
            <crate::RegValueT<Ch7Somc_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Somi_SPEC;
    impl crate::sealed::RegSpec for Ch7Somi_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMI Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch7Somi = crate::RegValueT<Ch7Somi_SPEC>;

    impl Ch7Somi {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch7Somi_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch7Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch7Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch7Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACB bit 0 . Note  Bosch name ACB 0 ."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch7Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch7Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Initial signal level after channel is enabled. Note   Reset value depends on the hardware configuration chosen by silicon vendor. Note  If the output is disabled  the output ATOM OUT x  is set to inverse value of SL. If FREEZE 0  following note is valid   If the channel is disabled  the output register of SOU unit is set to inverse value of SL. If FREEZE 1  following note is valid   If the channel is disabled  the output register of SOU unit is not changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch7Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch7Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch7Somi_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch7Somi_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Somi {
        #[inline(always)]
        fn default() -> Ch7Somi {
            <crate::RegValueT<Ch7Somi_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Somp_SPEC;
    impl crate::sealed::RegSpec for Ch7Somp_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMP Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch7Somp = crate::RegValueT<Ch7Somp_SPEC>;

    impl Ch7Somp {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch7Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch7Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch7Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch7Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU data select for SOMP. This bit field is only relevant in SOMP mode to select the ARU data        source."]
        #[inline(always)]
        pub fn adl(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Ch7Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Ch7Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. This bit enables the PCM mode. It is device specific  in which channel the PCM mode is available.        Please refer to device specific CROSSREFERENCE for this information."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch7Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,Ch7Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SR0 is used to generate a trigger on output ATOM i  CH x  OUT T if equal to CN0. This bit is only relevant in SOMP mode. This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch7Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch7Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for pulse of PWM. Reset value depends on the hardware configuration chosen by silicon        vendor. If the output is disabled  the output ATOM OUT x  is set to inverse        value of SL FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to        inverse value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not        changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch7Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch7Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shadow register for CMU clock source register CLK SRC. If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if        the CMU CLK source for PWM generation should be changed during        operation  the old CMU CLK has to operate until the update of the ATOM        channels internal CLK SRC register by the CLK SRC SR content is done        either by an end of a period or a FORCE UPDATE. After  channel  reset  the selected CLK SRC value is the SYS CLK  input        of Global Clock Divider . To use in SOMP mode one of the CMU CLKx  it is        recommended to perform a forced update of CLK SRC with the value of        CLK SRC SR value before with enabling the channel."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch7Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch7Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch7Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch7Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch7Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch7Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode. This mode is only applicable in SOMP mode."]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch7Somp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch7Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. If RST CCU0 1 and UPEN CTRLx 1 are set  TRIG  x 1  or TIM  EXT CAPTURE x  triggers        also the update of work register  CM0  CM1 and CLK SRC ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch7Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch7Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch7Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch7Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch7Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch7Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch7Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch7Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG CHx  of module ATOM CHx"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch7Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch7Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode"]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch7Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch7Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch7Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch7Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch7Somp_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch7Somp_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Somp {
        #[inline(always)]
        fn default() -> Ch7Somp {
            <crate::RegValueT<Ch7Somp_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Soms_SPEC;
    impl crate::sealed::RegSpec for Ch7Soms_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Control Register in SOMS Mode\n resetvalue={Application Reset:0x0800,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type Ch7Soms = crate::RegValueT<Ch7Soms_SPEC>;

    impl Ch7Soms {
        #[doc = "ATOM channel mode select"]
        #[inline(always)]
        pub fn mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch7Soms_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch7Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU Input stream enable"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch7Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch7Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shift direction for CM1 register. The data that has to be shifted out has to be aligned inside the CM1        register according to the defined shift direction. This bit is only applicable if ARU EN   0. If the direction  ACB0  is changed  the output ATOM OUT x  switches        immediately to the other  first  bit of CM1  bit 0 if ACB0   0  bit 23        if ACB0  160    160 1 ."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch7Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch7Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Double Shift Output. Note  If DSO 1  only shift right is possible."]
        #[inline(always)]
        pub fn dso(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch7Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch7Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines signal level when channel and output is disabling. Reset value depends on the hardware configuration chosen by silicon          vendor. If the output is enabled  the output ATOM OUT x  is set to bit 0 or 23          of CM1 register. If the output is disabled  the output ATOM OUT x  is set to inverse          value of SL. An enable or disable of the channel x has no effect on ATOM OUT x . The inverse value of SL is shifted into the CM1 register. If FREEZE 0  the following note is valid  If the channel is disabled  the output register of SOU unit is set to          inverse value of SL. If FREEZE 1  the following note is valid  If the channel is disabled  the output register of SOU unit is not          changed  and output ATOM OUT x  is not changed."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch7Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch7Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Shift frequency select for channel. If ECLK SRC 0   ECLK SRC 1  This register is a shadow register for the register CLK SRC. Thus  if        the CMU CLK source for PWM generation should be changed during        operation  the old CMU CLK has to operate until the update of the ATOM        channels internal CLK SRC register by the CLK SRC SR content is done        either by an end of a period or a FORCE UPDATE. After  channel  reset  the selected CLK SRC value is the SYS CLK  input        of Global Clock Divider . To use in SOMP mode one of the CMU CLKx  it is        recommended to perform a forced update of CLK SRC with the value of        CLK SRC SR value before with enabling the channel."]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch7Soms_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch7Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC. See bit CLK SRC SR description for details."]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch7Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch7Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode"]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch7Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch7Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "External forced update. This bit is only applicable in SOMP and SOMS mode."]
        #[inline(always)]
        pub fn ext_fupd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch7Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch7Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch7Soms_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch7Soms_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Soms {
        #[inline(always)]
        fn default() -> Ch7Soms {
            <crate::RegValueT<Ch7Soms_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch7Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Sr0 = crate::RegValueT<Ch7Sr0_SPEC>;

    impl Ch7Sr0 {
        #[doc = "ATOM channel x shadow register SR0. Note  The SR0 register is used as shadow register for CM0 in SOMP and SOMS modes  and is used as capture register for time base TBU TS0 in SOMC mode."]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch7Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch7Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Sr0 {
        #[inline(always)]
        fn default() -> Ch7Sr0 {
            <crate::RegValueT<Ch7Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch7Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Sr1 = crate::RegValueT<Ch7Sr1_SPEC>;

    impl Ch7Sr1 {
        #[doc = "ATOM channel x shadow register SR1. Note  The SR1 register is used as shadow register for CM1 in SOMP and SOMS modes  and is used as capture register for time base TBU TS1 or TBU TS2  when selected in ATOM i  CH x  CTRL register  in SOMC mode."]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch7Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch7Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Sr1 {
        #[inline(always)]
        fn default() -> Ch7Sr1 {
            <crate::RegValueT<Ch7Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Stat_SPEC;
    impl crate::sealed::RegSpec for Ch7Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "ATOM0 Channel 7 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Stat = crate::RegValueT<Ch7Stat_SPEC>;

    impl Ch7Stat {
        #[doc = "Actual output signal level of ATOM CHx OUT. Note   Reset value is the inverted value of bit SL  which depends on the hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch7Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch7Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ATOM Mode control bits. Note  For ATOM SOMI  SOMC  SOMP and SOMS mode  this register serves as a mirror for the five ARU control bits received through the ARU interface. The bits are valid when the DV bit is set. Note  For SOMB mode  this bit field serves as the work register of the compare strategy. It can be updated with the value of bit field ACB of register ATOM i  CH x  CTRL  or the value of internal shadow register ACB SR."]
        #[inline(always)]
        pub fn acbi(
            self,
        ) -> crate::common::RegisterField<16, 0x1f, 1, 0, u8, Ch7Stat_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0x1f,1,0,u8, Ch7Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Valid ARU Data stored in compare registers. Note  This bit is only applicable in SOMC and SOMB mode. The CPU can determine the status of the ARU transfers with this bit. After the compare event occurred  the bit is reset by hardware ."]
        #[inline(always)]
        pub fn dv(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch7Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<21,1,0,Ch7Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Write request of CPU failed for late update. Note  This bit is only applicable in SOMC and SOMB mode. Bit WRF can be reset by writing a 1 to it."]
        #[inline(always)]
        pub fn wrf(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch7Stat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch7Stat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ARU data rejected flag. Note  The flag is cleared if valid data is received and stored via ARU."]
        #[inline(always)]
        pub fn dr(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch7Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<23,1,0,Ch7Stat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ATOM Internal status bits. ACBO 3    1  CCU0 Compare match occurred. ACBO 4    1  CCU1 Compare match occurred. Note  These bits are only set in SOMC mode. Note  ACBO is reset to 0b00000 on an update of register CM0 or CM1  via ARU or CPU . Note  In SOMC mode  these bits are sent as ARU control bits 52..48."]
        #[inline(always)]
        pub fn acbo(
            self,
        ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, Ch7Stat_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0x1f,1,0,u8, Ch7Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Stat {
        #[inline(always)]
        fn default() -> Ch7Stat {
            <crate::RegValueT<Ch7Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }
}
#[doc = "AUX IN SRC"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AuxInSrc(pub(super) *mut u8);
unsafe impl core::marker::Send for AuxInSrc {}
unsafe impl core::marker::Sync for AuxInSrc {}
impl AuxInSrc {
    #[doc = "GTM TIM 0 Module AUX IN Source Selection Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn timi_aux_in_src(
        &self,
    ) -> [crate::common::Reg<aux_in_src::TiMiAuxInSrc_SPEC, crate::common::RW>; 6] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x0usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x0usize + 0x4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x0usize + 0x8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x0usize + 0xcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x0usize + 0x10usize)),
                crate::common::Reg::from_ptr(self.0.add(0x0usize + 0x14usize)),
            ]
        }
    }
}
pub mod aux_in_src {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct TiMiAuxInSrc_SPEC;
    impl crate::sealed::RegSpec for TiMiAuxInSrc_SPEC {
        type DataType = u32;
    }
    #[doc = "GTM TIM 0 Module AUX IN Source Selection Register\n resetvalue={Application Reset:0x0}"]
    pub type TiMiAuxInSrc = crate::RegValueT<TiMiAuxInSrc_SPEC>;

    impl TiMiAuxInSrc {
        #[doc = "Defines AUX IN source of TIM i  channel 0. SEL OUT N CH0   SEL OUT N CH0   1"]
        #[inline(always)]
        pub fn src_ch0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, TiMiAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,TiMiAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines AUX IN source of TIM i  channel 1. SEL OUT N CH1   0   SEL OUT N CH1   1"]
        #[inline(always)]
        pub fn src_ch1(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, TiMiAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,TiMiAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines AUX IN source of TIM i  channel 2. SEL OUT N CH2   0   SEL OUT N CH2   1"]
        #[inline(always)]
        pub fn src_ch2(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, TiMiAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,TiMiAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines AUX IN source of TIM i  channel 3. SEL OUT N CH3   0   SEL OUT N CH3   1"]
        #[inline(always)]
        pub fn src_ch3(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, TiMiAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<3,1,0,TiMiAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines AUX IN source of TIM i  channel 4. SEL OUT N CH4   0   SEL OUT N CH4   1"]
        #[inline(always)]
        pub fn src_ch4(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, TiMiAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<4,1,0,TiMiAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines AUX IN source of TIM i  channel 5. SEL OUT N CH5   0   SEL OUT N CH5   1"]
        #[inline(always)]
        pub fn src_ch5(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, TiMiAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<5,1,0,TiMiAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines AUX IN source of TIM i  channel 6. SEL OUT N CH6   0   SEL OUT N CH6   1"]
        #[inline(always)]
        pub fn src_ch6(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, TiMiAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<6,1,0,TiMiAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines AUX IN source of TIM i  channel 7. SEL OUT N CH7   0   SEL OUT N CH7   1"]
        #[inline(always)]
        pub fn src_ch7(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, TiMiAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<7,1,0,TiMiAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use DTM OUT or DTM OUT N signals as AUX IN source of TIM i  channel 0"]
        #[inline(always)]
        pub fn sel_out_n_ch0(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, TiMiAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<16,1,0,TiMiAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use DTM OUT or DTM OUT N signals as AUX IN source of TIM i  channel 1"]
        #[inline(always)]
        pub fn sel_out_n_ch1(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, TiMiAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<17,1,0,TiMiAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use DTM OUT or DTM OUT N signals as AUX IN source of TIM i  channel 2"]
        #[inline(always)]
        pub fn sel_out_n_ch2(
            self,
        ) -> crate::common::RegisterFieldBool<18, 1, 0, TiMiAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<18,1,0,TiMiAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use DTM OUT or DTM OUT N signals as AUX IN source of TIM i  channel 3"]
        #[inline(always)]
        pub fn sel_out_n_ch3(
            self,
        ) -> crate::common::RegisterFieldBool<19, 1, 0, TiMiAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<19,1,0,TiMiAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use DTM OUT or DTM OUT N signals as AUX IN source of TIM i  channel 4"]
        #[inline(always)]
        pub fn sel_out_n_ch4(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, TiMiAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<20,1,0,TiMiAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use DTM OUT or DTM OUT N signals as AUX IN source of TIM i  channel 5"]
        #[inline(always)]
        pub fn sel_out_n_ch5(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, TiMiAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<21,1,0,TiMiAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use DTM OUT or DTM OUT N signals as AUX IN source of TIM i  channel 6"]
        #[inline(always)]
        pub fn sel_out_n_ch6(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, TiMiAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<22,1,0,TiMiAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use DTM OUT or DTM OUT N signals as AUX IN source of TIM i  channel 7"]
        #[inline(always)]
        pub fn sel_out_n_ch7(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, TiMiAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<23,1,0,TiMiAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for TiMiAuxInSrc {
        #[inline(always)]
        fn default() -> TiMiAuxInSrc {
            <crate::RegValueT<TiMiAuxInSrc_SPEC> as RegisterValue<_>>::new(0)
        }
    }
}
#[doc = "BRC"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Brc(pub(super) *mut u8);
unsafe impl core::marker::Send for Brc {}
unsafe impl core::marker::Sync for Brc {}
impl Brc {
    #[doc = "BRC Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn eirq_en(&self) -> crate::common::Reg<brc::EirqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(116usize)) }
    }
    #[doc = "BRC Software Reset Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn rst(&self) -> crate::common::Reg<brc::Rst_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(112usize)) }
    }
    #[doc = "IRQ"]
    #[inline(always)]
    pub fn irq(self) -> brc::Irq {
        unsafe { brc::Irq(self.0.add(96usize)) }
    }
    #[doc = "SRC"]
    #[inline(always)]
    pub fn src(self) -> [brc::Src; 12] {
        unsafe {
            [
                brc::Src(self.0.add(0x0usize + 0x0usize)),
                brc::Src(self.0.add(0x0usize + 0x8usize)),
                brc::Src(self.0.add(0x0usize + 0x10usize)),
                brc::Src(self.0.add(0x0usize + 0x18usize)),
                brc::Src(self.0.add(0x0usize + 0x20usize)),
                brc::Src(self.0.add(0x0usize + 0x28usize)),
                brc::Src(self.0.add(0x0usize + 0x30usize)),
                brc::Src(self.0.add(0x0usize + 0x38usize)),
                brc::Src(self.0.add(0x0usize + 0x40usize)),
                brc::Src(self.0.add(0x0usize + 0x48usize)),
                brc::Src(self.0.add(0x0usize + 0x50usize)),
                brc::Src(self.0.add(0x0usize + 0x58usize)),
            ]
        }
    }
}
pub mod brc {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct EirqEn_SPEC;
    impl crate::sealed::RegSpec for EirqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "BRC Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type EirqEn = crate::RegValueT<EirqEn_SPEC>;

    impl EirqEn {
        #[doc = "BRC DEST ERR EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn dest_err_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable DID interrupt for channel x"]
        #[inline(always)]
        pub fn did_eirq_en0(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable DID interrupt for channel x"]
        #[inline(always)]
        pub fn did_eirq_en1(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable DID interrupt for channel x"]
        #[inline(always)]
        pub fn did_eirq_en2(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable DID interrupt for channel x"]
        #[inline(always)]
        pub fn did_eirq_en3(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable DID interrupt for channel x"]
        #[inline(always)]
        pub fn did_eirq_en4(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable DID interrupt for channel x"]
        #[inline(always)]
        pub fn did_eirq_en5(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable DID interrupt for channel x"]
        #[inline(always)]
        pub fn did_eirq_en6(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable DID interrupt for channel x"]
        #[inline(always)]
        pub fn did_eirq_en7(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<8,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable DID interrupt for channel x"]
        #[inline(always)]
        pub fn did_eirq_en8(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable DID interrupt for channel x"]
        #[inline(always)]
        pub fn did_eirq_en9(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable DID interrupt for channel x"]
        #[inline(always)]
        pub fn did_eirq_en10(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable DID interrupt for channel x"]
        #[inline(always)]
        pub fn did_eirq_en11(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<12,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for EirqEn {
        #[inline(always)]
        fn default() -> EirqEn {
            <crate::RegValueT<EirqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Rst_SPEC;
    impl crate::sealed::RegSpec for Rst_SPEC {
        type DataType = u32;
    }
    #[doc = "BRC Software Reset Register\n resetvalue={Application Reset:0x0}"]
    pub type Rst = crate::RegValueT<Rst_SPEC>;

    impl Rst {
        #[doc = "Software reset. This bit is cleared automatically after write by CPU. The channel        registers are set to their reset values and channel operation is stopped        immediately."]
        #[inline(always)]
        pub fn rst(self) -> crate::common::RegisterFieldBool<0, 1, 0, Rst_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0, 1, 0, Rst_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
    }
    impl core::default::Default for Rst {
        #[inline(always)]
        fn default() -> Rst {
            <crate::RegValueT<Rst_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc = "IRQ"]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Irq(pub(super) *mut u8);
    unsafe impl core::marker::Send for Irq {}
    unsafe impl core::marker::Sync for Irq {}
    impl Irq {
        #[doc = "BRC Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn en(&self) -> crate::common::Reg<irq::En_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
        }
        #[doc = "BRC Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn forcint(&self) -> crate::common::Reg<irq::Forcint_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
        }
        #[doc = "BRC Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn mode(&self) -> crate::common::Reg<irq::Mode_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(12usize)) }
        }
        #[doc = "BRC Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn notify(&self) -> crate::common::Reg<irq::Notify_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
        }
    }
    pub mod irq {
        #[allow(unused_imports)]
        use crate::common::*;
        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct En_SPEC;
        impl crate::sealed::RegSpec for En_SPEC {
            type DataType = u32;
        }
        #[doc = "BRC Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
        pub type En = crate::RegValueT<En_SPEC>;

        impl En {
            #[doc = "BRC DEST ERR IRQ interrupt enable"]
            #[inline(always)]
            pub fn dest_err_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<0,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable DID interrupt for channel x"]
            #[inline(always)]
            pub fn did_irq_en0(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<1,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable DID interrupt for channel x"]
            #[inline(always)]
            pub fn did_irq_en1(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<2,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable DID interrupt for channel x"]
            #[inline(always)]
            pub fn did_irq_en2(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<3,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable DID interrupt for channel x"]
            #[inline(always)]
            pub fn did_irq_en3(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<4,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable DID interrupt for channel x"]
            #[inline(always)]
            pub fn did_irq_en4(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<5,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable DID interrupt for channel x"]
            #[inline(always)]
            pub fn did_irq_en5(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<6,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable DID interrupt for channel x"]
            #[inline(always)]
            pub fn did_irq_en6(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<7,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable DID interrupt for channel x"]
            #[inline(always)]
            pub fn did_irq_en7(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<8,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable DID interrupt for channel x"]
            #[inline(always)]
            pub fn did_irq_en8(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<9,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable DID interrupt for channel x"]
            #[inline(always)]
            pub fn did_irq_en9(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<10,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable DID interrupt for channel x"]
            #[inline(always)]
            pub fn did_irq_en10(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<11,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable DID interrupt for channel x"]
            #[inline(always)]
            pub fn did_irq_en11(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<12,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for En {
            #[inline(always)]
            fn default() -> En {
                <crate::RegValueT<En_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Forcint_SPEC;
        impl crate::sealed::RegSpec for Forcint_SPEC {
            type DataType = u32;
        }
        #[doc = "BRC Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
        pub type Forcint = crate::RegValueT<Forcint_SPEC>;

        impl Forcint {
            #[doc = "Trigger destination error interrupt. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_dest_err(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<0,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger DID interrupt for channel x. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_did0(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<1,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger DID interrupt for channel x. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_did1(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<2,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger DID interrupt for channel x. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_did2(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<3,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger DID interrupt for channel x. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_did3(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<4,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger DID interrupt for channel x. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_did4(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<5,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger DID interrupt for channel x. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_did5(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<6,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger DID interrupt for channel x. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_did6(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<7,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger DID interrupt for channel x. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_did7(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<8,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger DID interrupt for channel x. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_did8(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<9,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger DID interrupt for channel x. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_did9(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<10,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger DID interrupt for channel x. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_did10(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<11,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger DID interrupt for channel x. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_did11(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<12,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for Forcint {
            #[inline(always)]
            fn default() -> Forcint {
                <crate::RegValueT<Forcint_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Mode_SPEC;
        impl crate::sealed::RegSpec for Mode_SPEC {
            type DataType = u32;
        }
        #[doc = "BRC Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
        pub type Mode = crate::RegValueT<Mode_SPEC>;

        impl Mode {
            #[doc = "IRQ mode selection. Note  The interrupt modes are described in CROSSREFERENCE ."]
            #[inline(always)]
            pub fn irq_mode(
                self,
            ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Mode_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<0,0x3,1,0,u8, Mode_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for Mode {
            #[inline(always)]
            fn default() -> Mode {
                <crate::RegValueT<Mode_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Notify_SPEC;
        impl crate::sealed::RegSpec for Notify_SPEC {
            type DataType = u32;
        }
        #[doc = "BRC Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
        pub type Notify = crate::RegValueT<Notify_SPEC>;

        impl Notify {
            #[doc = "Configuration error interrupt for BRC sub module. This bit will be cleared on a CPU write access of value  1 .  As the bit is rw  otherwise no clear.  A read access leaves the bit unchanged."]
            #[inline(always)]
            pub fn dest_err(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<0,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Data inconsistency occurred for channel x in MTM mode. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn did0(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<1,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Data inconsistency occurred for channel x in MTM mode. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn did1(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<2,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Data inconsistency occurred for channel x in MTM mode. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn did2(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<3,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Data inconsistency occurred for channel x in MTM mode. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn did3(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<4,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Data inconsistency occurred for channel x in MTM mode. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn did4(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<5,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Data inconsistency occurred for channel x in MTM mode. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn did5(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<6,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Data inconsistency occurred for channel x in MTM mode. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn did6(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<7,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Data inconsistency occurred for channel x in MTM mode. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn did7(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<8,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Data inconsistency occurred for channel x in MTM mode. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn did8(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<9,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Data inconsistency occurred for channel x in MTM mode. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn did9(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<10,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Data inconsistency occurred for channel x in MTM mode. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn did10(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<11,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Data inconsistency occurred for channel x in MTM mode. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn did11(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<12,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for Notify {
            #[inline(always)]
            fn default() -> Notify {
                <crate::RegValueT<Notify_SPEC> as RegisterValue<_>>::new(0)
            }
        }
    }
    #[doc = "SRC"]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Src(pub(super) *mut u8);
    unsafe impl core::marker::Send for Src {}
    unsafe impl core::marker::Sync for Src {}
    impl Src {
        #[doc = "BRC Read Address for Input Channel 0\n resetvalue={Application Reset:0x1FE}"]
        #[inline(always)]
        pub const fn brc_src_z_addr(
            &self,
        ) -> crate::common::Reg<src::BrcSrcZAddr_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
        }
        #[doc = "BRC Destination Channels for Input Channel 0\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn brc_src_z_dest(
            &self,
        ) -> crate::common::Reg<src::BrcSrcZDest_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
        }
    }
    pub mod src {
        #[allow(unused_imports)]
        use crate::common::*;
        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct BrcSrcZAddr_SPEC;
        impl crate::sealed::RegSpec for BrcSrcZAddr_SPEC {
            type DataType = u32;
        }
        #[doc = "BRC Read Address for Input Channel 0\n resetvalue={Application Reset:0x1FE}"]
        pub type BrcSrcZAddr = crate::RegValueT<BrcSrcZAddr_SPEC>;

        impl BrcSrcZAddr {
            #[doc = "Source ARU address. Defines an ARU read address used as data source for input channel z. This bit field is only writable if channel is disabled."]
            #[inline(always)]
            pub fn addr(
                self,
            ) -> crate::common::RegisterField<
                0,
                0x1ff,
                1,
                0,
                u16,
                BrcSrcZAddr_SPEC,
                crate::common::RW,
            > {
                crate::common::RegisterField::<
                    0,
                    0x1ff,
                    1,
                    0,
                    u16,
                    BrcSrcZAddr_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
            #[doc = "BRC MODE  BRC Operation mode select. This bit field is only writable if channel is disabled."]
            #[inline(always)]
            pub fn brc_mode(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, BrcSrcZAddr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<12,1,0,BrcSrcZAddr_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for BrcSrcZAddr {
            #[inline(always)]
            fn default() -> BrcSrcZAddr {
                <crate::RegValueT<BrcSrcZAddr_SPEC> as RegisterValue<_>>::new(510)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct BrcSrcZDest_SPEC;
        impl crate::sealed::RegSpec for BrcSrcZDest_SPEC {
            type DataType = u32;
        }
        #[doc = "BRC Destination Channels for Input Channel 0\n resetvalue={Application Reset:0x0}"]
        pub type BrcSrcZDest = crate::RegValueT<BrcSrcZDest_SPEC>;

        impl BrcSrcZDest {
            #[doc = "Enable BRC destination address q. The bits 0 to 21 are cleared by auto correction mechanism if a        destination channel is assigned to multiple source channels. When a BRC input channel is disabled  all EN DESTq  q  0...21  bits are        reset to zero   the internal states are reset to their reset value."]
            #[inline(always)]
            pub fn en_dest0(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, BrcSrcZDest_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<0,1,0,BrcSrcZDest_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable BRC destination address q. The bits 0 to 21 are cleared by auto correction mechanism if a        destination channel is assigned to multiple source channels. When a BRC input channel is disabled  all EN DESTq  q  0...21  bits are        reset to zero   the internal states are reset to their reset value."]
            #[inline(always)]
            pub fn en_dest1(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, BrcSrcZDest_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<1,1,0,BrcSrcZDest_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable BRC destination address q. The bits 0 to 21 are cleared by auto correction mechanism if a        destination channel is assigned to multiple source channels. When a BRC input channel is disabled  all EN DESTq  q  0...21  bits are        reset to zero   the internal states are reset to their reset value."]
            #[inline(always)]
            pub fn en_dest2(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, BrcSrcZDest_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<2,1,0,BrcSrcZDest_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable BRC destination address q. The bits 0 to 21 are cleared by auto correction mechanism if a        destination channel is assigned to multiple source channels. When a BRC input channel is disabled  all EN DESTq  q  0...21  bits are        reset to zero   the internal states are reset to their reset value."]
            #[inline(always)]
            pub fn en_dest3(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, BrcSrcZDest_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<3,1,0,BrcSrcZDest_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable BRC destination address q. The bits 0 to 21 are cleared by auto correction mechanism if a        destination channel is assigned to multiple source channels. When a BRC input channel is disabled  all EN DESTq  q  0...21  bits are        reset to zero   the internal states are reset to their reset value."]
            #[inline(always)]
            pub fn en_dest4(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, BrcSrcZDest_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<4,1,0,BrcSrcZDest_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable BRC destination address q. The bits 0 to 21 are cleared by auto correction mechanism if a        destination channel is assigned to multiple source channels. When a BRC input channel is disabled  all EN DESTq  q  0...21  bits are        reset to zero   the internal states are reset to their reset value."]
            #[inline(always)]
            pub fn en_dest5(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, BrcSrcZDest_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<5,1,0,BrcSrcZDest_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable BRC destination address q. The bits 0 to 21 are cleared by auto correction mechanism if a        destination channel is assigned to multiple source channels. When a BRC input channel is disabled  all EN DESTq  q  0...21  bits are        reset to zero   the internal states are reset to their reset value."]
            #[inline(always)]
            pub fn en_dest6(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, BrcSrcZDest_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<6,1,0,BrcSrcZDest_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable BRC destination address q. The bits 0 to 21 are cleared by auto correction mechanism if a        destination channel is assigned to multiple source channels. When a BRC input channel is disabled  all EN DESTq  q  0...21  bits are        reset to zero   the internal states are reset to their reset value."]
            #[inline(always)]
            pub fn en_dest7(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, BrcSrcZDest_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<7,1,0,BrcSrcZDest_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable BRC destination address q. The bits 0 to 21 are cleared by auto correction mechanism if a        destination channel is assigned to multiple source channels. When a BRC input channel is disabled  all EN DESTq  q  0...21  bits are        reset to zero   the internal states are reset to their reset value."]
            #[inline(always)]
            pub fn en_dest8(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, BrcSrcZDest_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<8,1,0,BrcSrcZDest_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable BRC destination address q. The bits 0 to 21 are cleared by auto correction mechanism if a        destination channel is assigned to multiple source channels. When a BRC input channel is disabled  all EN DESTq  q  0...21  bits are        reset to zero   the internal states are reset to their reset value."]
            #[inline(always)]
            pub fn en_dest9(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, BrcSrcZDest_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<9,1,0,BrcSrcZDest_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable BRC destination address q. The bits 0 to 21 are cleared by auto correction mechanism if a        destination channel is assigned to multiple source channels. When a BRC input channel is disabled  all EN DESTq  q  0...21  bits are        reset to zero   the internal states are reset to their reset value."]
            #[inline(always)]
            pub fn en_dest10(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, BrcSrcZDest_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<10,1,0,BrcSrcZDest_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable BRC destination address q. The bits 0 to 21 are cleared by auto correction mechanism if a        destination channel is assigned to multiple source channels. When a BRC input channel is disabled  all EN DESTq  q  0...21  bits are        reset to zero   the internal states are reset to their reset value."]
            #[inline(always)]
            pub fn en_dest11(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, BrcSrcZDest_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<11,1,0,BrcSrcZDest_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable BRC destination address q. The bits 0 to 21 are cleared by auto correction mechanism if a        destination channel is assigned to multiple source channels. When a BRC input channel is disabled  all EN DESTq  q  0...21  bits are        reset to zero   the internal states are reset to their reset value."]
            #[inline(always)]
            pub fn en_dest12(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, BrcSrcZDest_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<12,1,0,BrcSrcZDest_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable BRC destination address q. The bits 0 to 21 are cleared by auto correction mechanism if a        destination channel is assigned to multiple source channels. When a BRC input channel is disabled  all EN DESTq  q  0...21  bits are        reset to zero   the internal states are reset to their reset value."]
            #[inline(always)]
            pub fn en_dest13(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, BrcSrcZDest_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<13,1,0,BrcSrcZDest_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable BRC destination address q. The bits 0 to 21 are cleared by auto correction mechanism if a        destination channel is assigned to multiple source channels. When a BRC input channel is disabled  all EN DESTq  q  0...21  bits are        reset to zero   the internal states are reset to their reset value."]
            #[inline(always)]
            pub fn en_dest14(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, BrcSrcZDest_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<14,1,0,BrcSrcZDest_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable BRC destination address q. The bits 0 to 21 are cleared by auto correction mechanism if a        destination channel is assigned to multiple source channels. When a BRC input channel is disabled  all EN DESTq  q  0...21  bits are        reset to zero   the internal states are reset to their reset value."]
            #[inline(always)]
            pub fn en_dest15(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, BrcSrcZDest_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<15,1,0,BrcSrcZDest_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable BRC destination address q. The bits 0 to 21 are cleared by auto correction mechanism if a        destination channel is assigned to multiple source channels. When a BRC input channel is disabled  all EN DESTq  q  0...21  bits are        reset to zero   the internal states are reset to their reset value."]
            #[inline(always)]
            pub fn en_dest16(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, BrcSrcZDest_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<16,1,0,BrcSrcZDest_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable BRC destination address q. The bits 0 to 21 are cleared by auto correction mechanism if a        destination channel is assigned to multiple source channels. When a BRC input channel is disabled  all EN DESTq  q  0...21  bits are        reset to zero   the internal states are reset to their reset value."]
            #[inline(always)]
            pub fn en_dest17(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, BrcSrcZDest_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<17,1,0,BrcSrcZDest_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable BRC destination address q. The bits 0 to 21 are cleared by auto correction mechanism if a        destination channel is assigned to multiple source channels. When a BRC input channel is disabled  all EN DESTq  q  0...21  bits are        reset to zero   the internal states are reset to their reset value."]
            #[inline(always)]
            pub fn en_dest18(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, BrcSrcZDest_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<18,1,0,BrcSrcZDest_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable BRC destination address q. The bits 0 to 21 are cleared by auto correction mechanism if a        destination channel is assigned to multiple source channels. When a BRC input channel is disabled  all EN DESTq  q  0...21  bits are        reset to zero   the internal states are reset to their reset value."]
            #[inline(always)]
            pub fn en_dest19(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, BrcSrcZDest_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<19,1,0,BrcSrcZDest_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable BRC destination address q. The bits 0 to 21 are cleared by auto correction mechanism if a        destination channel is assigned to multiple source channels. When a BRC input channel is disabled  all EN DESTq  q  0...21  bits are        reset to zero   the internal states are reset to their reset value."]
            #[inline(always)]
            pub fn en_dest20(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, BrcSrcZDest_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<20,1,0,BrcSrcZDest_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable BRC destination address q. The bits 0 to 21 are cleared by auto correction mechanism if a        destination channel is assigned to multiple source channels. When a BRC input channel is disabled  all EN DESTq  q  0...21  bits are        reset to zero   the internal states are reset to their reset value."]
            #[inline(always)]
            pub fn en_dest21(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, BrcSrcZDest_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<21,1,0,BrcSrcZDest_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "EN TRASHBIN  Control trash bin functionality. When bit EN TRASHBIN is enabled bits 0 to        21 are ignored for this input channel. Therefore  the bits 0 to 21 are        set to zero  0  when trash bin functionality is enabled."]
            #[inline(always)]
            pub fn en_trashbin(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, BrcSrcZDest_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<22,1,0,BrcSrcZDest_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for BrcSrcZDest {
            #[inline(always)]
            fn default() -> BrcSrcZDest {
                <crate::RegValueT<BrcSrcZDest_SPEC> as RegisterValue<_>>::new(0)
            }
        }
    }
}
#[doc = "BRIDGE"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Bridge(pub(super) *mut u8);
unsafe impl core::marker::Send for Bridge {}
unsafe impl core::marker::Sync for Bridge {}
impl Bridge {
    #[doc = "GTM AEI Bridge Mode Register\n resetvalue={Application Reset:0x2001001}"]
    #[inline(always)]
    pub const fn mode(&self) -> crate::common::Reg<bridge::Mode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
    }
    #[doc = "GTM AEI Bridge Pointer 1 Register\n resetvalue={Application Reset:0x200000}"]
    #[inline(always)]
    pub const fn ptr1(&self) -> crate::common::Reg<bridge::Ptr1_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
    }
    #[doc = "GTM AEI Bridge Pointer 2 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ptr2(&self) -> crate::common::Reg<bridge::Ptr2_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
    }
}
pub mod bridge {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mode_SPEC;
    impl crate::sealed::RegSpec for Mode_SPEC {
        type DataType = u32;
    }
    #[doc = "GTM AEI Bridge Mode Register\n resetvalue={Application Reset:0x2001001}"]
    pub type Mode = crate::RegValueT<Mode_SPEC>;

    impl Mode {
        #[doc = "Defines the operation mode for the AEI bridge. Reset value depends on the hardware configuration chosen by silicon vendor. BRG MODE shall  not be written with 0."]
        #[inline(always)]
        pub fn brg_mode(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Mode_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0, 1, 0, Mode_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Mask write response. With active write buffer MSK WR RSP 1  execution of actions can be        delayed due to previous inserted write actions in the transaction buffer        which wait to be serviced. This can lead to the fact that an access on        the bus to a different peripheral than the GTM might be executed earlier        in time than the write access buffered in the GTM. Applications must be        setup up with this in mind otherwise unexpected operation can happen."]
        #[inline(always)]
        pub fn msk_wr_rsp(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Mode_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1, 1, 0, Mode_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Bypass synchronizer flipflops. Function only available with BRG MODE 1"]
        #[inline(always)]
        pub fn bypass_sync(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Mode_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2, 1, 0, Mode_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Mode update in progress"]
        #[inline(always)]
        pub fn mode_up_pgr(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Mode_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<8, 1, 0, Mode_SPEC, crate::common::R>::from_register(
                self, 0,
            )
        }
        #[doc = "Buffer overflow register. A buffer overflow can occur while multiple aborts are issued by the        external bus or a pipelined instruction is started while FBC   0  see        GTM BRIDGE PTR1 register ."]
        #[inline(always)]
        pub fn buff_ovl(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Mode_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<9, 1, 0, Mode_SPEC, crate::common::R>::from_register(
                self, 0,
            )
        }
        #[doc = "Additional pipelined stage in synchronous bridge mode. Reset value depends on the hardware configuration chosen by silicon        vendor."]
        #[inline(always)]
        pub fn sync_input_reg(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, Mode_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<12, 1, 0, Mode_SPEC, crate::common::R>::from_register(
                self, 0,
            )
        }
        #[doc = "Bridge software reset. This bit is cleared automatically after write."]
        #[inline(always)]
        pub fn brg_rst(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Mode_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Mode_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Buffer depth of AEI bridge. Signals the buffer depth of the GTM AEI bridge implementation. Reset value depends on the hardware configuration chosen by silicon        vendor."]
        #[inline(always)]
        pub fn buff_dpt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Mode_SPEC, crate::common::R> {
            crate::common::RegisterField::<24,0xff,1,0,u8, Mode_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Mode {
        #[inline(always)]
        fn default() -> Mode {
            <crate::RegValueT<Mode_SPEC> as RegisterValue<_>>::new(33558529)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ptr1_SPEC;
    impl crate::sealed::RegSpec for Ptr1_SPEC {
        type DataType = u32;
    }
    #[doc = "GTM AEI Bridge Pointer 1 Register\n resetvalue={Application Reset:0x200000}"]
    pub type Ptr1 = crate::RegValueT<Ptr1_SPEC>;

    impl Ptr1 {
        #[doc = "New transaction pointer. Signals the actual value of the new transaction pointer."]
        #[inline(always)]
        pub fn new_tran_ptr(
            self,
        ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, Ptr1_SPEC, crate::common::R> {
            crate::common::RegisterField::<0,0x1f,1,0,u8, Ptr1_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "First response pointer. Signals the actual value of first response pointer."]
        #[inline(always)]
        pub fn first_rsp_ptr(
            self,
        ) -> crate::common::RegisterField<5, 0x1f, 1, 0, u8, Ptr1_SPEC, crate::common::R> {
            crate::common::RegisterField::<5,0x1f,1,0,u8, Ptr1_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Transaction in progress pointer  acquire . Transaction in progress pointer."]
        #[inline(always)]
        pub fn tran_in_pgr(
            self,
        ) -> crate::common::RegisterField<10, 0x1f, 1, 0, u8, Ptr1_SPEC, crate::common::R> {
            crate::common::RegisterField::<10,0x1f,1,0,u8, Ptr1_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Aborted transaction in progress pointer. Aborted transaction in progress pointer."]
        #[inline(always)]
        pub fn abt_tran_pgr(
            self,
        ) -> crate::common::RegisterField<15, 0x1f, 1, 0, u8, Ptr1_SPEC, crate::common::R> {
            crate::common::RegisterField::<15,0x1f,1,0,u8, Ptr1_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Free buffer count. Number of free buffer entries. Initial value depends on the hardware configuration chosen by silicon        vendor.  see BUFF DPT in GTM BRIDGE MODE register ."]
        #[inline(always)]
        pub fn fbc(
            self,
        ) -> crate::common::RegisterField<20, 0x3f, 1, 0, u8, Ptr1_SPEC, crate::common::R> {
            crate::common::RegisterField::<20,0x3f,1,0,u8, Ptr1_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Response transactions ready.   RSP TRAN RDY. Amount of ready response transactions."]
        #[inline(always)]
        pub fn rsp_tran_rdy(
            self,
        ) -> crate::common::RegisterField<26, 0x3f, 1, 0, u8, Ptr1_SPEC, crate::common::R> {
            crate::common::RegisterField::<26,0x3f,1,0,u8, Ptr1_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ptr1 {
        #[inline(always)]
        fn default() -> Ptr1 {
            <crate::RegValueT<Ptr1_SPEC> as RegisterValue<_>>::new(2097152)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ptr2_SPEC;
    impl crate::sealed::RegSpec for Ptr2_SPEC {
        type DataType = u32;
    }
    #[doc = "GTM AEI Bridge Pointer 2 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ptr2 = crate::RegValueT<Ptr2_SPEC>;

    impl Ptr2 {
        #[doc = "Transaction in progress pointer  aquire2 . Transaction in progress pointer 2."]
        #[inline(always)]
        pub fn tran_in_pgr2(
            self,
        ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, Ptr2_SPEC, crate::common::R> {
            crate::common::RegisterField::<0,0x1f,1,0,u8, Ptr2_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ptr2 {
        #[inline(always)]
        fn default() -> Ptr2 {
            <crate::RegValueT<Ptr2_SPEC> as RegisterValue<_>>::new(0)
        }
    }
}
#[doc = "CCM"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ccm(pub(super) *mut u8);
unsafe impl core::marker::Send for Ccm {}
unsafe impl core::marker::Sync for Ccm {}
impl Ccm {
    #[doc = "CCM0 MCS Bus Master Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn aeim_sta(&self) -> crate::common::Reg<ccm::AeimSta_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(472usize)) }
    }
    #[doc = "CCM0 ATOM Output Level Register\n resetvalue={Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ccmi_atom_out(
        &self,
    ) -> crate::common::Reg<ccm::CcMiAtomOut_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(492usize)) }
    }
    #[doc = "CCM0 Configuration Register\n resetvalue={Application Reset:0x2007F,Application Reset:0x2008F,Application Reset:0x2000F,Application Reset:0x2000D,Application Reset:0x2000D,Application Reset:0x20005,Application Reset:0x2000D,Application Reset:0x2000D,Application Reset:0x2000C,Application Reset:0x2000C,Application Reset:0x20004,Application Reset:0x20004,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ccmi_cfg(&self) -> crate::common::Reg<ccm::CcMiCfg_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(504usize)) }
    }
    #[doc = "CCM0 CMU Clock Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ccmi_cmu_clk_cfg(
        &self,
    ) -> crate::common::Reg<ccm::CcMiCmuClkCfg_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(496usize)) }
    }
    #[doc = "CCM0 CMU Fixed Clock Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ccmi_cmu_fxclk_cfg(
        &self,
    ) -> crate::common::Reg<ccm::CcMiCmuFxclkCfg_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(500usize)) }
    }
    #[doc = "CCM0 Hardware Configuration Register\n resetvalue={Application Reset:0x084F022E}"]
    #[inline(always)]
    pub const fn ccmi_hw_conf(&self) -> crate::common::Reg<ccm::CcMiHwConf_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(476usize)) }
    }
    #[doc = "CCM0 Protection Register\n resetvalue={Application Reset:0x1}"]
    #[inline(always)]
    pub const fn ccmi_prot(&self) -> crate::common::Reg<ccm::CcMiProt_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(508usize)) }
    }
    #[doc = "CCM0 External Capture Trigger Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ext_cap_en(&self) -> crate::common::Reg<ccm::ExtCapEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(484usize)) }
    }
    #[doc = "CCM0 TIM Module AUX IN Source Selection Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn tim_aux_in_src(
        &self,
    ) -> crate::common::Reg<ccm::TimAuxInSrc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(480usize)) }
    }
    #[doc = "CCM0 TOM Output Level Register\n resetvalue={Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn tom_out(&self) -> crate::common::Reg<ccm::TomOut_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(488usize)) }
    }
    #[doc = "ARP"]
    #[inline(always)]
    pub fn arp(self) -> [ccm::Arp; 10] {
        unsafe {
            [
                ccm::Arp(self.0.add(0x0usize + 0x0usize)),
                ccm::Arp(self.0.add(0x0usize + 0x8usize)),
                ccm::Arp(self.0.add(0x0usize + 0x10usize)),
                ccm::Arp(self.0.add(0x0usize + 0x18usize)),
                ccm::Arp(self.0.add(0x0usize + 0x20usize)),
                ccm::Arp(self.0.add(0x0usize + 0x28usize)),
                ccm::Arp(self.0.add(0x0usize + 0x30usize)),
                ccm::Arp(self.0.add(0x0usize + 0x38usize)),
                ccm::Arp(self.0.add(0x0usize + 0x40usize)),
                ccm::Arp(self.0.add(0x0usize + 0x48usize)),
            ]
        }
    }
}
pub mod ccm {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct AeimSta_SPEC;
    impl crate::sealed::RegSpec for AeimSta_SPEC {
        type DataType = u32;
    }
    #[doc = "CCM0 MCS Bus Master Status Register\n resetvalue={Application Reset:0x0}"]
    pub type AeimSta = crate::RegValueT<AeimSta_SPEC>;

    impl AeimSta {
        #[doc = "Exception Address. Invalid bus master  AEIM  address of MCS module."]
        #[inline(always)]
        pub fn aeim_xpt_addr(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, AeimSta_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, AeimSta_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "AEIM exception status"]
        #[inline(always)]
        pub fn aeim_xpt_sta(
            self,
        ) -> crate::common::RegisterField<24, 0x3, 1, 0, u8, AeimSta_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x3,1,0,u8, AeimSta_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for AeimSta {
        #[inline(always)]
        fn default() -> AeimSta {
            <crate::RegValueT<AeimSta_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct CcMiAtomOut_SPEC;
    impl crate::sealed::RegSpec for CcMiAtomOut_SPEC {
        type DataType = u32;
    }
    #[doc = "CCM0 ATOM Output Level Register\n resetvalue={Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type CcMiAtomOut = crate::RegValueT<CcMiAtomOut_SPEC>;

    impl CcMiAtomOut {
        #[doc = "Output level snapshot of ATOM i  OUT all channels"]
        #[inline(always)]
        pub fn atom_i_out(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, CcMiAtomOut_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, CcMiAtomOut_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Output level snapshot of ATOM i  OUT N all channels"]
        #[inline(always)]
        pub fn atom_i_out_n(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, CcMiAtomOut_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, CcMiAtomOut_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Output level snapshot of ATOM i 1  OUT all channels"]
        #[inline(always)]
        pub fn atom_ip1_out(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, CcMiAtomOut_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, CcMiAtomOut_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Output level snapshot of ATOM i 1  OUT N all channels"]
        #[inline(always)]
        pub fn atom_ip1_out_n(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, CcMiAtomOut_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, CcMiAtomOut_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for CcMiAtomOut {
        #[inline(always)]
        fn default() -> CcMiAtomOut {
            <crate::RegValueT<CcMiAtomOut_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct CcMiCfg_SPEC;
    impl crate::sealed::RegSpec for CcMiCfg_SPEC {
        type DataType = u32;
    }
    #[doc = "CCM0 Configuration Register\n resetvalue={Application Reset:0x2007F,Application Reset:0x2008F,Application Reset:0x2000F,Application Reset:0x2000D,Application Reset:0x2000D,Application Reset:0x20005,Application Reset:0x2000D,Application Reset:0x2000D,Application Reset:0x2000C,Application Reset:0x2000C,Application Reset:0x20004,Application Reset:0x20004,Application Reset:0x0}"]
    pub type CcMiCfg = crate::RegValueT<CcMiCfg_SPEC>;

    impl CcMiCfg {
        #[doc = "Enable TIM. This bit is only writable if bit field CLS PROT of        register CCM i  PROT is cleared."]
        #[inline(always)]
        pub fn en_tim(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, CcMiCfg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,CcMiCfg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable TOM  SPE and TDTM. This bit is only writable if bit field CLS PROT of        register CCM i  PROT is cleared."]
        #[inline(always)]
        pub fn en_tom_spe_tdtm(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, CcMiCfg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,CcMiCfg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable ATOM and ADTM. This bit is only writable if bit field CLS PROT of        register CCM i  PROT is cleared."]
        #[inline(always)]
        pub fn en_atom_adtm(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, CcMiCfg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,CcMiCfg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable MCS. This bit is only writable if bit field CLS PROT of        register CCM i  PROT is cleared."]
        #[inline(always)]
        pub fn en_mcs(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, CcMiCfg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,CcMiCfg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable DPLL and MAP. This bit is only writable if bit field CLS PROT of        register CCM i  PROT is cleared."]
        #[inline(always)]
        pub fn en_dpll_map(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, CcMiCfg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,CcMiCfg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable BRC. This bit is only writable if bit field CLS PROT of        register CCM i  PROT is cleared."]
        #[inline(always)]
        pub fn en_brc(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, CcMiCfg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,CcMiCfg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable PSM. This bit is only writable if bit field CLS PROT of        register CCM i  PROT is cleared."]
        #[inline(always)]
        pub fn en_psm(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, CcMiCfg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,CcMiCfg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable CMP and MON. This bit is only writable if bit field CLS PROT of        register CCM i  PROT is cleared."]
        #[inline(always)]
        pub fn en_cmp_mon(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, CcMiCfg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,CcMiCfg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Cluster Clock Divider. The value of this bit field mirrors the bit field CLS i  CLK DIV of register GTM CLS CLK CFG   whereas i equals the cluster index."]
        #[inline(always)]
        pub fn cls_clk_div(
            self,
        ) -> crate::common::RegisterField<16, 0x3, 1, 0, u8, CcMiCfg_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0x3,1,0,u8, CcMiCfg_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "DIR1 input signal of module TBU"]
        #[inline(always)]
        pub fn tbu_dir1(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, CcMiCfg_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<30,1,0,CcMiCfg_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "DIR2 input signal of module TBU"]
        #[inline(always)]
        pub fn tbu_dir2(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, CcMiCfg_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<31,1,0,CcMiCfg_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for CcMiCfg {
        #[inline(always)]
        fn default() -> CcMiCfg {
            <crate::RegValueT<CcMiCfg_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct CcMiCmuClkCfg_SPEC;
    impl crate::sealed::RegSpec for CcMiCmuClkCfg_SPEC {
        type DataType = u32;
    }
    #[doc = "CCM0 CMU Clock Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type CcMiCmuClkCfg = crate::RegValueT<CcMiCmuClkCfg_SPEC>;

    impl CcMiCmuClkCfg {
        #[doc = "Clock 7 source signal selector"]
        #[inline(always)]
        pub fn clk0_src(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, CcMiCmuClkCfg_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, CcMiCmuClkCfg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock 7 source signal selector"]
        #[inline(always)]
        pub fn clk1_src(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, CcMiCmuClkCfg_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, CcMiCmuClkCfg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock 7 source signal selector"]
        #[inline(always)]
        pub fn clk2_src(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, CcMiCmuClkCfg_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, CcMiCmuClkCfg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock 7 source signal selector"]
        #[inline(always)]
        pub fn clk3_src(
            self,
        ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, CcMiCmuClkCfg_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x3,1,0,u8, CcMiCmuClkCfg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock 7 source signal selector"]
        #[inline(always)]
        pub fn clk4_src(
            self,
        ) -> crate::common::RegisterField<16, 0x3, 1, 0, u8, CcMiCmuClkCfg_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x3,1,0,u8, CcMiCmuClkCfg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock 7 source signal selector"]
        #[inline(always)]
        pub fn clk5_src(
            self,
        ) -> crate::common::RegisterField<20, 0x3, 1, 0, u8, CcMiCmuClkCfg_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<20,0x3,1,0,u8, CcMiCmuClkCfg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock 7 source signal selector"]
        #[inline(always)]
        pub fn clk6_src(
            self,
        ) -> crate::common::RegisterField<24, 0x3, 1, 0, u8, CcMiCmuClkCfg_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x3,1,0,u8, CcMiCmuClkCfg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock 7 source signal selector"]
        #[inline(always)]
        pub fn clk7_src(
            self,
        ) -> crate::common::RegisterField<28, 0x3, 1, 0, u8, CcMiCmuClkCfg_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<28,0x3,1,0,u8, CcMiCmuClkCfg_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for CcMiCmuClkCfg {
        #[inline(always)]
        fn default() -> CcMiCmuClkCfg {
            <crate::RegValueT<CcMiCmuClkCfg_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct CcMiCmuFxclkCfg_SPEC;
    impl crate::sealed::RegSpec for CcMiCmuFxclkCfg_SPEC {
        type DataType = u32;
    }
    #[doc = "CCM0 CMU Fixed Clock Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type CcMiCmuFxclkCfg = crate::RegValueT<CcMiCmuFxclkCfg_SPEC>;

    impl CcMiCmuFxclkCfg {
        #[doc = "Fixed clock 0 source signal selector. Bit field values that are not mentioned above are reserved. These bits are only writable if bit field CLS PROT of register CCM i  PROT is cleared."]
        #[inline(always)]
        pub fn fxclk0_src(
            self,
        ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, CcMiCmuFxclkCfg_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xf,1,0,u8, CcMiCmuFxclkCfg_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for CcMiCmuFxclkCfg {
        #[inline(always)]
        fn default() -> CcMiCmuFxclkCfg {
            <crate::RegValueT<CcMiCmuFxclkCfg_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct CcMiHwConf_SPEC;
    impl crate::sealed::RegSpec for CcMiHwConf_SPEC {
        type DataType = u32;
    }
    #[doc = "CCM0 Hardware Configuration Register\n resetvalue={Application Reset:0x084F022E}"]
    pub type CcMiHwConf = crate::RegValueT<CcMiHwConf_SPEC>;

    impl CcMiHwConf {
        #[doc = "Global Reset Enable"]
        #[inline(always)]
        pub fn grsten(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, CcMiHwConf_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,CcMiHwConf_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Bridge mode after reset"]
        #[inline(always)]
        pub fn bridge_mode_rst(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, CcMiHwConf_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<1,1,0,CcMiHwConf_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Additional pipelined stage in synchronous bridge mode. Note  this register is only relevant  if existing  for synchronous bridge mode"]
        #[inline(always)]
        pub fn sync_input_reg(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, CcMiHwConf_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<2,1,0,CcMiHwConf_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Clocks per ARU transfer. This value defines also the availability of configuration bits in          register GTM CLS CLK CFG. If CFG CLOCK RATE 0  only the values 00 and 01 are valid for bit fields        CLS x x CLK DIV. If CFG CLOCK RATE 1  only the values 00   01 and 10 are valid for bit fields        CLS x x CLK DIV."]
        #[inline(always)]
        pub fn cfg_clock_rate(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, CcMiHwConf_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<3,1,0,CcMiHwConf_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ATOM OUT reset level. This value represents the ATOM output level after reset. The inverse          value of this bit is the reset value of bit SL in all ATOM channels."]
        #[inline(always)]
        pub fn atom_out_rst(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, CcMiHwConf_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<4,1,0,CcMiHwConf_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ATOM trigger chain length without synchronization register. It defines after which ATOM instance count a synchronization register is        introduced into trigger chain  after ATOM TRIG  lt i gt  output if instance i        and ATOM TRIG  lt i 1 gt  input of instance i 1 . Valid values are 1 to 7. 1 means that after each instance  a        synchronization register is placed."]
        #[inline(always)]
        pub fn atom_trig_chain(
            self,
        ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, CcMiHwConf_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<5,0x7,1,0,u8, CcMiHwConf_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "TOM OUT reset level. This value represents the TOM output level after reset. The inverse          value of this bit is the reset value of bit SL in all TOM channels."]
        #[inline(always)]
        pub fn tom_out_rst(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, CcMiHwConf_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<8,1,0,CcMiHwConf_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "TOM trigger chain length without synchronization register. It defines after which TOM instance count a synchronization register is        introduced into trigger chain  after TOM TRIG  lt i gt  output if instance i        and TOM TRIG  lt i 1 gt  input of instance i 1 . Valid values are 1 to 7. 1 means that after each instance  a        synchronization register is placed."]
        #[inline(always)]
        pub fn tom_trig_chain(
            self,
        ) -> crate::common::RegisterField<9, 0x7, 1, 0, u8, CcMiHwConf_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<9,0x7,1,0,u8, CcMiHwConf_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "RAM initialization from reset"]
        #[inline(always)]
        pub fn ram_init_rst(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, CcMiHwConf_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<12,1,0,CcMiHwConf_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Enable RAM1 MSB for available MCS modules. Note  The bit reflects the state of the configuration parameter ERM mentioned in the specification of MCFG ."]
        #[inline(always)]
        pub fn erm(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, CcMiHwConf_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<13,1,0,CcMiHwConf_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Defines number of parallel ARU ports"]
        #[inline(always)]
        pub fn aru_connect_config(
            self,
        ) -> crate::common::RegisterFieldBool<14, 1, 0, CcMiHwConf_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<14,1,0,CcMiHwConf_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "IRQ MODE LEVEL"]
        #[inline(always)]
        pub fn irq_mode_level(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, CcMiHwConf_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<16,1,0,CcMiHwConf_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "IRQ MODE PULSE"]
        #[inline(always)]
        pub fn irq_mode_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, CcMiHwConf_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<17,1,0,CcMiHwConf_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "IRQ MODE PULSE NOTIFY"]
        #[inline(always)]
        pub fn irq_mode_pulse_notify(
            self,
        ) -> crate::common::RegisterFieldBool<18, 1, 0, CcMiHwConf_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<18,1,0,CcMiHwConf_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "IRQ MODE SINGLE PULSE"]
        #[inline(always)]
        pub fn irq_mode_single_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<19, 1, 0, CcMiHwConf_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<19,1,0,CcMiHwConf_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ATOM internal trigger chain length without synchronization register. ATOM internal trigger chain length without synchronization register It defines after which ATOM channel count a synchronization register is introduced into trigger chain. Valid values are 1 to 8. 4 means that in channel 4 of the atom instances a synchronization register is placed."]
        #[inline(always)]
        pub fn atom_trig_intchain(
            self,
        ) -> crate::common::RegisterField<20, 0xf, 1, 0, u8, CcMiHwConf_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<20,0xf,1,0,u8, CcMiHwConf_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "TOM internal trigger chain length without synchronization register. It defines after which TOM channel count a synchronization register is        introduced into trigger chain. Valid values are 1 to 16. 8 means that in channel 8 of the TOM        instances  a synchronization register is placed."]
        #[inline(always)]
        pub fn tom_trig_intchain(
            self,
        ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, CcMiHwConf_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0x1f,1,0,u8, CcMiHwConf_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Internal clock enable generation"]
        #[inline(always)]
        pub fn int_clk_en_gen(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, CcMiHwConf_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<29,1,0,CcMiHwConf_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for CcMiHwConf {
        #[inline(always)]
        fn default() -> CcMiHwConf {
            <crate::RegValueT<CcMiHwConf_SPEC> as RegisterValue<_>>::new(139395630)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct CcMiProt_SPEC;
    impl crate::sealed::RegSpec for CcMiProt_SPEC {
        type DataType = u32;
    }
    #[doc = "CCM0 Protection Register\n resetvalue={Application Reset:0x1}"]
    pub type CcMiProt = crate::RegValueT<CcMiProt_SPEC>;

    impl CcMiProt {
        #[doc = "Cluster Protection"]
        #[inline(always)]
        pub fn cls_prot(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, CcMiProt_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,CcMiProt_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for CcMiProt {
        #[inline(always)]
        fn default() -> CcMiProt {
            <crate::RegValueT<CcMiProt_SPEC> as RegisterValue<_>>::new(1)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct ExtCapEn_SPEC;
    impl crate::sealed::RegSpec for ExtCapEn_SPEC {
        type DataType = u32;
    }
    #[doc = "CCM0 External Capture Trigger Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type ExtCapEn = crate::RegValueT<ExtCapEn_SPEC>;

    impl ExtCapEn {
        #[doc = "TIM i  EXT CAPTURE signal forwarding enable. Note  The trigger event forwarding is possible from TIM i  and TIM i 1         to MCS i ."]
        #[inline(always)]
        pub fn tim_i_ext_cap_en(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, ExtCapEn_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, ExtCapEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM i 1  EXT CAPTURE signal forwarding enable"]
        #[inline(always)]
        pub fn tim_ip1_ext_cap_en(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, ExtCapEn_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, ExtCapEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for ExtCapEn {
        #[inline(always)]
        fn default() -> ExtCapEn {
            <crate::RegValueT<ExtCapEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct TimAuxInSrc_SPEC;
    impl crate::sealed::RegSpec for TimAuxInSrc_SPEC {
        type DataType = u32;
    }
    #[doc = "CCM0 TIM Module AUX IN Source Selection Register\n resetvalue={Application Reset:0x0}"]
    pub type TimAuxInSrc = crate::RegValueT<TimAuxInSrc_SPEC>;

    impl TimAuxInSrc {
        #[doc = "Defines AUX IN source of TIM i  channel 7. SRC CH7  Defines AUX IN source of TIM 7  channel 7 SEL OUT N CH7   0   SEL OUT N CH7   1"]
        #[inline(always)]
        pub fn src_ch0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, TimAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,TimAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines AUX IN source of TIM i  channel 7. SRC CH7  Defines AUX IN source of TIM 7  channel 7 SEL OUT N CH7   0   SEL OUT N CH7   1"]
        #[inline(always)]
        pub fn src_ch1(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, TimAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,TimAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines AUX IN source of TIM i  channel 7. SRC CH7  Defines AUX IN source of TIM 7  channel 7 SEL OUT N CH7   0   SEL OUT N CH7   1"]
        #[inline(always)]
        pub fn src_ch2(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, TimAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,TimAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines AUX IN source of TIM i  channel 7. SRC CH7  Defines AUX IN source of TIM 7  channel 7 SEL OUT N CH7   0   SEL OUT N CH7   1"]
        #[inline(always)]
        pub fn src_ch3(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, TimAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<3,1,0,TimAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines AUX IN source of TIM i  channel 7. SRC CH7  Defines AUX IN source of TIM 7  channel 7 SEL OUT N CH7   0   SEL OUT N CH7   1"]
        #[inline(always)]
        pub fn src_ch4(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, TimAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<4,1,0,TimAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines AUX IN source of TIM i  channel 7. SRC CH7  Defines AUX IN source of TIM 7  channel 7 SEL OUT N CH7   0   SEL OUT N CH7   1"]
        #[inline(always)]
        pub fn src_ch5(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, TimAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<5,1,0,TimAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines AUX IN source of TIM i  channel 7. SRC CH7  Defines AUX IN source of TIM 7  channel 7 SEL OUT N CH7   0   SEL OUT N CH7   1"]
        #[inline(always)]
        pub fn src_ch6(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, TimAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<6,1,0,TimAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines AUX IN source of TIM i  channel 7. SRC CH7  Defines AUX IN source of TIM 7  channel 7 SEL OUT N CH7   0   SEL OUT N CH7   1"]
        #[inline(always)]
        pub fn src_ch7(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, TimAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<7,1,0,TimAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use DTM OUT or DTM OUT N signals as AUX IN source of TIM i  channel 7. SEL OUT N CH7  Use DTM OUT or DTM OUT N signals as AUX IN       source of TIM 0  channel 7"]
        #[inline(always)]
        pub fn sel_out_n_ch0(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, TimAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<16,1,0,TimAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use DTM OUT or DTM OUT N signals as AUX IN source of TIM i  channel 7. SEL OUT N CH7  Use DTM OUT or DTM OUT N signals as AUX IN       source of TIM 0  channel 7"]
        #[inline(always)]
        pub fn sel_out_n_ch1(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, TimAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<17,1,0,TimAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use DTM OUT or DTM OUT N signals as AUX IN source of TIM i  channel 7. SEL OUT N CH7  Use DTM OUT or DTM OUT N signals as AUX IN       source of TIM 0  channel 7"]
        #[inline(always)]
        pub fn sel_out_n_ch2(
            self,
        ) -> crate::common::RegisterFieldBool<18, 1, 0, TimAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<18,1,0,TimAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use DTM OUT or DTM OUT N signals as AUX IN source of TIM i  channel 7. SEL OUT N CH7  Use DTM OUT or DTM OUT N signals as AUX IN       source of TIM 0  channel 7"]
        #[inline(always)]
        pub fn sel_out_n_ch3(
            self,
        ) -> crate::common::RegisterFieldBool<19, 1, 0, TimAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<19,1,0,TimAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use DTM OUT or DTM OUT N signals as AUX IN source of TIM i  channel 7. SEL OUT N CH7  Use DTM OUT or DTM OUT N signals as AUX IN       source of TIM 0  channel 7"]
        #[inline(always)]
        pub fn sel_out_n_ch4(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, TimAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<20,1,0,TimAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use DTM OUT or DTM OUT N signals as AUX IN source of TIM i  channel 7. SEL OUT N CH7  Use DTM OUT or DTM OUT N signals as AUX IN       source of TIM 0  channel 7"]
        #[inline(always)]
        pub fn sel_out_n_ch5(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, TimAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<21,1,0,TimAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use DTM OUT or DTM OUT N signals as AUX IN source of TIM i  channel 7. SEL OUT N CH7  Use DTM OUT or DTM OUT N signals as AUX IN       source of TIM 0  channel 7"]
        #[inline(always)]
        pub fn sel_out_n_ch6(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, TimAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<22,1,0,TimAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use DTM OUT or DTM OUT N signals as AUX IN source of TIM i  channel 7. SEL OUT N CH7  Use DTM OUT or DTM OUT N signals as AUX IN       source of TIM 0  channel 7"]
        #[inline(always)]
        pub fn sel_out_n_ch7(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, TimAuxInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<23,1,0,TimAuxInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for TimAuxInSrc {
        #[inline(always)]
        fn default() -> TimAuxInSrc {
            <crate::RegValueT<TimAuxInSrc_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct TomOut_SPEC;
    impl crate::sealed::RegSpec for TomOut_SPEC {
        type DataType = u32;
    }
    #[doc = "CCM0 TOM Output Level Register\n resetvalue={Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0,Application Reset:0x0}"]
    pub type TomOut = crate::RegValueT<TomOut_SPEC>;

    impl TomOut {
        #[doc = "Output level snapshot of TOM i  OUT all channels"]
        #[inline(always)]
        pub fn tom_out(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, TomOut_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, TomOut_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Output level snapshot of TOM i  OUT N all channels"]
        #[inline(always)]
        pub fn tom_out_n(
            self,
        ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, TomOut_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0xffff,1,0,u16, TomOut_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for TomOut {
        #[inline(always)]
        fn default() -> TomOut {
            <crate::RegValueT<TomOut_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc = "ARP"]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Arp(pub(super) *mut u8);
    unsafe impl core::marker::Send for Arp {}
    unsafe impl core::marker::Sync for Arp {}
    impl Arp {
        #[doc = "CCM0 Address Range Protector 0 Control Register\n resetvalue={Application Reset:0x30000}"]
        #[inline(always)]
        pub const fn ctrl(&self) -> crate::common::Reg<arp::Ctrl_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
        }
        #[doc = "CCM0 Address Range Protector 0 Protection Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn prot(&self) -> crate::common::Reg<arp::Prot_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
        }
    }
    pub mod arp {
        #[allow(unused_imports)]
        use crate::common::*;
        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Ctrl_SPEC;
        impl crate::sealed::RegSpec for Ctrl_SPEC {
            type DataType = u32;
        }
        #[doc = "CCM0 Address Range Protector 0 Control Register\n resetvalue={Application Reset:0x30000}"]
        pub type Ctrl = crate::RegValueT<Ctrl_SPEC>;

        impl Ctrl {
            #[doc = "ARP base address. Base address for address range protector z. Only the bits 5 to AAW 1 of this bit field are implemented as registers.        The bits AAW to 15 are reserved bits and always read and written as        zeros. The bits 0 and 1 are functionally used for the definition of an        ARP but they are always read and written as zeros. The actual base address for a protected address range is only defined by        the upper AAW   SIZE  2  bits  bit position 2  SIZE to bit position AAW 1  of bit field ADDR .        The lower SIZE  2 bits  bit 0 to SIZE  1         are ignored for the address calculation and assumed as zeros. This bit field is only writable if bit field CLS PROT of register CCM i  PROT is cleared."]
            #[inline(always)]
            pub fn addr(
                self,
            ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ctrl_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<0,0xffff,1,0,u16, Ctrl_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Size of ARP. Size of memory range protector z. The actual size of a protected memory range is defined as 2 SIZE address locations  whereas the bit field SIZE is interpreted as an unsigned integer number. This bit field is only writable if bit field CLS PROT of register CCM i  PROT is cleared."]
            #[inline(always)]
            pub fn size(
                self,
            ) -> crate::common::RegisterField<16, 0xf, 1, 0, u8, Ctrl_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<16,0xf,1,0,u8, Ctrl_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Disable ARP protection. This bit field is only writable if bit field CLS PROT of register CCM i  PROT is cleared."]
            #[inline(always)]
            pub fn dis_prot(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, Ctrl_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<24,1,0,Ctrl_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "AEI slave write protection. The address range interval that is protected by this ARP can be        calculated as    ADDR AND NOT 4  2 SIZE  1             ADDR AND NOT 4  2 SIZE  1            4  2 SIZE  1    assuming a byte wise        addressing  an unsigned integer representation for the bit fields SIZE and ADDR . NOT and AND are bitwise        logical operators. The incrementation interval for neighboring memory        locations is always 4. This bit field is only writable if bit field CLS PROT of register CCM i  PROT is cleared."]
            #[inline(always)]
            pub fn wprot_aei(
                self,
            ) -> crate::common::RegisterFieldBool<31, 1, 0, Ctrl_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<31,1,0,Ctrl_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for Ctrl {
            #[inline(always)]
            fn default() -> Ctrl {
                <crate::RegValueT<Ctrl_SPEC> as RegisterValue<_>>::new(196608)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Prot_SPEC;
        impl crate::sealed::RegSpec for Prot_SPEC {
            type DataType = u32;
        }
        #[doc = "CCM0 Address Range Protector 0 Protection Register\n resetvalue={Application Reset:0x0}"]
        pub type Prot = crate::RegValueT<Prot_SPEC>;

        impl Prot {
            #[doc = "Write Protection MCS channel 7"]
            #[inline(always)]
            pub fn wprot0(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, Prot_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<0,1,0,Prot_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Write Protection MCS channel 7"]
            #[inline(always)]
            pub fn wprot1(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, Prot_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<1,1,0,Prot_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Write Protection MCS channel 7"]
            #[inline(always)]
            pub fn wprot2(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, Prot_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<2,1,0,Prot_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Write Protection MCS channel 7"]
            #[inline(always)]
            pub fn wprot3(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, Prot_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<3,1,0,Prot_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Write Protection MCS channel 7"]
            #[inline(always)]
            pub fn wprot4(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, Prot_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<4,1,0,Prot_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Write Protection MCS channel 7"]
            #[inline(always)]
            pub fn wprot5(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, Prot_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<5,1,0,Prot_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Write Protection MCS channel 7"]
            #[inline(always)]
            pub fn wprot6(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, Prot_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<6,1,0,Prot_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Write Protection MCS channel 7"]
            #[inline(always)]
            pub fn wprot7(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, Prot_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<7,1,0,Prot_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for Prot {
            #[inline(always)]
            fn default() -> Prot {
                <crate::RegValueT<Prot_SPEC> as RegisterValue<_>>::new(0)
            }
        }
    }
}
#[doc = "CDTM"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Cdtm(pub(super) *mut u8);
unsafe impl core::marker::Send for Cdtm {}
unsafe impl core::marker::Sync for Cdtm {}
impl Cdtm {
    #[doc = "DTM"]
    #[inline(always)]
    pub fn dtm(self) -> [cdtm::Dtm; 6] {
        unsafe {
            [
                cdtm::Dtm(self.0.add(0x0usize + 0x0usize)),
                cdtm::Dtm(self.0.add(0x0usize + 0x40usize)),
                cdtm::Dtm(self.0.add(0x0usize + 0x80usize)),
                cdtm::Dtm(self.0.add(0x0usize + 0xc0usize)),
                cdtm::Dtm(self.0.add(0x0usize + 0x100usize)),
                cdtm::Dtm(self.0.add(0x0usize + 0x140usize)),
            ]
        }
    }
}
pub mod cdtm {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc = "DTM"]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Dtm(pub(super) *mut u8);
    unsafe impl core::marker::Send for Dtm {}
    unsafe impl core::marker::Sync for Dtm {}
    impl Dtm {
        #[doc = "CDTM0 DTM0 Channel Control Register 1\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn ch_ctrl1(&self) -> crate::common::Reg<dtm::ChCtrl1_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
        }
        #[doc = "CDTM0 DTM0 Channel Control Register 2\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn ch_ctrl2(&self) -> crate::common::Reg<dtm::ChCtrl2_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
        }
        #[doc = "CDTM0 DTM0 Channel Control Register 2 Shadow\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn ch_ctrl2_sr(
            &self,
        ) -> crate::common::Reg<dtm::ChCtrl2Sr_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(12usize)) }
        }
        #[doc = "CDTM0 DTM0 Channel Control Register 3\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn ch_ctrl3(&self) -> crate::common::Reg<dtm::ChCtrl3_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(40usize)) }
        }
        #[doc = "CDTM0 DTM0 Channel Shadow Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn ch_sr(&self) -> crate::common::Reg<dtm::ChSr_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(36usize)) }
        }
        #[doc = "CDTM0 DTM0 Global Configuration and Control Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn ctrl(&self) -> crate::common::Reg<dtm::Ctrl_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
        }
        #[doc = "CDTM0 DTM0 Phase Shift Unit Configuration and Control Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn ps_ctrl(&self) -> crate::common::Reg<dtm::PsCtrl_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(16usize)) }
        }
        #[doc = "CH"]
        #[inline(always)]
        pub fn ch(self) -> [dtm::Ch; 4] {
            unsafe {
                [
                    dtm::Ch(self.0.add(0x14usize + 0x0usize)),
                    dtm::Ch(self.0.add(0x14usize + 0x4usize)),
                    dtm::Ch(self.0.add(0x14usize + 0x8usize)),
                    dtm::Ch(self.0.add(0x14usize + 0xcusize)),
                ]
            }
        }
    }
    pub mod dtm {
        #[allow(unused_imports)]
        use crate::common::*;
        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct ChCtrl1_SPEC;
        impl crate::sealed::RegSpec for ChCtrl1_SPEC {
            type DataType = u32;
        }
        #[doc = "CDTM0 DTM0 Channel Control Register 1\n resetvalue={Application Reset:0x0}"]
        pub type ChCtrl1 = crate::RegValueT<ChCtrl1_SPEC>;

        impl ChCtrl1 {
            #[doc = "Output 1 select channel 0"]
            #[inline(always)]
            pub fn o1sel_0(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, ChCtrl1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<0,1,0,ChCtrl1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Input 1 select channel 0. Note  If i is even  I1SEL 0 is not implemented. Then the bit is read as zero and shall be written as zero."]
            #[inline(always)]
            pub fn i1sel_0(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, ChCtrl1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<1,1,0,ChCtrl1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Swap outputs DTM i  CH 0  OUT0 and DTM i  CH 0  OUT1  before final output register"]
            #[inline(always)]
            pub fn swap_0(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, ChCtrl1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<3,1,0,ChCtrl1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Output 1 function channel 0"]
            #[inline(always)]
            pub fn o1f_0(
                self,
            ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, ChCtrl1_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<4,0x3,1,0,u8, ChCtrl1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Cross dead time enable on channels 0 and 1. Note  TSEL0  x  and SH EN 1 must be  0  for using cross dead time to avoid wrong input signals.  x 0 1"]
            #[inline(always)]
            pub fn xdt_en_0_1(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, ChCtrl1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<6,1,0,ChCtrl1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Output 1 select channel 1"]
            #[inline(always)]
            pub fn o1sel_1(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, ChCtrl1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<8,1,0,ChCtrl1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Input 1 select channel 1"]
            #[inline(always)]
            pub fn i1sel_1(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, ChCtrl1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<9,1,0,ChCtrl1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Shift enable channel 1"]
            #[inline(always)]
            pub fn sh_en_1(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, ChCtrl1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<10,1,0,ChCtrl1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Swap outputs DTM i  CH 1  OUT0 and DTM i  CH 1  OUT1  before final output register"]
            #[inline(always)]
            pub fn swap_1(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, ChCtrl1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<11,1,0,ChCtrl1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Output 1 function channel 1"]
            #[inline(always)]
            pub fn o1f_1(
                self,
            ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, ChCtrl1_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<12,0x3,1,0,u8, ChCtrl1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Output 1 select channel 2"]
            #[inline(always)]
            pub fn o1sel_2(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, ChCtrl1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<16,1,0,ChCtrl1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Input 1 select channel 2"]
            #[inline(always)]
            pub fn i1sel_2(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, ChCtrl1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<17,1,0,ChCtrl1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Shift enable channel 2"]
            #[inline(always)]
            pub fn sh_en_2(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, ChCtrl1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<18,1,0,ChCtrl1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Swap outputs DTM i  CH 2  OUT0 and DTM i  CH 2  OUT1  before final output register"]
            #[inline(always)]
            pub fn swap_2(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, ChCtrl1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<19,1,0,ChCtrl1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Output 1 function channel 2"]
            #[inline(always)]
            pub fn o1f_2(
                self,
            ) -> crate::common::RegisterField<20, 0x3, 1, 0, u8, ChCtrl1_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<20,0x3,1,0,u8, ChCtrl1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Cross dead time enable on channels 0 and 1. Note  TSEL0  x  and SH EN  x  must be  0  for using cross dead time to avoid wrong input signals.  x 2 3"]
            #[inline(always)]
            pub fn xdt_en_2_3(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, ChCtrl1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<22,1,0,ChCtrl1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Output 1 select channel 3"]
            #[inline(always)]
            pub fn o1sel_3(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, ChCtrl1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<24,1,0,ChCtrl1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Input 1 select channel 3"]
            #[inline(always)]
            pub fn i1sel_3(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, ChCtrl1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<25,1,0,ChCtrl1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Shift enable channel 3"]
            #[inline(always)]
            pub fn sh_en_3(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, ChCtrl1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<26,1,0,ChCtrl1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Swap outputs DTM i  CH 3  OUT0 and DTM i  CH 3  OUT1  before final output register"]
            #[inline(always)]
            pub fn swap_3(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, ChCtrl1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<27,1,0,ChCtrl1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Output 1 function channel 3"]
            #[inline(always)]
            pub fn o1f_3(
                self,
            ) -> crate::common::RegisterField<28, 0x3, 1, 0, u8, ChCtrl1_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<28,0x3,1,0,u8, ChCtrl1_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for ChCtrl1 {
            #[inline(always)]
            fn default() -> ChCtrl1 {
                <crate::RegValueT<ChCtrl1_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct ChCtrl2_SPEC;
        impl crate::sealed::RegSpec for ChCtrl2_SPEC {
            type DataType = u32;
        }
        #[doc = "CDTM0 DTM0 Channel Control Register 2\n resetvalue={Application Reset:0x0}"]
        pub type ChCtrl2 = crate::RegValueT<ChCtrl2_SPEC>;

        impl ChCtrl2 {
            #[doc = "Polarity on output 0 channel 0"]
            #[inline(always)]
            pub fn pol0_0(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<0,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Output 0 control channel 0"]
            #[inline(always)]
            pub fn oc0_0(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<1,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Signal level on output 0 channel 0"]
            #[inline(always)]
            pub fn sl0_0(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<2,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Dead time path enable on output 0 channel 0"]
            #[inline(always)]
            pub fn dt0_0(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<3,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Polarity on output 1 channel 0"]
            #[inline(always)]
            pub fn pol1_0(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<4,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Output 1 control channel 0"]
            #[inline(always)]
            pub fn oc1_0(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<5,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Signal level on output 1 channel 0"]
            #[inline(always)]
            pub fn sl1_0(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<6,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Dead time path enable on output 1 channel 0"]
            #[inline(always)]
            pub fn dt1_0(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<7,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Polarity on output 0 channel 1"]
            #[inline(always)]
            pub fn pol0_1(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<8,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Output 0 control channel 1"]
            #[inline(always)]
            pub fn oc0_1(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<9,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Signal level on output 0 channel 1"]
            #[inline(always)]
            pub fn sl0_1(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<10,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Dead time path enable on output 0 channel 1"]
            #[inline(always)]
            pub fn dt0_1(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<11,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Polarity on output 1 channel 1"]
            #[inline(always)]
            pub fn pol1_1(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<12,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Output 1 control channel 1"]
            #[inline(always)]
            pub fn oc1_1(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<13,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Signal level on output 1 channel 1"]
            #[inline(always)]
            pub fn sl1_1(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<14,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Dead time path enable on output 1 channel 1"]
            #[inline(always)]
            pub fn dt1_1(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<15,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Polarity on output 0 channel 2"]
            #[inline(always)]
            pub fn pol0_2(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<16,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Output 0 control channel 2"]
            #[inline(always)]
            pub fn oc0_2(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<17,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Signal level on output 0 channel 2"]
            #[inline(always)]
            pub fn sl0_2(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<18,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Dead time path enable on output 0 channel 2"]
            #[inline(always)]
            pub fn dt0_2(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<19,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Polarity on output 1 channel 2"]
            #[inline(always)]
            pub fn pol1_2(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<20,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Output 1 control channel 2"]
            #[inline(always)]
            pub fn oc1_2(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<21,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Signal level on output 1 channel 2"]
            #[inline(always)]
            pub fn sl1_2(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<22,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Dead time path enable on output 1 channel 2"]
            #[inline(always)]
            pub fn dt1_2(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<23,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Polarity on output 0 channel 3"]
            #[inline(always)]
            pub fn pol0_3(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<24,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Output 0 control channel 3"]
            #[inline(always)]
            pub fn oc0_3(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<25,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Signal level on output 0 channel 3"]
            #[inline(always)]
            pub fn sl0_3(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<26,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Dead time path enable on output 0 channel 3"]
            #[inline(always)]
            pub fn dt0_3(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<27,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Polarity on output 1 channel 3"]
            #[inline(always)]
            pub fn pol1_3(
                self,
            ) -> crate::common::RegisterFieldBool<28, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<28,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Output 1 control channel 3"]
            #[inline(always)]
            pub fn oc1_3(
                self,
            ) -> crate::common::RegisterFieldBool<29, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<29,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Signal level on output 1 channel 3"]
            #[inline(always)]
            pub fn sl1_3(
                self,
            ) -> crate::common::RegisterFieldBool<30, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<30,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Dead time path enable on output 1 channel 3"]
            #[inline(always)]
            pub fn dt1_3(
                self,
            ) -> crate::common::RegisterFieldBool<31, 1, 0, ChCtrl2_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<31,1,0,ChCtrl2_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for ChCtrl2 {
            #[inline(always)]
            fn default() -> ChCtrl2 {
                <crate::RegValueT<ChCtrl2_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct ChCtrl2Sr_SPEC;
        impl crate::sealed::RegSpec for ChCtrl2Sr_SPEC {
            type DataType = u32;
        }
        #[doc = "CDTM0 DTM0 Channel Control Register 2 Shadow\n resetvalue={Application Reset:0x0}"]
        pub type ChCtrl2Sr = crate::RegValueT<ChCtrl2Sr_SPEC>;

        impl ChCtrl2Sr {
            #[doc = "Polarity on output 0 channel 0 shadow register"]
            #[inline(always)]
            pub fn pol0_0_sr(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<0,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Output 0 control channel 0 shadow register"]
            #[inline(always)]
            pub fn oc0_0_sr(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<1,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Signal level on output 0 channel 0 shadow register"]
            #[inline(always)]
            pub fn sl0_0_sr(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<2,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Dead time path enable on output 0 channel 0 shadow register"]
            #[inline(always)]
            pub fn dt0_0_sr(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<3,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Polarity on output 1 channel 0 shadow register"]
            #[inline(always)]
            pub fn pol1_0_sr(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<4,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Output 1 control channel 0 shadow register"]
            #[inline(always)]
            pub fn oc1_0_sr(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<5,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Signal level on output 1 channel 0 shadow register"]
            #[inline(always)]
            pub fn sl1_0_sr(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<6,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Dead time path enable on output 1 channel 0 shadow register"]
            #[inline(always)]
            pub fn dt1_0_sr(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<7,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Polarity on output 0 channel 1 shadow register"]
            #[inline(always)]
            pub fn pol0_1_sr(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<8,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Output 0 control channel 1 shadow register"]
            #[inline(always)]
            pub fn oc0_1_sr(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<9,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Signal level on output 0 channel 1 shadow register"]
            #[inline(always)]
            pub fn sl0_1_sr(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<10,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Dead time path enable on output 0 channel 1 shadow register"]
            #[inline(always)]
            pub fn dt0_1_sr(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<11,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Polarity on output 1 channel 1 shadow register"]
            #[inline(always)]
            pub fn pol1_1_sr(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<12,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Output 1 control channel 1 shadow register"]
            #[inline(always)]
            pub fn oc1_1_sr(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<13,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Signal level on output 1 channel 1 shadow register"]
            #[inline(always)]
            pub fn sl1_1_sr(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<14,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Dead time path enable on output 1 channel 1 shadow register"]
            #[inline(always)]
            pub fn dt1_1_sr(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<15,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Polarity on output 0 channel 2 shadow register"]
            #[inline(always)]
            pub fn pol0_2_sr(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<16,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Output 0 control channel 2 shadow register"]
            #[inline(always)]
            pub fn oc0_2_sr(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<17,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Signal level on output 0 channel 2 shadow register"]
            #[inline(always)]
            pub fn sl0_2_sr(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<18,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Dead time path enable on output 0 channel 2 shadow register"]
            #[inline(always)]
            pub fn dt0_2_sr(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<19,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Polarity on output 1 channel 2 shadow register"]
            #[inline(always)]
            pub fn pol1_2_sr(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<20,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Output 1 control channel 2 shadow register"]
            #[inline(always)]
            pub fn oc1_2_sr(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<21,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Signal level on output 1 channel 2 shadow register"]
            #[inline(always)]
            pub fn sl1_2_sr(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<22,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Dead time path enable on output 1 channel 2 shadow register"]
            #[inline(always)]
            pub fn dt1_2_sr(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<23,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Polarity on output 0 channel 3 shadow register"]
            #[inline(always)]
            pub fn pol0_3_sr(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<24,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Output 0 control channel 3 shadow register"]
            #[inline(always)]
            pub fn oc0_3_sr(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<25,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Signal level on output 0 channel 3 shadow register"]
            #[inline(always)]
            pub fn sl0_3_sr(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<26,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Dead time path enable on output 0 channel 3 shadow register"]
            #[inline(always)]
            pub fn dt0_3_sr(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<27,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Polarity on output 1 channel 3 shadow register"]
            #[inline(always)]
            pub fn pol1_3_sr(
                self,
            ) -> crate::common::RegisterFieldBool<28, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<28,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Output 1 control channel 3 shadow register"]
            #[inline(always)]
            pub fn oc1_3_sr(
                self,
            ) -> crate::common::RegisterFieldBool<29, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<29,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Signal level on output 1 channel 3 shadow register"]
            #[inline(always)]
            pub fn sl1_3_sr(
                self,
            ) -> crate::common::RegisterFieldBool<30, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<30,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Dead time path enable on output 1 channel 3 shadow register"]
            #[inline(always)]
            pub fn dt1_3_sr(
                self,
            ) -> crate::common::RegisterFieldBool<31, 1, 0, ChCtrl2Sr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<31,1,0,ChCtrl2Sr_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for ChCtrl2Sr {
            #[inline(always)]
            fn default() -> ChCtrl2Sr {
                <crate::RegValueT<ChCtrl2Sr_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct ChCtrl3_SPEC;
        impl crate::sealed::RegSpec for ChCtrl3_SPEC {
            type DataType = u32;
        }
        #[doc = "CDTM0 DTM0 Channel Control Register 3\n resetvalue={Application Reset:0x0}"]
        pub type ChCtrl3 = crate::RegValueT<ChCtrl3_SPEC>;

        impl ChCtrl3 {
            #[doc = "Combinational input invert channel 0"]
            #[inline(always)]
            pub fn cii0(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, ChCtrl3_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<0,1,0,ChCtrl3_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Combinational input select channel 0"]
            #[inline(always)]
            pub fn cis0(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, ChCtrl3_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<1,1,0,ChCtrl3_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Input selection for dead time   edge trigger generation"]
            #[inline(always)]
            pub fn tsel0_0(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, ChCtrl3_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<2,1,0,ChCtrl3_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Input selection combinational logic path"]
            #[inline(always)]
            pub fn tsel1_0(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, ChCtrl3_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<3,1,0,ChCtrl3_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Combinational input invert channel 1"]
            #[inline(always)]
            pub fn cii1(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, ChCtrl3_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<8,1,0,ChCtrl3_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Combinational input select channel 1"]
            #[inline(always)]
            pub fn cis1(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, ChCtrl3_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<9,1,0,ChCtrl3_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Input selection for dead time   edge trigger generation"]
            #[inline(always)]
            pub fn tsel0_1(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, ChCtrl3_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<10,1,0,ChCtrl3_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Input selection combinational logic path"]
            #[inline(always)]
            pub fn tsel1_1(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, ChCtrl3_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<11,1,0,ChCtrl3_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Combinational input invert channel 2"]
            #[inline(always)]
            pub fn cii2(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, ChCtrl3_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<16,1,0,ChCtrl3_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Combinational input select channel 2"]
            #[inline(always)]
            pub fn cis2(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, ChCtrl3_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<17,1,0,ChCtrl3_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Input selection for dead time   edge trigger generation"]
            #[inline(always)]
            pub fn tsel0_2(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, ChCtrl3_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<18,1,0,ChCtrl3_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Input selection combinational logic path"]
            #[inline(always)]
            pub fn tsel1_2(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, ChCtrl3_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<19,1,0,ChCtrl3_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Combinational input invert channel 3"]
            #[inline(always)]
            pub fn cii3(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, ChCtrl3_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<24,1,0,ChCtrl3_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Combinational input select channel 3"]
            #[inline(always)]
            pub fn cis3(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, ChCtrl3_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<25,1,0,ChCtrl3_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Input selection for dead time   edge trigger generation"]
            #[inline(always)]
            pub fn tsel0_3(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, ChCtrl3_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<26,1,0,ChCtrl3_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Input selection combinational logic path"]
            #[inline(always)]
            pub fn tsel1_3(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, ChCtrl3_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<27,1,0,ChCtrl3_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for ChCtrl3 {
            #[inline(always)]
            fn default() -> ChCtrl3 {
                <crate::RegValueT<ChCtrl3_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct ChSr_SPEC;
        impl crate::sealed::RegSpec for ChSr_SPEC {
            type DataType = u32;
        }
        #[doc = "CDTM0 DTM0 Channel Shadow Register\n resetvalue={Application Reset:0x0}"]
        pub type ChSr = crate::RegValueT<ChSr_SPEC>;

        impl ChSr {
            #[doc = "Shadow register for bit SL0 0 SR of register DTM i  CH CTRL2 SR"]
            #[inline(always)]
            pub fn sl0_0_sr_sr(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, ChSr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<0,1,0,ChSr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Shadow register for bit SL1 0 SR of register DTM i  CH CTRL2 SR"]
            #[inline(always)]
            pub fn sl1_0_sr_sr(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, ChSr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<1,1,0,ChSr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Shadow register for bit SL0 1 SR of register DTM i  CH CTRL2 SR"]
            #[inline(always)]
            pub fn sl0_1_sr_sr(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, ChSr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<2,1,0,ChSr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Shadow register for bit SL1 1 SR of register DTM i  CH CTRL2 SR"]
            #[inline(always)]
            pub fn sl1_1_sr_sr(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, ChSr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<3,1,0,ChSr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Shadow register for bit SL0 2 SR of register DTM i  CH CTRL2 SR"]
            #[inline(always)]
            pub fn sl0_2_sr_sr(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, ChSr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<4,1,0,ChSr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Shadow register for bit SL1 2 SR of register DTM i  CH CTRL2 SR"]
            #[inline(always)]
            pub fn sl1_2_sr_sr(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, ChSr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<5,1,0,ChSr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Shadow register for bit SL0 3 SR of register DTM i  CH CTRL2 SR"]
            #[inline(always)]
            pub fn sl0_3_sr_sr(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, ChSr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<6,1,0,ChSr_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Shadow register for bit SL1 3 SR of register DTM i  CH CTRL2 SR"]
            #[inline(always)]
            pub fn sl1_3_sr_sr(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, ChSr_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<7,1,0,ChSr_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for ChSr {
            #[inline(always)]
            fn default() -> ChSr {
                <crate::RegValueT<ChSr_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Ctrl_SPEC;
        impl crate::sealed::RegSpec for Ctrl_SPEC {
            type DataType = u32;
        }
        #[doc = "CDTM0 DTM0 Global Configuration and Control Register\n resetvalue={Application Reset:0x0}"]
        pub type Ctrl = crate::RegValueT<Ctrl_SPEC>;

        impl Ctrl {
            #[doc = "Clock source select"]
            #[inline(always)]
            pub fn clk_sel(
                self,
            ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ctrl_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<0,0x3,1,0,u8, Ctrl_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Select DTM update and SHUT OFF reset signal. 0X B   160   160   160 Shut off by signal TIM CH IN0   TIM CH IN1 or DTM AUX IN 1X B   160   160   160 Shut off by signal DTM i 1  PSU IN"]
            #[inline(always)]
            pub fn dtm_sel(
                self,
            ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, Ctrl_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<2,0x3,1,0,u8, Ctrl_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Update mode. Note  If an INx edge is not implemented  the value is unused. A write with this unused value returns 0b10 on status."]
            #[inline(always)]
            pub fn upd_mode(
                self,
            ) -> crate::common::RegisterField<4, 0x7, 1, 0, u8, Ctrl_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<4,0x7,1,0,u8, Ctrl_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Shadow register update enable"]
            #[inline(always)]
            pub fn sr_upd_en(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, Ctrl_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<8,1,0,Ctrl_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Shut off reset. Writing a 1 releases shut off  resets signal SHUT OFF SYNC if selected by UPD MODE 2 0  0b001"]
            #[inline(always)]
            pub fn shut_off_rst(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, Ctrl_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<16,1,0,Ctrl_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for Ctrl {
            #[inline(always)]
            fn default() -> Ctrl {
                <crate::RegValueT<Ctrl_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct PsCtrl_SPEC;
        impl crate::sealed::RegSpec for PsCtrl_SPEC {
            type DataType = u32;
        }
        #[doc = "CDTM0 DTM0 Phase Shift Unit Configuration and Control Register\n resetvalue={Application Reset:0x0}"]
        pub type PsCtrl = crate::RegValueT<PsCtrl_SPEC>;

        impl PsCtrl {
            #[doc = "Reload value blanking window. A value of 0x000 resets counter BLK DOWN CNT."]
            #[inline(always)]
            pub fn relblk(
                self,
            ) -> crate::common::RegisterField<0, 0x3ff, 1, 0, u16, PsCtrl_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<0,0x3ff,1,0,u16, PsCtrl_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "PSU input selection"]
            #[inline(always)]
            pub fn psu_in_sel(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, PsCtrl_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<16,1,0,PsCtrl_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Input polarity"]
            #[inline(always)]
            pub fn in_pol(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, PsCtrl_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<17,1,0,PsCtrl_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TIM input selection"]
            #[inline(always)]
            pub fn tim_sel(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, PsCtrl_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<18,1,0,PsCtrl_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Shift select. Note   If a channel is not implemented  the value is unused. A write with this unused value returns 0b10 on status."]
            #[inline(always)]
            pub fn shift_sel(
                self,
            ) -> crate::common::RegisterField<20, 0x3, 1, 0, u8, PsCtrl_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<20,0x3,1,0,u8, PsCtrl_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for PsCtrl {
            #[inline(always)]
            fn default() -> PsCtrl {
                <crate::RegValueT<PsCtrl_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc = "CH"]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Ch(pub(super) *mut u8);
        unsafe impl core::marker::Send for Ch {}
        unsafe impl core::marker::Sync for Ch {}
        impl Ch {
            #[doc = "CDTM0 DTM0 Channel 0 Dead Time Reload Values\n resetvalue={Application Reset:0x0}"]
            #[inline(always)]
            pub const fn dtv(&self) -> crate::common::Reg<ch::Dtv_SPEC, crate::common::RW> {
                unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
            }
        }
        pub mod ch {
            #[allow(unused_imports)]
            use crate::common::*;
            #[doc(hidden)]
            #[derive(Copy, Clone, Eq, PartialEq)]
            pub struct Dtv_SPEC;
            impl crate::sealed::RegSpec for Dtv_SPEC {
                type DataType = u32;
            }
            #[doc = "CDTM0 DTM0 Channel 0 Dead Time Reload Values\n resetvalue={Application Reset:0x0}"]
            pub type Dtv = crate::RegValueT<Dtv_SPEC>;

            impl Dtv {
                #[doc = "Reload value for rising edge dead time"]
                #[inline(always)]
                pub fn relrise(
                    self,
                ) -> crate::common::RegisterField<0, 0x3ff, 1, 0, u16, Dtv_SPEC, crate::common::RW>
                {
                    crate::common::RegisterField::<0,0x3ff,1,0,u16, Dtv_SPEC,crate::common::RW>::from_register(self,0)
                }
                #[doc = "Reload value for falling edge dead time"]
                #[inline(always)]
                pub fn relfall(
                    self,
                ) -> crate::common::RegisterField<16, 0x3ff, 1, 0, u16, Dtv_SPEC, crate::common::RW>
                {
                    crate::common::RegisterField::<16,0x3ff,1,0,u16, Dtv_SPEC,crate::common::RW>::from_register(self,0)
                }
            }
            impl core::default::Default for Dtv {
                #[inline(always)]
                fn default() -> Dtv {
                    <crate::RegValueT<Dtv_SPEC> as RegisterValue<_>>::new(0)
                }
            }
        }
    }
}
#[doc = "CMP"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Cmp(pub(super) *mut u8);
unsafe impl core::marker::Send for Cmp {}
unsafe impl core::marker::Sync for Cmp {}
impl Cmp {
    #[doc = "CMP error interrupt enable register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn eirq_en(&self) -> crate::common::Reg<cmp::EirqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(20usize)) }
    }
    #[doc = "CMP Comparator Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn en(&self) -> crate::common::Reg<cmp::En_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
    }
    #[doc = "IRQ"]
    #[inline(always)]
    pub fn irq(self) -> cmp::Irq {
        unsafe { cmp::Irq(self.0.add(4usize)) }
    }
}
pub mod cmp {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct EirqEn_SPEC;
    impl crate::sealed::RegSpec for EirqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "CMP error interrupt enable register\n resetvalue={Application Reset:0x0}"]
    pub type EirqEn = crate::RegValueT<EirqEn_SPEC>;

    impl EirqEn {
        #[doc = "Enable ABWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn abwc0_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable ABWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn abwc1_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable ABWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn abwc2_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable ABWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn abwc3_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable ABWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn abwc4_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable ABWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn abwc5_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable ABWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn abwc6_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable ABWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn abwc7_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable ABWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn abwc8_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<8,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable ABWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn abwc9_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable ABWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn abwc10_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable ABWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn abwc11_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable TBWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn tbwc0_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<12,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable TBWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn tbwc1_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<13,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable TBWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn tbwc2_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<14, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<14,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable TBWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn tbwc3_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable TBWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn tbwc4_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable TBWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn tbwc5_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable TBWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn tbwc6_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<18, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<18,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable TBWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn tbwc7_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<19, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<19,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable TBWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn tbwc8_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable TBWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn tbwc9_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable TBWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn tbwc10_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable TBWC11 interrupt source for CMP EIRQ line"]
        #[inline(always)]
        pub fn tbwc11_en_eirq(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for EirqEn {
        #[inline(always)]
        fn default() -> EirqEn {
            <crate::RegValueT<EirqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct En_SPEC;
    impl crate::sealed::RegSpec for En_SPEC {
        type DataType = u32;
    }
    #[doc = "CMP Comparator Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type En = crate::RegValueT<En_SPEC>;

    impl En {
        #[doc = "Enable comparator 11 in ABWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn abwc0_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Enable comparator 11 in ABWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn abwc1_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Enable comparator 11 in ABWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn abwc2_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Enable comparator 11 in ABWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn abwc3_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Enable comparator 11 in ABWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn abwc4_en(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Enable comparator 11 in ABWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn abwc5_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Enable comparator 11 in ABWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn abwc6_en(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Enable comparator 11 in ABWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn abwc7_en(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Enable comparator 11 in ABWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn abwc8_en(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<8, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Enable comparator 11 in ABWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn abwc9_en(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Enable comparator 11 in ABWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn abwc10_en(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Enable comparator 11 in ABWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn abwc11_en(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Enable comparator 11 in TBWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn tbwc0_en(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<12, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Enable comparator 11 in TBWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn tbwc1_en(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<13, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Enable comparator 11 in TBWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn tbwc2_en(
            self,
        ) -> crate::common::RegisterFieldBool<14, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<14, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Enable comparator 11 in TBWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn tbwc3_en(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Enable comparator 11 in TBWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn tbwc4_en(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Enable comparator 11 in TBWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn tbwc5_en(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Enable comparator 11 in TBWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn tbwc6_en(
            self,
        ) -> crate::common::RegisterFieldBool<18, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<18, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Enable comparator 11 in TBWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn tbwc7_en(
            self,
        ) -> crate::common::RegisterFieldBool<19, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<19, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Enable comparator 11 in TBWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn tbwc8_en(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Enable comparator 11 in TBWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn tbwc9_en(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Enable comparator 11 in TBWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn tbwc10_en(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Enable comparator 11 in TBWC. see CROSSREFERENCE"]
        #[inline(always)]
        pub fn tbwc11_en(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
    }
    impl core::default::Default for En {
        #[inline(always)]
        fn default() -> En {
            <crate::RegValueT<En_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc = "IRQ"]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Irq(pub(super) *mut u8);
    unsafe impl core::marker::Send for Irq {}
    unsafe impl core::marker::Sync for Irq {}
    impl Irq {
        #[doc = "CMP Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn en(&self) -> crate::common::Reg<irq::En_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
        }
        #[doc = "CMP Interrupt Force Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn forcint(&self) -> crate::common::Reg<irq::Forcint_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
        }
        #[doc = "CMP Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn mode(&self) -> crate::common::Reg<irq::Mode_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(12usize)) }
        }
        #[doc = "CMP Event Notification Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn notify(&self) -> crate::common::Reg<irq::Notify_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
        }
    }
    pub mod irq {
        #[allow(unused_imports)]
        use crate::common::*;
        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct En_SPEC;
        impl crate::sealed::RegSpec for En_SPEC {
            type DataType = u32;
        }
        #[doc = "CMP Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
        pub type En = crate::RegValueT<En_SPEC>;

        impl En {
            #[doc = "Enable ABWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn abwc0_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<0,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable ABWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn abwc1_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<1,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable ABWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn abwc2_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<2,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable ABWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn abwc3_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<3,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable ABWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn abwc4_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<4,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable ABWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn abwc5_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<5,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable ABWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn abwc6_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<6,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable ABWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn abwc7_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<7,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable ABWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn abwc8_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<8,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable ABWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn abwc9_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<9,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable ABWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn abwc10_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<10,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable ABWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn abwc11_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<11,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable TBWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn tbwc0_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<12,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable TBWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn tbwc1_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<13,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable TBWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn tbwc2_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<14,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable TBWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn tbwc3_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<15,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable TBWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn tbwc4_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<16,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable TBWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn tbwc5_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<17,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable TBWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn tbwc6_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<18,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable TBWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn tbwc7_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<19,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable TBWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn tbwc8_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<20,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable TBWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn tbwc9_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<21,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable TBWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn tbwc10_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<22,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable TBWC11 interrupt source for CMP IRQ line"]
            #[inline(always)]
            pub fn tbwc11_en_irq(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<23,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for En {
            #[inline(always)]
            fn default() -> En {
                <crate::RegValueT<En_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Forcint_SPEC;
        impl crate::sealed::RegSpec for Forcint_SPEC {
            type DataType = u32;
        }
        #[doc = "CMP Interrupt Force Register\n resetvalue={Application Reset:0x0}"]
        pub type Forcint = crate::RegValueT<Forcint_SPEC>;

        impl Forcint {
            #[doc = "Trigger ABWC11 bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_abwc0(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<0,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger ABWC11 bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_abwc1(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<1,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger ABWC11 bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_abwc2(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<2,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger ABWC11 bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_abwc3(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<3,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger ABWC11 bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_abwc4(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<4,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger ABWC11 bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_abwc5(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<5,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger ABWC11 bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_abwc6(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<6,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger ABWC11 bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_abwc7(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<7,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger ABWC11 bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_abwc8(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<8,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger ABWC11 bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_abwc9(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<9,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger ABWC11 bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_abwc10(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<10,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger ABWC11 bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_abwc11(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<11,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger TBWCx bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write."]
            #[inline(always)]
            pub fn trg_tbwc0(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<12,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger TBWCx bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write."]
            #[inline(always)]
            pub fn trg_tbwc1(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<13,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger TBWCx bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write."]
            #[inline(always)]
            pub fn trg_tbwc2(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<14,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger TBWCx bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write."]
            #[inline(always)]
            pub fn trg_tbwc3(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<15,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger TBWCx bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write."]
            #[inline(always)]
            pub fn trg_tbwc4(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<16,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger TBWCx bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write."]
            #[inline(always)]
            pub fn trg_tbwc5(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<17,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger TBWCx bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write."]
            #[inline(always)]
            pub fn trg_tbwc6(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<18,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger TBWCx bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write."]
            #[inline(always)]
            pub fn trg_tbwc7(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<19,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger TBWCx bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write."]
            #[inline(always)]
            pub fn trg_tbwc8(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<20,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger TBWCx bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write."]
            #[inline(always)]
            pub fn trg_tbwc9(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<21,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger TBWCx bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write."]
            #[inline(always)]
            pub fn trg_tbwc10(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<22,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Trigger TBWCx bit in CMP IRQ NOTIFY register by software. This bit is cleared automatically after write."]
            #[inline(always)]
            pub fn trg_tbwc11(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<23,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for Forcint {
            #[inline(always)]
            fn default() -> Forcint {
                <crate::RegValueT<Forcint_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Mode_SPEC;
        impl crate::sealed::RegSpec for Mode_SPEC {
            type DataType = u32;
        }
        #[doc = "CMP Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
        pub type Mode = crate::RegValueT<Mode_SPEC>;

        impl Mode {
            #[doc = "IRQ mode selection   IRQ MODE. The interrupt modes are described in CROSSREFERENCE"]
            #[inline(always)]
            pub fn irq_mode(
                self,
            ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Mode_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<0,0x3,1,0,u8, Mode_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for Mode {
            #[inline(always)]
            fn default() -> Mode {
                <crate::RegValueT<Mode_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Notify_SPEC;
        impl crate::sealed::RegSpec for Notify_SPEC {
            type DataType = u32;
        }
        #[doc = "CMP Event Notification Register\n resetvalue={Application Reset:0x0}"]
        pub type Notify = crate::RegValueT<Notify_SPEC>;

        impl Notify {
            #[doc = "Error indication for ABWC11. This bit will be cleared on a CPU write access of value  1 .  As the bit is rw  otherwise no clear.  A read access leaves the bit unchanged."]
            #[inline(always)]
            pub fn abwc0(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<0,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Error indication for ABWC11. This bit will be cleared on a CPU write access of value  1 .  As the bit is rw  otherwise no clear.  A read access leaves the bit unchanged."]
            #[inline(always)]
            pub fn abwc1(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<1,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Error indication for ABWC11. This bit will be cleared on a CPU write access of value  1 .  As the bit is rw  otherwise no clear.  A read access leaves the bit unchanged."]
            #[inline(always)]
            pub fn abwc2(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<2,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Error indication for ABWC11. This bit will be cleared on a CPU write access of value  1 .  As the bit is rw  otherwise no clear.  A read access leaves the bit unchanged."]
            #[inline(always)]
            pub fn abwc3(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<3,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Error indication for ABWC11. This bit will be cleared on a CPU write access of value  1 .  As the bit is rw  otherwise no clear.  A read access leaves the bit unchanged."]
            #[inline(always)]
            pub fn abwc4(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<4,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Error indication for ABWC11. This bit will be cleared on a CPU write access of value  1 .  As the bit is rw  otherwise no clear.  A read access leaves the bit unchanged."]
            #[inline(always)]
            pub fn abwc5(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<5,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Error indication for ABWC11. This bit will be cleared on a CPU write access of value  1 .  As the bit is rw  otherwise no clear.  A read access leaves the bit unchanged."]
            #[inline(always)]
            pub fn abwc6(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<6,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Error indication for ABWC11. This bit will be cleared on a CPU write access of value  1 .  As the bit is rw  otherwise no clear.  A read access leaves the bit unchanged."]
            #[inline(always)]
            pub fn abwc7(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<7,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Error indication for ABWC11. This bit will be cleared on a CPU write access of value  1 .  As the bit is rw  otherwise no clear.  A read access leaves the bit unchanged."]
            #[inline(always)]
            pub fn abwc8(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<8,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Error indication for ABWC11. This bit will be cleared on a CPU write access of value  1 .  As the bit is rw  otherwise no clear.  A read access leaves the bit unchanged."]
            #[inline(always)]
            pub fn abwc9(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<9,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Error indication for ABWC11. This bit will be cleared on a CPU write access of value  1 .  As the bit is rw  otherwise no clear.  A read access leaves the bit unchanged."]
            #[inline(always)]
            pub fn abwc10(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<10,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Error indication for ABWC11. This bit will be cleared on a CPU write access of value  1 .  As the bit is rw  otherwise no clear.  A read access leaves the bit unchanged."]
            #[inline(always)]
            pub fn abwc11(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<11,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TOM sub modules outputs bitwise comparator 11 error indication. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn tbwc0(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<12,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TOM sub modules outputs bitwise comparator 11 error indication. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn tbwc1(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<13,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TOM sub modules outputs bitwise comparator 11 error indication. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn tbwc2(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<14,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TOM sub modules outputs bitwise comparator 11 error indication. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn tbwc3(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<15,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TOM sub modules outputs bitwise comparator 11 error indication. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn tbwc4(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<16,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TOM sub modules outputs bitwise comparator 11 error indication. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn tbwc5(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<17,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TOM sub modules outputs bitwise comparator 11 error indication. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn tbwc6(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<18,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TOM sub modules outputs bitwise comparator 11 error indication. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn tbwc7(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<19,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TOM sub modules outputs bitwise comparator 11 error indication. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn tbwc8(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<20,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TOM sub modules outputs bitwise comparator 11 error indication. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn tbwc9(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<21,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TOM sub modules outputs bitwise comparator 11 error indication. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn tbwc10(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<22,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TOM sub modules outputs bitwise comparator 11 error indication. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
            #[inline(always)]
            pub fn tbwc11(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<23,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for Notify {
            #[inline(always)]
            fn default() -> Notify {
                <crate::RegValueT<Notify_SPEC> as RegisterValue<_>>::new(0)
            }
        }
    }
}
#[doc = "CMU"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Cmu(pub(super) *mut u8);
unsafe impl core::marker::Send for Cmu {}
unsafe impl core::marker::Sync for Cmu {}
impl Cmu {
    #[doc = "CMU Control for Clock Source Selection\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn clk_ctrl(&self) -> crate::common::Reg<cmu::ClkCtrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(76usize)) }
    }
    #[doc = "CMU Clock Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn clk_en(&self) -> crate::common::Reg<cmu::ClkEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
    }
    #[doc = "CMU Global Clock Control Denominator\n resetvalue={Application Reset:0x1}"]
    #[inline(always)]
    pub const fn gclk_den(&self) -> crate::common::Reg<cmu::GclkDen_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
    }
    #[doc = "CMU Global Clock Control Numerator\n resetvalue={Application Reset:0x1}"]
    #[inline(always)]
    pub const fn gclk_num(&self) -> crate::common::Reg<cmu::GclkNum_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
    }
    #[doc = "CMU Synchronizing ARU and Clock Source\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn glb_ctrl(&self) -> crate::common::Reg<cmu::GlbCtrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(72usize)) }
    }
    #[doc = "CLK"]
    #[inline(always)]
    pub fn clk(self) -> [cmu::Clk; 8] {
        unsafe {
            [
                cmu::Clk(self.0.add(0xcusize + 0x0usize)),
                cmu::Clk(self.0.add(0xcusize + 0x4usize)),
                cmu::Clk(self.0.add(0xcusize + 0x8usize)),
                cmu::Clk(self.0.add(0xcusize + 0xcusize)),
                cmu::Clk(self.0.add(0xcusize + 0x10usize)),
                cmu::Clk(self.0.add(0xcusize + 0x14usize)),
                cmu::Clk(self.0.add(0xcusize + 0x18usize)),
                cmu::Clk(self.0.add(0xcusize + 0x1cusize)),
            ]
        }
    }
    #[doc = "ECLK"]
    #[inline(always)]
    pub fn eclk(self) -> [cmu::Eclk; 3] {
        unsafe {
            [
                cmu::Eclk(self.0.add(0x2cusize + 0x0usize)),
                cmu::Eclk(self.0.add(0x2cusize + 0x8usize)),
                cmu::Eclk(self.0.add(0x2cusize + 0x10usize)),
            ]
        }
    }
}
pub mod cmu {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct ClkCtrl_SPEC;
    impl crate::sealed::RegSpec for ClkCtrl_SPEC {
        type DataType = u32;
    }
    #[doc = "CMU Control for Clock Source Selection\n resetvalue={Application Reset:0x0}"]
    pub type ClkCtrl = crate::RegValueT<ClkCtrl_SPEC>;

    impl ClkCtrl {
        #[doc = "Clock source selection for CMU CLK 0 CTRL. Value can only be modified when clock enable EN CLK0 and EN ECLK1 are disabled."]
        #[inline(always)]
        pub fn clk0_ext_divider(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, ClkCtrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,ClkCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source selection for CMU CLK 1 CTRL. Value can only be modified when clock enable EN CLK1 and EN ECLK1 are disabled."]
        #[inline(always)]
        pub fn clk1_ext_divider(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, ClkCtrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,ClkCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source selection for CMU CLK 2 CTRL. Value can only be modified when clock enable EN CLK2 and EN ECLK1 are disabled."]
        #[inline(always)]
        pub fn clk2_ext_divider(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, ClkCtrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,ClkCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source selection for CMU CLK 3 CTRL. Value can only be modified when clock enable EN CLK3 and EN ECLK1 are disabled."]
        #[inline(always)]
        pub fn clk3_ext_divider(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, ClkCtrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,ClkCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source selection for CMU CLK 4 CTRL. Value can only be modified when clock enable EN CLK4 and EN ECLK1 are disabled."]
        #[inline(always)]
        pub fn clk4_ext_divider(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, ClkCtrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,ClkCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source selection for CMU CLK 5 CTRL. Value can only be modified when clock enable EN CLK5 and EN ECLK1 are disabled."]
        #[inline(always)]
        pub fn clk5_ext_divider(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, ClkCtrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,ClkCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source selection for CMU CLK 6 CTRL. Value can only be modified when clock enable EN CLK6 and EN ECLK1 are disabled."]
        #[inline(always)]
        pub fn clk6_ext_divider(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, ClkCtrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,ClkCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source selection for CMU CLK 7 CTRL. Value can only be modified when clock enable EN CLK7 and EN ECLK1 are disabled."]
        #[inline(always)]
        pub fn clk7_ext_divider(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, ClkCtrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,ClkCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source selection for CMU CLK8. Value can only be modified when EN ECLK0 is        disabled."]
        #[inline(always)]
        pub fn clk8_ext_divider(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, ClkCtrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<8,1,0,ClkCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for ClkCtrl {
        #[inline(always)]
        fn default() -> ClkCtrl {
            <crate::RegValueT<ClkCtrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct ClkEn_SPEC;
    impl crate::sealed::RegSpec for ClkEn_SPEC {
        type DataType = u32;
    }
    #[doc = "CMU Clock Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type ClkEn = crate::RegValueT<ClkEn_SPEC>;

    impl ClkEn {
        #[doc = "Enable clock source x. Any read access to an EN CLK x    EN ECLK z  or EN FXCLK bit field will always result in        a value 00 or 11 indicating current state. A modification of the state        is only performed with the values 01 and 10. Writing the values 00 and        11 is always ignored. Any disabling to EN CLK x  will be reset        internal counters for configurable clocks."]
        #[inline(always)]
        pub fn en_clk0(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, ClkEn_SPEC, crate::common::RW> {
            crate::common::RegisterField::<0,0x3,1,0,u8, ClkEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable clock source x. Any read access to an EN CLK x    EN ECLK z  or EN FXCLK bit field will always result in        a value 00 or 11 indicating current state. A modification of the state        is only performed with the values 01 and 10. Writing the values 00 and        11 is always ignored. Any disabling to EN CLK x  will be reset        internal counters for configurable clocks."]
        #[inline(always)]
        pub fn en_clk1(
            self,
        ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, ClkEn_SPEC, crate::common::RW> {
            crate::common::RegisterField::<2,0x3,1,0,u8, ClkEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable clock source x. Any read access to an EN CLK x    EN ECLK z  or EN FXCLK bit field will always result in        a value 00 or 11 indicating current state. A modification of the state        is only performed with the values 01 and 10. Writing the values 00 and        11 is always ignored. Any disabling to EN CLK x  will be reset        internal counters for configurable clocks."]
        #[inline(always)]
        pub fn en_clk2(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, ClkEn_SPEC, crate::common::RW> {
            crate::common::RegisterField::<4,0x3,1,0,u8, ClkEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable clock source x. Any read access to an EN CLK x    EN ECLK z  or EN FXCLK bit field will always result in        a value 00 or 11 indicating current state. A modification of the state        is only performed with the values 01 and 10. Writing the values 00 and        11 is always ignored. Any disabling to EN CLK x  will be reset        internal counters for configurable clocks."]
        #[inline(always)]
        pub fn en_clk3(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, ClkEn_SPEC, crate::common::RW> {
            crate::common::RegisterField::<6,0x3,1,0,u8, ClkEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable clock source x. Any read access to an EN CLK x    EN ECLK z  or EN FXCLK bit field will always result in        a value 00 or 11 indicating current state. A modification of the state        is only performed with the values 01 and 10. Writing the values 00 and        11 is always ignored. Any disabling to EN CLK x  will be reset        internal counters for configurable clocks."]
        #[inline(always)]
        pub fn en_clk4(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, ClkEn_SPEC, crate::common::RW> {
            crate::common::RegisterField::<8,0x3,1,0,u8, ClkEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable clock source x. Any read access to an EN CLK x    EN ECLK z  or EN FXCLK bit field will always result in        a value 00 or 11 indicating current state. A modification of the state        is only performed with the values 01 and 10. Writing the values 00 and        11 is always ignored. Any disabling to EN CLK x  will be reset        internal counters for configurable clocks."]
        #[inline(always)]
        pub fn en_clk5(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, ClkEn_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, ClkEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable clock source x. Any read access to an EN CLK x    EN ECLK z  or EN FXCLK bit field will always result in        a value 00 or 11 indicating current state. A modification of the state        is only performed with the values 01 and 10. Writing the values 00 and        11 is always ignored. Any disabling to EN CLK x  will be reset        internal counters for configurable clocks."]
        #[inline(always)]
        pub fn en_clk6(
            self,
        ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, ClkEn_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x3,1,0,u8, ClkEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable clock source x. Any read access to an EN CLK x    EN ECLK z  or EN FXCLK bit field will always result in        a value 00 or 11 indicating current state. A modification of the state        is only performed with the values 01 and 10. Writing the values 00 and        11 is always ignored. Any disabling to EN CLK x  will be reset        internal counters for configurable clocks."]
        #[inline(always)]
        pub fn en_clk7(
            self,
        ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, ClkEn_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<14,0x3,1,0,u8, ClkEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable ECLK 2 generation sub unit. Coding see bit EN CLKx."]
        #[inline(always)]
        pub fn en_eclk0(
            self,
        ) -> crate::common::RegisterField<16, 0x3, 1, 0, u8, ClkEn_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x3,1,0,u8, ClkEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable ECLK 2 generation sub unit. Coding see bit EN CLKx."]
        #[inline(always)]
        pub fn en_eclk1(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, ClkEn_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, ClkEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable ECLK 2 generation sub unit. Coding see bit EN CLKx."]
        #[inline(always)]
        pub fn en_eclk2(
            self,
        ) -> crate::common::RegisterField<20, 0x3, 1, 0, u8, ClkEn_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<20,0x3,1,0,u8, ClkEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable all CMU FXCLK  see bits 1 0. An enable to EN FXCLK from disable state        will be reset internal fixed clock counters."]
        #[inline(always)]
        pub fn en_fxclk(
            self,
        ) -> crate::common::RegisterField<22, 0x3, 1, 0, u8, ClkEn_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<22,0x3,1,0,u8, ClkEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for ClkEn {
        #[inline(always)]
        fn default() -> ClkEn {
            <crate::RegValueT<ClkEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct GclkDen_SPEC;
    impl crate::sealed::RegSpec for GclkDen_SPEC {
        type DataType = u32;
    }
    #[doc = "CMU Global Clock Control Denominator\n resetvalue={Application Reset:0x1}"]
    pub type GclkDen = crate::RegValueT<GclkDen_SPEC>;

    impl GclkDen {
        #[doc = "GCLK DEN. Value can only be modified when all clock enables EN CLK x  and the EN FXCLK are disabled. The CMU hardware alters the content of CMU GCLK NUM and CMU GCLK DEN automatically to 0x1  if CMU GCLK NUM is specified less than CMU GCLK DEN or one        of the values is specified with a value zero. Thus         a secure way for altering the values is writing twice to the register CMU GCLK NUM followed by a single write to register CMU GCLK DEN ."]
        #[inline(always)]
        pub fn gclk_den(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, GclkDen_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, GclkDen_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for GclkDen {
        #[inline(always)]
        fn default() -> GclkDen {
            <crate::RegValueT<GclkDen_SPEC> as RegisterValue<_>>::new(1)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct GclkNum_SPEC;
    impl crate::sealed::RegSpec for GclkNum_SPEC {
        type DataType = u32;
    }
    #[doc = "CMU Global Clock Control Numerator\n resetvalue={Application Reset:0x1}"]
    pub type GclkNum = crate::RegValueT<GclkNum_SPEC>;

    impl GclkNum {
        #[doc = "GCLK NUM. Value can only be modified when all clock enables EN CLK x  and the EN FXCLK are disabled. The CMU hardware alters the content of CMU GCLK NUM and CMU GCLK DEN automatically to 0x1  if CMU GCLK NUM is specified less than CMU GCLK DEN or one        of the values is specified with a value zero. Thus         a secure way for altering the values is writing twice to the register CMU GCLK NUM followed by a single write to register CMU GCLK DEN ."]
        #[inline(always)]
        pub fn gclk_num(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, GclkNum_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, GclkNum_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for GclkNum {
        #[inline(always)]
        fn default() -> GclkNum {
            <crate::RegValueT<GclkNum_SPEC> as RegisterValue<_>>::new(1)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct GlbCtrl_SPEC;
    impl crate::sealed::RegSpec for GlbCtrl_SPEC {
        type DataType = u32;
    }
    #[doc = "CMU Synchronizing ARU and Clock Source\n resetvalue={Application Reset:0x0}"]
    pub type GlbCtrl = crate::RegValueT<GlbCtrl_SPEC>;

    impl GlbCtrl {
        #[doc = "Reset ARU caddr counter and ARU dynamic route counter. Writing value 1 to this bit field results in a request to reset the ARU        caddr counter and ARU dynamic route counter. The next following write        access to register CMU CLK EN applies the        ARU caddr counter reset  ARU dynamic route counter reset and resets this        bit. This feature can be used to synchronize the ARU round trip time to        the CMU clocks. This bit is write protected. Before writing to this bit set bit RF PROT        of register GTM CTRL to 0."]
        #[inline(always)]
        pub fn aru_addr_rstglb(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, GlbCtrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,GlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for GlbCtrl {
        #[inline(always)]
        fn default() -> GlbCtrl {
            <crate::RegValueT<GlbCtrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc = "CLK"]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Clk(pub(super) *mut u8);
    unsafe impl core::marker::Send for Clk {}
    unsafe impl core::marker::Sync for Clk {}
    impl Clk {
        #[doc = "CMU Control for Clock Source 0\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn cmu_clk_z_ctrl(
            &self,
        ) -> crate::common::Reg<clk::CmuClkZCtrl_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
        }
    }
    pub mod clk {
        #[allow(unused_imports)]
        use crate::common::*;
        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct CmuClkZCtrl_SPEC;
        impl crate::sealed::RegSpec for CmuClkZCtrl_SPEC {
            type DataType = u32;
        }
        #[doc = "CMU Control for Clock Source 0\n resetvalue={Application Reset:0x0}"]
        pub type CmuClkZCtrl = crate::RegValueT<CmuClkZCtrl_SPEC>;

        impl CmuClkZCtrl {
            #[doc = "Clock count. Defines count value for the clock divider. Value can only be modified when clock enable EN CLKz and EN ECLK1 are disabled."]
            #[inline(always)]
            pub fn clk_cnt(
                self,
            ) -> crate::common::RegisterField<
                0,
                0xffffff,
                1,
                0,
                u32,
                CmuClkZCtrl_SPEC,
                crate::common::RW,
            > {
                crate::common::RegisterField::<
                    0,
                    0xffffff,
                    1,
                    0,
                    u32,
                    CmuClkZCtrl_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
            #[doc = "Clock source selection for CMU CLKz. Value can only be modified when clock enable EN CLKz and EN ECLK1 are disabled. Note   The existence and interpretation of this bit field depends on z. z gt 5"]
            #[inline(always)]
            pub fn clk_sel(
                self,
            ) -> crate::common::RegisterField<24, 0x3, 1, 0, u8, CmuClkZCtrl_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<24,0x3,1,0,u8, CmuClkZCtrl_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for CmuClkZCtrl {
            #[inline(always)]
            fn default() -> CmuClkZCtrl {
                <crate::RegValueT<CmuClkZCtrl_SPEC> as RegisterValue<_>>::new(0)
            }
        }
    }
    #[doc = "ECLK"]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Eclk(pub(super) *mut u8);
    unsafe impl core::marker::Send for Eclk {}
    unsafe impl core::marker::Sync for Eclk {}
    impl Eclk {
        #[doc = "CMU External Clock 0 Control Denominator\n resetvalue={Application Reset:0x1}"]
        #[inline(always)]
        pub const fn cmu_eclk_z_den(
            &self,
        ) -> crate::common::Reg<eclk::CmuEclkZDen_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
        }
        #[doc = "CMU External Clock 0 Control Numerator\n resetvalue={Application Reset:0x1}"]
        #[inline(always)]
        pub const fn cmu_eclk_z_num(
            &self,
        ) -> crate::common::Reg<eclk::CmuEclkZNum_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
        }
    }
    pub mod eclk {
        #[allow(unused_imports)]
        use crate::common::*;
        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct CmuEclkZDen_SPEC;
        impl crate::sealed::RegSpec for CmuEclkZDen_SPEC {
            type DataType = u32;
        }
        #[doc = "CMU External Clock 0 Control Denominator\n resetvalue={Application Reset:0x1}"]
        pub type CmuEclkZDen = crate::RegValueT<CmuEclkZDen_SPEC>;

        impl CmuEclkZDen {
            #[doc = "ECLK DEN. Denominator for external clock divider. Defines denominator of the        fractional divider Value can only be modified when clock enable EN ECLK z  disabled. The CMU hardware alters the content of CMU ECLK  z  NUM and CMU ECLK  z  DEN automatically to          0x1  if CMU ECLK  z  NUM is specified          less than CMU ECLK  z  DEN or one of the          values is specified with a value zero. Thus  a secure way for altering          the values is writing twice to the register CMU ECLK  z  NUM followed by a single write to register CMU ECLK  z  DEN ."]
            #[inline(always)]
            pub fn eclk_den(
                self,
            ) -> crate::common::RegisterField<
                0,
                0xffffff,
                1,
                0,
                u32,
                CmuEclkZDen_SPEC,
                crate::common::RW,
            > {
                crate::common::RegisterField::<
                    0,
                    0xffffff,
                    1,
                    0,
                    u32,
                    CmuEclkZDen_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
        }
        impl core::default::Default for CmuEclkZDen {
            #[inline(always)]
            fn default() -> CmuEclkZDen {
                <crate::RegValueT<CmuEclkZDen_SPEC> as RegisterValue<_>>::new(1)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct CmuEclkZNum_SPEC;
        impl crate::sealed::RegSpec for CmuEclkZNum_SPEC {
            type DataType = u32;
        }
        #[doc = "CMU External Clock 0 Control Numerator\n resetvalue={Application Reset:0x1}"]
        pub type CmuEclkZNum = crate::RegValueT<CmuEclkZNum_SPEC>;

        impl CmuEclkZNum {
            #[doc = "ECLK NUM. Numerator for external clock divider. Defines numerator of the        fractional divider. Value can only be modified when clock enable EN ECLK z  disabled. The CMU hardware alters the content of CMU ECLK  z  NUM and CMU ECLK  z  DEN automatically to          0x1  if CMU ECLK  z  NUM is specified          less than CMU ECLK  z  DEN or one of the          values is specified with a value zero. Thus  a secure way for altering          the values is writing twice to the register CMU ECLK  z  NUM followed by a single write to register CMU ECLK  z  DEN ."]
            #[inline(always)]
            pub fn eclk_num(
                self,
            ) -> crate::common::RegisterField<
                0,
                0xffffff,
                1,
                0,
                u32,
                CmuEclkZNum_SPEC,
                crate::common::RW,
            > {
                crate::common::RegisterField::<
                    0,
                    0xffffff,
                    1,
                    0,
                    u32,
                    CmuEclkZNum_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
        }
        impl core::default::Default for CmuEclkZNum {
            #[inline(always)]
            fn default() -> CmuEclkZNum {
                <crate::RegValueT<CmuEclkZNum_SPEC> as RegisterValue<_>>::new(1)
            }
        }
    }
}
#[doc = "DPLL"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Dpll(pub(super) *mut u8);
unsafe impl core::marker::Send for Dpll {}
unsafe impl core::marker::Sync for Dpll {}
impl Dpll {
    #[doc = "DPLL ACTION Status Register with Connected Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn act_sta(&self) -> crate::common::Reg<dpll::ActSta_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(24usize)) }
    }
    #[doc = "DPLL Calculated ADD IN Value for SUB INC1 Generation\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn add_in_cal1(&self) -> crate::common::Reg<dpll::AddInCal1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1080usize)) }
    }
    #[doc = "DPLL Calculated ADD IN Value for SUB INC2 Generation\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn add_in_cal2(&self) -> crate::common::Reg<dpll::AddInCal2_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1084usize)) }
    }
    #[doc = "DPLL Direct Load Input Value for SUB INC1\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn add_in_ld1(&self) -> crate::common::Reg<dpll::AddInLd1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(200usize)) }
    }
    #[doc = "DPLL Direct Load Input Value for SUB INC2\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn add_in_ld2(&self) -> crate::common::Reg<dpll::AddInLd2_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(204usize)) }
    }
    #[doc = "DPLL Address Offset Register of RAM 2 Regions\n resetvalue={Application Reset:0x18100800}"]
    #[inline(always)]
    pub const fn aosv_2(&self) -> crate::common::Reg<dpll::Aosv2_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(32usize)) }
    }
    #[doc = "DPLL Actual RAM Pointer Address for STATE\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn aps(&self) -> crate::common::Reg<dpll::Aps_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(40usize)) }
    }
    #[doc = "DPLL Actual RAM Pointer for RAM Region 1C3\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn aps_1c3(&self) -> crate::common::Reg<dpll::Aps1C3_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(48usize)) }
    }
    #[doc = "DPLL Extension Register for DPLL APS 1C3\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn aps_1c3_ext(&self) -> crate::common::Reg<dpll::Aps1C3Ext_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3900usize)) }
    }
    #[doc = "DPLL Extension Register for DPLL APS\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn aps_ext(&self) -> crate::common::Reg<dpll::ApsExt_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3896usize)) }
    }
    #[doc = "DPLL Old RAM Pointer and Offset Value for STATE\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn aps_sync(&self) -> crate::common::Reg<dpll::ApsSync_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(188usize)) }
    }
    #[doc = "DPLL Extension Register for DPLL APS SYNC\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn aps_sync_ext(
        &self,
    ) -> crate::common::Reg<dpll::ApsSyncExt_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3888usize)) }
    }
    #[doc = "DPLL Actual RAM Pointer Address for TRIGGER\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn apt(&self) -> crate::common::Reg<dpll::Apt_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(36usize)) }
    }
    #[doc = "DPLL Actual RAM Pointer for Region 2C\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn apt_2c(&self) -> crate::common::Reg<dpll::Apt2C_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(44usize)) }
    }
    #[doc = "DPLL Old RAM Pointer and Offset Value for TRIGGER\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn apt_sync(&self) -> crate::common::Reg<dpll::AptSync_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(184usize)) }
    }
    #[doc = "DPLL Prediction of the Actual STATE Increment Duration\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn cdt_sx(&self) -> crate::common::Reg<dpll::CdtSx_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1172usize)) }
    }
    #[doc = "DPLL Prediction of the Nominal STATE Increment Duration\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn cdt_sx_nom(&self) -> crate::common::Reg<dpll::CdtSxNom_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1180usize)) }
    }
    #[doc = "DPLL Prediction of the Actual TRIGGER Increment Duration\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn cdt_tx(&self) -> crate::common::Reg<dpll::CdtTx_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1168usize)) }
    }
    #[doc = "DPLL Prediction of the Nominal TRIGGER Increment Duration\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn cdt_tx_nom(&self) -> crate::common::Reg<dpll::CdtTxNom_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1176usize)) }
    }
    #[doc = "DPLL Number of Sub Pulses of SUB INC1 in Continuous Mode\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn cnt_num_1(&self) -> crate::common::Reg<dpll::CntNum1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1480usize)) }
    }
    #[doc = "DPLL Number of Sub Pulses of SUB INC2 in Continuous Mode\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn cnt_num_2(&self) -> crate::common::Reg<dpll::CntNum2_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1484usize)) }
    }
    #[doc = "DPLL Maximum CDT S Nominal Value Register\n resetvalue={Application Reset:0x0FFFFFF}"]
    #[inline(always)]
    pub const fn csn_max(&self) -> crate::common::Reg<dpll::CsnMax_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3960usize)) }
    }
    #[doc = "DPLL Minimum CDT S Nominal Value Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn csn_min(&self) -> crate::common::Reg<dpll::CsnMin_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3956usize)) }
    }
    #[doc = "DPLL Maximum CDT T Nominal Value Register\n resetvalue={Application Reset:0x0FFFFFF}"]
    #[inline(always)]
    pub const fn ctn_max(&self) -> crate::common::Reg<dpll::CtnMax_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3952usize)) }
    }
    #[doc = "DPLL Minimum CDT T Nominal Value Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ctn_min(&self) -> crate::common::Reg<dpll::CtnMin_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3948usize)) }
    }
    #[doc = "DPLL Control Register 0\n resetvalue={Application Reset:0x3BBA57}"]
    #[inline(always)]
    pub const fn ctrl_0(&self) -> crate::common::Reg<dpll::Ctrl0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
    }
    #[doc = "DPLL Control 0 Shadow STATE Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ctrl_0_shadow_state(
        &self,
    ) -> crate::common::Reg<dpll::Ctrl0ShadowState_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(484usize)) }
    }
    #[doc = "DPLL Control 0 Shadow Trigger Register\n resetvalue={Application Reset:0x257}"]
    #[inline(always)]
    pub const fn ctrl_0_shadow_trigger(
        &self,
    ) -> crate::common::Reg<dpll::Ctrl0ShadowTrigger_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(480usize)) }
    }
    #[doc = "DPLL Control Register 1\n resetvalue={Application Reset:0x0B0000000}"]
    #[inline(always)]
    pub const fn ctrl_1(&self) -> crate::common::Reg<dpll::Ctrl1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
    }
    #[doc = "DPLL Control Register 11\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ctrl_11(&self) -> crate::common::Reg<dpll::Ctrl11_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3872usize)) }
    }
    #[doc = "DPLL Control 1 Shadow STATE Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ctrl_1_shadow_state(
        &self,
    ) -> crate::common::Reg<dpll::Ctrl1ShadowState_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(492usize)) }
    }
    #[doc = "DPLL Control 1 Shadow TRIGGER Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ctrl_1_shadow_trigger(
        &self,
    ) -> crate::common::Reg<dpll::Ctrl1ShadowTrigger_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(488usize)) }
    }
    #[doc = "DPLL Control Register 2\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ctrl_2(&self) -> crate::common::Reg<dpll::Ctrl2_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
    }
    #[doc = "DPLL Control Register 3\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ctrl_3(&self) -> crate::common::Reg<dpll::Ctrl3_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(12usize)) }
    }
    #[doc = "DPLL Control Register 4\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ctrl_4(&self) -> crate::common::Reg<dpll::Ctrl4_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(16usize)) }
    }
    #[doc = "DPLL Control Register 5\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ctrl_5(&self) -> crate::common::Reg<dpll::Ctrl5_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(20usize)) }
    }
    #[doc = "DPLL Extension Register for DPLL CTRL\n resetvalue={Application Reset:0x17}"]
    #[inline(always)]
    pub const fn ctrl_ext(&self) -> crate::common::Reg<dpll::CtrlExt_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3892usize)) }
    }
    #[doc = "DPLL Control Bits Register 0 for up to 32 Actions\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn dpll_acb_z(
        &self,
    ) -> [crate::common::Reg<dpll::DpllAcbZ_SPEC, crate::common::RW>; 8] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0xf00usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0xf00usize + 0x4usize)),
                crate::common::Reg::from_ptr(self.0.add(0xf00usize + 0x8usize)),
                crate::common::Reg::from_ptr(self.0.add(0xf00usize + 0xcusize)),
                crate::common::Reg::from_ptr(self.0.add(0xf00usize + 0x10usize)),
                crate::common::Reg::from_ptr(self.0.add(0xf00usize + 0x14usize)),
                crate::common::Reg::from_ptr(self.0.add(0xf00usize + 0x18usize)),
                crate::common::Reg::from_ptr(self.0.add(0xf00usize + 0x1cusize)),
            ]
        }
    }
    #[doc = "DPLL Adapt and Profile Values of the STATE 0 Increments in FULL SCALE\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn dpll_adt_si(
        &self,
    ) -> [crate::common::Reg<dpll::DpllAdtSi_SPEC, crate::common::RW>; 64] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x10usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x14usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x18usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x1cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x20usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x24usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x28usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x2cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x30usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x34usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x38usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x3cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x40usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x44usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x48usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x4cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x50usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x54usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x58usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x5cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x60usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x64usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x68usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x6cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x70usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x74usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x78usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x7cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x80usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x84usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x88usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x8cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x90usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x94usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x98usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0x9cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xa0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xa4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xa8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xacusize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xb0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xb4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xb8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xbcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xc0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xc4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xc8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xccusize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xd0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xd4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xd8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xdcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xe0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xe4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xe8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xecusize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xf0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xf4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xf8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x800usize + 0xfcusize)),
            ]
        }
    }
    #[doc = "DPLL ACTION 0 Time to React before PSAi\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1A:0x0}"]
    #[inline(always)]
    pub const fn dpll_dlai(
        &self,
    ) -> [crate::common::Reg<dpll::DpllDlAi_SPEC, crate::common::RW>; 32] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0xcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x10usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x14usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x18usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x1cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x20usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x24usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x28usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x2cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x30usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x34usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x38usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x3cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x40usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x44usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x48usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x4cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x50usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x54usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x58usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x5cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x60usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x64usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x68usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x6cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x70usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x74usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x78usize)),
                crate::common::Reg::from_ptr(self.0.add(0x280usize + 0x7cusize)),
            ]
        }
    }
    #[doc = "DPLL Calculated Relative TIME to ACTION 0\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1A:0x0}"]
    #[inline(always)]
    pub const fn dpll_dtai(
        &self,
    ) -> [crate::common::Reg<dpll::DpllDtAi_SPEC, crate::common::RW>; 32] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0xcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x10usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x14usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x18usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x1cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x20usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x24usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x28usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x2cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x30usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x34usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x38usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x3cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x40usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x44usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x48usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x4cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x50usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x54usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x58usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x5cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x60usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x64usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x68usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x6cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x70usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x74usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x78usize)),
                crate::common::Reg::from_ptr(self.0.add(0x380usize + 0x7cusize)),
            ]
        }
    }
    #[doc = "DPLL Nominal STATE 0 Increment Duration in FULL SCALE\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn dpll_dt_si(
        &self,
    ) -> [crate::common::Reg<dpll::DpllDtSi_SPEC, crate::common::RW>; 64] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x10usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x14usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x18usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x1cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x20usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x24usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x28usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x2cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x30usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x34usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x38usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x3cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x40usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x44usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x48usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x4cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x50usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x54usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x58usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x5cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x60usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x64usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x68usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x6cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x70usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x74usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x78usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x7cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x80usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x84usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x88usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x8cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x90usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x94usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x98usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0x9cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xa0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xa4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xa8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xacusize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xb0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xb4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xb8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xbcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xc0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xc4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xc8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xccusize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xd0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xd4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xd8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xdcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xe0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xe4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xe8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xecusize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xf0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xf4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xf8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x900usize + 0xfcusize)),
            ]
        }
    }
    #[doc = "DPLL ID Information for Input Signal PMT 0 Register\n resetvalue={Application Reset:0x1FE}"]
    #[inline(always)]
    pub const fn dpll_id_pmtr_z(
        &self,
    ) -> [crate::common::Reg<dpll::DpllIdPmtrZ_SPEC, crate::common::RW>; 32] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0xcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x10usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x14usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x18usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x1cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x20usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x24usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x28usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x2cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x30usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x34usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x38usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x3cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x40usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x44usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x48usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x4cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x50usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x54usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x58usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x5cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x60usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x64usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x68usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x6cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x70usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x74usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x78usize)),
                crate::common::Reg::from_ptr(self.0.add(0x100usize + 0x7cusize)),
            ]
        }
    }
    #[doc = "DPLL Calculated Number of TRIGGER STATE Increments to ACTION 0\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1A:0x0}"]
    #[inline(always)]
    pub const fn dpll_nai(
        &self,
    ) -> [crate::common::Reg<dpll::DpllNAi_SPEC, crate::common::RW>; 32] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0xcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x10usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x14usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x18usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x1cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x20usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x24usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x28usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x2cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x30usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x34usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x38usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x3cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x40usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x44usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x48usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x4cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x50usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x54usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x58usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x5cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x60usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x64usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x68usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x6cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x70usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x74usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x78usize)),
                crate::common::Reg::from_ptr(self.0.add(0x300usize + 0x7cusize)),
            ]
        }
    }
    #[doc = "DPLL Projected Increment Sum Relations for Action 0\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn dpll_pdt_z(
        &self,
    ) -> [crate::common::Reg<dpll::DpllPdtZ_SPEC, crate::common::RW>; 32] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0xcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x10usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x14usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x18usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x1cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x20usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x24usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x28usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x2cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x30usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x34usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x38usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x3cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x40usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x44usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x48usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x4cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x50usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x54usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x58usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x5cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x60usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x64usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x68usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x6cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x70usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x74usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x78usize)),
                crate::common::Reg::from_ptr(self.0.add(0x500usize + 0x7cusize)),
            ]
        }
    }
    #[doc = "DPLL ACTION Position Value Action 0 Request Register\n resetvalue={Application Reset:0x7FFFFF}"]
    #[inline(always)]
    pub const fn dpll_psacz(
        &self,
    ) -> [crate::common::Reg<dpll::DpllPsaCz_SPEC, crate::common::RW>; 32] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x4usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x8usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0xcusize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x10usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x14usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x18usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x1cusize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x20usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x24usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x28usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x2cusize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x30usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x34usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x38usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x3cusize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x40usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x44usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x48usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x4cusize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x50usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x54usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x58usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x5cusize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x60usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x64usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x68usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x6cusize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x70usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x74usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x78usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe80usize + 0x7cusize)),
            ]
        }
    }
    #[doc = "DPLL ACTION 0 Position Value Request\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1A:0x0}"]
    #[inline(always)]
    pub const fn dpll_psai(
        &self,
    ) -> [crate::common::Reg<dpll::DpllPsAi_SPEC, crate::common::RW>; 32] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0xcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x10usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x14usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x18usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x1cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x20usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x24usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x28usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x2cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x30usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x34usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x38usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x3cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x40usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x44usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x48usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x4cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x50usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x54usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x58usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x5cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x60usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x64usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x68usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x6cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x70usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x74usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x78usize)),
                crate::common::Reg::from_ptr(self.0.add(0x200usize + 0x7cusize)),
            ]
        }
    }
    #[doc = "DPLL Reciprocal Values of the Nominal STATE 0 Increment Duration in FULL SCALE\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn dpll_rdt_si(
        &self,
    ) -> [crate::common::Reg<dpll::DpllRdtSi_SPEC, crate::common::RW>; 64] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x10usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x14usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x18usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x1cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x20usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x24usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x28usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x2cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x30usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x34usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x38usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x3cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x40usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x44usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x48usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x4cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x50usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x54usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x58usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x5cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x60usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x64usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x68usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x6cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x70usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x74usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x78usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x7cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x80usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x84usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x88usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x8cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x90usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x94usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x98usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0x9cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xa0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xa4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xa8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xacusize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xb0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xb4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xb8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xbcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xc0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xc4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xc8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xccusize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xd0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xd4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xd8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xdcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xe0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xe4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xe8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xecusize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xf0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xf4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xf8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x600usize + 0xfcusize)),
            ]
        }
    }
    #[doc = "DPLL Calculated Time Value to start Action 0 Register\n resetvalue={Application Reset:0x7FFFFF}"]
    #[inline(always)]
    pub const fn dpll_tsacz(
        &self,
    ) -> [crate::common::Reg<dpll::DpllTsaCz_SPEC, crate::common::RW>; 32] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x4usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x8usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0xcusize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x10usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x14usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x18usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x1cusize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x20usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x24usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x28usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x2cusize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x30usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x34usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x38usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x3cusize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x40usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x44usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x48usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x4cusize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x50usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x54usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x58usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x5cusize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x60usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x64usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x68usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x6cusize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x70usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x74usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x78usize)),
                crate::common::Reg::from_ptr(self.0.add(0xe00usize + 0x7cusize)),
            ]
        }
    }
    #[doc = "DPLL Time Stamp Values of the Nominal STATE 0 Events in FULL SCALE\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn dpll_tsf_si(
        &self,
    ) -> [crate::common::Reg<dpll::DpllTsfSi_SPEC, crate::common::RW>; 64] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x10usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x14usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x18usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x1cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x20usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x24usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x28usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x2cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x30usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x34usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x38usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x3cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x40usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x44usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x48usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x4cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x50usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x54usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x58usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x5cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x60usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x64usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x68usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x6cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x70usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x74usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x78usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x7cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x80usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x84usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x88usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x8cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x90usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x94usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x98usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0x9cusize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xa0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xa4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xa8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xacusize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xb0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xb4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xb8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xbcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xc0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xc4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xc8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xccusize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xd0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xd4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xd8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xdcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xe0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xe4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xe8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xecusize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xf0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xf4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xf8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x700usize + 0xfcusize)),
            ]
        }
    }
    #[doc = "DPLL Duration of the Last STATE Increment\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn dt_s_act(&self) -> crate::common::Reg<dpll::DtSAct_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1148usize)) }
    }
    #[doc = "DPLL Start Value of DPLL DT S ACT for the First Increment after SIP2 is Set to 1\n resetvalue={Application Reset:0x101}"]
    #[inline(always)]
    pub const fn dt_s_start(&self) -> crate::common::Reg<dpll::DtSStart_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3920usize)) }
    }
    #[doc = "DPLL Duration of the Last TRIGGER Increment\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn dt_t_act(&self) -> crate::common::Reg<dpll::DtTAct_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1144usize)) }
    }
    #[doc = "DPLL Start Value of DPLL DT T ACT for the First Increment after SIP1 is Set to 1\n resetvalue={Application Reset:0x101}"]
    #[inline(always)]
    pub const fn dt_t_start(&self) -> crate::common::Reg<dpll::DtTStart_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3916usize)) }
    }
    #[doc = "DPLL Difference of Prediction to Actual Value of the Last STATE Increment\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn edt_s(&self) -> crate::common::Reg<dpll::EdtS_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1160usize)) }
    }
    #[doc = "DPLL Difference of Prediction to Actual Value of the Last TRIGGER Increment\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn edt_t(&self) -> crate::common::Reg<dpll::EdtT_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1152usize)) }
    }
    #[doc = "DPLL Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn eirq_en(&self) -> crate::common::Reg<dpll::EirqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(80usize)) }
    }
    #[doc = "DPLL Actual STATE Filter Value\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn ftv_s(&self) -> crate::common::Reg<dpll::FtvS_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1048usize)) }
    }
    #[doc = "DPLL Actual TRIGGER Filter Value\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn ftv_t(&self) -> crate::common::Reg<dpll::FtvT_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1032usize)) }
    }
    #[doc = "DPLL Start Value of the ADD IN ADDER1 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn incf1_offset(
        &self,
    ) -> crate::common::Reg<dpll::Incf1Offset_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3908usize)) }
    }
    #[doc = "DPLL Start Value of the ADD IN ADDER2 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn incf2_offset(
        &self,
    ) -> crate::common::Reg<dpll::Incf2Offset_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3912usize)) }
    }
    #[doc = "DPLL Counter for Pulses for TBU CH1 BASE to be Sent in Automatic End Mode\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn inc_cnt1(&self) -> crate::common::Reg<dpll::IncCnt1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(176usize)) }
    }
    #[doc = "DPLL INC CNT1 Trigger Mask\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn inc_cnt1_mask(
        &self,
    ) -> crate::common::Reg<dpll::IncCnt1Mask_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3932usize)) }
    }
    #[doc = "DPLL Counter for Pulses for TBU TS2 to be Sent in Automatic End Mode\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn inc_cnt2(&self) -> crate::common::Reg<dpll::IncCnt2_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(180usize)) }
    }
    #[doc = "DPLL INC CNT2 Trigger Mask\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn inc_cnt2_mask(
        &self,
    ) -> crate::common::Reg<dpll::IncCnt2Mask_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3936usize)) }
    }
    #[doc = "DPLL Weighted Difference of Prediction Errors of STATE\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn medt_s(&self) -> crate::common::Reg<dpll::MedtS_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1164usize)) }
    }
    #[doc = "DPLL Weighted Difference of Prediction Errors of TRIGGER\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn medt_t(&self) -> crate::common::Reg<dpll::MedtT_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1156usize)) }
    }
    #[doc = "DPLL Calculated Number of Sub Pulses between two Nominal STATE Events for SMC   0\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn mls1(&self) -> crate::common::Reg<dpll::Mls1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1472usize)) }
    }
    #[doc = "DPLL Calculated Number of Sub Pulses between two Nominal STATE Events for SMC   1 and RMO   1\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn mls2(&self) -> crate::common::Reg<dpll::Mls2_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1476usize)) }
    }
    #[doc = "DPLL Missing Pulses to be Added or Subtracted Directly 1\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn mpval1(&self) -> crate::common::Reg<dpll::Mpval1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1088usize)) }
    }
    #[doc = "DPLL Missing Pulses to be Added or Subtracted Directly 2\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn mpval2(&self) -> crate::common::Reg<dpll::Mpval2_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1092usize)) }
    }
    #[doc = "DPLL Number of Pulses to be Sent in Emergency Mode\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn nmb_s(&self) -> crate::common::Reg<dpll::NmbS_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1532usize)) }
    }
    #[doc = "DPLL Target Number of Pulses to be Sent in Emergency Mode\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn nmb_s_tar(&self) -> crate::common::Reg<dpll::NmbSTar_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1104usize)) }
    }
    #[doc = "DPLL Last but One Target Number of Pulses to be Sent in Emergency Mode\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn nmb_s_tar_old(
        &self,
    ) -> crate::common::Reg<dpll::NmbSTarOld_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1108usize)) }
    }
    #[doc = "DPLL Number of Pulses to be Sent in Normal Mode\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn nmb_t(&self) -> crate::common::Reg<dpll::NmbT_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1528usize)) }
    }
    #[doc = "DPLL Target Number of Pulses to be Sent in Normal Mode\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn nmb_t_tar(&self) -> crate::common::Reg<dpll::NmbTTar_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1096usize)) }
    }
    #[doc = "DPLL Last but One Target Number of Pulses to be Sent in Normal Mode\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn nmb_t_tar_old(
        &self,
    ) -> crate::common::Reg<dpll::NmbTTarOld_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1100usize)) }
    }
    #[doc = "DPLL Number of Active TRIGGER Events to Interrupt\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn nti_cnt(&self) -> crate::common::Reg<dpll::NtiCnt_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(60usize)) }
    }
    #[doc = "DPLL Number of Recent STATE Events Used for Calculations\n resetvalue={Application Reset:0x2081}"]
    #[inline(always)]
    pub const fn nusc(&self) -> crate::common::Reg<dpll::Nusc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(56usize)) }
    }
    #[doc = "DPLL Extension Register Number 1 for DPLL NUSC 4\n resetvalue={Application Reset:0x10001}"]
    #[inline(always)]
    pub const fn nusc_ext1(&self) -> crate::common::Reg<dpll::NuscExt1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3940usize)) }
    }
    #[doc = "DPLL Extension Register Number 2 for DPLL NUSC 4\n resetvalue={Application Reset:0x1}"]
    #[inline(always)]
    pub const fn nusc_ext2(&self) -> crate::common::Reg<dpll::NuscExt2_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3944usize)) }
    }
    #[doc = "DPLL Number of Recent TRIGGER Events Used for Calculations\n resetvalue={Application Reset:0x12001}"]
    #[inline(always)]
    pub const fn nutc(&self) -> crate::common::Reg<dpll::Nutc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(52usize)) }
    }
    #[doc = "DPLL Offset and Switch Old New Address Register\n resetvalue={Application Reset:0x200}"]
    #[inline(always)]
    pub const fn osw(&self) -> crate::common::Reg<dpll::Osw_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(28usize)) }
    }
    #[doc = "DPLL Actual Calculated Position Stamp of STATE\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn pssc(&self) -> crate::common::Reg<dpll::Pssc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1508usize)) }
    }
    #[doc = "DPLL Measured Position Stamp at Last STATE Input\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn pssm(&self) -> crate::common::Reg<dpll::Pssm_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1520usize)) }
    }
    #[doc = "DPLL Measured Position Stamp at Last but One STATE Input\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn pssm_old(&self) -> crate::common::Reg<dpll::PssmOld_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1524usize)) }
    }
    #[doc = "DPLL Actual Calculated Position Stamp of TRIGGER\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn pstc(&self) -> crate::common::Reg<dpll::Pstc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1504usize)) }
    }
    #[doc = "DPLL Measured Position Stamp at Last TRIGGER Input\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn pstm(&self) -> crate::common::Reg<dpll::Pstm_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1512usize)) }
    }
    #[doc = "DPLL Measured Position Stamp at Last but One TRIGGER Input\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn pstm_old(&self) -> crate::common::Reg<dpll::PstmOld_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1516usize)) }
    }
    #[doc = "DPLL Plausibility Value of Next TRIGGER Slope\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn pvt(&self) -> crate::common::Reg<dpll::Pvt_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1488usize)) }
    }
    #[doc = "DPLL RAM Initialization Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ram_ini(&self) -> crate::common::Reg<dpll::RamIni_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(508usize)) }
    }
    #[doc = "DPLL Reciprocal Value of the Expected Increment Duration of STATE\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn rcdt_sx(&self) -> crate::common::Reg<dpll::RcdtSx_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1124usize)) }
    }
    #[doc = "DPLL Reciprocal Value of the Expected Nominal Increment Duration of STATE\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn rcdt_sx_nom(&self) -> crate::common::Reg<dpll::RcdtSxNom_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1132usize)) }
    }
    #[doc = "DPLL Reciprocal Value of the Expected Increment Duration of TRIGGER\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn rcdt_tx(&self) -> crate::common::Reg<dpll::RcdtTx_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1120usize)) }
    }
    #[doc = "DPLL Reciprocal Value of the Expected Nominal Increment Duration of TRIGGER\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn rcdt_tx_nom(&self) -> crate::common::Reg<dpll::RcdtTxNom_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1128usize)) }
    }
    #[doc = "DPLL Reciprocal Value of the Last Increment of STATE\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn rdt_s_act(&self) -> crate::common::Reg<dpll::RdtSAct_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1140usize)) }
    }
    #[doc = "DPLL Reciprocal Value of the Last Increment of TRIGGER\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn rdt_t_act(&self) -> crate::common::Reg<dpll::RdtTAct_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1136usize)) }
    }
    #[doc = "DPLL Additional STATE Input Delay Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn sidel(&self) -> crate::common::Reg<dpll::Sidel_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3884usize)) }
    }
    #[doc = "DPLL STATE Locking Range\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn slr(&self) -> crate::common::Reg<dpll::Slr_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1188usize)) }
    }
    #[doc = "DPLL Status of the State Machine States Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn sta(&self) -> crate::common::Reg<dpll::Sta_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3904usize)) }
    }
    #[doc = "DPLL Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn status(&self) -> crate::common::Reg<dpll::Status_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(252usize)) }
    }
    #[doc = "DPLL STA Flag Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn sta_flag(&self) -> crate::common::Reg<dpll::StaFlag_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3928usize)) }
    }
    #[doc = "DPLL Trigger Masks for Signals DPLL STA T and DPLL STA S\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn sta_mask(&self) -> crate::common::Reg<dpll::StaMask_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3924usize)) }
    }
    #[doc = "DPLL TBU TS0 Value at Last STATE Event\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn tbu_ts0_s(&self) -> crate::common::Reg<dpll::TbuTs0S_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(196usize)) }
    }
    #[doc = "DPLL TBU TS0 Value at Last TRIGGER Event\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn tbu_ts0_t(&self) -> crate::common::Reg<dpll::TbuTs0T_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(192usize)) }
    }
    #[doc = "DPLL TRIGGER Hold Time Maximum Value\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn thma(&self) -> crate::common::Reg<dpll::Thma_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1060usize)) }
    }
    #[doc = "DPLL TRIGGER Hold Time Minimum Value\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn thmi(&self) -> crate::common::Reg<dpll::Thmi_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1056usize)) }
    }
    #[doc = "DPLL Measured TRIGGER Hold Time Value\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn thval(&self) -> crate::common::Reg<dpll::Thval_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1064usize)) }
    }
    #[doc = "DPLL Immediate THVAL Value Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn thval2(&self) -> crate::common::Reg<dpll::Thval2_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3876usize)) }
    }
    #[doc = "DPLL Additional TRIGGER Input Delay Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn tidel(&self) -> crate::common::Reg<dpll::Tidel_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(3880usize)) }
    }
    #[doc = "DPLL TRIGGER Locking Range\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn tlr(&self) -> crate::common::Reg<dpll::Tlr_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1184usize)) }
    }
    #[doc = "DPLL Time Out Value of Active TRIGGER Slope\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn tov(&self) -> crate::common::Reg<dpll::Tov_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1072usize)) }
    }
    #[doc = "DPLL Time Out Value of Active STATE Slope\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn tov_s(&self) -> crate::common::Reg<dpll::TovS_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1076usize)) }
    }
    #[doc = "DPLL Actual STATE Time Stamp\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn ts_s(&self) -> crate::common::Reg<dpll::TsS_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1040usize)) }
    }
    #[doc = "DPLL Previous STATE Time Stamp\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn ts_s_old(&self) -> crate::common::Reg<dpll::TsSOld_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1044usize)) }
    }
    #[doc = "DPLL Actual TRIGGER Time Stamp Value\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn ts_t(&self) -> crate::common::Reg<dpll::TsT_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1024usize)) }
    }
    #[doc = "DPLL Previous TRIGGER Time Stamp Value\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    #[inline(always)]
    pub const fn ts_t_old(&self) -> crate::common::Reg<dpll::TsTOld_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1028usize)) }
    }
    #[doc = "IRQ"]
    #[inline(always)]
    pub fn irq(self) -> dpll::Irq {
        unsafe { dpll::Irq(self.0.add(64usize)) }
    }
}
pub mod dpll {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct ActSta_SPEC;
    impl crate::sealed::RegSpec for ActSta_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL ACTION Status Register with Connected Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type ActSta = crate::RegValueT<ActSta_SPEC>;

    impl ActSta {
        #[doc = "New output data values concerning to action i provided   ACT N. ACT N i  is  Set  for AENi 1 and a new valid PMTR   that means when new action data          are to be calculated for the correspondent action. After each          calculation of the new actions values  the ACT N i  bit updates the          corresponding bit in the connected shadow register. The status of the          ACT N i  bits in the shadow register is reflected by the corresponding          DPLL output signal ACT V  valid bit . Reset together with the corresponding shadow register bit for AENi 0. Reset without the corresponding shadow register bit when the          calculated event is in the past  the shadow register bit is set  when          it was not set before in that case . The corresponding shadow register bit is reset  when new PMTR data are          written or when the provided action data are read  blocking read . Writeable for debugging purposes together with the corresponding          shadow register when DEN 0. These bits can only be written for test purposes when the DPLL is          disabled."]
        #[inline(always)]
        pub fn act_n(
            self,
        ) -> crate::common::RegisterField<0, 0xffffffff, 1, 0, u32, ActSta_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffffff,1,0,u32, ActSta_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for ActSta {
        #[inline(always)]
        fn default() -> ActSta {
            <crate::RegValueT<ActSta_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct AddInCal1_SPEC;
    impl crate::sealed::RegSpec for AddInCal1_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Calculated ADD IN Value for SUB INC1 Generation\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type AddInCal1 = crate::RegValueT<AddInCal1_SPEC>;

    impl AddInCal1 {
        #[doc = "Calculated input value for SUB INC1 generation  calculated by the DPLL. Calculated value. The update of the ADD IN value by the new calculated value ADD IN CAL1        is suppressed for one increment when an unexpected missing TRIGGER         SMC 1 or RMO 0  or an unexpected STATE  RMO 1 and SMC 0  is detected."]
        #[inline(always)]
        pub fn add_in_cal1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, AddInCal1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, AddInCal1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for AddInCal1 {
        #[inline(always)]
        fn default() -> AddInCal1 {
            <crate::RegValueT<AddInCal1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct AddInCal2_SPEC;
    impl crate::sealed::RegSpec for AddInCal2_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Calculated ADD IN Value for SUB INC2 Generation\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type AddInCal2 = crate::RegValueT<AddInCal2_SPEC>;

    impl AddInCal2 {
        #[doc = "Input value for SUB INC2 generation  calculated by the DPLL for SMC RMO 1. Calculated value. The update of the ADD IN value by the calculated value ADD IN CAL2 is        suppressed for one increment when an unexpected missing STATE         RMO SMC 1  is detected."]
        #[inline(always)]
        pub fn add_in_cal2(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, AddInCal2_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, AddInCal2_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for AddInCal2 {
        #[inline(always)]
        fn default() -> AddInCal2 {
            <crate::RegValueT<AddInCal2_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct AddInLd1_SPEC;
    impl crate::sealed::RegSpec for AddInLd1_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Direct Load Input Value for SUB INC1\n resetvalue={Application Reset:0x0}"]
    pub type AddInLd1 = crate::RegValueT<AddInLd1_SPEC>;

    impl AddInLd1 {
        #[doc = "Input value for SUB INC1 generation. Given by CPU. This value can be used in normal und emergency mode         SMC 0  as well as for SMC 1. For DLM1   1  The value is loaded by the        CPU but used by the DPLL only for DLM1 1  see DPLL CTRL 1 register .        When switching DLM1 to 1  the value in the register is used for the        SUB INC1 generation beginning from the next active TRIGGER or STATE event respectively        independently if new values are written by the CPU or not. When a new value is written the output frequency changes according to        the given value beginning immediately from the moment of writing. Do not        wait for performing step 10 in the state machine for ADD IN calculations. If the ADD IN LD1 value is zero all pulses are sent with the highest        possible frequency. For DLM1   0  The value loaded by the CPU        is stored directly in the internal add in register which is used to        control the sub increment pulse generator directly  see DPLL CTRL 1        register  DLM1   0 . When a new ADD IN LD1 value is written the output frequency is        immediately changed from the moment of writing. The ADD IN values        calculated internally of the DPLL are written to the internal ADD IN        register as well. In the moment when the internal calculation of the        ADD IN values is writing the results into the internal ADD IN register        of the pulse generator the internally calculated ADD IN values does        always have higher priority compared to the values written via the        ADD IN LD1 register. If the ADD IN LD1 value is zero all pulses are sent with the highest        possible frequency."]
        #[inline(always)]
        pub fn add_in_ld1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, AddInLd1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, AddInLd1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for AddInLd1 {
        #[inline(always)]
        fn default() -> AddInLd1 {
            <crate::RegValueT<AddInLd1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct AddInLd2_SPEC;
    impl crate::sealed::RegSpec for AddInLd2_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Direct Load Input Value for SUB INC2\n resetvalue={Application Reset:0x0}"]
    pub type AddInLd2 = crate::RegValueT<AddInLd2_SPEC>;

    impl AddInLd2 {
        #[doc = "Input value for SUB INC2 generation. Given by CPU. This value can be used for SMC 1 while RMO 1. For DLM2   1  The value is loaded by the        CPU but used by the DPLL only for DLM2 1  see DPLL CTRL 1 register .        When switching DLM2 to 1  the value in the register is used for the        SUB INC2 generation beginning from the next STATE event respectively independently if new values are written by the CPU or        not. When a new value is written the output frequency changes according to        the given value beginning immediately from the moment of writing. Do not        wait for performing step 30 in the state machine for ADD IN        calculations. If the ADD IN LD2 value is zero all pulses are sent with        the highest possible frequency. For DLM2   0  The value loaded by the CPU        is stored directly in the internal add in register which is used to        control the sub increment pulse generator directly  see DPLL CTRL 1        register  DLM2   0 . When a new ADD IN LD2 value is written the output frequency is        immediately changed from the moment of writing. The ADD IN values        calculated internally of the DPLL are written to the internal ADD IN        register as well. In the moment when the internal calculation of the        ADD IN values is writing the results into the internal ADD IN register        of the pulse generator the internally calculated ADD IN values does        always have higher priority compared to the values written via the        ADD IN LD2 register. If the ADD IN LD2 value is zero all pulses are sent with the highest        possible frequency."]
        #[inline(always)]
        pub fn add_in_ld2(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, AddInLd2_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, AddInLd2_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for AddInLd2 {
        #[inline(always)]
        fn default() -> AddInLd2 {
            <crate::RegValueT<AddInLd2_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Aosv2_SPEC;
    impl crate::sealed::RegSpec for Aosv2_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Address Offset Register of RAM 2 Regions\n resetvalue={Application Reset:0x18100800}"]
    pub type Aosv2 = crate::RegValueT<Aosv2_SPEC>;

    impl Aosv2 {
        #[doc = "Address offset value of the RAM 2A region. The value in this field is to be multiplied by 256  shift left 8 Bits         and added with the start address of the RAM in order to get the start        address of RAM region 2a. When the APT value is added to this start        address  the current RAM cell RDT Tx is addressed. Value is set automatically when OSS in the PPLL OSW register is set  OSS 0x0  AOSV 2A  0x00 OSS 0x1  AOSV 2A  0x00 OSS 0x2  AOSV 2A  0x00 OSS 0x3  AOSV 2A  0x00"]
        #[inline(always)]
        pub fn aosv_2a(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Aosv2_SPEC, crate::common::R> {
            crate::common::RegisterField::<0,0xff,1,0,u8, Aosv2_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Address offset value of the RAM 2B region. The value in this field is to be multiplied by 256  shift left 8 Bits         and added with the start address of the RAM in order to get the start        address of RAM region 2b. When the APT value is added to this start        address  the current RAM cell TSF Tx is addressed. Value is set automatically when OSS in the PPLL OSW register is set  OSS 0x0  AOSV 2B  0x02 OSS 0x1  AOSV 2B  0x04 OSS 0x2  AOSV 2B  0x08 OSS 0x3  AOSV 2B  0x10"]
        #[inline(always)]
        pub fn aosv_2b(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Aosv2_SPEC, crate::common::R> {
            crate::common::RegisterField::<8,0xff,1,0,u8, Aosv2_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Address offset value of the RAM 2C region. The value in this field is to be multiplied by 256  shift left 8 Bits         and added with the start address of the RAM in order to get the start        address of RAM region 2c. When the APT value is added to this start        address  the current RAM cell ADT Tx is addressed. Value is set automatically when OSS in the PPLL OSW register is set  OSS 0x0  AOSV 2C  0x04 OSS 0x1  AOSV 2C  0x08 OSS 0x2  AOSV 2C  0x10 OSS 0x3  AOSV 2C  0x20"]
        #[inline(always)]
        pub fn aosv_2c(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Aosv2_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, Aosv2_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Address offset value of the RAM 2D region   AOSV 2D. The value in this field is to be multiplied by 256  shift left 8 Bits         and added with the start address of the RAM in order to get the start        address of RAM region 2d. When the APT value is added to this start        address  the current RAM cell DT Tx is addressed. Value is set automatically when OSS in the PPLL OSW register is set  OSS 0x0  AOSV 2D  0x06 OSS 0x1  AOSV 2D  0x0C OSS 0x2  AOSV 2D  0x18 OSS 0x3  AOSV 2D  0x30 The offset values are needed to support a scalable RAM size of region 2        from 1 5 Kbytes to 12 Kbytes. The values above must be in correlation        with the offset size defined in the OSW register. All offset values are        set automatically in accordance to the OSS value in the DPLL OSW        register. This value can be set only for DEN 0."]
        #[inline(always)]
        pub fn aosv_2d(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Aosv2_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Aosv2_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Aosv2 {
        #[inline(always)]
        fn default() -> Aosv2 {
            <crate::RegValueT<Aosv2_SPEC> as RegisterValue<_>>::new(403703808)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Aps_SPEC;
    impl crate::sealed::RegSpec for Aps_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Actual RAM Pointer Address for STATE\n resetvalue={Application Reset:0x0}"]
    pub type Aps = crate::RegValueT<Aps_SPEC>;

    impl Aps {
        #[doc = "Write bit for address pointer APS. Read as zero"]
        #[inline(always)]
        pub fn waps(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Aps_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1, 1, 0, Aps_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Address pointer STATE. Actual RAM pointer address value for DT S i  and RDT S i  Actual RAM pointer and synchronization position value of STATE events in FULL SCALE for up to 64 STATE events but limited to 2  SNU 1 SYN NS  in normal and emergency mode for        SYSF 0 or to 2  SNU 1  SYN NS for SYSF 1 respectively  this pointer is        used for the RAM region 1c1 and 1c4. APS is incremented  decremented  by one for each active STATE event and DIR2 0 DIR2 1 . The APS offset value is added in the above        shown bit position with the subsection offset of the RAM region. The APS pointer value is directed to the RAM position  in which the data        values are to be written  which correspond to the last increment. The        APS value is not to be changed  when the direction  shown by DIR2         changes  because it points always to a storage place after the        considered increment. Changing of DIR2 takes place always after an        active STATE event and the resulting        increment decrement. This value can only be written when the WAPS bit is set."]
        #[inline(always)]
        pub fn aps(
            self,
        ) -> crate::common::RegisterField<2, 0x3f, 1, 0, u8, Aps_SPEC, crate::common::RW> {
            crate::common::RegisterField::<2,0x3f,1,0,u8, Aps_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write bit for address pointer APS 1C2. Read as zero"]
        #[inline(always)]
        pub fn waps_1c2(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, Aps_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<13, 1, 0, Aps_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Address pointer STATE for RAM region 1c2. Actual RAM pointer address value for TSF S i . Initial value  zero  0x00 . Actual RAM pointer and synchronization        position value of STATE events in        FULL SCALE for up to 64 STATE events but        limited to 2  SNU 1  in normal and emergency mode  this pointer is used        for the RAM region 1c2. For SYS 1   APS 1C2 is incremented  decremented  by SYN S OLD for each active STATE event and DIR2 0  DIR2 1 . For SYS 0   APT 1c2 is incremented or decremented by 1 respectively. The APS 1C2 offset value is added in the above shown bit position with        the subsection offset of the RAM region. In addition when the APS 1C3 value is written by the CPU   in order to        synchronize the DPLL  with the next active STATE event the APS 1C2 EXT value is added subtracted  while APS 1C2 STATUS is        one  see DPLL APT SYNC register at CROSSREFERENCE  . This value can only be written when the WAPS 1C2 bit is set"]
        #[inline(always)]
        pub fn aps_1c2(
            self,
        ) -> crate::common::RegisterField<14, 0x3f, 1, 0, u8, Aps_SPEC, crate::common::RW> {
            crate::common::RegisterField::<14,0x3f,1,0,u8, Aps_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Aps {
        #[inline(always)]
        fn default() -> Aps {
            <crate::RegValueT<Aps_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Aps1C3_SPEC;
    impl crate::sealed::RegSpec for Aps1C3_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Actual RAM Pointer for RAM Region 1C3\n resetvalue={Application Reset:0x0}"]
    pub type Aps1C3 = crate::RegValueT<Aps1C3_SPEC>;

    impl Aps1C3 {
        #[doc = "Address pointer STATE for RAM region 1c3. Actual RAM pointer address value for ADT S i . Initial value  zero  0x00 . Actual RAM pointer and synchronization        position value of STATE events in        FULL SCALE for up to 64 STATE events but        limited to 2  SNU 1 SYN NS  in normal and emergency mode for SYSF 0 or        to 2  SNU 1  SYN NS for SYSF 1 respectively  this pointer is used for        the RAM region 1c3. The RAM pointer is set by the CPU accordingly  when        the synchronization condition was detected."]
        #[inline(always)]
        pub fn aps_1c3(
            self,
        ) -> crate::common::RegisterField<2, 0x3f, 1, 0, u8, Aps1C3_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<2,0x3f,1,0,u8, Aps1C3_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Aps1C3 {
        #[inline(always)]
        fn default() -> Aps1C3 {
            <crate::RegValueT<Aps1C3_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Aps1C3Ext_SPEC;
    impl crate::sealed::RegSpec for Aps1C3Ext_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Extension Register for DPLL APS 1C3\n resetvalue={Application Reset:0x0}"]
    pub type Aps1C3Ext = crate::RegValueT<Aps1C3Ext_SPEC>;

    impl Aps1C3Ext {
        #[doc = "Actual RAM pointer address value for ADT S i . Initial value  zero  0x00 . Actual RAM pointer and synchronization position value of STATE events in FULL SCALE for up to 128 STATE events but limited to 2  SNU 1 SYN NS  in normal and emergency mode for        SYSF 0 or to 2  SNU 1  SYN NS for SYSF 1 respectively  this pointer is        used for the RAM region 1c3. See CROSSREFERENCE . The RAM pointer is set by the CPU accordingly  when the synchronization        condition was detected. The APS 1C3 pointer value is directed to the RAM position of the profile        element in RAM region 1c2  which corresponds to the current increment.        When changing the direction DIR1 or DIR2 respectively  this is always        known before an active STATE event is processed. This is because of the pattern recognition in SPE         for PMSM  or because of the direction change recognition by TRIGGER.        This direction change results in an automatic increment  forwards  or        decrement  backwards  when the input event occurs in addition with a 2        times correction. The APS 1C3 x offset value is added in the above shown bit position with        the subsection address offset of the corresponding RAM region."]
        #[inline(always)]
        pub fn aps_1c3(
            self,
        ) -> crate::common::RegisterField<2, 0x7f, 1, 0, u8, Aps1C3Ext_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<2,0x7f,1,0,u8, Aps1C3Ext_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Aps1C3Ext {
        #[inline(always)]
        fn default() -> Aps1C3Ext {
            <crate::RegValueT<Aps1C3Ext_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct ApsExt_SPEC;
    impl crate::sealed::RegSpec for ApsExt_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Extension Register for DPLL APS\n resetvalue={Application Reset:0x0}"]
    pub type ApsExt = crate::RegValueT<ApsExt_SPEC>;

    impl ApsExt {
        #[doc = "Write bit for address pointer APS. Read as zero."]
        #[inline(always)]
        pub fn waps(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, ApsExt_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,ApsExt_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Actual RAM pointer address value for DT S i  and RDT S i . Actual RAM pointer and synchronization position value of STATE events in FULL SCALE for up to 128 STATE events but limited to 2  SNU 1 SYN NS  in normal and emergency mode for        SYSF 0 or to 2  SNU 1  SYN NS for SYSF 1 respectively  See CROSSREFERENCE . APS is incremented  decremented  by one for each active STATE event and DIR2 0 DIR2 1 . The APS offset value is added in the above        shown bit position with the subsection offset of the RAM region. The APS pointer value is directed to the RAM position  in which the data        values are to be written  which correspond to the last increment. The        APS value is not to be changed  when the direction  shown by DIR2         changes  because it points always to a storage place after the        considered increment. Changing of DIR2 takes place always after an        active STATE event and the resulting increment decrement. This value can only be written when the WAPS bit is set."]
        #[inline(always)]
        pub fn aps(
            self,
        ) -> crate::common::RegisterField<2, 0x7f, 1, 0, u8, ApsExt_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<2,0x7f,1,0,u8, ApsExt_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write bit for address pointer APS 1C2. Read as zero."]
        #[inline(always)]
        pub fn waps_1c2(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, ApsExt_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<13,1,0,ApsExt_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Actual RAM pointer address value for TSF S i . Initial value  zero  0x00 . Actual RAM pointer and synchronization        position value of STATE events in FULL SCALE for up to 64 STATE events but limited to 2  SNU 1  in normal and emergency mode  this        pointer is used for the RAM region 1c2. For SYS 1  APS 1C2 is incremented  decremented  by SYN S OLD for each        active STATE event and DIR2 0  DIR2 1 . For SYS 0  APT 1c2 is incremented or decremented by 1 respectively. The APS 1C2 offset value is added in the above shown bit position with        the subsection offset of the RAM region. In addition when the APS 1C3 value is written by the CPU   in order to        synchronize the DPLL  with the next active STATE event the APS 1C2 EXT value is added subtracted  while APS 1C2 STATUS is        one  see DPLL APT SYNC register at CROSSREFERENCE  . This value can only be written when the WAPS 1C2 bit is set"]
        #[inline(always)]
        pub fn aps_1c2(
            self,
        ) -> crate::common::RegisterField<14, 0x7f, 1, 0, u8, ApsExt_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<14,0x7f,1,0,u8, ApsExt_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for ApsExt {
        #[inline(always)]
        fn default() -> ApsExt {
            <crate::RegValueT<ApsExt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct ApsSync_SPEC;
    impl crate::sealed::RegSpec for ApsSync_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Old RAM Pointer and Offset Value for STATE\n resetvalue={Application Reset:0x0}"]
    pub type ApsSync = crate::RegValueT<ApsSync_SPEC>;

    impl ApsSync {
        #[doc = "Address pointer 1c2 extension. This offset value determines  by which value the APS 1C2 is changed at        the synchronization time  set by CPU before the synchronization is        performed. This offset value is the number of virtual increments to be inserted in        the TSF for an imminent intended synchronization  the CPU sets its value        dependent on the gaps until the synchronization time taking into account        the considered NUSE value to be set and including the next future        increment  when SYN S OLD is still 1 . When the synchronization takes        place  this value is to be added to the APS 1C2 address pointer  for        forward direction  DIR2 0  and the APT 1c2 status bit is cleared after        it. For backward direction subtract APS 1C2 EXT accordingly. When the synchronization is intended and the NUSE value is to be set to        FULL SCALE after it  the APS 1C2 EXT value must be set to SYN NS  for        SYSF 1  or 2 SYN NS  for SYSF 0  in order to be able to fill all gaps in        the extended TSF S with the corresponding values by the CPU. When still not all values for FULL SCALE are available  the APS 1C2 EXT        value considers only a share according to the NUSE value to be set after        the synchronization."]
        #[inline(always)]
        pub fn aps_1c2_ext(
            self,
        ) -> crate::common::RegisterField<0, 0x3f, 1, 0, u8, ApsSync_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3f,1,0,u8, ApsSync_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Address pointer 1c2 status. Set by CPU before the synchronization is performed. The value is cleared        automatically when the APS 1C2 OLD value is written."]
        #[inline(always)]
        pub fn aps_1c2_status(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, ApsSync_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,ApsSync_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Address pointer STATE for RAM region 1c2 at synchronization time. This value is set by the current APS 1C2 value when the synchronization        takes place for the first active STATE event after writing APS 1C3 but        before adding the offset value APS 1C2 EXT  that means  when        APS 1C2 STATUS 1 . Address pointer APS 1C2 value at the moment of synchronization  before        the offset value is added  that means the pointer with this value points        to the last value before the additional inserted gap."]
        #[inline(always)]
        pub fn aps_1c2_old(
            self,
        ) -> crate::common::RegisterField<14, 0x3f, 1, 0, u8, ApsSync_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<14,0x3f,1,0,u8, ApsSync_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for ApsSync {
        #[inline(always)]
        fn default() -> ApsSync {
            <crate::RegValueT<ApsSync_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct ApsSyncExt_SPEC;
    impl crate::sealed::RegSpec for ApsSyncExt_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Extension Register for DPLL APS SYNC\n resetvalue={Application Reset:0x0}"]
    pub type ApsSyncExt = crate::RegValueT<ApsSyncExt_SPEC>;

    impl ApsSyncExt {
        #[doc = "Address pointer 1c2 extension. This offset value determines  by which value the APS 1C2 is changed at        the synchronization time  set by CPU before the synchronization is        performed. This offset value is the number of virtual increments to be inserted in        the TSF for an imminent intended synchronization  the CPU sets its value        dependent on the gaps until the synchronization time taking into account        the considered NUSE value to be set and including the next future        increment  when SYN S OLD is still 1 . When the synchronization takes        place  this value is to be added to the APS 1C2 address pointer  for        forward direction  DIR2 0  and the APT 1c2 status bit is cleared after        it. For backward direction subtract APS 1C2 EXT accordingly. When the synchronization is intended and the NUSE value is to be set to        FULL SCALE after it  the APS 1C2 EXT value must be set to SYN NS  for        SYSF 1  or 2 SYN NS  for SYSF 0  in order to be able to fill all gaps in        the extended TSF S with the corresponding values by the CPU. When still not all values for FULL SCALE are available  the APS 1C2 EXT        value considers only a share according to the NUSE value to be set after        the synchronization."]
        #[inline(always)]
        pub fn aps_1c2_ext(
            self,
        ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, ApsSyncExt_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x7f,1,0,u8, ApsSyncExt_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Address pointer 1c2 status. Set by CPU before the synchronization is performed. The value is cleared        automatically when the APS 1C2 OLD value is written."]
        #[inline(always)]
        pub fn aps_1c2_status(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, ApsSyncExt_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<15,1,0,ApsSyncExt_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Address pointer STATE for RAM region 1c2 at synchronization time. This value is set by the current APS 1C2 value when the synchronization        takes place for the first active STATE event after writing APS 1C3 but        before adding the offset value APS 1C2 EXT  that means  when        APS 1C2 STATUS 1 . Address pointer APS 1C2 value at the moment of synchronization  before        the offset value is added  that means the pointer with this value points        to the last value before the additional inserted gap."]
        #[inline(always)]
        pub fn aps_1c2_old(
            self,
        ) -> crate::common::RegisterField<16, 0x7f, 1, 0, u8, ApsSyncExt_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x7f,1,0,u8, ApsSyncExt_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for ApsSyncExt {
        #[inline(always)]
        fn default() -> ApsSyncExt {
            <crate::RegValueT<ApsSyncExt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Apt_SPEC;
    impl crate::sealed::RegSpec for Apt_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Actual RAM Pointer Address for TRIGGER\n resetvalue={Application Reset:0x0}"]
    pub type Apt = crate::RegValueT<Apt_SPEC>;

    impl Apt {
        #[doc = "Write bit for address pointer APT. Read as zero."]
        #[inline(always)]
        pub fn wapt(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Apt_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1, 1, 0, Apt_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Address pointer TRIGGER. Actual RAM pointer address value offset for DT T i  and RDT T i  in        FULL SCALE for 2  TNU 1 SYN NT  TRIGGER events. This pointer is used for the RAM region 2 subsections 2a and 2d. The        pointer APT is incremented for each active TRIGGER event  simultaneously with APT 2B  APT 2C  for DIR1 0. For DIR1 1 the        APT is decremented. The APT offset value is added in the above shown bit position with the        subsection address offset of the corresponding RAM region The APT pointer value is directed to the RAM position  in which the data        values are to be written  which corresponds to the last increment. The        APT value is not to be changed  when the direction  shown by DIR1         changes  because it points always to a storage place after the        considered increment. Changing of DIR1 takes place always after an        active TRIGGER event and the resulting        increment decrement. This value can only be written when the WAPT bit is set."]
        #[inline(always)]
        pub fn apt(
            self,
        ) -> crate::common::RegisterField<2, 0x3ff, 1, 0, u16, Apt_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<2,0x3ff,1,0,u16, Apt_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write bit for address pointer APT 2B. Read as zero."]
        #[inline(always)]
        pub fn wapt_2b(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, Apt_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<13, 1, 0, Apt_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Address pointer TRIGGER for RAM region 2b. Actual RAM pointer address value for TSF T i  Actual RAM pointer address of TRIGGER events in FULL SCALE for 2  TNU 1  TRIGGER periods  this pointer is used for the RAM region 2b. The RAM pointer is        initially set to zero. For SYT 1   The pointer APT 2B is incremented by SYN T OLD for each active TRIGGER event  simultaneously with APT and APT 2C  for DIR1 0 when an active TRIGGER input appears. For DIR1 1  backwards  the APT is decremented by        SYN T OLD. For SYT 0   APT 2B is incremented or decremented by 1. In addition when the APT 2C value is written by the CPU   in order to        synchronize the DPLL  with the next active TRIGGER event the APT 2B EXT value is added subtracted  while APT 2B STATUS is        one  see DPLL APT SYNC register at CROSSREFERENCE  . This value can only be written when the WAPT 2B bit is set."]
        #[inline(always)]
        pub fn apt_2b(
            self,
        ) -> crate::common::RegisterField<14, 0x3ff, 1, 0, u16, Apt_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<14,0x3ff,1,0,u16, Apt_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Apt {
        #[inline(always)]
        fn default() -> Apt {
            <crate::RegValueT<Apt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Apt2C_SPEC;
    impl crate::sealed::RegSpec for Apt2C_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Actual RAM Pointer for Region 2C\n resetvalue={Application Reset:0x0}"]
    pub type Apt2C = crate::RegValueT<Apt2C_SPEC>;

    impl Apt2C {
        #[doc = "Address pointer TRIGGER for RAM region 2c and Actual RAM pointer address value for ADT T i . Actual RAM pointer address value of TRIGGER adapt events in FULL SCALE        for 2  TNU 1 SYN NT  TRIGGER periods depending on the size of the used        RAM 2  this pointer is used for the RAM region 2 for the subsection 2c        only. The RAM pointer is initially set to zero. The APT 2C value is set        by the CPU when the synchronization condition was detected. Within the        RAM region 2c initially the conditions for synchronization gaps and        adapted values are stored by the CPU."]
        #[inline(always)]
        pub fn apt_2c(
            self,
        ) -> crate::common::RegisterField<2, 0x3ff, 1, 0, u16, Apt2C_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<2,0x3ff,1,0,u16, Apt2C_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Apt2C {
        #[inline(always)]
        fn default() -> Apt2C {
            <crate::RegValueT<Apt2C_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct AptSync_SPEC;
    impl crate::sealed::RegSpec for AptSync_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Old RAM Pointer and Offset Value for TRIGGER\n resetvalue={Application Reset:0x0}"]
    pub type AptSync = crate::RegValueT<AptSync_SPEC>;

    impl AptSync {
        #[doc = "Address pointer 2b extension. This offset value determines  by which value the APT 2B is changed at        the synchronization time  set by CPU before the synchronization is        performed. This offset value is the number of virtual increments to be inserted in        the TSF for an imminent intended synchronization  the CPU sets its value        dependent on the gaps until the synchronization time taking into account        the considered NUTE value to be set and including the next future        increment  when SYN T OLD is still 1 . When the synchronization takes        place  this value is to be added to the APT 2B address pointer  for        forward direction  DIR1 0  and the APT 2B STATUS bit is cleared after        it. For backward direction subtract APT 2B EXT accordingly. This        correction is done after updating the RAM TSF with the last TS T value. When the synchronization is intended and the NUTE value is to be set to        FULL SCALE after it  the APT 2B EXT value must be set to 2 SYN NT in        order to be able to fill all gaps in the extended TSF T with the        corresponding values by the CPU. When still not all values for FULL SCALE are available  the APT 2B EXT        value considers only a share according to the corresponding NUTE value        to be set after the synchronization."]
        #[inline(always)]
        pub fn apt_2b_ext(
            self,
        ) -> crate::common::RegisterField<0, 0x3f, 1, 0, u8, AptSync_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3f,1,0,u8, AptSync_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Address pointer 2b status. Set by CPU before the synchronization is performed. The value is cleared        when the APT 2B OLD value is written."]
        #[inline(always)]
        pub fn apt_2b_status(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, AptSync_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,AptSync_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Address pointer TRIGGER for RAM region 2b at synchronization time. This value is set by the current APT 2B value when the synchronization        takes place for the first active TRIGGER event after writing APT 2C but        before adding the offset value APT 2B EXT  that means  when        APT 2B STATUS 1 . Address pointer APT 2B value at the moment of synchronization  before        the offset value is added  that means the pointer with this value points        to the last value before the additional inserted gap."]
        #[inline(always)]
        pub fn apt_2b_old(
            self,
        ) -> crate::common::RegisterField<14, 0x3ff, 1, 0, u16, AptSync_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<14,0x3ff,1,0,u16, AptSync_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for AptSync {
        #[inline(always)]
        fn default() -> AptSync {
            <crate::RegValueT<AptSync_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct CdtSx_SPEC;
    impl crate::sealed::RegSpec for CdtSx_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Prediction of the Actual STATE Increment Duration\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type CdtSx = crate::RegValueT<CdtSx_SPEC>;

    impl CdtSx {
        #[doc = "Calculated duration of the current STATE increment. Calculated value."]
        #[inline(always)]
        pub fn cdt_sx(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, CdtSx_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, CdtSx_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for CdtSx {
        #[inline(always)]
        fn default() -> CdtSx {
            <crate::RegValueT<CdtSx_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct CdtSxNom_SPEC;
    impl crate::sealed::RegSpec for CdtSxNom_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Prediction of the Nominal STATE Increment Duration\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type CdtSxNom = crate::RegValueT<CdtSxNom_SPEC>;

    impl CdtSxNom {
        #[doc = "Calculated duration of the current nominal STATE event. Calculated value."]
        #[inline(always)]
        pub fn cdt_sx_nom(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, CdtSxNom_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, CdtSxNom_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for CdtSxNom {
        #[inline(always)]
        fn default() -> CdtSxNom {
            <crate::RegValueT<CdtSxNom_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct CdtTx_SPEC;
    impl crate::sealed::RegSpec for CdtTx_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Prediction of the Actual TRIGGER Increment Duration\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type CdtTx = crate::RegValueT<CdtTx_SPEC>;

    impl CdtTx {
        #[doc = "Calculated duration of the current TRIGGER increment. Calculated value."]
        #[inline(always)]
        pub fn cdt_tx(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, CdtTx_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, CdtTx_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for CdtTx {
        #[inline(always)]
        fn default() -> CdtTx {
            <crate::RegValueT<CdtTx_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct CdtTxNom_SPEC;
    impl crate::sealed::RegSpec for CdtTxNom_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Prediction of the Nominal TRIGGER Increment Duration\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type CdtTxNom = crate::RegValueT<CdtTxNom_SPEC>;

    impl CdtTxNom {
        #[doc = "Calculated duration of the current nominal TRIGGER event. Calculated value."]
        #[inline(always)]
        pub fn cdt_tx_nom(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, CdtTxNom_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, CdtTxNom_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for CdtTxNom {
        #[inline(always)]
        fn default() -> CdtTxNom {
            <crate::RegValueT<CdtTxNom_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct CntNum1_SPEC;
    impl crate::sealed::RegSpec for CntNum1_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Number of Sub Pulses of SUB INC1 in Continuous Mode\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type CntNum1 = crate::RegValueT<CntNum1_SPEC>;

    impl CntNum1 {
        #[doc = "Counter for number of SUB INC1 pulses. Number of pulses in continuous mode for a nominal increment in normal        and emergency mode for SUB INC1  given and updated by CPU only. Count value for continuous mode."]
        #[inline(always)]
        pub fn cnt_num_1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, CntNum1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, CntNum1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for CntNum1 {
        #[inline(always)]
        fn default() -> CntNum1 {
            <crate::RegValueT<CntNum1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct CntNum2_SPEC;
    impl crate::sealed::RegSpec for CntNum2_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Number of Sub Pulses of SUB INC2 in Continuous Mode\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type CntNum2 = crate::RegValueT<CntNum2_SPEC>;

    impl CntNum2 {
        #[doc = "Counter for number of SUB INC2 pulses. Number of pulses in continuous mode for a nominal increment in normal        and emergency mode for SUB INC2  given and updated by CPU only. Count value for continuous mode."]
        #[inline(always)]
        pub fn cnt_num_2(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, CntNum2_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, CntNum2_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for CntNum2 {
        #[inline(always)]
        fn default() -> CntNum2 {
            <crate::RegValueT<CntNum2_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct CsnMax_SPEC;
    impl crate::sealed::RegSpec for CsnMax_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Maximum CDT S Nominal Value Register\n resetvalue={Application Reset:0x0FFFFFF}"]
    pub type CsnMax = crate::RegValueT<CsnMax_SPEC>;

    impl CsnMax {
        #[doc = "CDT SX NOM max value. Use this register value as CDT SX NOM value when the calculated value        for the nominal increment prediction of STATE is greater than the        register value."]
        #[inline(always)]
        pub fn csn_max(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, CsnMax_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, CsnMax_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for CsnMax {
        #[inline(always)]
        fn default() -> CsnMax {
            <crate::RegValueT<CsnMax_SPEC> as RegisterValue<_>>::new(16777215)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct CsnMin_SPEC;
    impl crate::sealed::RegSpec for CsnMin_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Minimum CDT S Nominal Value Register\n resetvalue={Application Reset:0x0}"]
    pub type CsnMin = crate::RegValueT<CsnMin_SPEC>;

    impl CsnMin {
        #[doc = "CDT SX NOM min value . Use this register value as CDT SX NOM value when the calculated value        for the nominal increment prediction of STATE is less than the register        value."]
        #[inline(always)]
        pub fn csn_min(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, CsnMin_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, CsnMin_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for CsnMin {
        #[inline(always)]
        fn default() -> CsnMin {
            <crate::RegValueT<CsnMin_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct CtnMax_SPEC;
    impl crate::sealed::RegSpec for CtnMax_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Maximum CDT T Nominal Value Register\n resetvalue={Application Reset:0x0FFFFFF}"]
    pub type CtnMax = crate::RegValueT<CtnMax_SPEC>;

    impl CtnMax {
        #[doc = "CDT T NOM max value. Use this register value as CDT T NOM value when the calculated value for        the nominal increment prediction of TRIGGER is greater than the register        value."]
        #[inline(always)]
        pub fn ctn_max(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, CtnMax_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, CtnMax_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for CtnMax {
        #[inline(always)]
        fn default() -> CtnMax {
            <crate::RegValueT<CtnMax_SPEC> as RegisterValue<_>>::new(16777215)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct CtnMin_SPEC;
    impl crate::sealed::RegSpec for CtnMin_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Minimum CDT T Nominal Value Register\n resetvalue={Application Reset:0x0}"]
    pub type CtnMin = crate::RegValueT<CtnMin_SPEC>;

    impl CtnMin {
        #[doc = "CDT T NOM min value. Use this register value as CDT T NOM value when the calculated value for        the nominal increment prediction of TRIGGER is less than the register        value."]
        #[inline(always)]
        pub fn ctn_min(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, CtnMin_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, CtnMin_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for CtnMin {
        #[inline(always)]
        fn default() -> CtnMin {
            <crate::RegValueT<CtnMin_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ctrl0_SPEC;
    impl crate::sealed::RegSpec for Ctrl0_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Control Register 0\n resetvalue={Application Reset:0x3BBA57}"]
    pub type Ctrl0 = crate::RegValueT<Ctrl0_SPEC>;

    impl Ctrl0 {
        #[doc = "Multiplier for TRIGGER. stored in an independent shadow register for an active TRIGGER event and for DEN   1. MLT 1 is number of SUB INC1 pulses between two TRIGGER events in normal mode  1...1024   Note  For emergency mode the number of SUB INC1 pulses between two STATE events is calculated by the CPU using the formula MLS1  MLT 1    TNU 1     SNU 1  in order to get the same number of SUB INC1 pulses for FULL SCALE. This value is stored in RAM at 0x05C0. Change of MLT by the CPU must result in the corresponding change of MLS1 by the CPU for SMC 0. Note  The number of MLT events is the binary value plus 1. The value MLT 1 is replaced by MLS1 in the case of SMC 1  see DPLL CTRL 1 register  for all relevant calculations."]
        #[inline(always)]
        pub fn mlt(
            self,
        ) -> crate::common::RegisterField<0, 0x3ff, 1, 0, u16, Ctrl0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3ff,1,0,u16, Ctrl0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input filter position. CROSSREFERENCE stored      in an independent shadow register for an active STATE event and for DEN        1. T he time between two active STATE or      TRIGGER events must be always greater then 23.4   181 s  in addition  the      TS CLK and the resolution must be chosen such that for each nominal      increment  the time stamps at the beginning and the end of the increment      differ at least in the value of 257. Value contains position or time related information."]
        #[inline(always)]
        pub fn ifp(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ctrl0_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ctrl0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "STATE number. For IFP 1  the time between two        active TRIGGER or STATE events must be always greater then 2.34 ms  and        the value x of MLT  MLS1 or MLS2 must be chosen such that the number of        time stamp pulses between two SUB INC events must be less than 65536.        This is fulfilled when x is greater than 256. SNU 1 is number of nominal STATE events in HALF SCALE  1...32 . The number of nominal STATE events is the decimal value plus 1. This          value can only be written when  RMO 0 and SMC 0  or DEN 0. To make          sure that this signal is not changed during a mode change  RMO 0 means          that the status of RMO 0 must be given before and during writing to          the register. Set SSL 00 before changing this value and set RMO 1          only after FULL SCALE with SSL gt 0. This register can only be written when DPLL CTRL 11.STATE EXT is not          set. If DPLL CTRL 11.STATE EXT is set  the signal cannot be written           the read value is zero."]
        #[inline(always)]
        pub fn snu(
            self,
        ) -> crate::common::RegisterField<11, 0x1f, 1, 0, u8, Ctrl0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<11,0x1f,1,0,u8, Ctrl0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TRIGGER number. CROSSREFERENCE TNU 1 is number of nominal TRIGGER events in HALF SCALE  1...512 . Note  The number of nominal TRIGGER events is the decimal value plus 1.This value can only be written when  RMO 1 and SMC 0  or DEN 0. To make sure that this signal is not changed during a mode change RMO 0 means that the status of RMO 0 must be given before and during writing to the register. Set TSL 00 before changing this value and set RMO 0 only after FULL SCALE with TSL gt 0."]
        #[inline(always)]
        pub fn tnu(
            self,
        ) -> crate::common::RegisterField<16, 0x1ff, 1, 0, u16, Ctrl0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x1ff,1,0,u16, Ctrl0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Adapt mode STATE. CROSSREFERENCE Use of adaptation information of STATE."]
        #[inline(always)]
        pub fn ams(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ctrl0_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ctrl0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Adapt mode TRIGGER. CROSSREFERENCE Use of adaptation information of TRIGGER."]
        #[inline(always)]
        pub fn amt(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ctrl0_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ctrl0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input delay STATE. CROSSREFERENCE Use of input delay information transmitted in FT part of the STATE        signal."]
        #[inline(always)]
        pub fn ids(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ctrl0_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ctrl0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input delay TRIGGER. CROSSREFERENCE Use of input delay information transmitted in FT part of the TRIGGER        signal."]
        #[inline(always)]
        pub fn idt(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ctrl0_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ctrl0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "STATE enable"]
        #[inline(always)]
        pub fn sen(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ctrl0_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ctrl0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TRIGGER enable"]
        #[inline(always)]
        pub fn ten(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ctrl0_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ctrl0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reference mode. CROSSREFERENCE CROSSREFERENCE Selection of the relevant input signal for generation of SUB INC1. Double synchronous mode for SMC 1  Signal TRIGGER is used to generate the SUB INC1 signals  and STATE is used to generate the SUB INC2 signals. Note  For SMC 0  TRIGGER and STATE are prepared to calculate SUB INC1. The RMO bit gives a decision only  which of them is used. For changing from normal mode to emergency mode at the following TRIGGER slope  according to the RMO value in the shadow register  CROSSREFERENCE   the PSSC value is calculated by PSSC   PSSM   correction value  forward direction  or PSSC   PSSM   correction value  backward direction  with the correction value   inc cnt1   nmb t. For changing from emergency mode to normal mode at the following STATE slope  according to the RMO value in the shadow register  CROSSREFERENCE   the PSTC value is calculated by PSTC   PSTM   correction value  forward direction  or PSTC   PSTM   correction value  backward direction  with the correction value   inc cnt1   nmb s. In case no further TRIGGER or STATE events the CPU has to perform the above corrections."]
        #[inline(always)]
        pub fn rmo(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ctrl0_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ctrl0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ctrl0 {
        #[inline(always)]
        fn default() -> Ctrl0 {
            <crate::RegValueT<Ctrl0_SPEC> as RegisterValue<_>>::new(3914327)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ctrl0ShadowState_SPEC;
    impl crate::sealed::RegSpec for Ctrl0ShadowState_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Control 0 Shadow STATE Register\n resetvalue={Application Reset:0x0}"]
    pub type Ctrl0ShadowState = crate::RegValueT<Ctrl0ShadowState_SPEC>;

    impl Ctrl0ShadowState {
        #[doc = "Input filter position. Only the values characterized by 1       are stored for an active STATE slope. All other values remain 0. When      DEN 0 the relevant bit values of the original register DPLL CTRL 0 are      transferred without any input event at the next system clock. Value contains position or time related information."]
        #[inline(always)]
        pub fn ifp(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ctrl0ShadowState_SPEC, crate::common::R>
        {
            crate::common::RegisterFieldBool::<10,1,0,Ctrl0ShadowState_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Adapt mode STATE. CROSSREFERENCE Use of adaptation information of STATE."]
        #[inline(always)]
        pub fn ams(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ctrl0ShadowState_SPEC, crate::common::R>
        {
            crate::common::RegisterFieldBool::<25,1,0,Ctrl0ShadowState_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Input delay STATE. CROSSREFERENCE Use of input delay information transmitted in FT part of the STATE        signal."]
        #[inline(always)]
        pub fn ids(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ctrl0ShadowState_SPEC, crate::common::R>
        {
            crate::common::RegisterFieldBool::<27,1,0,Ctrl0ShadowState_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Reference mode. CROSSREFERENCE Selection of the relevant the input signal for generation of SUB INC1."]
        #[inline(always)]
        pub fn rmo(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ctrl0ShadowState_SPEC, crate::common::R>
        {
            crate::common::RegisterFieldBool::<31,1,0,Ctrl0ShadowState_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ctrl0ShadowState {
        #[inline(always)]
        fn default() -> Ctrl0ShadowState {
            <crate::RegValueT<Ctrl0ShadowState_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ctrl0ShadowTrigger_SPEC;
    impl crate::sealed::RegSpec for Ctrl0ShadowTrigger_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Control 0 Shadow Trigger Register\n resetvalue={Application Reset:0x257}"]
    pub type Ctrl0ShadowTrigger = crate::RegValueT<Ctrl0ShadowTrigger_SPEC>;

    impl Ctrl0ShadowTrigger {
        #[doc = "Multiplier for TRIGGER. Only the values characterized by 1       are stored for an active TRIGGER slope. All other values remain 0. When      DEN 0 the relevant bit values of the original register DPLL CTRL 0 are      transferred without any input event at the next system clock. This results      in the above reset value. MLT 1 is number of SUB INC1 pulses between two TRIGGER events in normal        mode  1  8230 1024 ."]
        #[inline(always)]
        pub fn mlt(
            self,
        ) -> crate::common::RegisterField<
            0,
            0x3ff,
            1,
            0,
            u16,
            Ctrl0ShadowTrigger_SPEC,
            crate::common::R,
        > {
            crate::common::RegisterField::<
                0,
                0x3ff,
                1,
                0,
                u16,
                Ctrl0ShadowTrigger_SPEC,
                crate::common::R,
            >::from_register(self, 0)
        }
        #[doc = "Input filter position. CROSSREFERENCE Value contains position or time related information."]
        #[inline(always)]
        pub fn ifp(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ctrl0ShadowTrigger_SPEC, crate::common::R>
        {
            crate::common::RegisterFieldBool::<10,1,0,Ctrl0ShadowTrigger_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Adapt mode TRIGGER. CROSSREFERENCE Use of adaptation information of TRIGGER."]
        #[inline(always)]
        pub fn amt(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ctrl0ShadowTrigger_SPEC, crate::common::R>
        {
            crate::common::RegisterFieldBool::<26,1,0,Ctrl0ShadowTrigger_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Input delay TRIGGER. CROSSREFERENCE Use of input delay information transmitted in FT part of the TRIGGER        signal."]
        #[inline(always)]
        pub fn idt(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ctrl0ShadowTrigger_SPEC, crate::common::R>
        {
            crate::common::RegisterFieldBool::<28,1,0,Ctrl0ShadowTrigger_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Reference mode. CROSSREFERENCE Selection of the relevant the input signal for generation of SUB INC1."]
        #[inline(always)]
        pub fn rmo(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ctrl0ShadowTrigger_SPEC, crate::common::R>
        {
            crate::common::RegisterFieldBool::<31,1,0,Ctrl0ShadowTrigger_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ctrl0ShadowTrigger {
        #[inline(always)]
        fn default() -> Ctrl0ShadowTrigger {
            <crate::RegValueT<Ctrl0ShadowTrigger_SPEC> as RegisterValue<_>>::new(599)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ctrl1_SPEC;
    impl crate::sealed::RegSpec for Ctrl1_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Control Register 1\n resetvalue={Application Reset:0x0B0000000}"]
    pub type Ctrl1 = crate::RegValueT<Ctrl1_SPEC>;

    impl Ctrl1 {
        #[doc = "DPLL mode select. Stored in an independent shadow      register for a valid TRIGGER event and for DEN   1. Stored      in an independent shadow register for a valid STATE event and for DEN   1."]
        #[inline(always)]
        pub fn dmo(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ctrl1_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ctrl1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "DPLL enable. Note   The bits 31 down to 0 of the DPLL STATUS register are cleared  when the DPLL is disabled. Some bits of the control registers can be set only when DEN 0. The protected bits in the DPLL CTRL 1 register cannot be written when simultaneously DEN is set to 1."]
        #[inline(always)]
        pub fn den(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ctrl1_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ctrl1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input direction detection strategy in the case of SMC 0. Note   This bit can only be written when the DPLL is disabled and fixed to zero  when not needed for an implementation. Independent of the value of IDDS is the direction information for TRIGGER in the case SMC 0 always considered at the moment when the inactive slope appears."]
        #[inline(always)]
        pub fn idds(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ctrl1_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ctrl1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Correction strategy in automatic end mode  DMO 0 . CROSSREFERENCE CROSSREFERENCE For SMC RMO 1  COA is used for SUB INC1 and SUB INC2."]
        #[inline(always)]
        pub fn coa(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ctrl1_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ctrl1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Plausibility value PVT to next active TRIGGER is time related. CROSSREFERENCE"]
        #[inline(always)]
        pub fn pit(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ctrl1_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ctrl1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SUB INC1 generator enable. CROSSREFERENCE CROSSREFERENCE"]
        #[inline(always)]
        pub fn sge1(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ctrl1_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ctrl1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Direct Load Mode for SUB INC1 generation. CROSSREFERENCE CROSSREFERENCE"]
        #[inline(always)]
        pub fn dlm1(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ctrl1_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,Ctrl1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Pulse Correction Mode for SUB INC1 generation. CROSSREFERENCE CROSSREFERENCE Bit      is cleared  when transmitted to shadow register."]
        #[inline(always)]
        pub fn pcm1(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ctrl1_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ctrl1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SUB INC2 generator enable. CROSSREFERENCE"]
        #[inline(always)]
        pub fn sge2(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Ctrl1_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<8,1,0,Ctrl1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Direct Load Mode for SUB INC2 generation. CROSSREFERENCE"]
        #[inline(always)]
        pub fn dlm2(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ctrl1_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ctrl1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Pulse Correction Mode for SUB INC2 generation. CROSSREFERENCE CROSSREFERENCE"]
        #[inline(always)]
        pub fn pcm2(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ctrl1_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ctrl1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Synchronization number of STATE. Summarized number of virtual increments in HALF SCALE. Sum of all systematic missing STATE events in HALF SCALE  for SYSF 0  or FULL SCALE  for SYSF 1    the        SYN NS missing STATES can be divided up        to an arbitrary number of blocks. The pattern of events and missing        events in FULL SCALE is shown in RAM region 1c3 as value NS in addition        to the adapted values. The number of stored increments in FULL SCALE        must be equal to 2  SNU 1 SYN NS  for SYSF 0 or 2  SNU 1  SYN NS for        SYSF 1 . This pattern is written by the CPU beginning from a fixed        reference point  maybe beginning of the FULL SCALE region . The relation        to the actual increment is established by setting of the profile RAM        pointer APS 1C3 in an appropriate relation to the RAM pointer APS of the        actual increment by the CPU. This value can only be written when  RMO 0 and SMC 0  or DEN 0. Set        SSL 00 before changing this value and set RMO 1 only after FULL SCALE        with SSL gt 0. To make shure that this signal is not changed during a mode        change SMC 0 means that the status of SMC 0 must be given before and        during writing to the register. This register can only be written when DPLL CTRL 11.STATE EXT is not        set. If DPLL CTRL 11.STATE EXT is set  the signal cannot be written  the        read value is zero."]
        #[inline(always)]
        pub fn syn_ns(
            self,
        ) -> crate::common::RegisterField<11, 0x1f, 1, 0, u8, Ctrl1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<11,0x1f,1,0,u8, Ctrl1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Synchronization numberof TRIGGER. Summarized number of virtual increments in HALF SCALE. Sum of all systematic missing TRIGGER events in HALF SCALE  the SYN NT missing TRIGGER can be divided up to an arbitrary number of blocks. The pattern of        events and missing events in FULL SCALE is shown in RAM region 2c as        value NT in addition to the adapted values. The number of stored        increments in FULL SCALE must be equal to 2  TNU SYN NT . This pattern        is written by the CPU beginning from a fixed reference point  maybe        beginning of the FULL SCALE region . The relation to the actual        increment is established by setting of the profile RAM pointer APT 2C in        an appropriate relation to the RAM pointer APT of the actual increment        by the CPU. This value can only be written when  RMO 1 and SMC 0  or DEN 0. Set        TSL 00 before changing this value and set RMO 0 only after FULL SCALE        with TSL gt 0. To make shure that this signal is not changed during a mode        change SMC 0 means that the status of SMC 0 must be given before and        during writing to the register."]
        #[inline(always)]
        pub fn syn_nt(
            self,
        ) -> crate::common::RegisterField<16, 0x3f, 1, 0, u8, Ctrl1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x3f,1,0,u8, Ctrl1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Locking condition definition. This bit can only be written when the DPLL is disabled and fixed to        zero  when not needed for an implementation."]
        #[inline(always)]
        pub fn lcd(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ctrl1_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ctrl1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Software reset. Resets all register and internal states of the DPLL. Setting the SWR bit results only in a software reset when the DPLL is        not enabled  DEN 0 ."]
        #[inline(always)]
        pub fn swr(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ctrl1_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ctrl1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SYN NS for FULL SCALE. The value SYN NS does mean the sum of all systematic missing STATE events in HALF SCALE  for SYSF 0  or FULL SCALE  for SYSF 1 . This value can only be written when  RMO 0 and SMC 0  or DEN 0. Set        SSL 00 before changing this value  and set RMO 1 only after FULL SCALE        with SSL gt 0. To make sure that this signal is not changed during a mode        change  SMC 0 means that the status of SMC 0 must be given before and        during writing to the register."]
        #[inline(always)]
        pub fn sysf(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ctrl1_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ctrl1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Time stamp high resolution STATE. This bit can only be written when the DPLL is disabled."]
        #[inline(always)]
        pub fn ts0_hrs(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ctrl1_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ctrl1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Time stamp high resolution TRIGGER. This bit can only be written when the DPLL is disabled."]
        #[inline(always)]
        pub fn ts0_hrt(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ctrl1_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ctrl1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Synchronous Motor Control. This bit can only be written when the DPLL is disabled."]
        #[inline(always)]
        pub fn smc(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ctrl1_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ctrl1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "STATE slope select. Definition of active slope for signal STATE  each active slope is an        event defined by SNU. Set by DEN 0 only. If DPLL STATUS.FSD    1   Slope sensitive after detection of first STATE        input signal. If DPLL STATUS.FSD    0  8217   Level sensitive for first STATE input signal        edge. This value can only be written when  RMO 0 and SMC 0  or DEN 0. To          make sure that this signal is not changed during a mode change  SMC 0          means that the status of SMC 0 must be given before and during writing          to the register."]
        #[inline(always)]
        pub fn ssl(
            self,
        ) -> crate::common::RegisterField<28, 0x3, 1, 0, u8, Ctrl1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<28,0x3,1,0,u8, Ctrl1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TRIGGER slope select. Definition of active slope for signal TRIGGER each active slope is an event defined by TNU. Set by DEN 0 only. If DPLL STATUS.FTD    1   slope sensitive after detection of first TRIGGER input signal  If DPLL STATUS.FTD    0   level sensitive for first TRIGGER input signal edge  Note   This value can only be written when  RMO 1 and SMC 0  or DEN 0. To make sure that this signal is not changed during a mode change  SMC 0 means that the status of SMC 0 must be given before and during writing to the register."]
        #[inline(always)]
        pub fn tsl(
            self,
        ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, Ctrl1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<30,0x3,1,0,u8, Ctrl1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ctrl1 {
        #[inline(always)]
        fn default() -> Ctrl1 {
            <crate::RegValueT<Ctrl1_SPEC> as RegisterValue<_>>::new(2952790016)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ctrl11_SPEC;
    impl crate::sealed::RegSpec for Ctrl11_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Control Register 11\n resetvalue={Application Reset:0x0}"]
    pub type Ctrl11 = crate::RegValueT<Ctrl11_SPEC>;

    impl Ctrl11 {
        #[doc = "Simplified increment prediction in normal mode and for the first engine in the case SMC 1. For the first increment after setting SIP1 from 0 to 1  the value of        DT T ACT is replaced by the value of the DT T START register. This        results in a CDT TX value which is equal to DT T START. Please notice        that this DT T Start value must be always  gt  256. The value of SIP1 influences only the increment prediction CDT TX and          when NUTE VTN 1. The calculation of QDT T itself is not influenced by          the SIP1 bit. The value of SIP1 can be only be written when WSIP1 1. When SIP1 1 is set  the first pulses of the subincrement generator are          not generated with highest frequency for the first increment           DPLL STATUS.FTD   0  DPLL CTRL 1.SGE1 1 ."]
        #[inline(always)]
        pub fn sip1(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Error is assumed as zero in normal mode and for the first engine for SMC 1. The calculation of EDT T and MEDT T is performed independently from the        ERZ1 value in all modes without any influence to the MEDT T value        itself. The ERZ1 value influences the use of MEDT T in normal mode and        for SMC 1. The value of ERZ1 can be only written when WERZ1 1."]
        #[inline(always)]
        pub fn erz1(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Pulse correction mode fast for INC CNT1. The fast pulse generation is performed immediately within the current        increment. MPVAL1 must be positive integers for the fast pulse correction mode   in        the case of negative values  the correction is suppressed  and the FPCE         fast pulse correction error  bit in the DPLL STATUS register is set         causing the EI  error interrupt  when enabled. The setting of PCMF1 prevents the transfer of control bits PCM1 to the        corresponding shadow registers with an active input event  and prevents        therefore the distribution of the MPVAL1 values over the current or next        increment. The MPVAL1 pulses are sent with the fast clock CMU CLK0 by        the rapid pulse generator RPCUx  see chapter 18.8.3.6 of specification        v3.0  triggered in the state 6 26 or 18 38 of the state machines  see CROSSREFERENCE           respectively. The INC CNT1 is incremented by MPVAL1  respectively. When taken the MPVAL1 value to RPCUx and INC CNT1  the PCM1 bit is reset        immediately  and after that  also the PCMF1 bit. The value of PCMF1 can        be only written when WPCMF1 1. Be careful when using the fast pulse correction during a direction        change. Because of sending the correction pulses before  during or after        the direction change recognition  the result is typically unpredictable.        No automatic correction of the fast correction pulses is provided. The        necessary corrections must be performed on responsibility of the user."]
        #[inline(always)]
        pub fn pcmf1(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Force Synchronization Loss of LOCK1. The synchronization loss resets SYT SYS and prevents the use of        profiles  respectively. The above described effect for FSYL1 1 is only        active when WFSYL1 1 simultaneously."]
        #[inline(always)]
        pub fn fsyl1(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "INC CNT1 fast correction. The calculation of ADD IN for the SUB INC generation is performed        without adding the 0.5 value to NMB T S in equations DPLL 25 ff. The signal RESET SIGx of the pulse generator is activated for each new        active input slope  in order to reset the register values. The INCF1 value can be only written when WINCF1 1. The INCF1 bit should only be written when DPLL CTRL 1.DEN    0   DPLL          disabled  to prevent generation of wrong number of sub increments."]
        #[inline(always)]
        pub fn incf1(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "No increment of INC CNT1 when PCMF1 active  automatic end mode . The PCMF1 INCCNT B value can be only written when WPCMF1 INCCNT B  1."]
        #[inline(always)]
        pub fn pcmf1_inccnt_b(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Correction of DT T ACTUAL CDT TX nom corr by PD T"]
        #[inline(always)]
        pub fn adt(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ctrl11_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<6,1,0,Ctrl11_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Correction of DT S ACTUAL  CDT SX nom corr by PD S"]
        #[inline(always)]
        pub fn ads(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ctrl11_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<7,1,0,Ctrl11_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Simplified increment prediction in emergency mode and for the second engine in the case RMO 1. For the first increment after setting SIP2 from 0 to 1  the value of        DT S ACT is replaced by the value of the DT S START register. This        results in a CDT SX value which is equal to DT S START. Please notice        that this DT S START value must be always  gt  256. The value of SIP2 influences only the increment prediction and error        accumulation when NUSE VSN 1. The calculation of QDT S itself is not        influenced by the SIP2 bit. The value of SIP2 can be only written when        WSIP2 1."]
        #[inline(always)]
        pub fn sip2(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<8,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Error is assumed as zero in emergency mode and for the second engine for SMC 1. The calculation of EDT S and MEDT S is performed independently from the        ERZ2 value in all modes  without any influence to the MEDT S value        itself. The ERZ2 value influences the use of MEDT S in emergency mode        and for SMC 1 with RMO 1. The value of ERZ2 can be only written when        WERZ2 1."]
        #[inline(always)]
        pub fn erz2(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Pulse correction mode fast for INC CNT2. The fast pulse generation is performed immediately within the current        increment. MPVAL2 must be positive integers for the fast pulse correction mode   in        the case of negative values  the correction is suppressed  and the FPCE         fast pulse correction error  bit in the DPLL STATUS register is set         causing the EI  error interrupt  when enabled. The setting of PCMF2 prevents the transfer of control bits PCM2 to the        corresponding shadow registers with an active input event  and therefore        prevents the distribution of the MPVAL1 values over the current or next        increment. The MPVAL2 pulses are sent with the fast clock CMU CLK0 by        the rapid pulse generator RPCUx  of specification v3.0  triggered in the        state 6 26 or 18 38 of the state machines. The INC CNT2 is incremented        by MPVAL2  respectively. When taken the MPVAL2 value to RPCUx and INC CNT2  the PCM2 bit is reset        immediately  and after that also the PCMF2 bit. The value of PCMF2 can be only written when WPCMF2 1. Be careful when using the fast pulse correction during a direction        change. Because of sending the correction pulses before  during or after        the direction change recognition  the result is typically unpredictable.        No automatic correction of the fast correction pulses is provided. The        necessary corrections must be performed on responsibility of the user."]
        #[inline(always)]
        pub fn pcmf2(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Force Synchronization Loss of LOCK2. The synchronization loss resets SYS and prevents the use of profiles        respectively. The above described effect for FSYL2 1 is only active when        WFSYL2 1 simultaneously."]
        #[inline(always)]
        pub fn fsyl2(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "INC CNT2 fast. The INCF2 value can be only written when WINCF2 1."]
        #[inline(always)]
        pub fn incf2(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<12,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "No increment of INC CNT2 when PCMF2 active  automatic end mode . The PCMF2 INCCNT B value can be only written when WPCMF2 INCCNT B 1."]
        #[inline(always)]
        pub fn pcmf2_inccnt_b(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<13,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use of STATE engine extension. The STATE EXT value can be only written when WSTATE EXT 1 and the DPLL        is disabled. See 18.10 for a further explanation. If this bit shall be        modified during operation  a software reset of the DPLL module is        strongly recommended. A RAM initialisation should also be considered        depending on the given application case."]
        #[inline(always)]
        pub fn state_ext(
            self,
        ) -> crate::common::RegisterFieldBool<14, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<14,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACB use  the ACB values of PMTR are used to decide if an action is in the past. Return ACB values together with actions as zero  when the actions are in        the future  Set ACB 1  1  when calculated position value is in the past and the        ACB 1  of PMTR was 1. Set ACB 0  1  when calculated time value is in the past and the ACB 0         of PMTR was 1. The value of ACBU can be only written when WACBU 1."]
        #[inline(always)]
        pub fn acbu(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write enable for simplified increment prediction 1. Enable writing."]
        #[inline(always)]
        pub fn wsip1(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write enable for error zero 1. Enable writing."]
        #[inline(always)]
        pub fn werz1(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write enable for pulse correction mode fast 1. Enable writing."]
        #[inline(always)]
        pub fn wpcmf1(
            self,
        ) -> crate::common::RegisterFieldBool<18, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<18,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write enable for force synchronization loss 1. Enable writing."]
        #[inline(always)]
        pub fn wfsyl1(
            self,
        ) -> crate::common::RegisterFieldBool<19, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<19,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write enable for INC CNT1 fast. Enable writing."]
        #[inline(always)]
        pub fn wincf1(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write enable of PCMF1 INCCNT B. Enable writing."]
        #[inline(always)]
        pub fn wpcmf1_inccnt_b(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write enable of ADT. Enable writing."]
        #[inline(always)]
        pub fn wadt(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ctrl11_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<22,1,0,Ctrl11_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Write enable of ADS. Enable writing."]
        #[inline(always)]
        pub fn wads(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ctrl11_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<23,1,0,Ctrl11_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Write enable for simplified increment prediction 2. Enable writing."]
        #[inline(always)]
        pub fn wsip2(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write enable for error zero 2. Enable writing."]
        #[inline(always)]
        pub fn werz2(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write enable for pulse correction mode fast 2. Enable writing."]
        #[inline(always)]
        pub fn wpcmf2(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write enable for force synchronization loss 2. Enable writing."]
        #[inline(always)]
        pub fn wfsyl2(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write enable for INC CNT2 fast. Enable writing."]
        #[inline(always)]
        pub fn wincf2(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write enable of PCMF2 INCCNT B"]
        #[inline(always)]
        pub fn wpcmf2_inccnt_b(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write enable of STATE EXT"]
        #[inline(always)]
        pub fn wstate_ext(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write enable for ACB use. The ACB values of PMTR are used to decide whether an action is in the        past. Enable writing."]
        #[inline(always)]
        pub fn wacbu(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ctrl11_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ctrl11_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ctrl11 {
        #[inline(always)]
        fn default() -> Ctrl11 {
            <crate::RegValueT<Ctrl11_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ctrl1ShadowState_SPEC;
    impl crate::sealed::RegSpec for Ctrl1ShadowState_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Control 1 Shadow STATE Register\n resetvalue={Application Reset:0x0}"]
    pub type Ctrl1ShadowState = crate::RegValueT<Ctrl1ShadowState_SPEC>;

    impl Ctrl1ShadowState {
        #[doc = "DPLL mode select. Only the values characterized by 1       are stored for an active STATE slope. All other values remain 0. When      DEN 0 the relevant bit values of the original register DPLL CTRL 1 are      transferred without any input event at the next system clock."]
        #[inline(always)]
        pub fn dmo(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ctrl1ShadowState_SPEC, crate::common::R>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ctrl1ShadowState_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Correction strategy in automatic end mode  DMO 0 . CROSSREFERENCE"]
        #[inline(always)]
        pub fn coa(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ctrl1ShadowState_SPEC, crate::common::R>
        {
            crate::common::RegisterFieldBool::<3,1,0,Ctrl1ShadowState_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "SUB INC1 generator enable. CROSSREFERENCE"]
        #[inline(always)]
        pub fn sge1(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ctrl1ShadowState_SPEC, crate::common::R>
        {
            crate::common::RegisterFieldBool::<5,1,0,Ctrl1ShadowState_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Direct Load Mode for SUB INC1 generation. CROSSREFERENCE"]
        #[inline(always)]
        pub fn dlm1(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ctrl1ShadowState_SPEC, crate::common::R>
        {
            crate::common::RegisterFieldBool::<6,1,0,Ctrl1ShadowState_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Pulse Correction Mode for SUB INC1 generation. CROSSREFERENCE"]
        #[inline(always)]
        pub fn pcm1(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ctrl1ShadowState_SPEC, crate::common::R>
        {
            crate::common::RegisterFieldBool::<7,1,0,Ctrl1ShadowState_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "SUB INC2 generator enable. CROSSREFERENCE"]
        #[inline(always)]
        pub fn sge2(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Ctrl1ShadowState_SPEC, crate::common::R>
        {
            crate::common::RegisterFieldBool::<8,1,0,Ctrl1ShadowState_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Direct Load Mode for SUB INC2 generation. CROSSREFERENCE"]
        #[inline(always)]
        pub fn dlm2(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ctrl1ShadowState_SPEC, crate::common::R>
        {
            crate::common::RegisterFieldBool::<9,1,0,Ctrl1ShadowState_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Pulse Correction Mode for SUB INC2 generation. CROSSREFERENCE"]
        #[inline(always)]
        pub fn pcm2(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ctrl1ShadowState_SPEC, crate::common::R>
        {
            crate::common::RegisterFieldBool::<10,1,0,Ctrl1ShadowState_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ctrl1ShadowState {
        #[inline(always)]
        fn default() -> Ctrl1ShadowState {
            <crate::RegValueT<Ctrl1ShadowState_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ctrl1ShadowTrigger_SPEC;
    impl crate::sealed::RegSpec for Ctrl1ShadowTrigger_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Control 1 Shadow TRIGGER Register\n resetvalue={Application Reset:0x0}"]
    pub type Ctrl1ShadowTrigger = crate::RegValueT<Ctrl1ShadowTrigger_SPEC>;

    impl Ctrl1ShadowTrigger {
        #[doc = "DPLL mode select. Only the values characterized by 1       are stored for an active TRIGGER slope. All other values remain 0. When      DEN 0 the relevant bit values of the original register DPLL CTRL 1 are      transferred without any input event at the next system clock."]
        #[inline(always)]
        pub fn dmo(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ctrl1ShadowTrigger_SPEC, crate::common::R>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ctrl1ShadowTrigger_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Correction strategy in automatic end mode  DMO 0 . CROSSREFERENCE"]
        #[inline(always)]
        pub fn coa(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ctrl1ShadowTrigger_SPEC, crate::common::R>
        {
            crate::common::RegisterFieldBool::<3,1,0,Ctrl1ShadowTrigger_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Plausibility value PVT to next valid TRIGGER is time related. CROSSREFERENCE"]
        #[inline(always)]
        pub fn pit(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ctrl1ShadowTrigger_SPEC, crate::common::R>
        {
            crate::common::RegisterFieldBool::<4,1,0,Ctrl1ShadowTrigger_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "SUB INC1 generator enable. CROSSREFERENCE"]
        #[inline(always)]
        pub fn sge1(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ctrl1ShadowTrigger_SPEC, crate::common::R>
        {
            crate::common::RegisterFieldBool::<5,1,0,Ctrl1ShadowTrigger_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Direct Load Mode for SUB INC1 generation. CROSSREFERENCE"]
        #[inline(always)]
        pub fn dlm1(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ctrl1ShadowTrigger_SPEC, crate::common::R>
        {
            crate::common::RegisterFieldBool::<6,1,0,Ctrl1ShadowTrigger_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Pulse Correction Mode for SUB INC1 generation. CROSSREFERENCE"]
        #[inline(always)]
        pub fn pcm1(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ctrl1ShadowTrigger_SPEC, crate::common::R>
        {
            crate::common::RegisterFieldBool::<7,1,0,Ctrl1ShadowTrigger_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ctrl1ShadowTrigger {
        #[inline(always)]
        fn default() -> Ctrl1ShadowTrigger {
            <crate::RegValueT<Ctrl1ShadowTrigger_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ctrl2_SPEC;
    impl crate::sealed::RegSpec for Ctrl2_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Control Register 2\n resetvalue={Application Reset:0x0}"]
    pub type Ctrl2 = crate::RegValueT<Ctrl2_SPEC>;

    impl Ctrl2 {
        #[doc = "ACTION 7 enable. This bit can be written only if the correspondent WADx bit is set in          the same access. It can be set for debug purposes by CPU also  when          DPLL is disabled. The enable bit becomes active only when the DPLL is          in operation  DEN 1 . For WADi  1  only the corresponding AENi bits are writable. The AENi          bits remain unchanged when the corresponding WADi 0."]
        #[inline(always)]
        pub fn aen0(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Ctrl2_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<8,1,0,Ctrl2_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 7 enable. This bit can be written only if the correspondent WADx bit is set in          the same access. It can be set for debug purposes by CPU also  when          DPLL is disabled. The enable bit becomes active only when the DPLL is          in operation  DEN 1 . For WADi  1  only the corresponding AENi bits are writable. The AENi          bits remain unchanged when the corresponding WADi 0."]
        #[inline(always)]
        pub fn aen1(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ctrl2_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ctrl2_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 7 enable. This bit can be written only if the correspondent WADx bit is set in          the same access. It can be set for debug purposes by CPU also  when          DPLL is disabled. The enable bit becomes active only when the DPLL is          in operation  DEN 1 . For WADi  1  only the corresponding AENi bits are writable. The AENi          bits remain unchanged when the corresponding WADi 0."]
        #[inline(always)]
        pub fn aen2(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ctrl2_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ctrl2_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 7 enable. This bit can be written only if the correspondent WADx bit is set in          the same access. It can be set for debug purposes by CPU also  when          DPLL is disabled. The enable bit becomes active only when the DPLL is          in operation  DEN 1 . For WADi  1  only the corresponding AENi bits are writable. The AENi          bits remain unchanged when the corresponding WADi 0."]
        #[inline(always)]
        pub fn aen3(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ctrl2_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ctrl2_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 7 enable. This bit can be written only if the correspondent WADx bit is set in          the same access. It can be set for debug purposes by CPU also  when          DPLL is disabled. The enable bit becomes active only when the DPLL is          in operation  DEN 1 . For WADi  1  only the corresponding AENi bits are writable. The AENi          bits remain unchanged when the corresponding WADi 0."]
        #[inline(always)]
        pub fn aen4(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, Ctrl2_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<12,1,0,Ctrl2_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 7 enable. This bit can be written only if the correspondent WADx bit is set in          the same access. It can be set for debug purposes by CPU also  when          DPLL is disabled. The enable bit becomes active only when the DPLL is          in operation  DEN 1 . For WADi  1  only the corresponding AENi bits are writable. The AENi          bits remain unchanged when the corresponding WADi 0."]
        #[inline(always)]
        pub fn aen5(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, Ctrl2_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<13,1,0,Ctrl2_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 7 enable. This bit can be written only if the correspondent WADx bit is set in          the same access. It can be set for debug purposes by CPU also  when          DPLL is disabled. The enable bit becomes active only when the DPLL is          in operation  DEN 1 . For WADi  1  only the corresponding AENi bits are writable. The AENi          bits remain unchanged when the corresponding WADi 0."]
        #[inline(always)]
        pub fn aen6(
            self,
        ) -> crate::common::RegisterFieldBool<14, 1, 0, Ctrl2_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<14,1,0,Ctrl2_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 7 enable. This bit can be written only if the correspondent WADx bit is set in          the same access. It can be set for debug purposes by CPU also  when          DPLL is disabled. The enable bit becomes active only when the DPLL is          in operation  DEN 1 . For WADi  1  only the corresponding AENi bits are writable. The AENi          bits remain unchanged when the corresponding WADi 0."]
        #[inline(always)]
        pub fn aen7(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ctrl2_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ctrl2_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 7. For WADx  1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx 0."]
        #[inline(always)]
        pub fn wad0(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ctrl2_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ctrl2_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 7. For WADx  1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx 0."]
        #[inline(always)]
        pub fn wad1(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ctrl2_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ctrl2_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 7. For WADx  1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx 0."]
        #[inline(always)]
        pub fn wad2(
            self,
        ) -> crate::common::RegisterFieldBool<18, 1, 0, Ctrl2_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<18,1,0,Ctrl2_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 7. For WADx  1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx 0."]
        #[inline(always)]
        pub fn wad3(
            self,
        ) -> crate::common::RegisterFieldBool<19, 1, 0, Ctrl2_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<19,1,0,Ctrl2_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 7. For WADx  1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx 0."]
        #[inline(always)]
        pub fn wad4(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ctrl2_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ctrl2_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 7. For WADx  1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx 0."]
        #[inline(always)]
        pub fn wad5(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ctrl2_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ctrl2_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 7. For WADx  1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx 0."]
        #[inline(always)]
        pub fn wad6(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ctrl2_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ctrl2_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 7. For WADx  1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx 0."]
        #[inline(always)]
        pub fn wad7(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ctrl2_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ctrl2_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ctrl2 {
        #[inline(always)]
        fn default() -> Ctrl2 {
            <crate::RegValueT<Ctrl2_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ctrl3_SPEC;
    impl crate::sealed::RegSpec for Ctrl3_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Control Register 3\n resetvalue={Application Reset:0x0}"]
    pub type Ctrl3 = crate::RegValueT<Ctrl3_SPEC>;

    impl Ctrl3 {
        #[doc = "ACTION 15 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen8(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Ctrl3_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<8,1,0,Ctrl3_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 15 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen9(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ctrl3_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ctrl3_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 15 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen10(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ctrl3_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ctrl3_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 15 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen11(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ctrl3_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ctrl3_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 15 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen12(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, Ctrl3_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<12,1,0,Ctrl3_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 15 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen13(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, Ctrl3_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<13,1,0,Ctrl3_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 15 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen14(
            self,
        ) -> crate::common::RegisterFieldBool<14, 1, 0, Ctrl3_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<14,1,0,Ctrl3_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 15 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen15(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ctrl3_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ctrl3_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 15. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad8(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ctrl3_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ctrl3_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 15. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad9(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ctrl3_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ctrl3_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 15. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad10(
            self,
        ) -> crate::common::RegisterFieldBool<18, 1, 0, Ctrl3_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<18,1,0,Ctrl3_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 15. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad11(
            self,
        ) -> crate::common::RegisterFieldBool<19, 1, 0, Ctrl3_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<19,1,0,Ctrl3_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 15. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad12(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ctrl3_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ctrl3_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 15. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad13(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ctrl3_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ctrl3_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 15. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad14(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ctrl3_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ctrl3_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 15. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad15(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ctrl3_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ctrl3_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ctrl3 {
        #[inline(always)]
        fn default() -> Ctrl3 {
            <crate::RegValueT<Ctrl3_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ctrl4_SPEC;
    impl crate::sealed::RegSpec for Ctrl4_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Control Register 4\n resetvalue={Application Reset:0x0}"]
    pub type Ctrl4 = crate::RegValueT<Ctrl4_SPEC>;

    impl Ctrl4 {
        #[doc = "ACTION 23 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen16(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Ctrl4_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<8,1,0,Ctrl4_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 23 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen17(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ctrl4_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ctrl4_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 23 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen18(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ctrl4_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ctrl4_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 23 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen19(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ctrl4_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ctrl4_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 23 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen20(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, Ctrl4_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<12,1,0,Ctrl4_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 23 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen21(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, Ctrl4_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<13,1,0,Ctrl4_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 23 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen22(
            self,
        ) -> crate::common::RegisterFieldBool<14, 1, 0, Ctrl4_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<14,1,0,Ctrl4_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 23 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen23(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ctrl4_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ctrl4_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 23. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad16(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ctrl4_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ctrl4_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 23. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad17(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ctrl4_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ctrl4_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 23. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad18(
            self,
        ) -> crate::common::RegisterFieldBool<18, 1, 0, Ctrl4_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<18,1,0,Ctrl4_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 23. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad19(
            self,
        ) -> crate::common::RegisterFieldBool<19, 1, 0, Ctrl4_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<19,1,0,Ctrl4_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 23. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad20(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ctrl4_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ctrl4_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 23. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad21(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ctrl4_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ctrl4_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 23. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad22(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ctrl4_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ctrl4_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 23. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad23(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ctrl4_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ctrl4_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ctrl4 {
        #[inline(always)]
        fn default() -> Ctrl4 {
            <crate::RegValueT<Ctrl4_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ctrl5_SPEC;
    impl crate::sealed::RegSpec for Ctrl5_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Control Register 5\n resetvalue={Application Reset:0x0}"]
    pub type Ctrl5 = crate::RegValueT<Ctrl5_SPEC>;

    impl Ctrl5 {
        #[doc = "ACTION 31 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen24(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Ctrl5_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<8,1,0,Ctrl5_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 31 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen25(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ctrl5_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Ctrl5_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 31 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen26(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ctrl5_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Ctrl5_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 31 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen27(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ctrl5_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ctrl5_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 31 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen28(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, Ctrl5_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<12,1,0,Ctrl5_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 31 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen29(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, Ctrl5_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<13,1,0,Ctrl5_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 31 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen30(
            self,
        ) -> crate::common::RegisterFieldBool<14, 1, 0, Ctrl5_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<14,1,0,Ctrl5_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "ACTION 31 enable. This bit can be written only if the correspondent WADx bit is set in the        same access. It can be set for debug purposes by CPU also  when DPLL is        disabled. The enable bit becomes active only when the DPLL is in        operation  DEN 1 ."]
        #[inline(always)]
        pub fn aen31(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ctrl5_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ctrl5_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 31. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad24(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ctrl5_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ctrl5_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 31. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad25(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ctrl5_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ctrl5_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 31. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad26(
            self,
        ) -> crate::common::RegisterFieldBool<18, 1, 0, Ctrl5_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<18,1,0,Ctrl5_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 31. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad27(
            self,
        ) -> crate::common::RegisterFieldBool<19, 1, 0, Ctrl5_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<19,1,0,Ctrl5_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 31. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad28(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ctrl5_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ctrl5_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 31. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad29(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ctrl5_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ctrl5_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 31. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad30(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ctrl5_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ctrl5_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit of Action 31. For WADx   1  only the corresponding AENx bits are writable. The AENx        bits remain unchanged when the corresponding WADx   0."]
        #[inline(always)]
        pub fn wad31(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ctrl5_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ctrl5_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ctrl5 {
        #[inline(always)]
        fn default() -> Ctrl5 {
            <crate::RegValueT<Ctrl5_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct CtrlExt_SPEC;
    impl crate::sealed::RegSpec for CtrlExt_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Extension Register for DPLL CTRL\n resetvalue={Application Reset:0x17}"]
    pub type CtrlExt = crate::RegValueT<CtrlExt_SPEC>;

    impl CtrlExt {
        #[doc = "STATE number. This bit can only be written when the DPLL is disabled. The number of nominal STATE events is the decimal value plus 1. This        value can only be written when  RMO 0 and SMC 0  or DEN 0. Set SSL 00        before changing this value and set RMO 1 only after FULL SCALE with        SSL gt 0."]
        #[inline(always)]
        pub fn snu(
            self,
        ) -> crate::common::RegisterField<0, 0x3f, 1, 0, u8, CtrlExt_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3f,1,0,u8, CtrlExt_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Synchronization number of STATE. Summarized number of virtual increments in HALF SCALE. Sum of all systematic missing STATE events in HALF SCALE  for SYSF 0  or FULL SCALE  for SYSF 1    the        SYN NS missing STATES can be divided up to an arbitrary number of blocks. The pattern of        events and missing events in FULL SCALE is shown in RAM region 1c3 as        value NS in addition to the adapted values. The number of stored        increments in FULL SCALE must be equal to 2  SNU 1 SYN NS  for SYSF 0 or        2  SNU 1  SYN NS for SYSF 1 . This pattern is written by the CPU        beginning from a fixed reference point  maybe beginning of the        FULL SCALE region . The relation to the actual increment is established        by setting of the profile RAM pointer APS 1C3 in an appropriate relation        to the RAM pointer APS of the actual increment by the CPU. This value can only be written when the DPLL is disabled. This value can only be written when  RMO 0 and SMC 0  or DEN 0. Set        SSL 00 before changing this value and set RMO 1 only after FULL SCALE        with SSL gt 0."]
        #[inline(always)]
        pub fn syn_ns(
            self,
        ) -> crate::common::RegisterField<16, 0x3f, 1, 0, u8, CtrlExt_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x3f,1,0,u8, CtrlExt_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for CtrlExt {
        #[inline(always)]
        fn default() -> CtrlExt {
            <crate::RegValueT<CtrlExt_SPEC> as RegisterValue<_>>::new(23)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct DpllAcbZ_SPEC;
    impl crate::sealed::RegSpec for DpllAcbZ_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Control Bits Register 0 for up to 32 Actions\n resetvalue={Application Reset:0x0}"]
    pub type DpllAcbZ = crate::RegValueT<DpllAcbZ_SPEC>;

    impl DpllAcbZ {
        #[doc = "Action Control Bits of ACTION z. Reflects ACT D i  52 48   i 4 z. When DPLL CTRL 11.ACBU    0   ACB 0 4 0  are taken as received by ARU        interface and are transmitted unchanged as result of action  PMT         calculation. When DPLL CTRL 11.ACBU    1   ACB 0 4 2  are taken as received by ARU        interface and are transmitted unchanged as result of action  PMT         calculation. ACB 0 1    1  is used as input signal to control if  quot action in past quot         shall be checked based on position information. ACB 0 1  is written to         1  if action channel has reached  quot action in past quot  condition after        action has been calculated  written to  0  if action has not reached         quot past quot  so far. ACB 0 0  is used as input signal to control if  quot action in past quot  shall be        checked based on time information. ACB 0 0  is written to  1  if action        channel has reached  quot action in past quot  condition after action has been        calculated  written to  0  if action has not reached  quot past quot  so far. This value can only be written via AEI interface when the DPLL is        disabled."]
        #[inline(always)]
        pub fn acb_0(
            self,
        ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, DpllAcbZ_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x1f,1,0,u8, DpllAcbZ_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Action Control Bits of ACTION  i   1 . Reflects ACT D i 1  52 48   i 4 z. When DPLL CTRL 11.ACBU    0   ACB 1 4 0  are taken as received by ARU        interface and are transmitted unchanged as result of action  PMT         calculation. When DPLL CTRL 11.ACBU    1   ACB 1 4 2  are taken as received by ARU        interface and are transmitted unchanged as result of action  PMT         calculation.ACB 1 1    1  is used as input signal to control if  quot action        in past quot  shall be checked based on position information. ACB 1 1  is        written to  1  if action channel has reached  quot action in past quot  condition        after action has been calculated  written to  0  if action has not        reached  quot past quot  so far.ACB 1 0  is used as input signal to control if         quot action in past quot  shall be checked based on time information. ACB 1 0  is        written to  1  if action channel has reached  quot action in past quot  condition        after action has been calculated  written to  0  if action has not        reached  quot past quot  so far.This value can only be written via AEI interface        when the DPLL is disabled."]
        #[inline(always)]
        pub fn acb_1(
            self,
        ) -> crate::common::RegisterField<8, 0x1f, 1, 0, u8, DpllAcbZ_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x1f,1,0,u8, DpllAcbZ_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Action Control Bits of ACTION  i   2 . Reflects ACT D i 2  52 48   i 4 z. When DPLL CTRL 11.ACBU    0   ACB 2 4 0  are taken as received by ARU        interface and are transmitted unchanged as result of action  PMT         calculation. When DPLL CTRL 11.ACBU    1   ACB 2 4 2  are taken as received by ARU        interface and are transmitted unchanged as result of action  PMT         calculation. ACB 2 1    1  is used as input signal to control if  quot action in past quot         shall be checked based on position information. ACB 2 1  is written to         1  if action channel has reached  quot action in past quot  condition after        action has been calculated  written to  0  if action has not reached         quot past quot  so far. ACB 2 0  is used as input signal to control if  quot action in past quot  shall be        checked based on time information. ACB 2 0  is written to  1  if action        channel has reached  quot action in past quot  condition after action has been        calculated  written to  0  if action has not reached  quot past quot  so far. This value can only be written via AEI interface when the DPLL is        disabled."]
        #[inline(always)]
        pub fn acb_2(
            self,
        ) -> crate::common::RegisterField<16, 0x1f, 1, 0, u8, DpllAcbZ_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x1f,1,0,u8, DpllAcbZ_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Action Control Bits of ACTION  i   3 . Reflects ACT D i 3  52 48   i 4 z. When DPLL CTRL 11.ACBU    0   ACB 3 4 0  are taken as received by ARU        interface and are transmitted unchanged as result of action  PMT         calculation. When DPLL CTRL 11.ACBU    1   ACB 3 4 2  are taken as received by ARU        interface and are transmitted unchanged as result of action  PMT         calculation. ACB 3 1    1  is used as input signal to control if  quot action in past quot         shall be checked based on position information. ACB 3 1  is written to         1  if action channel has reached  quot action in past quot  condition after        action has been calculated  written to  0  if action has not reached         quot past quot  so far. ACB 3 0  is used as input signal to control if  quot action in past quot  shall be        checked based on time information. ACB 3 0  is written to  1  if action        channel has reached  quot action in past quot  condition after action has been        calculated  written to  0  if action has not reached  quot past quot  so far. This value can only be written via AEI interface when the DPLL is        disabled."]
        #[inline(always)]
        pub fn acb_3(
            self,
        ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, DpllAcbZ_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x1f,1,0,u8, DpllAcbZ_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for DpllAcbZ {
        #[inline(always)]
        fn default() -> DpllAcbZ {
            <crate::RegValueT<DpllAcbZ_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct DpllAdtSi_SPEC;
    impl crate::sealed::RegSpec for DpllAdtSi_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Adapt and Profile Values of the STATE 0 Increments in FULL SCALE\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type DpllAdtSi = crate::RegValueT<DpllAdtSi_SPEC>;

    impl DpllAdtSi {
        #[doc = "Physical deviation of STATE. Adapt values for each STATE increment in        FULL SCALE  sint16   This value represents the number of pulses to be added to the        correspondent nominal increment. The absolute value of a negative PD S        must not exceed MLS1 or MLS2 respectively. The PD value does mean the        number of SUB INC1 pulses per nominal tooth to be added to        NS   MLS1 2 1    PD S"]
        #[inline(always)]
        pub fn pd_s(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, DpllAdtSi_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, DpllAdtSi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Number of STATEs. Number of nominal STATE parts in the corresponding increment. There are 2  SNU 1 SYN NS  entries for SYSF 0 or 2  SNU 1  SYN NS        entries for SYSF 1 respectively."]
        #[inline(always)]
        pub fn ns(
            self,
        ) -> crate::common::RegisterField<16, 0x3f, 1, 0, u8, DpllAdtSi_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x3f,1,0,u8, DpllAdtSi_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for DpllAdtSi {
        #[inline(always)]
        fn default() -> DpllAdtSi {
            <crate::RegValueT<DpllAdtSi_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct DpllDlAi_SPEC;
    impl crate::sealed::RegSpec for DpllDlAi_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL ACTION 0 Time to React before PSAi\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1A:0x0}"]
    pub type DpllDlAi = crate::RegValueT<DpllDlAi_SPEC>;

    impl DpllDlAi {
        #[doc = "Time to react before the corresponding position value of a desired action i is reached. In the case of LOW RES 1  see CROSSREFERENCE       this delay value must be also given as low resolution value. This value can only be written when the DPLL is disabled."]
        #[inline(always)]
        pub fn dla(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, DpllDlAi_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, DpllDlAi_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for DpllDlAi {
        #[inline(always)]
        fn default() -> DpllDlAi {
            <crate::RegValueT<DpllDlAi_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct DpllDtAi_SPEC;
    impl crate::sealed::RegSpec for DpllDtAi_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Calculated Relative TIME to ACTION 0\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1A:0x0}"]
    pub type DpllDtAi = crate::RegValueT<DpllDtAi_SPEC>;

    impl DpllDtAi {
        #[doc = "Calculated relative time to ACTION i. This value can only be written when the DPLL is disabled. The DTA value    is a positive integer value. When calculations using equations DPLL 12    or DPLL 14 result in a negative value  it is replaced by zero."]
        #[inline(always)]
        pub fn dta(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, DpllDtAi_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, DpllDtAi_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for DpllDtAi {
        #[inline(always)]
        fn default() -> DpllDtAi {
            <crate::RegValueT<DpllDtAi_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct DpllDtSi_SPEC;
    impl crate::sealed::RegSpec for DpllDtSi_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Nominal STATE 0 Increment Duration in FULL SCALE\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type DpllDtSi = crate::RegValueT<DpllDtSi_SPEC>;

    impl DpllDtSi {
        #[doc = "Difference time of STATE. Nominal increment duration values for each STATE increment in FULL SCALE  considering no gap . There are 2  SNU 1 SYN NS  entries for SYSF 0 or 2  SNU 1  SYN NS        entries for SYSF 1 respectively."]
        #[inline(always)]
        pub fn dt_s(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, DpllDtSi_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, DpllDtSi_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for DpllDtSi {
        #[inline(always)]
        fn default() -> DpllDtSi {
            <crate::RegValueT<DpllDtSi_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct DpllIdPmtrZ_SPEC;
    impl crate::sealed::RegSpec for DpllIdPmtrZ_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL ID Information for Input Signal PMT 0 Register\n resetvalue={Application Reset:0x1FE}"]
    pub type DpllIdPmtrZ = crate::RegValueT<DpllIdPmtrZ_SPEC>;

    impl DpllIdPmtrZ {
        #[doc = "ID information to the input signal PMTR z  from the ARU. This value can only be written when the action  z  is disabled by the        correspondent bit AENz 0 of the registers DPLL CTRL 2  ...5         respectively  or when the DPLL is disabled  DEN 0 ."]
        #[inline(always)]
        pub fn id_pmtr_x(
            self,
        ) -> crate::common::RegisterField<0, 0x1ff, 1, 0, u16, DpllIdPmtrZ_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x1ff,1,0,u16, DpllIdPmtrZ_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for DpllIdPmtrZ {
        #[inline(always)]
        fn default() -> DpllIdPmtrZ {
            <crate::RegValueT<DpllIdPmtrZ_SPEC> as RegisterValue<_>>::new(510)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct DpllNAi_SPEC;
    impl crate::sealed::RegSpec for DpllNAi_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Calculated Number of TRIGGER STATE Increments to ACTION 0\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1A:0x0}"]
    pub type DpllNAi = crate::RegValueT<DpllNAi_SPEC>;

    impl DpllNAi {
        #[doc = "Number of events to Action i  fractional part . The NA values for actions 24...31 are only available for device 4 or 5. This value can only be written when the DPLL is disabled."]
        #[inline(always)]
        pub fn db(
            self,
        ) -> crate::common::RegisterField<0, 0x3ff, 1, 0, u16, DpllNAi_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3ff,1,0,u16, DpllNAi_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Number of events to Action i  integer part . Use the maximum value for NA DW 0x3FF in the case of a calculated value    which exceeds the represent able value. This value can only be written when the DPLL is disabled."]
        #[inline(always)]
        pub fn dw(
            self,
        ) -> crate::common::RegisterField<10, 0x3ff, 1, 0, u16, DpllNAi_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3ff,1,0,u16, DpllNAi_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for DpllNAi {
        #[inline(always)]
        fn default() -> DpllNAi {
            <crate::RegValueT<DpllNAi_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct DpllPdtZ_SPEC;
    impl crate::sealed::RegSpec for DpllPdtZ_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Projected Increment Sum Relations for Action 0\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type DpllPdtZ = crate::RegValueT<DpllPdtZ_SPEC>;

    impl DpllPdtZ {
        #[doc = "Fractional part of relation between TRIGGER or STATE increments"]
        #[inline(always)]
        pub fn db(
            self,
        ) -> crate::common::RegisterField<0, 0x3fff, 1, 0, u16, DpllPdtZ_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3fff,1,0,u16, DpllPdtZ_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Integer part of relation between TRIGGER or STATE increments. Definition of relation values between TRIGGER or STATE increments PDT i  according to        Equations DPLL 11 or DPLL 13  i   0 31 . . The        PDT z  values for actions i 24...31 are not available for all devices. The PDT i  values for actions i 24...31 are only available for device 4        or 5."]
        #[inline(always)]
        pub fn dw(
            self,
        ) -> crate::common::RegisterField<14, 0x3ff, 1, 0, u16, DpllPdtZ_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<14,0x3ff,1,0,u16, DpllPdtZ_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for DpllPdtZ {
        #[inline(always)]
        fn default() -> DpllPdtZ {
            <crate::RegValueT<DpllPdtZ_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct DpllPsaCz_SPEC;
    impl crate::sealed::RegSpec for DpllPsaCz_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL ACTION Position Value Action 0 Request Register\n resetvalue={Application Reset:0x7FFFFF}"]
    pub type DpllPsaCz = crate::RegValueT<DpllPsaCz_SPEC>;

    impl DpllPsaCz {
        #[doc = "Calculated position value for the start of ACTION z in normal or emergency mode according to equations DPLL 17 or DPLL 20  respectively. This value can only be written when the DPLL is disabled."]
        #[inline(always)]
        pub fn psac(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, DpllPsaCz_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, DpllPsaCz_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for DpllPsaCz {
        #[inline(always)]
        fn default() -> DpllPsaCz {
            <crate::RegValueT<DpllPsaCz_SPEC> as RegisterValue<_>>::new(8388607)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct DpllPsAi_SPEC;
    impl crate::sealed::RegSpec for DpllPsAi_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL ACTION 0 Position Value Request\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1A:0x0}"]
    pub type DpllPsAi = crate::RegValueT<DpllPsAi_SPEC>;

    impl DpllPsAi {
        #[doc = "Position information of a desired action i. This value can only be written when the DPLL is disabled. The PSA values for actions 24...31 are not available for all devices but        depends on specific product configuration."]
        #[inline(always)]
        pub fn psa(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, DpllPsAi_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, DpllPsAi_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for DpllPsAi {
        #[inline(always)]
        fn default() -> DpllPsAi {
            <crate::RegValueT<DpllPsAi_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct DpllRdtSi_SPEC;
    impl crate::sealed::RegSpec for DpllRdtSi_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Reciprocal Values of the Nominal STATE 0 Increment Duration in FULL SCALE\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type DpllRdtSi = crate::RegValueT<DpllRdtSi_SPEC>;

    impl DpllRdtSi {
        #[doc = "Reciprocal difference time of STATE. Nominal reciprocal value of the number of time stamp clocks measured in        the corresponding increment  2 32 while only the lower 24 bits are used  no gap considered. The LSB is        rounded up when the next truncated bit is 1. There are 2  SNU 1 SYN NS  entries for SYSF 0 or 2  SNU 1  SYN NS        entries for SYSF 1 respectively."]
        #[inline(always)]
        pub fn rdt_s(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, DpllRdtSi_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, DpllRdtSi_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for DpllRdtSi {
        #[inline(always)]
        fn default() -> DpllRdtSi {
            <crate::RegValueT<DpllRdtSi_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct DpllTsaCz_SPEC;
    impl crate::sealed::RegSpec for DpllTsaCz_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Calculated Time Value to start Action 0 Register\n resetvalue={Application Reset:0x7FFFFF}"]
    pub type DpllTsaCz = crate::RegValueT<DpllTsaCz_SPEC>;

    impl DpllTsaCz {
        #[doc = "Calculated time stamp for ACTION z. This value can only be written when the DPLL is disabled."]
        #[inline(always)]
        pub fn tsac(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, DpllTsaCz_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, DpllTsaCz_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for DpllTsaCz {
        #[inline(always)]
        fn default() -> DpllTsaCz {
            <crate::RegValueT<DpllTsaCz_SPEC> as RegisterValue<_>>::new(8388607)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct DpllTsfSi_SPEC;
    impl crate::sealed::RegSpec for DpllTsfSi_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Time Stamp Values of the Nominal STATE 0 Events in FULL SCALE\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type DpllTsfSi = crate::RegValueT<DpllTsfSi_SPEC>;

    impl DpllTsfSi {
        #[doc = "Time stamp field of STATE. Time stamp value of each active STATE event. There are 2   SNU 1  entries."]
        #[inline(always)]
        pub fn tsf_s(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, DpllTsfSi_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, DpllTsfSi_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for DpllTsfSi {
        #[inline(always)]
        fn default() -> DpllTsfSi {
            <crate::RegValueT<DpllTsfSi_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct DtSAct_SPEC;
    impl crate::sealed::RegSpec for DtSAct_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Duration of the Last STATE Increment\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type DtSAct = crate::RegValueT<DtSAct_SPEC>;

    impl DtSAct {
        #[doc = "Calculated duration of the last STATE increment. Calculated increment duration. Value will be written into the        corresponding RAM field  when all calculations for the considered        increment are done and APS is valid."]
        #[inline(always)]
        pub fn dt_s_act(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, DtSAct_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, DtSAct_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for DtSAct {
        #[inline(always)]
        fn default() -> DtSAct {
            <crate::RegValueT<DtSAct_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct DtSStart_SPEC;
    impl crate::sealed::RegSpec for DtSStart_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Start Value of DPLL DT S ACT for the First Increment after SIP2 is Set to 1\n resetvalue={Application Reset:0x101}"]
    pub type DtSStart = crate::RegValueT<DtSStart_SPEC>;

    impl DtSStart {
        #[doc = "Start value of DPLL DT S ACT for the first increment after SIP2 is set to 1. For the first increment after setting SIP2 from 0 to 1  the value of        DPLL DT S START is taken instead of the calculated DPLL DT S ACT for the        current increment duration. This value should be always  gt  256 in order        to avoid an overflow during the calculation of DPLL RDT S ACT."]
        #[inline(always)]
        pub fn dpll_dt_s_start(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, DtSStart_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, DtSStart_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for DtSStart {
        #[inline(always)]
        fn default() -> DtSStart {
            <crate::RegValueT<DtSStart_SPEC> as RegisterValue<_>>::new(257)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct DtTAct_SPEC;
    impl crate::sealed::RegSpec for DtTAct_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Duration of the Last TRIGGER Increment\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type DtTAct = crate::RegValueT<DtTAct_SPEC>;

    impl DtTAct {
        #[doc = "Calculated duration of the last TRIGGER increment. Calculated duration of the last increment  Value will be written into        the corresponding RAM field  when all calculations for the considered        increment are done and APT is valid."]
        #[inline(always)]
        pub fn dt_t_act(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, DtTAct_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, DtTAct_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for DtTAct {
        #[inline(always)]
        fn default() -> DtTAct {
            <crate::RegValueT<DtTAct_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct DtTStart_SPEC;
    impl crate::sealed::RegSpec for DtTStart_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Start Value of DPLL DT T ACT for the First Increment after SIP1 is Set to 1\n resetvalue={Application Reset:0x101}"]
    pub type DtTStart = crate::RegValueT<DtTStart_SPEC>;

    impl DtTStart {
        #[doc = "Start value of DPLL DT T ACT for the first increment after SIP1 is set to 1. For the first increment after setting SIP1 from 0 to 1  the value of        DPLL DT T START is taken instead of the calculated DPLL DT T ACT for the        current increment duration. This value should be always  gt  256 in order        to avoid an overflow during the calculation of DPLL RDT T ACT."]
        #[inline(always)]
        pub fn dpll_dt_t_start(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, DtTStart_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, DtTStart_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for DtTStart {
        #[inline(always)]
        fn default() -> DtTStart {
            <crate::RegValueT<DtTStart_SPEC> as RegisterValue<_>>::new(257)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct EdtS_SPEC;
    impl crate::sealed::RegSpec for EdtS_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Difference of Prediction to Actual Value of the Last STATE Increment\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type EdtS = crate::RegValueT<EdtS_SPEC>;

    impl EdtS {
        #[doc = "Signed difference between actual value and prediction of the last STATE increment  sint24. Calculated error value  see CROSSREFERENCE ."]
        #[inline(always)]
        pub fn edt_s(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, EdtS_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, EdtS_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for EdtS {
        #[inline(always)]
        fn default() -> EdtS {
            <crate::RegValueT<EdtS_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct EdtT_SPEC;
    impl crate::sealed::RegSpec for EdtT_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Difference of Prediction to Actual Value of the Last TRIGGER Increment\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type EdtT = crate::RegValueT<EdtT_SPEC>;

    impl EdtT {
        #[doc = "Signed difference between actual value and a simple prediction of the last TRIGGER increment  sint24. Calculated error value."]
        #[inline(always)]
        pub fn edt_t(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, EdtT_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, EdtT_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for EdtT {
        #[inline(always)]
        fn default() -> EdtT {
            <crate::RegValueT<EdtT_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct EirqEn_SPEC;
    impl crate::sealed::RegSpec for EirqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type EirqEn = crate::RegValueT<EirqEn_SPEC>;

    impl EirqEn {
        #[doc = "DPLL disable interrupt enable  when switch off of the DEN bit"]
        #[inline(always)]
        pub fn pdi_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "DPLL enable interrupt enable  when switch on of the DEN bit"]
        #[inline(always)]
        pub fn pei_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TRIGGER minimum hold time violation interrupt enable bit"]
        #[inline(always)]
        pub fn tini_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TRIGGER maximum hold time violation interrupt enable bit"]
        #[inline(always)]
        pub fn taxi_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "STATE inactive slope interrupt enable bit"]
        #[inline(always)]
        pub fn sisi_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TRIGGER inactive slope interrupt enable bit"]
        #[inline(always)]
        pub fn tisi_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Missing STATE interrupt enable"]
        #[inline(always)]
        pub fn msi_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Missing TRIGGER interrupt enable"]
        #[inline(always)]
        pub fn mti_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "STATE active slope interrupt enable"]
        #[inline(always)]
        pub fn sasi_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<8,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TRIGGER active slope interrupt enable"]
        #[inline(always)]
        pub fn tasi_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Plausibility window  PVT  violation interrupt of TRIGGER enable"]
        #[inline(always)]
        pub fn pwi_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "RAM write access to RAM region 2 interrupt enable"]
        #[inline(always)]
        pub fn w2i_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write access to RAM region 1b or 1c interrupt"]
        #[inline(always)]
        pub fn w1i_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<12,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Get of lock interrupt enable  when lock arises"]
        #[inline(always)]
        pub fn gl1i_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<13,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Loss of lock interrupt enable"]
        #[inline(always)]
        pub fn ll1i_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<14, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<14,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Error interrupt enable  see status register"]
        #[inline(always)]
        pub fn ei_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Get of lock interrupt enable for SUB INC2"]
        #[inline(always)]
        pub fn gl2i_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Loss of lock interrupt enable for SUB INC2"]
        #[inline(always)]
        pub fn ll2i_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TRIGGER event interrupt 0 enable"]
        #[inline(always)]
        pub fn te0i_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<18, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<18,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TRIGGER event interrupt 1 enable"]
        #[inline(always)]
        pub fn te1i_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<19, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<19,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TRIGGER event interrupt 2 enable"]
        #[inline(always)]
        pub fn te2i_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TRIGGER event interrupt 3 enable"]
        #[inline(always)]
        pub fn te3i_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TRIGGER event interrupt 4 enable"]
        #[inline(always)]
        pub fn te4i_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable interrupt when calculation of TRIGGER duration done"]
        #[inline(always)]
        pub fn cdti_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable interrupt when calculation of TRIGGER duration done"]
        #[inline(always)]
        pub fn cdsi_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TRIGGER out of range interrupt"]
        #[inline(always)]
        pub fn tori_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "STATE out of range"]
        #[inline(always)]
        pub fn sori_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Direction change interrupt"]
        #[inline(always)]
        pub fn dcgi_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for EirqEn {
        #[inline(always)]
        fn default() -> EirqEn {
            <crate::RegValueT<EirqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct FtvS_SPEC;
    impl crate::sealed::RegSpec for FtvS_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Actual STATE Filter Value\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type FtvS = crate::RegValueT<FtvS_SPEC>;

    impl FtvS {
        #[doc = "Filter value of the last active STATE input. transmitted filter value The LSB address is determined using the SWON S value in the OSW register         see CROSSREFERENCE  ."]
        #[inline(always)]
        pub fn state_ft(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, FtvS_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, FtvS_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for FtvS {
        #[inline(always)]
        fn default() -> FtvS {
            <crate::RegValueT<FtvS_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct FtvT_SPEC;
    impl crate::sealed::RegSpec for FtvT_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Actual TRIGGER Filter Value\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type FtvT = crate::RegValueT<FtvT_SPEC>;

    impl FtvT {
        #[doc = "Filter value of the last active TRIGGER input. Transmitted filter value. The LSB address is determined using the SWON T value in the OSW register         see CROSSREFERENCE  ."]
        #[inline(always)]
        pub fn trigger_ft(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, FtvT_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, FtvT_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for FtvT {
        #[inline(always)]
        fn default() -> FtvT {
            <crate::RegValueT<FtvT_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Incf1Offset_SPEC;
    impl crate::sealed::RegSpec for Incf1Offset_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Start Value of the ADD IN ADDER1 Register\n resetvalue={Application Reset:0x0}"]
    pub type Incf1Offset = crate::RegValueT<Incf1Offset_SPEC>;

    impl Incf1Offset {
        #[doc = "Start value of the ADD IN ADDER1. In the case of set DPLL CTRL 11 INCF1 the ADD IN ADDER1 starts always        after an active new input event  TRIGGER in normal mode or STATE in        emergency mode respectively  with this offset value. In the case of        choosing DPLL INCF1 OFFSET  0xFFFFFF the generation of the first        SUB INC1 pulse is performed with the next TS CLK. In the case of        DPLL INCF1 OFFSET  0x000000 the first pulse is delayed by a full        SUB INC1 period and in the case of DPLL INCF1 OFFSET  0x7FFFFF the first        pulse is delayed by a half SUB INC1 period. Any other value is possible."]
        #[inline(always)]
        pub fn dpll_incf1_offset(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Incf1Offset_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                0,
                0xffffff,
                1,
                0,
                u32,
                Incf1Offset_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
    }
    impl core::default::Default for Incf1Offset {
        #[inline(always)]
        fn default() -> Incf1Offset {
            <crate::RegValueT<Incf1Offset_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Incf2Offset_SPEC;
    impl crate::sealed::RegSpec for Incf2Offset_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Start Value of the ADD IN ADDER2 Register\n resetvalue={Application Reset:0x0}"]
    pub type Incf2Offset = crate::RegValueT<Incf2Offset_SPEC>;

    impl Incf2Offset {
        #[doc = "Start value of the ADD IN ADDER2. In the case of set DPLL CTRL 11 INCF2 the ADD IN ADDER2 starts always        after an active new input event  STATE  with this offset value. In the        case of choosing DPLL INCF2 OFFSET  0xFFFFFF the generation of the first        SUB INC2 pulse is performed with the next TS CLK. In the case of        DPLL INCF2 OFFSET  0x000000 the first pulse is delayed by a full        SUB INC2 period and in the case of DPLL INCF2 OFFSET  0x7FFFFF the first        pulse is delayed by a half SUB INC2 period. Any other value is possible."]
        #[inline(always)]
        pub fn dpll_incf2_offset(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Incf2Offset_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                0,
                0xffffff,
                1,
                0,
                u32,
                Incf2Offset_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
    }
    impl core::default::Default for Incf2Offset {
        #[inline(always)]
        fn default() -> Incf2Offset {
            <crate::RegValueT<Incf2Offset_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct IncCnt1_SPEC;
    impl crate::sealed::RegSpec for IncCnt1_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Counter for Pulses for TBU CH1 BASE to be Sent in Automatic End Mode\n resetvalue={Application Reset:0x0}"]
    pub type IncCnt1 = crate::RegValueT<IncCnt1_SPEC>;

    impl IncCnt1 {
        #[doc = "Actual number of pulses to be still sent out at the current increment until the next active input signal in automatic end mode. Automatic addition of the number of demanded pulses MLT MLS1 when        getting an active TRIGGER   STATE input in normal or emergency mode respectively when        SGE1 1  writeable only for test purposes when DEN 0. In the case of a change of the direction the wrong number of pulses are        corrected twice  Add the difference between NMB T and INC CNT1 twice to INC CNT1 before        sending out the correction pulses. This value can only be written when the DPLL is disabled."]
        #[inline(always)]
        pub fn inc_cnt1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, IncCnt1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, IncCnt1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for IncCnt1 {
        #[inline(always)]
        fn default() -> IncCnt1 {
            <crate::RegValueT<IncCnt1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct IncCnt1Mask_SPEC;
    impl crate::sealed::RegSpec for IncCnt1Mask_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL INC CNT1 Trigger Mask\n resetvalue={Application Reset:0x0}"]
    pub type IncCnt1Mask = crate::RegValueT<IncCnt1Mask_SPEC>;

    impl IncCnt1Mask {
        #[doc = "Notify value for INC CNT1 of register DPLL INC CNT1. The INC CNT1 NOTIFY is representing a trigger mask of        DPLL INC CNT1.INC CNT1. When DPLL INC CNT1.INC CNT1 reaches the value of        INC CNT1 NOTIFY the flag DPLL STA FLAG.INC CNT1 FLAG is set to  1  when        DPLL INC CNT1.INC CNT1 is leaving the state INC CNT1 NOTIFY."]
        #[inline(always)]
        pub fn inc_cnt1_notify(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, IncCnt1Mask_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                0,
                0xffffff,
                1,
                0,
                u32,
                IncCnt1Mask_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
    }
    impl core::default::Default for IncCnt1Mask {
        #[inline(always)]
        fn default() -> IncCnt1Mask {
            <crate::RegValueT<IncCnt1Mask_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct IncCnt2_SPEC;
    impl crate::sealed::RegSpec for IncCnt2_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Counter for Pulses for TBU TS2 to be Sent in Automatic End Mode\n resetvalue={Application Reset:0x0}"]
    pub type IncCnt2 = crate::RegValueT<IncCnt2_SPEC>;

    impl IncCnt2 {
        #[doc = "Actual number of pulses to be still sent out at the current increment until the next active input signal in automatic end mode. Automatic addition of the number of demanded pulses MLS2 when getting an        active TRIGGER   STATE input in normal or emergency mode respectively when        SGE2 1   writeable only for test purposes when DEN 0  In the case of a change of the direction the wrong number of pulses are        corrected twice  Add the difference between NMB S and INC CNT2 twice to INC CNT2 before        sending out the correction pulses. This value can only be written when the DPLL is disabled."]
        #[inline(always)]
        pub fn inc_cnt2(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, IncCnt2_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, IncCnt2_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for IncCnt2 {
        #[inline(always)]
        fn default() -> IncCnt2 {
            <crate::RegValueT<IncCnt2_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct IncCnt2Mask_SPEC;
    impl crate::sealed::RegSpec for IncCnt2Mask_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL INC CNT2 Trigger Mask\n resetvalue={Application Reset:0x0}"]
    pub type IncCnt2Mask = crate::RegValueT<IncCnt2Mask_SPEC>;

    impl IncCnt2Mask {
        #[doc = "Notify value for INC CNT2 of register DPLL INC CNT2. The INC CNT2 NOTIFY is representing a trigger mask of        DPLL INC CNT2.INC CNT2. When DPLL INC CNT2.INC CNT2 reaches the value of        INC CNT2 NOTIFY the flag DPLL STA FLAG.INC CNT2 FLAG is set to  1  when        DPLL INC CNT2.INC CNT2 is leaving the state INC CNT2 NOTIFY."]
        #[inline(always)]
        pub fn inc_cnt2_notify(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, IncCnt2Mask_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                0,
                0xffffff,
                1,
                0,
                u32,
                IncCnt2Mask_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
    }
    impl core::default::Default for IncCnt2Mask {
        #[inline(always)]
        fn default() -> IncCnt2Mask {
            <crate::RegValueT<IncCnt2Mask_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct MedtS_SPEC;
    impl crate::sealed::RegSpec for MedtS_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Weighted Difference of Prediction Errors of STATE\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type MedtS = crate::RegValueT<MedtS_SPEC>;

    impl MedtS {
        #[doc = "Signed middle weighted difference between actual value and prediction of the last STATE increments  sint24  only calculated for SYS 1. Calculated medium error value  see CROSSREFERENCE . The value is calculated only after synchronization  SYS 1   and the        update is suppressed for one increment when an unexpected missing STATE        is detected."]
        #[inline(always)]
        pub fn medt_s(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, MedtS_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, MedtS_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for MedtS {
        #[inline(always)]
        fn default() -> MedtS {
            <crate::RegValueT<MedtS_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct MedtT_SPEC;
    impl crate::sealed::RegSpec for MedtT_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Weighted Difference of Prediction Errors of TRIGGER\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type MedtT = crate::RegValueT<MedtT_SPEC>;

    impl MedtT {
        #[doc = "Signed middle weighted difference between actual value and prediction of the last TRIGGER increments  sint24. Only calculated for SYT 1. Calculated medium error value  see CROSSREFERENCE . The value is calculated only after synchronization  SYT 1   and the        update is suppressed for one increment when an unexpected missing        TRIGGER is detected."]
        #[inline(always)]
        pub fn medt_t(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, MedtT_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, MedtT_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for MedtT {
        #[inline(always)]
        fn default() -> MedtT {
            <crate::RegValueT<MedtT_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mls1_SPEC;
    impl crate::sealed::RegSpec for Mls1_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Calculated Number of Sub Pulses between two Nominal STATE Events for SMC   0\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type Mls1 = crate::RegValueT<Mls1_SPEC>;

    impl Mls1 {
        #[doc = "Number of pulses between two STATE events. For SMC 0 the value of MLS1 is calculated once by the CPU for fixed        values in the DPLL CTRL 0 register by the formula MLS1            MLT 1   TNU 1   SNU 1   and set accordingly. For SMC 1 the value of MLS1 represents the number of pulses between two        nominal TRIGGER events  to be set and        updated by the CPU ."]
        #[inline(always)]
        pub fn mls1(
            self,
        ) -> crate::common::RegisterField<0, 0x3ffff, 1, 0, u32, Mls1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3ffff,1,0,u32, Mls1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mls1 {
        #[inline(always)]
        fn default() -> Mls1 {
            <crate::RegValueT<Mls1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mls2_SPEC;
    impl crate::sealed::RegSpec for Mls2_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Calculated Number of Sub Pulses between two Nominal STATE Events for SMC   1 and RMO   1\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type Mls2 = crate::RegValueT<Mls2_SPEC>;

    impl Mls2 {
        #[doc = "Number of pulses between two STATE events  to be set and updated by the CPU . Using adapt information and the missing STATE event information SYN S  this value can be corrected for each increment        automatically."]
        #[inline(always)]
        pub fn mls2(
            self,
        ) -> crate::common::RegisterField<0, 0x3ffff, 1, 0, u32, Mls2_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3ffff,1,0,u32, Mls2_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mls2 {
        #[inline(always)]
        fn default() -> Mls2 {
            <crate::RegValueT<Mls2_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mpval1_SPEC;
    impl crate::sealed::RegSpec for Mpval1_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Missing Pulses to be Added or Subtracted Directly 1\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type Mpval1 = crate::RegValueT<Mpval1_SPEC>;

    impl Mpval1 {
        #[doc = "Missing pulses for direct correction of SUB INC1 pulses by the CPU  sint16 . Used only for RMO 0 or SMC 1 for the case PCM1 1. Add MPVAL1 once to        INC CNT1 and reset PCM1 after applying once."]
        #[inline(always)]
        pub fn mpval1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Mpval1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Mpval1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Sign extension for MPVAL1. All bits must be written to either all zeros or all ones."]
        #[inline(always)]
        pub fn six1(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Mpval1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, Mpval1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mpval1 {
        #[inline(always)]
        fn default() -> Mpval1 {
            <crate::RegValueT<Mpval1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mpval2_SPEC;
    impl crate::sealed::RegSpec for Mpval2_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Missing Pulses to be Added or Subtracted Directly 2\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type Mpval2 = crate::RegValueT<Mpval2_SPEC>;

    impl Mpval2 {
        #[doc = "Missing pulses for direct correction of SUB INC2 pulses by the CPU  sint16 . Used only for SMC RMO 1 for the case PCM2 1. Add MPVAL2 once to        INC CNT2  and reset PCM2 after applying once. Do not provide negative values which exceed the amount of MLS2  when        considered negative PD S values  the sum of both should not exceed the        amount of MLS2."]
        #[inline(always)]
        pub fn mpval2(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Mpval2_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Mpval2_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Sign extension for MPVAL2. All bits must be written to either all zeros or all ones."]
        #[inline(always)]
        pub fn six2(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Mpval2_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, Mpval2_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mpval2 {
        #[inline(always)]
        fn default() -> Mpval2 {
            <crate::RegValueT<Mpval2_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct NmbS_SPEC;
    impl crate::sealed::RegSpec for NmbS_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Number of Pulses to be Sent in Emergency Mode\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type NmbS = crate::RegValueT<NmbS_SPEC>;

    impl NmbS {
        #[doc = "Number of pulses for STATE. Calculated number of pulses in emergency mode for the current STATE        increment. Calculated pulse number."]
        #[inline(always)]
        pub fn nmb_s(
            self,
        ) -> crate::common::RegisterField<0, 0xfffff, 1, 0, u32, NmbS_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xfffff,1,0,u32, NmbS_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for NmbS {
        #[inline(always)]
        fn default() -> NmbS {
            <crate::RegValueT<NmbS_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct NmbSTar_SPEC;
    impl crate::sealed::RegSpec for NmbSTar_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Target Number of Pulses to be Sent in Emergency Mode\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type NmbSTar = crate::RegValueT<NmbSTar_SPEC>;

    impl NmbSTar {
        #[doc = "Target Number of pulses for STATE. Calculated number of pulses in emergency mode for the current STATE increment without missing pulses. Calculated target pulse number. The LSB address is determined using the SWON S value in the OSW register         see CROSSREFERENCE  ."]
        #[inline(always)]
        pub fn nmb_s_tar(
            self,
        ) -> crate::common::RegisterField<0, 0xfffff, 1, 0, u32, NmbSTar_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xfffff,1,0,u32, NmbSTar_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for NmbSTar {
        #[inline(always)]
        fn default() -> NmbSTar {
            <crate::RegValueT<NmbSTar_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct NmbSTarOld_SPEC;
    impl crate::sealed::RegSpec for NmbSTarOld_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Last but One Target Number of Pulses to be Sent in Emergency Mode\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type NmbSTarOld = crate::RegValueT<NmbSTarOld_SPEC>;

    impl NmbSTarOld {
        #[doc = "Target Number of pulses for STATE. Calculated number of pulses in emergency mode for the current STATE increment without missing pulses. Calculated target pulse number. The LSB address is determined using the SWON S value in the OSW register         see CROSSREFERENCE  ."]
        #[inline(always)]
        pub fn nmb_s_tar_old(
            self,
        ) -> crate::common::RegisterField<0, 0xfffff, 1, 0, u32, NmbSTarOld_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xfffff,1,0,u32, NmbSTarOld_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for NmbSTarOld {
        #[inline(always)]
        fn default() -> NmbSTarOld {
            <crate::RegValueT<NmbSTarOld_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct NmbT_SPEC;
    impl crate::sealed::RegSpec for NmbT_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Number of Pulses to be Sent in Normal Mode\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type NmbT = crate::RegValueT<NmbT_SPEC>;

    impl NmbT {
        #[doc = "Number of pulses for TRIGGER. Calculated number of pulses in normal mode for the current TRIGGER        increment. Calculated pulse number."]
        #[inline(always)]
        pub fn nmb_t(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, NmbT_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, NmbT_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for NmbT {
        #[inline(always)]
        fn default() -> NmbT {
            <crate::RegValueT<NmbT_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct NmbTTar_SPEC;
    impl crate::sealed::RegSpec for NmbTTar_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Target Number of Pulses to be Sent in Normal Mode\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type NmbTTar = crate::RegValueT<NmbTTar_SPEC>;

    impl NmbTTar {
        #[doc = "Target Number of pulses for TRIGGER. Calculated number of pulses in normal mode for the current TRIGGER increment without missing pulses. Calculated target pulse number. The LSB address is determined using the SWON T value in the OSW register         see CROSSREFERENCE  ."]
        #[inline(always)]
        pub fn nmb_t_tar(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, NmbTTar_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, NmbTTar_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for NmbTTar {
        #[inline(always)]
        fn default() -> NmbTTar {
            <crate::RegValueT<NmbTTar_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct NmbTTarOld_SPEC;
    impl crate::sealed::RegSpec for NmbTTarOld_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Last but One Target Number of Pulses to be Sent in Normal Mode\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type NmbTTarOld = crate::RegValueT<NmbTTarOld_SPEC>;

    impl NmbTTarOld {
        #[doc = "Target Number of pulses for TRIGGER. Calculated number of pulses in normal mode for the current TRIGGER increment without missing pulses. Calculated target pulse number. The LSB address is determined using the SWON T value in the OSW register         see CROSSREFERENCE  ."]
        #[inline(always)]
        pub fn nmb_t_tar_old(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, NmbTTarOld_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, NmbTTarOld_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for NmbTTarOld {
        #[inline(always)]
        fn default() -> NmbTTarOld {
            <crate::RegValueT<NmbTTarOld_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct NtiCnt_SPEC;
    impl crate::sealed::RegSpec for NtiCnt_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Number of Active TRIGGER Events to Interrupt\n resetvalue={Application Reset:0x0}"]
    pub type NtiCnt = crate::RegValueT<NtiCnt_SPEC>;

    impl NtiCnt {
        #[doc = "Number of TRIGGERs to interrupt. Number of active TRIGGER events to the next DPLL CDTI interrupt. This value shows the remaining TRIGGER events until an active TRIGGER slope results in a DPLL CDTI interrupt         the value is to be count down for each active TRIGGER event."]
        #[inline(always)]
        pub fn nti_cnt(
            self,
        ) -> crate::common::RegisterField<0, 0x3ff, 1, 0, u16, NtiCnt_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3ff,1,0,u16, NtiCnt_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for NtiCnt {
        #[inline(always)]
        fn default() -> NtiCnt {
            <crate::RegValueT<NtiCnt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Nusc_SPEC;
    impl crate::sealed::RegSpec for Nusc_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Number of Recent STATE Events Used for Calculations\n resetvalue={Application Reset:0x2081}"]
    pub type Nusc = crate::RegValueT<Nusc_SPEC>;

    impl Nusc {
        #[doc = "Number of recent STATE events used for SUB INCx calculations modulo 2  SNUmax 1 . No gap is considered in that case for this value  but in the VSN value  see below   This register is set by the CPU but reset automatically to   x201c 1  x201d  by a change of direction or loss of LOCK. Each other value can be set by the CPU  maybe Full SCALE  HALF SCALE or parts of them. The relation values QDT Sx are calculated using NUSE values in the past with its maximum value of 2 SNU 1. This value can only be written when the WNUS bit is set. Note  To prevent that inconsistencies between internal pointer in which NUSE is used and the case decision of different prediction method s for prediction of the next event and PMT position minus time  occur  the NUSE value is stored internally at that point of time when the internal pointers are calculated for the next event cycle."]
        #[inline(always)]
        pub fn nuse(
            self,
        ) -> crate::common::RegisterField<0, 0x3f, 1, 0, u8, Nusc_SPEC, crate::common::RW> {
            crate::common::RegisterField::<0,0x3f,1,0,u8, Nusc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FULL SCALE of STATE. This value is to be set  when NUSE is set to FULL SCALE. This value is set by the CPU  but reset automatically to  0  by a change of direction or loss of LOCK. Note  This value can only be written when the WNUS bit is set."]
        #[inline(always)]
        pub fn fss(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Nusc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6, 1, 0, Nusc_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "Number of real and virtual events to be considered for the current increment. This value reflects the NS value of the last valid increment  stored in        ADT S i   to be updated after all calculations in step 37 of CROSSREFERENCE . This value can only be written when the WSYN bit in this register is set."]
        #[inline(always)]
        pub fn syn_s(
            self,
        ) -> crate::common::RegisterField<7, 0x3f, 1, 0, u8, Nusc_SPEC, crate::common::RW> {
            crate::common::RegisterField::<7,0x3f,1,0,u8, Nusc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Number of real and virtual events to be considered for the last increment. This value reflects the NS value of the last but one valid increment         stored in ADT S i   is updated automatically when writing SYN S. This value is updated by the SYN S value when the WSYN bit in this        register is set."]
        #[inline(always)]
        pub fn syn_s_old(
            self,
        ) -> crate::common::RegisterField<13, 0x3f, 1, 0, u8, Nusc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<13,0x3f,1,0,u8, Nusc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Virtual STATE number. Number of virtual state increments in the current NUSE region. This value reflects the number of virtual increments in the current NUSE region  for NUSE 1 this value is zero  when the CPU sets NUSE to a value  gt  1 or zero 2 7 modulo 2 7     it must also set VSN to the correspondent value  the VSN value is subtracted from the NUSE value in order to get the corresponding APS value for the past  the VSN value is not used for the APS 1C2 pointer. VSN is to be updated by the CPU when a new gap is to be considered for NUSE or a gap is leaving the NUSE region  for this purpose the SASI interrupt can be used  no further update of VSN is necessary when NUSE is set to FULL SCALE This value can only be written when the WVSN bit is set."]
        #[inline(always)]
        pub fn vsn(
            self,
        ) -> crate::common::RegisterField<19, 0x3f, 1, 0, u8, Nusc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<19,0x3f,1,0,u8, Nusc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit for NUSE. Read as zero. 0  the NUSE value is not writeable 1  the NUSE value is writeable"]
        #[inline(always)]
        pub fn wnus(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Nusc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Nusc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit for SYN S and SYN S OLD. Read as zero 0  the SYN S value is not writeable 1  the SYN S value is writeable"]
        #[inline(always)]
        pub fn wsyn(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Nusc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Nusc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit for VS   WVSN. Read as zero"]
        #[inline(always)]
        pub fn wvsn(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Nusc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Nusc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Nusc {
        #[inline(always)]
        fn default() -> Nusc {
            <crate::RegValueT<Nusc_SPEC> as RegisterValue<_>>::new(8321)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct NuscExt1_SPEC;
    impl crate::sealed::RegSpec for NuscExt1_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Extension Register Number 1 for DPLL NUSC 4\n resetvalue={Application Reset:0x10001}"]
    pub type NuscExt1 = crate::RegValueT<NuscExt1_SPEC>;

    impl NuscExt1 {
        #[doc = "Number of real and virtual events to be considered for the current increment. This value reflects the NS value of the last valid increment  stored in        ADT S i   to be updated after all calculations in step 37 of Table CROSSREFERENCE . This value can only be written when the WSYN bit in this register is set."]
        #[inline(always)]
        pub fn syn_s(
            self,
        ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, NuscExt1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x7f,1,0,u8, NuscExt1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Number of real and virtual events to be considered for the last increment. This value reflects the NS value of the last but one valid increment         stored in ADT S i   is updated automatically when writing SYN S. This value is updated by the SYN S value when the WSYN bit in this        register is set."]
        #[inline(always)]
        pub fn syn_s_old(
            self,
        ) -> crate::common::RegisterField<16, 0x7f, 1, 0, u8, NuscExt1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x7f,1,0,u8, NuscExt1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit for SYN S and SYN S OLD. Read as zero."]
        #[inline(always)]
        pub fn wsyn(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, NuscExt1_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,NuscExt1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for NuscExt1 {
        #[inline(always)]
        fn default() -> NuscExt1 {
            <crate::RegValueT<NuscExt1_SPEC> as RegisterValue<_>>::new(65537)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct NuscExt2_SPEC;
    impl crate::sealed::RegSpec for NuscExt2_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Extension Register Number 2 for DPLL NUSC 4\n resetvalue={Application Reset:0x1}"]
    pub type NuscExt2 = crate::RegValueT<NuscExt2_SPEC>;

    impl NuscExt2 {
        #[doc = "Number of recent STATE events used for SUB INCx calculations modulo 2  SNUmax 1 . No gap is considered in that case for this value  but in the VSN value         see below   This register is set by the        CPU but reset automatically to   8220 1  8221  by a change of direction or loss of        LOCK. Each other value can be set by the CPU  maybe Full SCALE         HALF SCALE or parts of them. The relation values QDT Sx are calculated        using NUSE values in the past with its maximum value of 2 SNU 1. This value can only be written when the WNUS bit is set."]
        #[inline(always)]
        pub fn nuse(
            self,
        ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, NuscExt2_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x7f,1,0,u8, NuscExt2_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "This value is to be set  when NUSE is set to FULL SCALE. This value is set by the CPU  but reset automatically to  0  by a change        of direction or loss of LOCK. This value can only be written when the WNUS bit is set."]
        #[inline(always)]
        pub fn fss(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, NuscExt2_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,NuscExt2_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Number of virtual state increments in the current NUSE region. This value reflects the number of virtual increments in the current NUSE        region  for NUSE 1 this value is zero  when the CPU sets NUSE to a value         gt  1 or zero 2 7 modulo 2 7            it must also set VSN to the correspondent value the VSN value is        subtracted from the NUSE value in order to get the corresponding APS        value for the past  the VSN value is not used for the APS 1C2 pointer. VSN is to be updated by the CPU when a new gap is to be considered for        NUSE or a gap is leaving the NUSE region  for this purpose the SASI        interrupt can be used  no further update of VSN is necessary when NUSE        is set to FULL SCALE. This value can only be written when the WVSN bit is set."]
        #[inline(always)]
        pub fn vsn(
            self,
        ) -> crate::common::RegisterField<16, 0x7f, 1, 0, u8, NuscExt2_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x7f,1,0,u8, NuscExt2_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit for NUSE. Read as zero."]
        #[inline(always)]
        pub fn wnus(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, NuscExt2_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,NuscExt2_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit for VSN. Read as zero."]
        #[inline(always)]
        pub fn wvsn(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, NuscExt2_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,NuscExt2_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for NuscExt2 {
        #[inline(always)]
        fn default() -> NuscExt2 {
            <crate::RegValueT<NuscExt2_SPEC> as RegisterValue<_>>::new(1)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Nutc_SPEC;
    impl crate::sealed::RegSpec for Nutc_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Number of Recent TRIGGER Events Used for Calculations\n resetvalue={Application Reset:0x12001}"]
    pub type Nutc = crate::RegValueT<Nutc_SPEC>;

    impl Nutc {
        #[doc = "Number of recent TRIGGER events used for SUB INC1 and action calculations modulo 2  TNUmax 1 . Number of recent TRIGGER events used for SUB INC1 and action calculations modulo 2  TNUmax 1 . NUTE  number of last nominal increments to be considered for the calculations. No gap is considered in that case for this value  but in the VTN value  see below   This value is set by the CPU  but reset automatically to  1  by a change of direction or loss of LOCK. Each other value can be set by the CPU  maybe Full SCALE  HALF SCALE or parts of them. For FULL SCALE set NUTE  2  TNU  1  and for HALF SCALE NUTE  TNU  1. The relation values QDT Tx are calculated using NUTE values in the past with its maximum value of 2  TNU  1 . The value zero  in combination with the value FST 1  does mean 2 11 values in the past. Note  To prevent that inconsistencies between internal pointer in which NUTE is used and the case decision of different prediction method s for prediction of the next event and PMT position minus time  occur  the NUTE value is stored internally at that point of time when the internal pointers are calculated for the next event cycle. Note  This value can only be written when the WNUT bit is set."]
        #[inline(always)]
        pub fn nute(
            self,
        ) -> crate::common::RegisterField<0, 0x3ff, 1, 0, u16, Nutc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3ff,1,0,u16, Nutc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FULL SCALE of TRIGGER. This value is to be set  when NUTE is set to FULL SCALE. This value can only be written when the WNUT bit is set."]
        #[inline(always)]
        pub fn fst(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Nutc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Nutc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Number of real and virtual events to be considered for the current increment. This value reflects the NT value of the last valid increment  stored in        ADT T i   to be updated after all calculations in step 17 of CROSSREFERENCE . This value can only be written when the WSYN bit in this register is set."]
        #[inline(always)]
        pub fn syn_t(
            self,
        ) -> crate::common::RegisterField<13, 0x7, 1, 0, u8, Nutc_SPEC, crate::common::RW> {
            crate::common::RegisterField::<13,0x7,1,0,u8, Nutc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Number of real and virtual events to be considered for the last increment. This value reflects the NT value of the last but one valid increment         stored in ADT T i   is updated automatically when writing SYN T. This value is updated by the SYN T value when the WSYN bit in this        register is set."]
        #[inline(always)]
        pub fn syn_t_old(
            self,
        ) -> crate::common::RegisterField<16, 0x7, 1, 0, u8, Nutc_SPEC, crate::common::RW> {
            crate::common::RegisterField::<16,0x7,1,0,u8, Nutc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Virtual TRIGGER number. Number of virtual increments in the current NUTE region This value reflects the number of virtual increments in the current NUTE        region  for NUTE 1 this value is zero  when the CPU sets NUTE to a value         gt  1   it must also set VTN to the correspondent value  for NUTE is set        to FULL SCALE including NUTE zero  2 11 modulo 2 11   the VTN is to be set to        2  SYN NT. The VTN value is subtracted from the NUTE value in order to get the        corresponding APT value for the past  the VTN value is not used for the        APT 2B pointer. VTN is to be updated by the CPU when a new gap is to be considered for        NUTE or a gap is leaving the NUTE region  for this purpose the TINT        values in the profile can be used to generate an interrupt for the CPU        at the corresponding positions  no further update of VTN is necessary        when NUTE is set to FULL SCALE This value can only be written when the WVTN bit is set."]
        #[inline(always)]
        pub fn vtn(
            self,
        ) -> crate::common::RegisterField<19, 0x3f, 1, 0, u8, Nutc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<19,0x3f,1,0,u8, Nutc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit for NUTE and FST. Read as zero"]
        #[inline(always)]
        pub fn wnut(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Nutc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Nutc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit for SYN T and SYN T OLD. Read as zero"]
        #[inline(always)]
        pub fn wsyn(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Nutc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Nutc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Write control bit for VTN. Read as zero"]
        #[inline(always)]
        pub fn wvtn(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Nutc_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Nutc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Nutc {
        #[inline(always)]
        fn default() -> Nutc {
            <crate::RegValueT<Nutc_SPEC> as RegisterValue<_>>::new(73729)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Osw_SPEC;
    impl crate::sealed::RegSpec for Osw_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Offset and Switch Old New Address Register\n resetvalue={Application Reset:0x200}"]
    pub type Osw = crate::RegValueT<Osw_SPEC>;

    impl Osw {
        #[doc = "Switch of new STATE. Switch bit for LSB address of STATE. This bit is changed for each write access to TS S TS S OLD. Using this        unchanged address bit SWON S for any access to TS S results always in an        access to TS S OLD. For writing to this address the former old         TS S OLD old  value is overwritten by the new one while the SWON S bit        changes. Thus the former new one is now the old one and the next access        is after changing SWON S directed to this place. Therefore write to TS S        first and after that immediately to FTV S and PSSM  always before a new        TS S value is to be written. After writing TS S  FTV S and PSSM in this order the address pointer AP        with LSB AP  SWON S shows for the corresponding address to TS S OLD         FTV S and PSSM while LSB AP   SWON S results in an access to TS S         FTV S old and PSSM OLD respectively. The value can be read only. This        bit is reset when disabling the DPLL  DEN 0 ."]
        #[inline(always)]
        pub fn swon_s(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Osw_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0, 1, 0, Osw_SPEC, crate::common::R>::from_register(
                self, 0,
            )
        }
        #[doc = "Switch of new TRIGGER. Switch bit for LSB address of TRIGGER. This bit is changed for each write access to TS T TS T OLD. Using this        unchanged address bit SWON T for any access to TS T results always in an        access to TS T OLD. For writing to this address the former old         TS T OLD old  value is overwritten by the new one while the SWON T bit        changes. Thus the former new one is now the old one and the next access        is after changing SWON T directed to this place. Therefore write to TS T        first and after that immediately to FTV T and PSTM  always before a new        TS T value is to be written. After writing TS T  FTV T and PSTM in this order the address pointer AP        with LSB AP  SWON T shows for the corresponding address to TS T OLD         FTV T and PSTM while LSB AP   SWON T results in an access to TS T         FTV T old and PSTM OLD respectively. The value can be read only. This        bit is reset when disabling the DPLL  DEN 0 ."]
        #[inline(always)]
        pub fn swon_t(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Osw_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<1, 1, 0, Osw_SPEC, crate::common::R>::from_register(
                self, 0,
            )
        }
        #[doc = "Offset size of RAM region 2. At least 128 and at most 1024 values can be stored in each of the RAM 2        regions a to d accordingly. The value can be set only for DEN 0. The        change of the OSS value results in an automatic change of the offset        values in the DPLL AOSV 2 register. This value can only be written when the DPLL is disabled."]
        #[inline(always)]
        pub fn oss(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Osw_SPEC, crate::common::RW> {
            crate::common::RegisterField::<8,0x3,1,0,u8, Osw_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Osw {
        #[inline(always)]
        fn default() -> Osw {
            <crate::RegValueT<Osw_SPEC> as RegisterValue<_>>::new(512)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Pssc_SPEC;
    impl crate::sealed::RegSpec for Pssc_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Actual Calculated Position Stamp of STATE\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type Pssc = crate::RegValueT<Pssc_SPEC>;

    impl Pssc {
        #[doc = "Calculated position stamp for the last STATE input. First value is set by the DPLL and can be updated by the CPU when the        filter delay is to be considered. For each active slope of STATE in emergency mode. When FSD 0  PSSC is set from actual position value no filter delay        considered   the CPU must update the value once  taking into account the        filter value When FSD 1  at each active slope of STATE  PD S store 0 for AMS 0     160   160   160 SMC 0  add MLS1  SYN S    PD S store    160   160   160 SMC 1  add MLS2  SYN S    PD S store"]
        #[inline(always)]
        pub fn pssc(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Pssc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Pssc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Pssc {
        #[inline(always)]
        fn default() -> Pssc {
            <crate::RegValueT<Pssc_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Pssm_SPEC;
    impl crate::sealed::RegSpec for Pssm_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Measured Position Stamp at Last STATE Input\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type Pssm = crate::RegValueT<Pssm_SPEC>;

    impl Pssm {
        #[doc = "Position stamp of STATE  measured. Measured position stamp of last active STATE input. Store the value TBU TS1 or TBU TS2  respectively  at the moment when an        active STATE event occurs. The value of PSSM is invalid for  RMO 0 and        SMC 0 ."]
        #[inline(always)]
        pub fn pssm(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Pssm_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Pssm_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Pssm {
        #[inline(always)]
        fn default() -> Pssm {
            <crate::RegValueT<Pssm_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct PssmOld_SPEC;
    impl crate::sealed::RegSpec for PssmOld_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Measured Position Stamp at Last but One STATE Input\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type PssmOld = crate::RegValueT<PssmOld_SPEC>;

    impl PssmOld {
        #[doc = "Last but one position stamp of STATE  measured. Measured position stamp of last but one active STATE input. Last PSSM value  see explanation of PSSM."]
        #[inline(always)]
        pub fn pssm_old(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, PssmOld_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, PssmOld_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for PssmOld {
        #[inline(always)]
        fn default() -> PssmOld {
            <crate::RegValueT<PssmOld_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Pstc_SPEC;
    impl crate::sealed::RegSpec for Pstc_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Actual Calculated Position Stamp of TRIGGER\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type Pstc = crate::RegValueT<Pstc_SPEC>;

    impl Pstc {
        #[doc = "Calculated position stamp of last TRIGGER input. Value is set by the DPLL and can be updated by the CPU when filter values are to be considered for the exact position  see DPLL STATUS and DPLL CTRL registers for explanation of the status and control bits used . For each active slope of TRIGGER in normal mode. When FTD 0  PSTC is set from actual position value  for the first active TRIGGER event  no filter delay considered  the CPU must update the value once  taking into account the filter value. When FTD 1  PSTC is incremented at each TRIGGER event by   xa0   xa0   xa0  SMC 0   MLT 1   SYN T   PD  while PD 0 for AMT 0   xa0   xa0   xa0 SMC 1   MLS1   SYN T   PD   xa0   xa0   xa0 while PD 0 for AMT 0"]
        #[inline(always)]
        pub fn pstc(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Pstc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Pstc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Pstc {
        #[inline(always)]
        fn default() -> Pstc {
            <crate::RegValueT<Pstc_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Pstm_SPEC;
    impl crate::sealed::RegSpec for Pstm_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Measured Position Stamp at Last TRIGGER Input\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type Pstm = crate::RegValueT<Pstm_SPEC>;

    impl Pstm {
        #[doc = "Position stamp of TRIGGER  measured. Measured position stamp of last active TRIGGER input. Store the value TBU TS1 when an active TRIGGER event occurs. The value        of PSTM is invalid for  RMO 1 and SMC 0 ."]
        #[inline(always)]
        pub fn pstm(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Pstm_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Pstm_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Pstm {
        #[inline(always)]
        fn default() -> Pstm {
            <crate::RegValueT<Pstm_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct PstmOld_SPEC;
    impl crate::sealed::RegSpec for PstmOld_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Measured Position Stamp at Last but One TRIGGER Input\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type PstmOld = crate::RegValueT<PstmOld_SPEC>;

    impl PstmOld {
        #[doc = "Last but one position stamp of TRIGGER  measured. Measured position stamp of last but one active TRIGGER input. Last PSTM value  see explanation of PSTM."]
        #[inline(always)]
        pub fn pstm_old(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, PstmOld_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, PstmOld_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for PstmOld {
        #[inline(always)]
        fn default() -> PstmOld {
            <crate::RegValueT<PstmOld_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Pvt_SPEC;
    impl crate::sealed::RegSpec for Pvt_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Plausibility Value of Next TRIGGER Slope\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type Pvt = crate::RegValueT<Pvt_SPEC>;

    impl Pvt {
        #[doc = "Plausibility value of next active TRIGGER slope. The meaning of the value depends on the value of the PIT value in the DPLL CTRL 1 register. For PIT 0  the number of SUB INC1 pulses to be waited for until a next active TRIGGER event is accepted. For PIT 1  PVT is to be multiplied with the last nominal increment time DT T ACT and divided by 1024 and reduced to a 24 bit value in order to get the time to be waited for until the next active TRIGGER event is accepted. The wait time must be exceeded for an active slope. Note  When an active TRIGGER slope is detected while the wait condition is not fulfilled the interrupt PWI is generated. Please note  that the SGE1 must be set  when PIT 0 in order to provide the necessary SUB INC1 pulses for checking. After an unexpected missing TRIGGER the plausibility check is suppressed for the following increment. In case of direction change the PVT value is automatically set to zero in order to deactivate the check ."]
        #[inline(always)]
        pub fn pvt(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Pvt_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Pvt_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Pvt {
        #[inline(always)]
        fn default() -> Pvt {
            <crate::RegValueT<Pvt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct RamIni_SPEC;
    impl crate::sealed::RegSpec for RamIni_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL RAM Initialization Register\n resetvalue={Application Reset:0x0}"]
    pub type RamIni = crate::RegValueT<RamIni_SPEC>;

    impl RamIni {
        #[doc = "RAM region 1a initialization in progress"]
        #[inline(always)]
        pub fn init_1a(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, RamIni_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,RamIni_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "RAM region 1b and 1c initialization in progress. Coding see bit 0."]
        #[inline(always)]
        pub fn init_1bc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, RamIni_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<1,1,0,RamIni_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "RAM region 2 initialization in progress. Coding see bit 0."]
        #[inline(always)]
        pub fn init_2(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, RamIni_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<2,1,0,RamIni_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "RAM regions 1a  1b and 2 are to be initialized. Setting the INIT RAM bit results only in a RAM reset when the DPLL is        not enabled  DEN 0 . Depending on the vendor configuration  the connected RAM regions are        initialized to zero in the case of a module HW reset or for setting the        RST bit in the GTM RST register. In the case of no RAM initialization  it must be ensured that all        relevant parameters are configured correctly. Otherwise  there is no        guarantee to get a predictable behavior."]
        #[inline(always)]
        pub fn init_ram(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, RamIni_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,RamIni_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for RamIni {
        #[inline(always)]
        fn default() -> RamIni {
            <crate::RegValueT<RamIni_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct RcdtSx_SPEC;
    impl crate::sealed::RegSpec for RcdtSx_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Reciprocal Value of the Expected Increment Duration of STATE\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type RcdtSx = crate::RegValueT<RcdtSx_SPEC>;

    impl RcdtSx {
        #[doc = "Reciprocal value of expected increment duration  2 32 while only the lower 24 bits are used. Calculated value  when an overflow occurs in the calculation  the value        is set to 0xFFFFFF."]
        #[inline(always)]
        pub fn rcdt_sx(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, RcdtSx_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, RcdtSx_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for RcdtSx {
        #[inline(always)]
        fn default() -> RcdtSx {
            <crate::RegValueT<RcdtSx_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct RcdtSxNom_SPEC;
    impl crate::sealed::RegSpec for RcdtSxNom_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Reciprocal Value of the Expected Nominal Increment Duration of STATE\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type RcdtSxNom = crate::RegValueT<RcdtSxNom_SPEC>;

    impl RcdtSxNom {
        #[doc = "Reciprocal value of nominal increment duration  2 32 while only the lower 24 bits are used. Calculated value  when an overflow occurs in the calculation  the value        is set to 0xFFFFFF."]
        #[inline(always)]
        pub fn rcdt_sx_nom(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, RcdtSxNom_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, RcdtSxNom_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for RcdtSxNom {
        #[inline(always)]
        fn default() -> RcdtSxNom {
            <crate::RegValueT<RcdtSxNom_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct RcdtTx_SPEC;
    impl crate::sealed::RegSpec for RcdtTx_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Reciprocal Value of the Expected Increment Duration of TRIGGER\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type RcdtTx = crate::RegValueT<RcdtTx_SPEC>;

    impl RcdtTx {
        #[doc = "Reciprocal value of expected increment duration  2 32 while only the lower 24 bits are used. Calculated value  when an overflow occurs in the calculation  the value        is set to 0xFFFFFF."]
        #[inline(always)]
        pub fn rcdt_tx(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, RcdtTx_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, RcdtTx_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for RcdtTx {
        #[inline(always)]
        fn default() -> RcdtTx {
            <crate::RegValueT<RcdtTx_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct RcdtTxNom_SPEC;
    impl crate::sealed::RegSpec for RcdtTxNom_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Reciprocal Value of the Expected Nominal Increment Duration of TRIGGER\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type RcdtTxNom = crate::RegValueT<RcdtTxNom_SPEC>;

    impl RcdtTxNom {
        #[doc = "Reciprocal value of nominal increment duration  2 32 while only the lower 24 bits are used. Calculated value  when an overflow occurs in the calculation  the value        is set to 0xFFFFFF."]
        #[inline(always)]
        pub fn rcdt_tx_nom(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, RcdtTxNom_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, RcdtTxNom_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for RcdtTxNom {
        #[inline(always)]
        fn default() -> RcdtTxNom {
            <crate::RegValueT<RcdtTxNom_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct RdtSAct_SPEC;
    impl crate::sealed::RegSpec for RdtSAct_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Reciprocal Value of the Last Increment of STATE\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type RdtSAct = crate::RegValueT<RdtSAct_SPEC>;

    impl RdtSAct {
        #[doc = "Reciprocal value of last STATE increment  2 32  only the lower 24 bits are used. The LSB is rounded up when the next truncated bit is 1. Calculated value  when an overflow occurs in the calculation  the value        is set to 0xFFFFFF and the CRO bit in the DPLL STATUS register is set         see CROSSREFERENCE  ."]
        #[inline(always)]
        pub fn rdt_s_act(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, RdtSAct_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, RdtSAct_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for RdtSAct {
        #[inline(always)]
        fn default() -> RdtSAct {
            <crate::RegValueT<RdtSAct_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct RdtTAct_SPEC;
    impl crate::sealed::RegSpec for RdtTAct_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Reciprocal Value of the Last Increment of TRIGGER\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type RdtTAct = crate::RegValueT<RdtTAct_SPEC>;

    impl RdtTAct {
        #[doc = "Reciprocal value of last TRIGGER increment  2 32  only the lower 24 bits are used. The LSB is rounded up when the next truncated bit is 1. Calculated value  when an overflow occurs in the calculation  the value        is set to 0xFFFFFF and the CRO bit in the DPLL STATUS register is set         see CROSSREFERENCE  ."]
        #[inline(always)]
        pub fn rdt_t_act(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, RdtTAct_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, RdtTAct_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for RdtTAct {
        #[inline(always)]
        fn default() -> RdtTAct {
            <crate::RegValueT<RdtTAct_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Sidel_SPEC;
    impl crate::sealed::RegSpec for Sidel_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Additional STATE Input Delay Register\n resetvalue={Application Reset:0x0}"]
    pub type Sidel = crate::RegValueT<Sidel_SPEC>;

    impl Sidel {
        #[doc = "STATE input delay. Transmit this value with each active STATE slope into a shadow register.        Subtract this shadow register value from each STATE time stamp  active        and inactive slope . This feature is always active and cannot be        disabled by a control bit."]
        #[inline(always)]
        pub fn sidel(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Sidel_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Sidel_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Sidel {
        #[inline(always)]
        fn default() -> Sidel {
            <crate::RegValueT<Sidel_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Slr_SPEC;
    impl crate::sealed::RegSpec for Slr_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL STATE Locking Range\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type Slr = crate::RegValueT<Slr_SPEC>;

    impl Slr {
        #[doc = "Value is to be multiplied with the last nominal STATE duration in order to get the range for the next STATE event without setting SOR in the DPLL STATUS register. Multiply value with the last nominal increment duration and check        violation  when SLR 0 don t perform the check."]
        #[inline(always)]
        pub fn slr(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Slr_SPEC, crate::common::RW> {
            crate::common::RegisterField::<0,0xff,1,0,u8, Slr_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Slr {
        #[inline(always)]
        fn default() -> Slr {
            <crate::RegValueT<Slr_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Sta_SPEC;
    impl crate::sealed::RegSpec for Sta_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Status of the State Machine States Register\n resetvalue={Application Reset:0x0}"]
    pub type Sta = crate::RegValueT<Sta_SPEC>;

    impl Sta {
        #[doc = "Status of TRIGGER state machine  state binary coded. This bit field reflects the status of the TRIGGER state machine. The decimal step number 1 to 20 of the state machine is binary coded from 0x01 to 0x14 respectively using the upper 5 bits  8 4 . The lower 4 bits  3 0  show substates of the corresponding state machine. When the DPLL is disabled  this field is 0x000. Table STA T"]
        #[inline(always)]
        pub fn sta_t(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Sta_SPEC, crate::common::R> {
            crate::common::RegisterField::<0,0xff,1,0,u8, Sta_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Count TRIGGER. This reflects the count of active TRIGGER slopes  mod8 . This value shows the number of active TRIGGER slopes  mod8 . This value allows distinguishing if the above state machine status is        consistent to other status values read before or after it."]
        #[inline(always)]
        pub fn cnt_t(
            self,
        ) -> crate::common::RegisterField<9, 0x7, 1, 0, u8, Sta_SPEC, crate::common::R> {
            crate::common::RegisterField::<9,0x7,1,0,u8, Sta_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Status of STATE state machine. State binary coded. This bit field reflects the status of the STATE state machine. The decimal step number 21 to 40 of the state machine is binary coded from 0x01 to 0x14 respectively using the upper 5 bits  20 16  after subtraction of 20 to the decimal value. The lower 4 bits  15 12  show substates of the corresponding state machine. When the DPLL is disabled  this field is 0x000. Table STA S"]
        #[inline(always)]
        pub fn sta_s(
            self,
        ) -> crate::common::RegisterField<12, 0xff, 1, 0, u8, Sta_SPEC, crate::common::R> {
            crate::common::RegisterField::<12,0xff,1,0,u8, Sta_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Count STATE. This reflects the count of active STATE slopes  mod8 . This value shows the number of active STATE slopes  mod8 . This value allows distinguishing if the above state machine status is        consistent to other status values read before or after it."]
        #[inline(always)]
        pub fn cnt_s(
            self,
        ) -> crate::common::RegisterField<21, 0x7, 1, 0, u8, Sta_SPEC, crate::common::R> {
            crate::common::RegisterField::<21,0x7,1,0,u8, Sta_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Sta {
        #[inline(always)]
        fn default() -> Sta {
            <crate::RegValueT<Sta_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Status_SPEC;
    impl crate::sealed::RegSpec for Status_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Status = crate::RegValueT<Status_SPEC>;

    impl Status {
        #[doc = "Fast pulse correction error"]
        #[inline(always)]
        pub fn fpce(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Status_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Status_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Calculated STATE duration overflow. Bit is set when equations DPLL 10a or DPLL 10b lead to an overflow."]
        #[inline(always)]
        pub fn cso(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Status_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Status_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Calculated TRIGGER duration overflow. Bit is set when equations DPLL 5a or DPLL 5b lead to an overflow. When one of the above bits is set the corresponding register contains        the maximum value 0xFFFFFF."]
        #[inline(always)]
        pub fn cto(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Status_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Status_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Calculated Reciprocal value overflow. Bit is set when the calculation of RDT T ACT or RDT S ACT leads to an        overflow. An overflow in calculation of reciprocal values can occur  when the        condition of Note 3  to the        DPLL CTRL 0 register is violated  see CROSSREFERENCE  .        Such an overflow can occur according to the calculations in equations         DPLL 1c  or  DPLL 6c . The overflow is detected when after the calculation and shifting left 32        bits at least one of the bits 31 to 24 is not zero. In that case the        corresponding register is set to 0xFFFFFF."]
        #[inline(always)]
        pub fn cro(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Status_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Status_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Resolution conflict STATE"]
        #[inline(always)]
        pub fn rcs(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<5,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Resolution conflict TRIGGER"]
        #[inline(always)]
        pub fn rct(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<6,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Prediction space configuration error"]
        #[inline(always)]
        pub fn pse(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<7,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "STATE out of range. The SOR bit is set  when the time to the next active STATE slope exceeds the value of the last nominal STATE duration multiplied with the value of the SLR register  see CROSSREFERENCE          and is reset  when at the current or last active input event a direction        change was detected. The SYS bit is not influenced by setting the SOR        bit."]
        #[inline(always)]
        pub fn sor(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Status_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<8,1,0,Status_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Missing STATE detected according to SOV"]
        #[inline(always)]
        pub fn ms(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Status_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Status_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TRIGGER out of range. The TOR bit is set  when the time to the next active TRIGGER slope exceeds the value of the last nominal TRIGGER duration multiplied with the value of the TLR register  see CROSSREFERENCE          and is reset  when at the current or last active input event a direction        change was detected. The SYT bit is not influenced by setting the TOR        bit."]
        #[inline(always)]
        pub fn tor(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Status_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Status_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Missing TRIGGER detected according to TOV"]
        #[inline(always)]
        pub fn mt(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Status_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Status_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "DPLL internal access to not configured RAM2 memory space"]
        #[inline(always)]
        pub fn ram2_err(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, Status_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<12,1,0,Status_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Low resolution of TBU TS0 is used for DPLL input. This value reflects the input signal LOW RES."]
        #[inline(always)]
        pub fn low_res(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<15,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Current signal value STATE"]
        #[inline(always)]
        pub fn csvs(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<16,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Current signal value TRIGGER"]
        #[inline(always)]
        pub fn csvt(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<17,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Calculation of upper half actions in progress"]
        #[inline(always)]
        pub fn caip2(
            self,
        ) -> crate::common::RegisterFieldBool<18, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<18,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Calculation of lower half actionsin progress"]
        #[inline(always)]
        pub fn caip1(
            self,
        ) -> crate::common::RegisterFieldBool<19, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<19,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Increment number of STATE is not plausible"]
        #[inline(always)]
        pub fn isn(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<20,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Increment number of TRIGGER is not plausible. Bit is set when the number of TRIGGERS is different to profile."]
        #[inline(always)]
        pub fn itn(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<21,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Backwards drive of SUB INC2"]
        #[inline(always)]
        pub fn bwd2(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<22,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Backwards drive of SUB INC1"]
        #[inline(always)]
        pub fn bwd1(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<23,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "DPLL Lock status concerning SUB INC2. Locking of SUB INC2 appears for RMO SMC 1  Bit is set  when SYS is set        and the number of events between two missing STATE s        is as expected by the SYN S values. LOCK2 is set for SMC RMO 1  for an active STATE event when SYS is set and SYN NS 0or when SYS is set        and the profile stored in the ADT Si field matches once between two gaps. LOCK2 is reset  for SMC RMO 1 when a missing STATE event occurs while SYN S 1. This does mean an        unexpected missing STATE. when the corresponding input signal STATE is out of locking range SLR"]
        #[inline(always)]
        pub fn lock2(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<25,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Synchronization condition of STATE fixed. This bit is set when the CPU writes to the APS 1C3 address pointer."]
        #[inline(always)]
        pub fn sys(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<26,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Synchronization condition of TRIGGER fixed. This bit is set when the CPU writes to the APT 2C address pointer."]
        #[inline(always)]
        pub fn syt(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<27,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "First STATE detected. No change of FSD for switching from normal to emergency mode or vice        versa."]
        #[inline(always)]
        pub fn fsd(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<28,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "First TRIGGER detected. No change of FTD for switching from normal to emergency mode or vice        versa."]
        #[inline(always)]
        pub fn ftd(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<29,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "DPLL Lock status concerning SUB INC1. LOCK1 is set  in normal mode  for RMO SMC 0  LCD 0   Bit is set for an active          TRIGGER event when SYT is set and the number of events between two          gaps is as expected by the profile  NT values in the ADT T i  field           or when SYN NT 0 and SYT 1. in normal mode  for RMO SMC 0  LCD 1   Bit is set for an active          TRIGGER event when SYT is set and the number of events between two          increments without missing TRIGGER  no gap  is as expected by the          profile  NT values in the ADT T i  field  in emergency mode  for RMO 1 and SMC 0   Bit is set for an active          STATE event  when SYS is set and the received events are in          correspondence to the profile  NS values in the ADT S i  field  for at          least two  four in case of direction change  expected missing STATE          events or when SYN NS 0. for SMC 1  Bit is set for an active TRIGGER even when SYT is set and          SYN NT 0 or when SYT is set and the profile stored in the ADT T i           field matches once between two gaps. LOCK1 is reset for RMO SMC 0  when a corresponding missing TRIGGER event occurs while SYN T 1. This          does mean an unexpected missing TRIGGER. when the corresponding input signal TRIGGER is out of locking range          TLR  when a corresponding direction change is detected  for RMO 1 and SMC 0  when a corresponding missing STATE event occurs while SYN S 1. This          does mean an unexpected missing STATE. when the corresponding input signal STATE is out of locking range TLR for SMC 1  when a corresponding missing TRIGGER event occurs while SYN T 1. This          does mean an unexpected missing TRIGGER. when the corresponding input signal TRIGGER is out of locking range          TLR  when a corresponding direction change is detected"]
        #[inline(always)]
        pub fn lock1(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<30,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Error during configuration or operation resulting in unexpected values"]
        #[inline(always)]
        pub fn err(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<31,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Status {
        #[inline(always)]
        fn default() -> Status {
            <crate::RegValueT<Status_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct StaFlag_SPEC;
    impl crate::sealed::RegSpec for StaFlag_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL STA Flag Register\n resetvalue={Application Reset:0x0}"]
    pub type StaFlag = crate::RegValueT<StaFlag_SPEC>;

    impl StaFlag {
        #[doc = "Flag according to DPLL MASK.STA NOTIFY T. The STA FLAG T is set to  1  indicating that the signal DPLL STA.STA T        has left the state defined by the trigger mask of        DPLL STA MASK.STA NOTIFY T. The Flag is reset when this bit of the register is written to  1 . The signal is visible to MCS0 sub module as part of the special function        register."]
        #[inline(always)]
        pub fn sta_flag_t(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, StaFlag_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,StaFlag_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Flag according to DPLL STA MASK.STA NOTIFY S. The STA FLAG S is set to  1  indicating that the signal DPLL STA.STA S        has left the state defined by the trigger mask of        DPLL STA MASK.STA NOTIFY S. The Flag is reset when this bit of the register is written to  1 . The signal is visible to MCS0 sub module as part of the special function        register."]
        #[inline(always)]
        pub fn sta_flag_s(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, StaFlag_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<8,1,0,StaFlag_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Flag according to DPLL INC CNT1 MASK.INC CNT1 NOTIFY. The INC CNT1 FLAG is set to  1  indicating that the signal        DPLL INC CNT1.INC CNT1 has left the state defined by the trigger mask of        DPLL INC CNT1 MASK.INC CNT1 NOTIFY. The Flag is reset when this bit of the register is written to  1 . The signal is visible to MCS0 sub module as part of the special function        register."]
        #[inline(always)]
        pub fn inc_cnt1_flag(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, StaFlag_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,StaFlag_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Flag according to DPLL INC CNT2 MASK.INC CNT2 NOTIFY. The INC CNT2 FLAG is set to  1  indicating that the signal        DPLL INC CNT2.INC CNT2 has left the state defined by the trigger mask of        DPLL INC CNT2 MASK.INC CNT2 NOTIFY. The Flag is reset when this bit of the register is written to  1 . The signal is visible to MCS0 sub module as part of the special function        register."]
        #[inline(always)]
        pub fn inc_cnt2_flag(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, StaFlag_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,StaFlag_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for StaFlag {
        #[inline(always)]
        fn default() -> StaFlag {
            <crate::RegValueT<StaFlag_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct StaMask_SPEC;
    impl crate::sealed::RegSpec for StaMask_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Trigger Masks for Signals DPLL STA T and DPLL STA S\n resetvalue={Application Reset:0x0}"]
    pub type StaMask = crate::RegValueT<StaMask_SPEC>;

    impl StaMask {
        #[doc = "Notify value for STA T of register DPLL STA. The STA NOTIFY T is representing a trigger mask of DPLL STA.STA T. When        DPLL STA.STA T reaches the value of STA NOTIFY T the flag        DPLL STA FLAG.STA FLAG T is set to  1  when DPLL STA.STA T is leaving        the state STA NOTIFY T.The signal is visible to MCS0 sub module as part        of the special function register."]
        #[inline(always)]
        pub fn sta_notify_t(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, StaMask_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, StaMask_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Notify value for STA S of register DPLL STA. The STA NOTIFY S is representing a trigger mask of DPLL STA.STA S. When        DPLL STA.STA S reaches the value of STA NOTIFY S the flag        DPLL STA FLAG.STA FLAG S is set to  1  when DPLL STA.STA S is leaving        the state STA NOTIFY S."]
        #[inline(always)]
        pub fn sta_notify_s(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, StaMask_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, StaMask_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for StaMask {
        #[inline(always)]
        fn default() -> StaMask {
            <crate::RegValueT<StaMask_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct TbuTs0S_SPEC;
    impl crate::sealed::RegSpec for TbuTs0S_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL TBU TS0 Value at Last STATE Event\n resetvalue={Application Reset:0x0}"]
    pub type TbuTs0S = crate::RegValueT<TbuTs0S_SPEC>;

    impl TbuTs0S {
        #[doc = "Value of TBU TS0 at the last STATE event. For each S VALID the value of TBU TS0 is stored in this register the        register is writeable only for test purposes when DEN 0. This value can only be written when the DPLL is disabled."]
        #[inline(always)]
        pub fn tbu_ts0_s(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, TbuTs0S_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, TbuTs0S_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for TbuTs0S {
        #[inline(always)]
        fn default() -> TbuTs0S {
            <crate::RegValueT<TbuTs0S_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct TbuTs0T_SPEC;
    impl crate::sealed::RegSpec for TbuTs0T_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL TBU TS0 Value at Last TRIGGER Event\n resetvalue={Application Reset:0x0}"]
    pub type TbuTs0T = crate::RegValueT<TbuTs0T_SPEC>;

    impl TbuTs0T {
        #[doc = "Value of TBU TS0 at the last TRIGGER event. For each T valid the value of TBU TS0 is stored in this register  the        register is writeable only for test purposes when DEN 0. This value can only be written when the DPLL is disabled."]
        #[inline(always)]
        pub fn tbu_ts0_t(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, TbuTs0T_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, TbuTs0T_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for TbuTs0T {
        #[inline(always)]
        fn default() -> TbuTs0T {
            <crate::RegValueT<TbuTs0T_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Thma_SPEC;
    impl crate::sealed::RegSpec for Thma_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL TRIGGER Hold Time Maximum Value\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type Thma = crate::RegValueT<Thma_SPEC>;

    impl Thma {
        #[doc = "Maximal time between active and inactive TRIGGER slope  uint16 . The time value corresponds to the time stamp clock counts  This does mean the clock selected for the TBU CH0 BASE  see TBU CH0 CTRL        register  Max. value to be set  generate the TAX interrupt in the case of a        violation for THMA gt 0."]
        #[inline(always)]
        pub fn thma(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Thma_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Thma_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Thma {
        #[inline(always)]
        fn default() -> Thma {
            <crate::RegValueT<Thma_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Thmi_SPEC;
    impl crate::sealed::RegSpec for Thmi_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL TRIGGER Hold Time Minimum Value\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type Thmi = crate::RegValueT<Thmi_SPEC>;

    impl Thmi {
        #[doc = "Minimal time between active and inactive TRIGGER slope  uint16 . The time value corresponds to the time stamp clock counts  this does mean the clock selected for the TBU CH0 BASE  see TBU CH0 CTRL        register  set min. value  generate the TINI interrupt in the case of a violation        for THMI gt 0. Typical retention time values after an active slope can be e.g. between        45   181 s  forwards  and 90   181 s  backwards . When THMI is zero  consider        always a THMI violation  forwards ."]
        #[inline(always)]
        pub fn thmi(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Thmi_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Thmi_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Thmi {
        #[inline(always)]
        fn default() -> Thmi {
            <crate::RegValueT<Thmi_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Thval_SPEC;
    impl crate::sealed::RegSpec for Thval_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Measured TRIGGER Hold Time Value\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type Thval = crate::RegValueT<Thval_SPEC>;

    impl Thval {
        #[doc = "Measured time from the last active slope to the next inactive TRIGGER slope in time stamp clock counts  this does mean the clock selected for the TBU CH0 BASE  uint16 . The measured value considers all input slope filter delays. From the        received input the corresponding filter delays are subtracted before the        time stamp difference of active and inactive slope is calculated."]
        #[inline(always)]
        pub fn thval(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Thval_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Thval_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Thval {
        #[inline(always)]
        fn default() -> Thval {
            <crate::RegValueT<Thval_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Thval2_SPEC;
    impl crate::sealed::RegSpec for Thval2_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Immediate THVAL Value Register\n resetvalue={Application Reset:0x0}"]
    pub type Thval2 = crate::RegValueT<Thval2_SPEC>;

    impl Thval2 {
        #[doc = "Measured last pulse time from active to inactive slope of TRIGGER after correction of input slope filter delays. This value is available immediately after the inactive slope of TRIGGER.        The measured value considers all input slope filter delays. From the        received input the corresponding filter delays are subtracted before the        time stamp difference of active and inactive slope is calculated."]
        #[inline(always)]
        pub fn thval(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Thval2_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Thval2_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Thval2 {
        #[inline(always)]
        fn default() -> Thval2 {
            <crate::RegValueT<Thval2_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Tidel_SPEC;
    impl crate::sealed::RegSpec for Tidel_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Additional TRIGGER Input Delay Register\n resetvalue={Application Reset:0x0}"]
    pub type Tidel = crate::RegValueT<Tidel_SPEC>;

    impl Tidel {
        #[doc = "TRIGGER input delay. Transmit this value with each active TRIGGER slope into a shadow        register. Subtract this shadow register value from each TRIGGER time        stamp  active and inactive slope . This feature is always active and        cannot be disabled by a control bit."]
        #[inline(always)]
        pub fn tidel(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Tidel_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Tidel_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Tidel {
        #[inline(always)]
        fn default() -> Tidel {
            <crate::RegValueT<Tidel_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Tlr_SPEC;
    impl crate::sealed::RegSpec for Tlr_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL TRIGGER Locking Range\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type Tlr = crate::RegValueT<Tlr_SPEC>;

    impl Tlr {
        #[doc = "Value is to be multiplied with the last nominal TRIGGER duration in order to get the range for the next TRIGGER event without setting TOR in the DPLL STATUS register. Multiply value with the last nominal increment duration and check        violation  when TLR 0 don t perform the check."]
        #[inline(always)]
        pub fn tlr(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Tlr_SPEC, crate::common::RW> {
            crate::common::RegisterField::<0,0xff,1,0,u8, Tlr_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Tlr {
        #[inline(always)]
        fn default() -> Tlr {
            <crate::RegValueT<Tlr_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Tov_SPEC;
    impl crate::sealed::RegSpec for Tov_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Time Out Value of Active TRIGGER Slope\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type Tov = crate::RegValueT<Tov_SPEC>;

    impl Tov {
        #[doc = "Decision value  fractional part  for missing TRIGGER interrupt"]
        #[inline(always)]
        pub fn tov_db(
            self,
        ) -> crate::common::RegisterField<0, 0x3ff, 1, 0, u16, Tov_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3ff,1,0,u16, Tov_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Decision value  integer part  for missing TRIGGER interrupt. TOV 15 0  is to be multiplied with the duration of the last increment        and divided by 1024 in order to get the time out time value for a        missing TRIGGER event. For the case of LOW RES 1  see DPLL STATUS register  consider for the        calculation of the time out value the following cases  LOW RES 1 and DPLL CTRL 1 TS0 HRT 1    160   160   160 multiply the TBU TS0 value by 8 LOW RES 1 and DPLL CTRL 1 TS0 HRT 0    160   160   160 multiply the TBU TS0 value by 8   160   160   160 multiply the estimated time point value  using TS T  dt t ACT and          160   160   160 TOV  by 8 LOW RES 0 and DPLL CTRL 1 TS0 HRT 0    160   160   160 use TBU TS0 and the estimated time point value unchanged."]
        #[inline(always)]
        pub fn tov_dw(
            self,
        ) -> crate::common::RegisterField<10, 0x3f, 1, 0, u8, Tov_SPEC, crate::common::RW> {
            crate::common::RegisterField::<10,0x3f,1,0,u8, Tov_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Tov {
        #[inline(always)]
        fn default() -> Tov {
            <crate::RegValueT<Tov_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct TovS_SPEC;
    impl crate::sealed::RegSpec for TovS_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Time Out Value of Active STATE Slope\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type TovS = crate::RegValueT<TovS_SPEC>;

    impl TovS {
        #[doc = "Decision value  fractional part  for missing STATE interrupt"]
        #[inline(always)]
        pub fn db(
            self,
        ) -> crate::common::RegisterField<0, 0x3ff, 1, 0, u16, TovS_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3ff,1,0,u16, TovS_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Decision value  integer part  for missing STATE interrupt. TOV S  15 0  is to be multiplied with the duration of the last increment        and divided by 1024 in order to get the time out time value for a        missing STATE event. For the case of LOW RES 1  see DPLL STATUS register  consider for the        calculation of the time out value the following cases  LOW RES 1 and DPLL CTRL 1 TS0 HRS 1    160   160   160 multiply the TBU TS0 value by 8 LOW RES 1 and DPLL CTRL 1 TS0 HRS 0    160   160   160 multiply the TBU TS0 value by 8   160   160   160 multiply the estimated time point value  using TS T  dt s ACT and          160   160   160 SOV  by 8 LOW RES 0 and DPLL CTRL 1 TS0 HRS 0    160   160   160 use TBU TS0 and the estimated time point value unchanged."]
        #[inline(always)]
        pub fn dw(
            self,
        ) -> crate::common::RegisterField<10, 0x3f, 1, 0, u8, TovS_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3f,1,0,u8, TovS_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for TovS {
        #[inline(always)]
        fn default() -> TovS {
            <crate::RegValueT<TovS_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct TsS_SPEC;
    impl crate::sealed::RegSpec for TsS_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Actual STATE Time Stamp\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type TsS = crate::RegValueT<TsS_SPEC>;

    impl TsS {
        #[doc = "Time stamp value of the last active STATE input. The LSB address is determined using the SWON S value in the OSW register         see CROSSREFERENCE  ."]
        #[inline(always)]
        pub fn state_ts(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, TsS_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, TsS_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for TsS {
        #[inline(always)]
        fn default() -> TsS {
            <crate::RegValueT<TsS_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct TsSOld_SPEC;
    impl crate::sealed::RegSpec for TsSOld_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Previous STATE Time Stamp\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type TsSOld = crate::RegValueT<TsSOld_SPEC>;

    impl TsSOld {
        #[doc = "Time stamp value of the last active STATE input. The LSB address is determined using the SWON S value in the OSW register         see CROSSREFERENCE  ."]
        #[inline(always)]
        pub fn state_ts_old(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, TsSOld_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, TsSOld_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for TsSOld {
        #[inline(always)]
        fn default() -> TsSOld {
            <crate::RegValueT<TsSOld_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct TsT_SPEC;
    impl crate::sealed::RegSpec for TsT_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Actual TRIGGER Time Stamp Value\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type TsT = crate::RegValueT<TsT_SPEC>;

    impl TsT {
        #[doc = "Time stamp value of the last active TRIGGER input. Measured TRIGGER time stamp. The LSB address is determined using the SWON T value in the OSW register         see CROSSREFERENCE  ."]
        #[inline(always)]
        pub fn trigger_ts(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, TsT_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, TsT_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for TsT {
        #[inline(always)]
        fn default() -> TsT {
            <crate::RegValueT<TsT_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct TsTOld_SPEC;
    impl crate::sealed::RegSpec for TsTOld_SPEC {
        type DataType = u32;
    }
    #[doc = "DPLL Previous TRIGGER Time Stamp Value\n resetvalue={PowerOn Reset:0x0,DPLL_RAM_INI.INIT_1BC:0x0}"]
    pub type TsTOld = crate::RegValueT<TsTOld_SPEC>;

    impl TsTOld {
        #[doc = "Time stamp value of the last but one active TRIGGER input. Previous measured TRIGGER time stamp. The LSB address is determined using the SWON T value in the OSW register         see CROSSREFERENCE  ."]
        #[inline(always)]
        pub fn trigger_ts_old(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, TsTOld_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, TsTOld_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for TsTOld {
        #[inline(always)]
        fn default() -> TsTOld {
            <crate::RegValueT<TsTOld_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc = "IRQ"]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Irq(pub(super) *mut u8);
    unsafe impl core::marker::Send for Irq {}
    unsafe impl core::marker::Sync for Irq {}
    impl Irq {
        #[doc = "DPLL Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn en(&self) -> crate::common::Reg<irq::En_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
        }
        #[doc = "DPLL Interrupt Force Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn forcint(&self) -> crate::common::Reg<irq::Forcint_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
        }
        #[doc = "DPLL Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn mode(&self) -> crate::common::Reg<irq::Mode_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(12usize)) }
        }
        #[doc = "DPLL Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn notify(&self) -> crate::common::Reg<irq::Notify_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
        }
    }
    pub mod irq {
        #[allow(unused_imports)]
        use crate::common::*;
        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct En_SPEC;
        impl crate::sealed::RegSpec for En_SPEC {
            type DataType = u32;
        }
        #[doc = "DPLL Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
        pub type En = crate::RegValueT<En_SPEC>;

        impl En {
            #[doc = "DPLL disable interrupt enable  when switch off of the DEN bit"]
            #[inline(always)]
            pub fn pdi_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<0,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "DPLL enable interrupt enable  when switch on of the DEN bit"]
            #[inline(always)]
            pub fn pei_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<1,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TRIGGER minimum hold time violation interrupt enable"]
            #[inline(always)]
            pub fn tini_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<2,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TRIGGER maximum hold time violation interrupt enable"]
            #[inline(always)]
            pub fn taxi_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<3,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "STATE inactive slope interrupt enable"]
            #[inline(always)]
            pub fn sisi_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<4,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TRIGGER inactive slope interrupt enable"]
            #[inline(always)]
            pub fn tisi_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<5,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Missing STATE interrupt enable"]
            #[inline(always)]
            pub fn msi_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<6,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Missing TRIGGER interrupt enable"]
            #[inline(always)]
            pub fn mti_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<7,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "STATE active slope interrupt enable"]
            #[inline(always)]
            pub fn sasi_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<8,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TRIGGER active slope interrupt enable"]
            #[inline(always)]
            pub fn tasi_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, En_SPEC, crate::common::RW> {
                crate::common::RegisterFieldBool::<9,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Plausibility window  PVT  violation of TRIGGER interrupt enable"]
            #[inline(always)]
            pub fn pwi_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<10,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "RAM write access to RAM region 2 interrupt enable"]
            #[inline(always)]
            pub fn w2i_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<11,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Write access to RAM region 1b or 1c interrupt enable"]
            #[inline(always)]
            pub fn w1i_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<12,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Get of lock interrupt enable  when lock arises"]
            #[inline(always)]
            pub fn gl1i_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<13,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Loss of lock interrupt enable"]
            #[inline(always)]
            pub fn ll1i_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<14,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Error interrupt enable  see status register"]
            #[inline(always)]
            pub fn ei_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<15,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Get of lock interrupt enable for SUB INC2"]
            #[inline(always)]
            pub fn gl2i_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<16,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Loss of lock interrupt enable for SUB INC2"]
            #[inline(always)]
            pub fn ll2i_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<17,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TRIGGER event interrupt 0 enable"]
            #[inline(always)]
            pub fn te0i_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<18,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TRIGGER event interrupt 1 enable"]
            #[inline(always)]
            pub fn te1i_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<19,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TRIGGER event interrupt 2 enable"]
            #[inline(always)]
            pub fn te2i_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<20,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TRIGGER event interrupt 3 enable"]
            #[inline(always)]
            pub fn te3i_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<21,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TRIGGER event interrupt 4 enable"]
            #[inline(always)]
            pub fn te4i_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<22,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Interrupt enable for calculation of TRIGGER duration done"]
            #[inline(always)]
            pub fn cdti_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<23,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Interrupt enable for calculation of STATE duration done"]
            #[inline(always)]
            pub fn cdsi_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<24,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TRIGGER out of range interrupt enable"]
            #[inline(always)]
            pub fn tori_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<25,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "STATE out of range interrupt enable"]
            #[inline(always)]
            pub fn sori_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<26,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Direction change interrupt enable"]
            #[inline(always)]
            pub fn dcgi_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, En_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<27,1,0,En_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for En {
            #[inline(always)]
            fn default() -> En {
                <crate::RegValueT<En_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Forcint_SPEC;
        impl crate::sealed::RegSpec for Forcint_SPEC {
            type DataType = u32;
        }
        #[doc = "DPLL Interrupt Force Register\n resetvalue={Application Reset:0x0}"]
        pub type Forcint = crate::RegValueT<Forcint_SPEC>;

        impl Forcint {
            #[doc = "Force Interrupt PDI. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_pdi(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<0,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt PEI. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_pei(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<1,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt TINI. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_tini(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<2,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt TAXI. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_taxi(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<3,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt SISI. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_sisi(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<4,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt TISI. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_tisi(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<5,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt MSI. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_msi(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<6,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt MTI. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_mti(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<7,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt SASI. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_sasi(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<8,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt TASI. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_tasi(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<9,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt PWI. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_pwi(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<10,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt W2I. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_w2i(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<11,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt W1I. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_w1i(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<12,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt GL1I. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_gl1i(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<13,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt LL1I. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_ll1i(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<14,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt EI. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_ei(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<15,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt GL2I. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_gl2i(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<16,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt LL2I. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_ll2i(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<17,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt TE0I. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_te0i(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<18,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt TE1I. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_te1i(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<19,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt TE2I. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_te2i(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<20,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt TE3I. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_te3i(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<21,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt TE4I. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_te4i(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<22,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt CDTI. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_cdti(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<23,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt CDSI. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_cdsi(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<24,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt TORI. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_tori(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<25,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force Interrupt SORI. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_sori(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<26,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force interrupt DCGI. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_dcgi(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, Forcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<27,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for Forcint {
            #[inline(always)]
            fn default() -> Forcint {
                <crate::RegValueT<Forcint_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Mode_SPEC;
        impl crate::sealed::RegSpec for Mode_SPEC {
            type DataType = u32;
        }
        #[doc = "DPLL Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
        pub type Mode = crate::RegValueT<Mode_SPEC>;

        impl Mode {
            #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
            #[inline(always)]
            pub fn irq_mode(
                self,
            ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Mode_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<0,0x3,1,0,u8, Mode_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for Mode {
            #[inline(always)]
            fn default() -> Mode {
                <crate::RegValueT<Mode_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Notify_SPEC;
        impl crate::sealed::RegSpec for Notify_SPEC {
            type DataType = u32;
        }
        #[doc = "DPLL Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
        pub type Notify = crate::RegValueT<Notify_SPEC>;

        impl Notify {
            #[doc = "DPLL disable interrupt  announces the switch off of the DEN bit. This event is combined with the PEI interrupt to the common PDI   PEI        interrupt line number 1."]
            #[inline(always)]
            pub fn pdi(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<0,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "DPLL enable interrupt. Announces the switch on of the DEN bit. This event is combined with the PDI interrupt to the common PDI   PEI        interrupt line number 1."]
            #[inline(always)]
            pub fn pei(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<1,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TRIGGER minimum hold time violation interrupt  dt    THMI   0"]
            #[inline(always)]
            pub fn tini(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<2,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TRIGGER maximum hold time violation interrupt  dt   THMA   0"]
            #[inline(always)]
            pub fn taxi(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<3,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "STATE inactive slope interrupt"]
            #[inline(always)]
            pub fn sisi(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<4,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TRIGGER inactive slope interrupt. The TISI bit is only set for an inactive slope when the preceding active        slope was accepted. In the case of suppression of the last active slope        by the plausibility check the next inactive slope is to be ignored. No        set of TISI is performed in this case."]
            #[inline(always)]
            pub fn tisi(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<5,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Missing STATE interrupt"]
            #[inline(always)]
            pub fn msi(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<6,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Missing TRIGGER interrupt"]
            #[inline(always)]
            pub fn mti(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<7,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "STATE active slope interrupt"]
            #[inline(always)]
            pub fn sasi(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<8,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TRIGGER active slope interrupt"]
            #[inline(always)]
            pub fn tasi(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<9,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Plausibility window  PVT  violation interrupt of TRIGGER"]
            #[inline(always)]
            pub fn pwi(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<10,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "RAM write access to RAM region 2 interrupt"]
            #[inline(always)]
            pub fn w2i(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<11,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Write access to RAM region 1b or 1c interrupt"]
            #[inline(always)]
            pub fn w1i(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<12,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Get of lock interrupt  for SUB INC1"]
            #[inline(always)]
            pub fn gl1i(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<13,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Loss of lock interrupt for SUB INC1"]
            #[inline(always)]
            pub fn ll1i(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<14,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Error interrupt  see status register bit 31"]
            #[inline(always)]
            pub fn ei(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<15,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Get of lock interrupt  for SUB INC2"]
            #[inline(always)]
            pub fn gl2i(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<16,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Loss of lock interrupt for SUB INC2"]
            #[inline(always)]
            pub fn ll2i(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<17,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TRIGGER event interrupt 0"]
            #[inline(always)]
            pub fn te0i(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<18,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TRIGGER event interrupt 1"]
            #[inline(always)]
            pub fn te1i(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<19,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TRIGGER event interrupt 2"]
            #[inline(always)]
            pub fn te2i(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<20,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TRIGGER event interrupt 3"]
            #[inline(always)]
            pub fn te3i(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<21,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TRIGGER event interrupt 4"]
            #[inline(always)]
            pub fn te4i(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<22,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Calculation of TRIGGER duration done  only while NTI CNT is zero"]
            #[inline(always)]
            pub fn cdti(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<23,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Calculation of STATE duration done"]
            #[inline(always)]
            pub fn cdsi(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<24,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "TRIGGER out of range interrupt"]
            #[inline(always)]
            pub fn tori(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<25,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "STATE out of range. The interrupt occurs at line number 0."]
            #[inline(always)]
            pub fn sori(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<26,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Direction change interrupt"]
            #[inline(always)]
            pub fn dcgi(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, Notify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<27,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for Notify {
            #[inline(always)]
            fn default() -> Notify {
                <crate::RegValueT<Notify_SPEC> as RegisterValue<_>>::new(0)
            }
        }
    }
}
#[doc = "DSADC"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Dsadc(pub(super) *mut u8);
unsafe impl core::marker::Send for Dsadc {}
unsafe impl core::marker::Sync for Dsadc {}
impl Dsadc {
    #[doc = "DSADC Output Select i0 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn dsadcoutseli0(
        &self,
    ) -> crate::common::Reg<dsadc::DsadcoutseLi0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
    }
}
pub mod dsadc {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct DsadcoutseLi0_SPEC;
    impl crate::sealed::RegSpec for DsadcoutseLi0_SPEC {
        type DataType = u32;
    }
    #[doc = "DSADC Output Select i0 Register\n resetvalue={Application Reset:0x0}"]
    pub type DsadcoutseLi0 = crate::RegValueT<DsadcoutseLi0_SPEC>;

    impl DsadcoutseLi0 {
        #[doc = "Output Selection for DSADC7 GTM connection. This bit field defines which TOM ATOM channel output is used as DSADCx        trigger i."]
        #[inline(always)]
        pub fn sel0(
            self,
        ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, DsadcoutseLi0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xf,1,0,u8, DsadcoutseLi0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output Selection for DSADC7 GTM connection. This bit field defines which TOM ATOM channel output is used as DSADCx        trigger i."]
        #[inline(always)]
        pub fn sel1(
            self,
        ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, DsadcoutseLi0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0xf,1,0,u8, DsadcoutseLi0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output Selection for DSADC7 GTM connection. This bit field defines which TOM ATOM channel output is used as DSADCx        trigger i."]
        #[inline(always)]
        pub fn sel2(
            self,
        ) -> crate::common::RegisterField<8, 0xf, 1, 0, u8, DsadcoutseLi0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0xf,1,0,u8, DsadcoutseLi0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output Selection for DSADC7 GTM connection. This bit field defines which TOM ATOM channel output is used as DSADCx        trigger i."]
        #[inline(always)]
        pub fn sel3(
            self,
        ) -> crate::common::RegisterField<12, 0xf, 1, 0, u8, DsadcoutseLi0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0xf,1,0,u8, DsadcoutseLi0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output Selection for DSADC7 GTM connection. This bit field defines which TOM ATOM channel output is used as DSADCx        trigger i."]
        #[inline(always)]
        pub fn sel4(
            self,
        ) -> crate::common::RegisterField<16, 0xf, 1, 0, u8, DsadcoutseLi0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xf,1,0,u8, DsadcoutseLi0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output Selection for DSADC7 GTM connection. This bit field defines which TOM ATOM channel output is used as DSADCx        trigger i."]
        #[inline(always)]
        pub fn sel5(
            self,
        ) -> crate::common::RegisterField<20, 0xf, 1, 0, u8, DsadcoutseLi0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<20,0xf,1,0,u8, DsadcoutseLi0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for DsadcoutseLi0 {
        #[inline(always)]
        fn default() -> DsadcoutseLi0 {
            <crate::RegValueT<DsadcoutseLi0_SPEC> as RegisterValue<_>>::new(0)
        }
    }
}
#[doc = "ICM"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Icm(pub(super) *mut u8);
unsafe impl core::marker::Send for Icm {}
unsafe impl core::marker::Sync for Icm {}
impl Icm {
    #[doc = "IRQG"]
    #[inline(always)]
    pub fn irqg(self) -> icm::Irqg {
        unsafe { icm::Irqg(self.0.add(0usize)) }
    }
}
pub mod icm {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc = "IRQG"]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Irqg(pub(super) *mut u8);
    unsafe impl core::marker::Send for Irqg {}
    unsafe impl core::marker::Sync for Irqg {}
    impl Irqg {
        #[doc = "ICM Interrupt Group Register 0 for Channel Error Interrupt Information\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn cei0(&self) -> crate::common::Reg<irqg::Cei0_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(52usize)) }
        }
        #[doc = "ICM Interrupt Group Register 1 for Channel Error Interrupt Information\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn cei1(&self) -> crate::common::Reg<irqg::Cei1_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(56usize)) }
        }
        #[doc = "ICM Interrupt Group Register 2 for Channel Error Interrupt Information\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn cei2(&self) -> crate::common::Reg<irqg::Cei2_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(60usize)) }
        }
        #[doc = "ICM Interrupt Group Register 3 for Channel Error Interrupt Information\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn cei3(&self) -> crate::common::Reg<irqg::Cei3_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(64usize)) }
        }
        #[doc = "ICM Interrupt Group Register 4 for Channel Error Interrupt Information\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn cei4(&self) -> crate::common::Reg<irqg::Cei4_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(68usize)) }
        }
        #[doc = "ICM Interrupt Group Register Covering Infrastructural and Safety Components ARU  BRC  AEI  PSM0  PSM1  MAP  CMP  SPE\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn icm_irqg_0(
            &self,
        ) -> crate::common::Reg<irqg::IcmIrqg0_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
        }
        #[doc = "ICM Interrupt Group Register Covering DPLL\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn icm_irqg_1(
            &self,
        ) -> crate::common::Reg<irqg::IcmIrqg1_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
        }
        #[doc = "ICM Interrupt Group Register Covering GTM Output Sub Modules ATOM4 to ATOM7\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn icm_irqg_10(
            &self,
        ) -> crate::common::Reg<irqg::IcmIrqg10_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(40usize)) }
        }
        #[doc = "ICM Interrupt Group Register Covering TIM0  TIM1  TIM2  TIM3\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn icm_irqg_2(
            &self,
        ) -> crate::common::Reg<irqg::IcmIrqg2_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
        }
        #[doc = "ICM Interrupt Group Register Covering TIM4  TIM5  TIM6  TIM7\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn icm_irqg_3(
            &self,
        ) -> crate::common::Reg<irqg::IcmIrqg3_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(12usize)) }
        }
        #[doc = "ICM Interrupt Group Register Covering MCS0 to MCS3 Sub Modules\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn icm_irqg_4(
            &self,
        ) -> crate::common::Reg<irqg::IcmIrqg4_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(16usize)) }
        }
        #[doc = "ICM Interrupt Group Register Covering MCS4 to MCS6 Sub Modules\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn icm_irqg_5(
            &self,
        ) -> crate::common::Reg<irqg::IcmIrqg5_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(20usize)) }
        }
        #[doc = "ICM Interrupt Group Register Covering GTM Output Sub Modules TOM0 to TOM1\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn icm_irqg_6(
            &self,
        ) -> crate::common::Reg<irqg::IcmIrqg6_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(24usize)) }
        }
        #[doc = "ICM Interrupt Group Register Covering GTM Output Sub Modules TOM2 to TOM3\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn icm_irqg_7(
            &self,
        ) -> crate::common::Reg<irqg::IcmIrqg7_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(28usize)) }
        }
        #[doc = "ICM Interrupt Group Register Covering GTM Output Sub Modules ATOM0  ATOM1  ATOM2 and ATOM3\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn icm_irqg_9(
            &self,
        ) -> crate::common::Reg<irqg::IcmIrqg9_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(36usize)) }
        }
        #[doc = "ICM Interrupt Group ATOM 0 for Channel Interrupt Information of ATOMm\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn icm_irqg_atom_k_ci(
            &self,
        ) -> [crate::common::Reg<irqg::IcmIrqgAtomKCi_SPEC, crate::common::R>; 2] {
            unsafe {
                [
                    crate::common::Reg::from_ptr(self.0.add(0x190usize + 0x0usize)),
                    crate::common::Reg::from_ptr(self.0.add(0x190usize + 0x4usize)),
                ]
            }
        }
        #[doc = "ICM Interrupt Group k for Module Error Interrupt Information for each TIMm  MCSm  SPEm  FIFOm\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn icm_irqg_cls_k_mei(
            &self,
        ) -> [crate::common::Reg<irqg::IcmIrqgClsKMei_SPEC, crate::common::R>; 2] {
            unsafe {
                [
                    crate::common::Reg::from_ptr(self.0.add(0x110usize + 0x0usize)),
                    crate::common::Reg::from_ptr(self.0.add(0x110usize + 0x4usize)),
                ]
            }
        }
        #[doc = "ICM Interrupt Group MCS 0 for Channel Error Interrupt information\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn icm_irqg_mcsi_cei(
            &self,
        ) -> [crate::common::Reg<irqg::IcmIrqgMcSiCei_SPEC, crate::common::R>; 5] {
            unsafe {
                [
                    crate::common::Reg::from_ptr(self.0.add(0x64usize + 0x0usize)),
                    crate::common::Reg::from_ptr(self.0.add(0x64usize + 0x4usize)),
                    crate::common::Reg::from_ptr(self.0.add(0x64usize + 0x8usize)),
                    crate::common::Reg::from_ptr(self.0.add(0x64usize + 0xcusize)),
                    crate::common::Reg::from_ptr(self.0.add(0x64usize + 0x10usize)),
                ]
            }
        }
        #[doc = "ICM Interrupt Group MCS 0 for Channel Interrupt Information\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn icm_irqg_mcsi_ci(
            &self,
        ) -> [crate::common::Reg<irqg::IcmIrqgMcSiCi_SPEC, crate::common::R>; 5] {
            unsafe {
                [
                    crate::common::Reg::from_ptr(self.0.add(0x120usize + 0x0usize)),
                    crate::common::Reg::from_ptr(self.0.add(0x120usize + 0x4usize)),
                    crate::common::Reg::from_ptr(self.0.add(0x120usize + 0x8usize)),
                    crate::common::Reg::from_ptr(self.0.add(0x120usize + 0xcusize)),
                    crate::common::Reg::from_ptr(self.0.add(0x120usize + 0x10usize)),
                ]
            }
        }
        #[doc = "ICM Interrupt Group PSM 0 for Channel Error Interrupt information of FIFO0  FIFO1  FIFO2\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn icm_irqg_psm_k_cei(
            &self,
        ) -> crate::common::Reg<irqg::IcmIrqgPsmKCei_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(164usize)) }
        }
        #[doc = "ICM Interrupt Group PSM 0 for Channel Interrupt Information of FIFO0  FIFO1  FIFO2\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn icm_irqg_psm_k_ci(
            &self,
        ) -> crate::common::Reg<irqg::IcmIrqgPsmKCi_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(352usize)) }
        }
        #[doc = "ICM Interrupt Group SPE for Module Error Interrupt Information\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn icm_irqg_spe_cei(
            &self,
        ) -> crate::common::Reg<irqg::IcmIrqgSpeCei_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(180usize)) }
        }
        #[doc = "ICM Interrupt Group SPE for Module Interrupt Information\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn icm_irqg_spe_ci(
            &self,
        ) -> crate::common::Reg<irqg::IcmIrqgSpeCi_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(368usize)) }
        }
        #[doc = "ICM Interrupt Group TOM 0 for Channel Interrupt Information of TOMm\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn icm_irqg_tom_k_ci(
            &self,
        ) -> [crate::common::Reg<irqg::IcmIrqgTomKCi_SPEC, crate::common::R>; 2] {
            unsafe {
                [
                    crate::common::Reg::from_ptr(self.0.add(0x1a0usize + 0x0usize)),
                    crate::common::Reg::from_ptr(self.0.add(0x1a0usize + 0x4usize)),
                ]
            }
        }
        #[doc = "ICM Interrupt Group Register for Module Error Interrupt Information\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn mei(&self) -> crate::common::Reg<irqg::Mei_SPEC, crate::common::R> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(48usize)) }
        }
    }
    pub mod irqg {
        #[allow(unused_imports)]
        use crate::common::*;
        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Cei0_SPEC;
        impl crate::sealed::RegSpec for Cei0_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group Register 0 for Channel Error Interrupt Information\n resetvalue={Application Reset:0x0}"]
        pub type Cei0 = crate::RegValueT<Cei0_SPEC>;

        impl Cei0 {
            #[doc = "FIFO0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo0_ch0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo0_ch1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo0_ch2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo0_ch3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo0_ch4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<4,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo0_ch5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<5,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo0_ch6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<6,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo0_ch7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<7,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo1_ch0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<8,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo1_ch1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<9,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo1_ch2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<10,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo1_ch3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<11,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo1_ch4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<12,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo1_ch5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<13,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo1_ch6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<14,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo1_ch7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<15,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo2_ch0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<16,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo2_ch1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<17,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo2_ch2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<18,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo2_ch3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<19,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo2_ch4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<20,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo2_ch5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<21,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo2_ch6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<22,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn fifo2_ch7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, Cei0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<23,1,0,Cei0_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for Cei0 {
            #[inline(always)]
            fn default() -> Cei0 {
                <crate::RegValueT<Cei0_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Cei1_SPEC;
        impl crate::sealed::RegSpec for Cei1_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group Register 1 for Channel Error Interrupt Information\n resetvalue={Application Reset:0x0}"]
        pub type Cei1 = crate::RegValueT<Cei1_SPEC>;

        impl Cei1 {
            #[doc = "TIM0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim0_ch0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim0_ch1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim0_ch2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim0_ch3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim0_ch4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<4,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim0_ch5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<5,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim0_ch6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<6,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim0_ch7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<7,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim1_ch0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<8,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim1_ch1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<9,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim1_ch2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<10,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim1_ch3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<11,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim1_ch4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<12,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim1_ch5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<13,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim1_ch6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<14,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim1_ch7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<15,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim2_ch0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<16,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim2_ch1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<17,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim2_ch2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<18,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim2_ch3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<19,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim2_ch4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<20,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim2_ch5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<21,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim2_ch6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<22,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim2_ch7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<23,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM3 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim3_ch0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<24,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM3 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim3_ch1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<25,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM3 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim3_ch2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<26,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM3 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim3_ch3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<27,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM3 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim3_ch4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<28, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<28,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM3 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim3_ch5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<29, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<29,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM3 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim3_ch6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<30, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<30,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM3 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim3_ch7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<31, 1, 0, Cei1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<31,1,0,Cei1_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for Cei1 {
            #[inline(always)]
            fn default() -> Cei1 {
                <crate::RegValueT<Cei1_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Cei2_SPEC;
        impl crate::sealed::RegSpec for Cei2_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group Register 2 for Channel Error Interrupt Information\n resetvalue={Application Reset:0x0}"]
        pub type Cei2 = crate::RegValueT<Cei2_SPEC>;

        impl Cei2 {
            #[doc = "TIM4 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim4_ch0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM4 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim4_ch1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM4 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim4_ch2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM4 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim4_ch3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM4 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim4_ch4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<4,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM4 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim4_ch5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<5,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM4 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim4_ch6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<6,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM4 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim4_ch7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<7,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM5 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim5_ch0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<8,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM5 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim5_ch1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<9,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM5 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim5_ch2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<10,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM5 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim5_ch3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<11,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM5 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim5_ch4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<12,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM5 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim5_ch5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<13,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM5 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim5_ch6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<14,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM5 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim5_ch7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<15,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM6 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim6_ch0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<16,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM6 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim6_ch1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<17,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM6 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim6_ch2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<18,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM6 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim6_ch3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<19,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM6 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim6_ch4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<20,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM6 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim6_ch5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<21,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM6 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim6_ch6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<22,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM6 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim6_ch7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<23,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim7_ch0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<24,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim7_ch1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<25,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim7_ch2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<26,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim7_ch3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<27,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim7_ch4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<28, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<28,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim7_ch5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<29, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<29,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim7_ch6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<30, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<30,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim7_ch7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<31, 1, 0, Cei2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<31,1,0,Cei2_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for Cei2 {
            #[inline(always)]
            fn default() -> Cei2 {
                <crate::RegValueT<Cei2_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Cei3_SPEC;
        impl crate::sealed::RegSpec for Cei3_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group Register 3 for Channel Error Interrupt Information\n resetvalue={Application Reset:0x0}"]
        pub type Cei3 = crate::RegValueT<Cei3_SPEC>;

        impl Cei3 {
            #[doc = "MCS0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs0_ch0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs0_ch1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs0_ch2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs0_ch3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs0_ch4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<4,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs0_ch5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<5,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs0_ch6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<6,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS0 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs0_ch7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<7,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs1_ch0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<8,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs1_ch1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<9,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs1_ch2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<10,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs1_ch3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<11,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs1_ch4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<12,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs1_ch5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<13,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs1_ch6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<14,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS1 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs1_ch7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<15,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs2_ch0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<16,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs2_ch1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<17,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs2_ch2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<18,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs2_ch3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<19,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs2_ch4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<20,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs2_ch5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<21,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs2_ch6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<22,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS2 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs2_ch7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<23,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS3 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs3_ch0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<24,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS3 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs3_ch1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<25,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS3 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs3_ch2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<26,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS3 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs3_ch3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<27,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS3 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs3_ch4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<28, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<28,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS3 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs3_ch5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<29, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<29,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS3 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs3_ch6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<30, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<30,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS3 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs3_ch7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<31, 1, 0, Cei3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<31,1,0,Cei3_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for Cei3 {
            #[inline(always)]
            fn default() -> Cei3 {
                <crate::RegValueT<Cei3_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Cei4_SPEC;
        impl crate::sealed::RegSpec for Cei4_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group Register 4 for Channel Error Interrupt Information\n resetvalue={Application Reset:0x0}"]
        pub type Cei4 = crate::RegValueT<Cei4_SPEC>;

        impl Cei4 {
            #[doc = "MCS4 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs4_ch0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS4 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs4_ch1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS4 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs4_ch2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS4 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs4_ch3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS4 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs4_ch4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<4,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS4 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs4_ch5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<5,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS4 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs4_ch6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<6,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS4 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs4_ch7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<7,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS5 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs5_ch0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<8,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS5 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs5_ch1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<9,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS5 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs5_ch2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<10,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS5 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs5_ch3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<11,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS5 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs5_ch4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<12,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS5 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs5_ch5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<13,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS5 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs5_ch6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<14,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS5 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs5_ch7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<15,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS6 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs6_ch0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<16,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS6 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs6_ch1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<17,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS6 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs6_ch2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<18,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS6 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs6_ch3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<19,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS6 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs6_ch4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<20,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS6 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs6_ch5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<21,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS6 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs6_ch6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<22,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS6 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs6_ch7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<23,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs7_ch0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<24,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs7_ch1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<25,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs7_ch2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<26,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs7_ch3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<27,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs7_ch4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<28, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<28,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs7_ch5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<29, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<29,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs7_ch6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<30, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<30,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 channel 7 error interrupt. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs7_ch7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<31, 1, 0, Cei4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<31,1,0,Cei4_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for Cei4 {
            #[inline(always)]
            fn default() -> Cei4 {
                <crate::RegValueT<Cei4_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct IcmIrqg0_SPEC;
        impl crate::sealed::RegSpec for IcmIrqg0_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group Register Covering Infrastructural and Safety Components ARU  BRC  AEI  PSM0  PSM1  MAP  CMP  SPE\n resetvalue={Application Reset:0x0}"]
        pub type IcmIrqg0 = crate::RegValueT<IcmIrqg0_SPEC>;

        impl IcmIrqg0 {
            #[doc = "ARU NEW DATA0 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn aru_new_data0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ARU NEW DATA1 interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn aru_new_data1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ARU ACC ACK interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn aru_acc_ack_irq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "BRC shared sub module interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn brc_irq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "AEI IRQ interrupt. Bit coding see bit 0. Set this bit represents an OR function of the seven interrupt sources AEI TO XPT   AEI USP ADDR   AEI IM ADDR   AEI USP BE   AEIM USP ADDR   AEIM IM ADDR or AEIM USP BE ."]
            #[inline(always)]
            pub fn aei_irq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<4,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "CMP shared sub module interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn cmp_irq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<5,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "SPE0 shared sub module interrupt. Bit coding see bit 0. Set this bit represents an OR function of the five interrupt sources SPE NIPD   SPE DCHG   SPE PERR   SPE BIS or SPE RCMP of SPE instance 0."]
            #[inline(always)]
            pub fn spe0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<6,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "SPE1 shared sub module interrupt. See bit 0 and bit 6."]
            #[inline(always)]
            pub fn spe1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<7,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "SPE2 shared sub module interrupt. See bit 0 and bit 6."]
            #[inline(always)]
            pub fn spe2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<8,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "SPE3 shared sub module interrupt. See bit 0 and bit 6."]
            #[inline(always)]
            pub fn spe3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<9,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "SPE4 shared sub module interrupt. See bit 0 and bit 6."]
            #[inline(always)]
            pub fn spe4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<10,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "SPE5 shared sub module interrupt. See bit 0 and bit 6."]
            #[inline(always)]
            pub fn spe5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<11,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM0 shared sub module channel 7 interrupt. See bit 0 and bit 6. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 0 channel x."]
            #[inline(always)]
            pub fn psm0_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<16,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM0 shared sub module channel 7 interrupt. See bit 0 and bit 6. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 0 channel x."]
            #[inline(always)]
            pub fn psm0_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<17,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM0 shared sub module channel 7 interrupt. See bit 0 and bit 6. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 0 channel x."]
            #[inline(always)]
            pub fn psm0_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<18,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM0 shared sub module channel 7 interrupt. See bit 0 and bit 6. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 0 channel x."]
            #[inline(always)]
            pub fn psm0_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<19,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM0 shared sub module channel 7 interrupt. See bit 0 and bit 6. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 0 channel x."]
            #[inline(always)]
            pub fn psm0_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<20,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM0 shared sub module channel 7 interrupt. See bit 0 and bit 6. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 0 channel x."]
            #[inline(always)]
            pub fn psm0_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<21,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM0 shared sub module channel 7 interrupt. See bit 0 and bit 6. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 0 channel x."]
            #[inline(always)]
            pub fn psm0_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<22,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM0 shared sub module channel 7 interrupt. See bit 0 and bit 6. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 0 channel x."]
            #[inline(always)]
            pub fn psm0_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<23,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 shared sub module channel 7 interrupt. See bit 0 and bit 6. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 1 channel x."]
            #[inline(always)]
            pub fn psm1_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<24,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 shared sub module channel 7 interrupt. See bit 0 and bit 6. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 1 channel x."]
            #[inline(always)]
            pub fn psm1_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<25,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 shared sub module channel 7 interrupt. See bit 0 and bit 6. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 1 channel x."]
            #[inline(always)]
            pub fn psm1_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<26,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 shared sub module channel 7 interrupt. See bit 0 and bit 6. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 1 channel x."]
            #[inline(always)]
            pub fn psm1_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<27,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 shared sub module channel 7 interrupt. See bit 0 and bit 6. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 1 channel x."]
            #[inline(always)]
            pub fn psm1_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<28, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<28,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 shared sub module channel 7 interrupt. See bit 0 and bit 6. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 1 channel x."]
            #[inline(always)]
            pub fn psm1_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<29, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<29,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 shared sub module channel 7 interrupt. See bit 0 and bit 6. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 1 channel x."]
            #[inline(always)]
            pub fn psm1_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<30, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<30,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 shared sub module channel 7 interrupt. See bit 0 and bit 6. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 1 channel x."]
            #[inline(always)]
            pub fn psm1_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<31, 1, 0, IcmIrqg0_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<31,1,0,IcmIrqg0_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for IcmIrqg0 {
            #[inline(always)]
            fn default() -> IcmIrqg0 {
                <crate::RegValueT<IcmIrqg0_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct IcmIrqg1_SPEC;
        impl crate::sealed::RegSpec for IcmIrqg1_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group Register Covering DPLL\n resetvalue={Application Reset:0x0}"]
        pub type IcmIrqg1 = crate::RegValueT<IcmIrqg1_SPEC>;

        impl IcmIrqg1 {
            #[doc = "TRIGGER direction change detected. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn dpll_dcgi_irq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "DPLL enable disable interrupt. Set this bit represents an OR function of the two interrupt sources DPLL PDI or DPLL PEI. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_edi_irq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TRIGGER minimum hold time  THMI  violation detected interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_tini_irq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TRIGGER maximum hold time  THMA  violation detected interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_taxi_irq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "STATE inactive slope detected interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_sisi_irq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<4,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TRIGGER inactive slope detected interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_tisi_irq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<5,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "Missing STATE interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_msi_irq(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<6,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "Missing TRIGGER interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_mti_irq(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<7,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "STATE active slope detected. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_sasi_irq(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<8,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TRIGGER active slope detected while NTI CNT is zero. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_tasi_irq(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<9,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "Plausibility window  PVT  violation interrupt of TRIGGER. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_pwi_irq(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<10,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "Write access to RAM region 2 interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_w2i_irq(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<11,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "Write access to RAM region 1b or 1c interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_w1i_irq(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<12,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "Get of lock interrupt for SUB INC1. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_gl1i_irq(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<13,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "Loss of lock interrupt for SUB INC1. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_ll1i_irq(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<14,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "Error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_ei_irq(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<15,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "Get of lock interrupt for SUB INC2. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_gl2i_irq(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<16,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "Loss of lock interrupt for SUB INC2. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_ll2i_irq(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<17,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TRIGGER event interrupt 0. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_te0i_irq(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<18,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TRIGGER event interrupt 1. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_te1i_irq(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<19,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TRIGGER event interrupt 2. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_te2i_irq(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<20,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TRIGGER event interrupt 3. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_te3i_irq(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<21,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TRIGGER event interrupt 4. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_te4i_irq(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<22,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "DPLL calculated duration interrupt for trigger. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_cdti_irq(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<23,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "DPLL calculated duration interrupt for state. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_cdsi_irq(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<24,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "DPLL calculated duration interrupt for state. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_tori_irq(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<25,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "DPLL calculated duration interrupt for state. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_sori_irq(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, IcmIrqg1_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<26,1,0,IcmIrqg1_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for IcmIrqg1 {
            #[inline(always)]
            fn default() -> IcmIrqg1 {
                <crate::RegValueT<IcmIrqg1_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct IcmIrqg10_SPEC;
        impl crate::sealed::RegSpec for IcmIrqg10_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group Register Covering GTM Output Sub Modules ATOM4 to ATOM7\n resetvalue={Application Reset:0x0}"]
        pub type IcmIrqg10 = crate::RegValueT<IcmIrqg10_SPEC>;

        impl IcmIrqg10 {
            #[doc = "ATOM4 channel 7 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 4 channel x."]
            #[inline(always)]
            pub fn atom4_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM4 channel 7 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 4 channel x."]
            #[inline(always)]
            pub fn atom4_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM4 channel 7 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 4 channel x."]
            #[inline(always)]
            pub fn atom4_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM4 channel 7 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 4 channel x."]
            #[inline(always)]
            pub fn atom4_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM4 channel 7 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 4 channel x."]
            #[inline(always)]
            pub fn atom4_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<4,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM4 channel 7 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 4 channel x."]
            #[inline(always)]
            pub fn atom4_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<5,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM4 channel 7 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 4 channel x."]
            #[inline(always)]
            pub fn atom4_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<6,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM4 channel 7 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 4 channel x."]
            #[inline(always)]
            pub fn atom4_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<7,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM5 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 5 channel x."]
            #[inline(always)]
            pub fn atom5_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<8,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM5 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 5 channel x."]
            #[inline(always)]
            pub fn atom5_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<9,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM5 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 5 channel x."]
            #[inline(always)]
            pub fn atom5_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<10,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM5 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 5 channel x."]
            #[inline(always)]
            pub fn atom5_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<11,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM5 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 5 channel x."]
            #[inline(always)]
            pub fn atom5_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<12,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM5 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 5 channel x."]
            #[inline(always)]
            pub fn atom5_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<13,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM5 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 5 channel x."]
            #[inline(always)]
            pub fn atom5_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<14,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM5 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 5 channel x."]
            #[inline(always)]
            pub fn atom5_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<15,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM6 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 6 channel x."]
            #[inline(always)]
            pub fn atom6_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<16,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM6 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 6 channel x."]
            #[inline(always)]
            pub fn atom6_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<17,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM6 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 6 channel x."]
            #[inline(always)]
            pub fn atom6_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<18,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM6 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 6 channel x."]
            #[inline(always)]
            pub fn atom6_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<19,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM6 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 6 channel x."]
            #[inline(always)]
            pub fn atom6_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<20,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM6 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 6 channel x."]
            #[inline(always)]
            pub fn atom6_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<21,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM6 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 6 channel x."]
            #[inline(always)]
            pub fn atom6_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<22,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM6 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 6 channel x."]
            #[inline(always)]
            pub fn atom6_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<23,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM7 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 7 channel x."]
            #[inline(always)]
            pub fn atom7_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<24,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM7 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 7 channel x."]
            #[inline(always)]
            pub fn atom7_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<25,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM7 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 7 channel x."]
            #[inline(always)]
            pub fn atom7_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<26,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM7 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 7 channel x."]
            #[inline(always)]
            pub fn atom7_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<27,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM7 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 7 channel x."]
            #[inline(always)]
            pub fn atom7_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<28, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<28,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM7 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 7 channel x."]
            #[inline(always)]
            pub fn atom7_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<29, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<29,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM7 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 7 channel x."]
            #[inline(always)]
            pub fn atom7_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<30, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<30,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM7 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 7 channel x."]
            #[inline(always)]
            pub fn atom7_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<31, 1, 0, IcmIrqg10_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<31,1,0,IcmIrqg10_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for IcmIrqg10 {
            #[inline(always)]
            fn default() -> IcmIrqg10 {
                <crate::RegValueT<IcmIrqg10_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct IcmIrqg2_SPEC;
        impl crate::sealed::RegSpec for IcmIrqg2_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group Register Covering TIM0  TIM1  TIM2  TIM3\n resetvalue={Application Reset:0x0}"]
        pub type IcmIrqg2 = crate::RegValueT<IcmIrqg2_SPEC>;

        impl IcmIrqg2 {
            #[doc = "TIM0 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 0 channel x."]
            #[inline(always)]
            pub fn tim0_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM0 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 0 channel x."]
            #[inline(always)]
            pub fn tim0_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM0 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 0 channel x."]
            #[inline(always)]
            pub fn tim0_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM0 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 0 channel x."]
            #[inline(always)]
            pub fn tim0_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM0 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 0 channel x."]
            #[inline(always)]
            pub fn tim0_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<4,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM0 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 0 channel x."]
            #[inline(always)]
            pub fn tim0_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<5,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM0 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 0 channel x."]
            #[inline(always)]
            pub fn tim0_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<6,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM0 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 0 channel x."]
            #[inline(always)]
            pub fn tim0_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<7,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM1 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 1 channel x."]
            #[inline(always)]
            pub fn tim1_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<8,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM1 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 1 channel x."]
            #[inline(always)]
            pub fn tim1_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<9,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM1 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 1 channel x."]
            #[inline(always)]
            pub fn tim1_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<10,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM1 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 1 channel x."]
            #[inline(always)]
            pub fn tim1_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<11,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM1 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 1 channel x."]
            #[inline(always)]
            pub fn tim1_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<12,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM1 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 1 channel x."]
            #[inline(always)]
            pub fn tim1_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<13,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM1 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 1 channel x."]
            #[inline(always)]
            pub fn tim1_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<14,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM1 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 1 channel x."]
            #[inline(always)]
            pub fn tim1_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<15,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 shared interrupt channel 7. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 2 channel x."]
            #[inline(always)]
            pub fn tim2_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<16,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 shared interrupt channel 7. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 2 channel x."]
            #[inline(always)]
            pub fn tim2_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<17,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 shared interrupt channel 7. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 2 channel x."]
            #[inline(always)]
            pub fn tim2_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<18,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 shared interrupt channel 7. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 2 channel x."]
            #[inline(always)]
            pub fn tim2_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<19,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 shared interrupt channel 7. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 2 channel x."]
            #[inline(always)]
            pub fn tim2_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<20,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 shared interrupt channel 7. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 2 channel x."]
            #[inline(always)]
            pub fn tim2_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<21,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 shared interrupt channel 7. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 2 channel x."]
            #[inline(always)]
            pub fn tim2_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<22,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 shared interrupt channel 7. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 2 channel x."]
            #[inline(always)]
            pub fn tim2_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<23,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 shared interrupt channel 7. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 3 channel x."]
            #[inline(always)]
            pub fn tim3_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<24,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 shared interrupt channel 7. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 3 channel x."]
            #[inline(always)]
            pub fn tim3_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<25,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 shared interrupt channel 7. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 3 channel x."]
            #[inline(always)]
            pub fn tim3_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<26,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 shared interrupt channel 7. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 3 channel x."]
            #[inline(always)]
            pub fn tim3_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<27,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 shared interrupt channel 7. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 3 channel x."]
            #[inline(always)]
            pub fn tim3_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<28, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<28,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 shared interrupt channel 7. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 3 channel x."]
            #[inline(always)]
            pub fn tim3_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<29, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<29,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 shared interrupt channel 7. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 3 channel x."]
            #[inline(always)]
            pub fn tim3_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<30, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<30,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM2 shared interrupt channel 7. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 3 channel x."]
            #[inline(always)]
            pub fn tim3_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<31, 1, 0, IcmIrqg2_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<31,1,0,IcmIrqg2_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for IcmIrqg2 {
            #[inline(always)]
            fn default() -> IcmIrqg2 {
                <crate::RegValueT<IcmIrqg2_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct IcmIrqg3_SPEC;
        impl crate::sealed::RegSpec for IcmIrqg3_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group Register Covering TIM4  TIM5  TIM6  TIM7\n resetvalue={Application Reset:0x0}"]
        pub type IcmIrqg3 = crate::RegValueT<IcmIrqg3_SPEC>;

        impl IcmIrqg3 {
            #[doc = "TIM4 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 4 channel x."]
            #[inline(always)]
            pub fn tim4_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM4 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 4 channel x."]
            #[inline(always)]
            pub fn tim4_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM4 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 4 channel x."]
            #[inline(always)]
            pub fn tim4_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM4 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 4 channel x."]
            #[inline(always)]
            pub fn tim4_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM4 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 4 channel x."]
            #[inline(always)]
            pub fn tim4_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<4,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM4 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 4 channel x."]
            #[inline(always)]
            pub fn tim4_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<5,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM4 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 4 channel x."]
            #[inline(always)]
            pub fn tim4_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<6,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM4 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 4 channel x."]
            #[inline(always)]
            pub fn tim4_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<7,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM5 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 5 channel x."]
            #[inline(always)]
            pub fn tim5_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<8,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM5 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 5 channel x."]
            #[inline(always)]
            pub fn tim5_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<9,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM5 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 5 channel x."]
            #[inline(always)]
            pub fn tim5_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<10,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM5 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 5 channel x."]
            #[inline(always)]
            pub fn tim5_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<11,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM5 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 5 channel x."]
            #[inline(always)]
            pub fn tim5_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<12,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM5 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 5 channel x."]
            #[inline(always)]
            pub fn tim5_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<13,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM5 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 5 channel x."]
            #[inline(always)]
            pub fn tim5_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<14,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM5 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 5 channel x."]
            #[inline(always)]
            pub fn tim5_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<15,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM6 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 6 channel x."]
            #[inline(always)]
            pub fn tim6_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<16,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM6 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 6 channel x."]
            #[inline(always)]
            pub fn tim6_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<17,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM6 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 6 channel x."]
            #[inline(always)]
            pub fn tim6_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<18,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM6 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 6 channel x."]
            #[inline(always)]
            pub fn tim6_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<19,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM6 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 6 channel x."]
            #[inline(always)]
            pub fn tim6_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<20,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM6 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 6 channel x."]
            #[inline(always)]
            pub fn tim6_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<21,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM6 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 6 channel x."]
            #[inline(always)]
            pub fn tim6_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<22,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM6 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 6 channel x."]
            #[inline(always)]
            pub fn tim6_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<23,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 7 channel x."]
            #[inline(always)]
            pub fn tim7_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<24,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 7 channel x."]
            #[inline(always)]
            pub fn tim7_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<25,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 7 channel x."]
            #[inline(always)]
            pub fn tim7_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<26,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 7 channel x."]
            #[inline(always)]
            pub fn tim7_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<27,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 7 channel x."]
            #[inline(always)]
            pub fn tim7_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<28, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<28,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 7 channel x."]
            #[inline(always)]
            pub fn tim7_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<29, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<29,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 7 channel x."]
            #[inline(always)]
            pub fn tim7_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<30, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<30,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 shared interrupt channel 7. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the six interrupt sources NEWVALx IRQ   ECNTOFLx IRQ   CNTOFLx IRQ         GPRXOFLx IRQ   GLITCHDETx IRQ or TODETx IRQ of TIM instance 7 channel x."]
            #[inline(always)]
            pub fn tim7_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<31, 1, 0, IcmIrqg3_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<31,1,0,IcmIrqg3_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for IcmIrqg3 {
            #[inline(always)]
            fn default() -> IcmIrqg3 {
                <crate::RegValueT<IcmIrqg3_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct IcmIrqg4_SPEC;
        impl crate::sealed::RegSpec for IcmIrqg4_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group Register Covering MCS0 to MCS3 Sub Modules\n resetvalue={Application Reset:0x0}"]
        pub type IcmIrqg4 = crate::RegValueT<IcmIrqg4_SPEC>;

        impl IcmIrqg4 {
            #[doc = "MCS0 channel 7 interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 0 channel x."]
            #[inline(always)]
            pub fn mcs0_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS0 channel 7 interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 0 channel x."]
            #[inline(always)]
            pub fn mcs0_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS0 channel 7 interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 0 channel x."]
            #[inline(always)]
            pub fn mcs0_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS0 channel 7 interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 0 channel x."]
            #[inline(always)]
            pub fn mcs0_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS0 channel 7 interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 0 channel x."]
            #[inline(always)]
            pub fn mcs0_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<4,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS0 channel 7 interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 0 channel x."]
            #[inline(always)]
            pub fn mcs0_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<5,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS0 channel 7 interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 0 channel x."]
            #[inline(always)]
            pub fn mcs0_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<6,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS0 channel 7 interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 0 channel x."]
            #[inline(always)]
            pub fn mcs0_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<7,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS1 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 1 channel x."]
            #[inline(always)]
            pub fn mcs1_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<8,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS1 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 1 channel x."]
            #[inline(always)]
            pub fn mcs1_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<9,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS1 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 1 channel x."]
            #[inline(always)]
            pub fn mcs1_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<10,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS1 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 1 channel x."]
            #[inline(always)]
            pub fn mcs1_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<11,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS1 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 1 channel x."]
            #[inline(always)]
            pub fn mcs1_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<12,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS1 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 1 channel x."]
            #[inline(always)]
            pub fn mcs1_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<13,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS1 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 1 channel x."]
            #[inline(always)]
            pub fn mcs1_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<14,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS1 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 1 channel x."]
            #[inline(always)]
            pub fn mcs1_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<15,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS2 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 2 channel x."]
            #[inline(always)]
            pub fn mcs2_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<16,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS2 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 2 channel x."]
            #[inline(always)]
            pub fn mcs2_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<17,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS2 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 2 channel x."]
            #[inline(always)]
            pub fn mcs2_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<18,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS2 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 2 channel x."]
            #[inline(always)]
            pub fn mcs2_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<19,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS2 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 2 channel x."]
            #[inline(always)]
            pub fn mcs2_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<20,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS2 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 2 channel x."]
            #[inline(always)]
            pub fn mcs2_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<21,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS2 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 2 channel x."]
            #[inline(always)]
            pub fn mcs2_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<22,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS2 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 2 channel x."]
            #[inline(always)]
            pub fn mcs2_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<23,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS3 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 3 channel x."]
            #[inline(always)]
            pub fn mcs3_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<24,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS3 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 3 channel x."]
            #[inline(always)]
            pub fn mcs3_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<25,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS3 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 3 channel x."]
            #[inline(always)]
            pub fn mcs3_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<26,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS3 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 3 channel x."]
            #[inline(always)]
            pub fn mcs3_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<27,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS3 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 3 channel x."]
            #[inline(always)]
            pub fn mcs3_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<28, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<28,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS3 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 3 channel x."]
            #[inline(always)]
            pub fn mcs3_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<29, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<29,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS3 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 3 channel x."]
            #[inline(always)]
            pub fn mcs3_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<30, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<30,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS3 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 3 channel x."]
            #[inline(always)]
            pub fn mcs3_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<31, 1, 0, IcmIrqg4_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<31,1,0,IcmIrqg4_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for IcmIrqg4 {
            #[inline(always)]
            fn default() -> IcmIrqg4 {
                <crate::RegValueT<IcmIrqg4_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct IcmIrqg5_SPEC;
        impl crate::sealed::RegSpec for IcmIrqg5_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group Register Covering MCS4 to MCS6 Sub Modules\n resetvalue={Application Reset:0x0}"]
        pub type IcmIrqg5 = crate::RegValueT<IcmIrqg5_SPEC>;

        impl IcmIrqg5 {
            #[doc = "MCS4 channel 7 interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 4 channel x."]
            #[inline(always)]
            pub fn mcs4_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS4 channel 7 interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 4 channel x."]
            #[inline(always)]
            pub fn mcs4_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS4 channel 7 interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 4 channel x."]
            #[inline(always)]
            pub fn mcs4_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS4 channel 7 interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 4 channel x."]
            #[inline(always)]
            pub fn mcs4_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS4 channel 7 interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 4 channel x."]
            #[inline(always)]
            pub fn mcs4_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<4,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS4 channel 7 interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 4 channel x."]
            #[inline(always)]
            pub fn mcs4_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<5,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS4 channel 7 interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 4 channel x."]
            #[inline(always)]
            pub fn mcs4_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<6,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS4 channel 7 interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 4 channel x."]
            #[inline(always)]
            pub fn mcs4_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<7,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS5 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 5 channel x."]
            #[inline(always)]
            pub fn mcs5_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<8,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS5 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 5 channel x."]
            #[inline(always)]
            pub fn mcs5_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<9,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS5 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 5 channel x."]
            #[inline(always)]
            pub fn mcs5_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<10,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS5 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 5 channel x."]
            #[inline(always)]
            pub fn mcs5_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<11,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS5 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 5 channel x."]
            #[inline(always)]
            pub fn mcs5_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<12,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS5 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 5 channel x."]
            #[inline(always)]
            pub fn mcs5_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<13,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS5 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 5 channel x."]
            #[inline(always)]
            pub fn mcs5_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<14,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS5 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 5 channel x."]
            #[inline(always)]
            pub fn mcs5_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<15,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS6 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 6 channel x."]
            #[inline(always)]
            pub fn mcs6_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<16,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS6 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 6 channel x."]
            #[inline(always)]
            pub fn mcs6_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<17,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS6 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 6 channel x."]
            #[inline(always)]
            pub fn mcs6_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<18,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS6 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 6 channel x."]
            #[inline(always)]
            pub fn mcs6_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<19,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS6 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 6 channel x."]
            #[inline(always)]
            pub fn mcs6_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<20,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS6 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 6 channel x."]
            #[inline(always)]
            pub fn mcs6_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<21,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS6 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 6 channel x."]
            #[inline(always)]
            pub fn mcs6_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<22,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS6 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 6 channel x."]
            #[inline(always)]
            pub fn mcs6_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<23,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 7 channel x."]
            #[inline(always)]
            pub fn mcs7_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<24,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 7 channel x."]
            #[inline(always)]
            pub fn mcs7_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<25,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 7 channel x."]
            #[inline(always)]
            pub fn mcs7_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<26,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 7 channel x."]
            #[inline(always)]
            pub fn mcs7_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<27,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 7 channel x."]
            #[inline(always)]
            pub fn mcs7_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<28, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<28,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 7 channel x."]
            #[inline(always)]
            pub fn mcs7_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<29, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<29,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 7 channel x."]
            #[inline(always)]
            pub fn mcs7_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<30, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<30,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the three interrupt sources MCS IRQ   STK ERR IRQ or ERR IRQ of MCS instance 7 channel x."]
            #[inline(always)]
            pub fn mcs7_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<31, 1, 0, IcmIrqg5_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<31,1,0,IcmIrqg5_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for IcmIrqg5 {
            #[inline(always)]
            fn default() -> IcmIrqg5 {
                <crate::RegValueT<IcmIrqg5_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct IcmIrqg6_SPEC;
        impl crate::sealed::RegSpec for IcmIrqg6_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group Register Covering GTM Output Sub Modules TOM0 to TOM1\n resetvalue={Application Reset:0x0}"]
        pub type IcmIrqg6 = crate::RegValueT<IcmIrqg6_SPEC>;

        impl IcmIrqg6 {
            #[doc = "TOM0 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom0_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM0 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom0_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM0 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom0_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM0 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom0_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM0 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom0_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<4,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM0 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom0_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<5,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM0 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom0_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<6,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM0 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom0_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<7,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM0 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom0_ch8_irq(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<8,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM0 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom0_ch9_irq(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<9,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM0 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom0_ch10_irq(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<10,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM0 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom0_ch11_irq(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<11,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM0 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom0_ch12_irq(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<12,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM0 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom0_ch13_irq(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<13,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM0 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom0_ch14_irq(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<14,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM0 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom0_ch15_irq(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<15,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM1 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom1_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<16,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM1 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom1_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<17,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM1 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom1_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<18,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM1 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom1_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<19,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM1 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom1_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<20,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM1 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom1_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<21,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM1 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom1_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<22,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM1 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom1_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<23,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM1 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom1_ch8_irq(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<24,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM1 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom1_ch9_irq(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<25,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM1 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom1_ch10_irq(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<26,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM1 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom1_ch11_irq(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<27,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM1 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom1_ch12_irq(
                self,
            ) -> crate::common::RegisterFieldBool<28, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<28,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM1 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom1_ch13_irq(
                self,
            ) -> crate::common::RegisterFieldBool<29, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<29,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM1 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom1_ch14_irq(
                self,
            ) -> crate::common::RegisterFieldBool<30, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<30,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM1 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom1_ch15_irq(
                self,
            ) -> crate::common::RegisterFieldBool<31, 1, 0, IcmIrqg6_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<31,1,0,IcmIrqg6_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for IcmIrqg6 {
            #[inline(always)]
            fn default() -> IcmIrqg6 {
                <crate::RegValueT<IcmIrqg6_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct IcmIrqg7_SPEC;
        impl crate::sealed::RegSpec for IcmIrqg7_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group Register Covering GTM Output Sub Modules TOM2 to TOM3\n resetvalue={Application Reset:0x0}"]
        pub type IcmIrqg7 = crate::RegValueT<IcmIrqg7_SPEC>;

        impl IcmIrqg7 {
            #[doc = "TOM2 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 2 channel x."]
            #[inline(always)]
            pub fn tom2_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM2 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 2 channel x."]
            #[inline(always)]
            pub fn tom2_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM2 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 2 channel x."]
            #[inline(always)]
            pub fn tom2_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM2 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 2 channel x."]
            #[inline(always)]
            pub fn tom2_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM2 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 2 channel x."]
            #[inline(always)]
            pub fn tom2_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<4,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM2 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 2 channel x."]
            #[inline(always)]
            pub fn tom2_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<5,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM2 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 2 channel x."]
            #[inline(always)]
            pub fn tom2_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<6,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM2 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 2 channel x."]
            #[inline(always)]
            pub fn tom2_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<7,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM2 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 2 channel x."]
            #[inline(always)]
            pub fn tom2_ch8_irq(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<8,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM2 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 2 channel x."]
            #[inline(always)]
            pub fn tom2_ch9_irq(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<9,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM2 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 2 channel x."]
            #[inline(always)]
            pub fn tom2_ch10_irq(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<10,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM2 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 2 channel x."]
            #[inline(always)]
            pub fn tom2_ch11_irq(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<11,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM2 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 2 channel x."]
            #[inline(always)]
            pub fn tom2_ch12_irq(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<12,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM2 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 2 channel x."]
            #[inline(always)]
            pub fn tom2_ch13_irq(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<13,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM2 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 2 channel x."]
            #[inline(always)]
            pub fn tom2_ch14_irq(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<14,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM2 channel 15 shared interrupt. This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 2 channel x."]
            #[inline(always)]
            pub fn tom2_ch15_irq(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<15,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM3 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 3 channel x."]
            #[inline(always)]
            pub fn tom3_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<16,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM3 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 3 channel x."]
            #[inline(always)]
            pub fn tom3_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<17,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM3 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 3 channel x."]
            #[inline(always)]
            pub fn tom3_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<18,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM3 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 3 channel x."]
            #[inline(always)]
            pub fn tom3_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<19,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM3 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 3 channel x."]
            #[inline(always)]
            pub fn tom3_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<20,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM3 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 3 channel x."]
            #[inline(always)]
            pub fn tom3_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<21,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM3 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 3 channel x."]
            #[inline(always)]
            pub fn tom3_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<22,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM3 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 3 channel x."]
            #[inline(always)]
            pub fn tom3_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<23,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM3 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 3 channel x."]
            #[inline(always)]
            pub fn tom3_ch8_irq(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<24,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM3 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 3 channel x."]
            #[inline(always)]
            pub fn tom3_ch9_irq(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<25,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM3 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 3 channel x."]
            #[inline(always)]
            pub fn tom3_ch10_irq(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<26,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM3 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 3 channel x."]
            #[inline(always)]
            pub fn tom3_ch11_irq(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<27,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM3 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 3 channel x."]
            #[inline(always)]
            pub fn tom3_ch12_irq(
                self,
            ) -> crate::common::RegisterFieldBool<28, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<28,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM3 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 3 channel x."]
            #[inline(always)]
            pub fn tom3_ch13_irq(
                self,
            ) -> crate::common::RegisterFieldBool<29, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<29,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM3 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 3 channel x."]
            #[inline(always)]
            pub fn tom3_ch14_irq(
                self,
            ) -> crate::common::RegisterFieldBool<30, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<30,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOM3 channel 15 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 3 channel x."]
            #[inline(always)]
            pub fn tom3_ch15_irq(
                self,
            ) -> crate::common::RegisterFieldBool<31, 1, 0, IcmIrqg7_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<31,1,0,IcmIrqg7_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for IcmIrqg7 {
            #[inline(always)]
            fn default() -> IcmIrqg7 {
                <crate::RegValueT<IcmIrqg7_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct IcmIrqg9_SPEC;
        impl crate::sealed::RegSpec for IcmIrqg9_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group Register Covering GTM Output Sub Modules ATOM0  ATOM1  ATOM2 and ATOM3\n resetvalue={Application Reset:0x0}"]
        pub type IcmIrqg9 = crate::RegValueT<IcmIrqg9_SPEC>;

        impl IcmIrqg9 {
            #[doc = "ATOM0 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 0 channel x."]
            #[inline(always)]
            pub fn atom0_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM0 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 0 channel x."]
            #[inline(always)]
            pub fn atom0_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM0 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 0 channel x."]
            #[inline(always)]
            pub fn atom0_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM0 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 0 channel x."]
            #[inline(always)]
            pub fn atom0_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM0 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 0 channel x."]
            #[inline(always)]
            pub fn atom0_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<4,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM0 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 0 channel x."]
            #[inline(always)]
            pub fn atom0_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<5,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM0 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 0 channel x."]
            #[inline(always)]
            pub fn atom0_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<6,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM0 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 0 channel x."]
            #[inline(always)]
            pub fn atom0_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<7,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM1 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 1 channel x."]
            #[inline(always)]
            pub fn atom1_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<8,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM1 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 1 channel x."]
            #[inline(always)]
            pub fn atom1_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<9,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM1 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 1 channel x."]
            #[inline(always)]
            pub fn atom1_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<10,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM1 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 1 channel x."]
            #[inline(always)]
            pub fn atom1_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<11,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM1 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 1 channel x."]
            #[inline(always)]
            pub fn atom1_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<12,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM1 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 1 channel x."]
            #[inline(always)]
            pub fn atom1_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<13,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM1 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 1 channel x."]
            #[inline(always)]
            pub fn atom1_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<14,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM1 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 1 channel x."]
            #[inline(always)]
            pub fn atom1_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<15,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM2 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom2_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<16,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM2 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom2_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<17,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM2 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom2_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<18,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM2 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom2_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<19,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM2 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom2_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<20,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM2 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom2_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<21,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM2 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom2_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<22,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM2 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom2_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<23,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM3 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 3 channel x."]
            #[inline(always)]
            pub fn atom3_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<24,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM3 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 3 channel x."]
            #[inline(always)]
            pub fn atom3_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<25,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM3 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 3 channel x."]
            #[inline(always)]
            pub fn atom3_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<26,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM3 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 3 channel x."]
            #[inline(always)]
            pub fn atom3_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<27,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM3 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 3 channel x."]
            #[inline(always)]
            pub fn atom3_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<28, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<28,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM3 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 3 channel x."]
            #[inline(always)]
            pub fn atom3_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<29, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<29,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM3 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 3 channel x."]
            #[inline(always)]
            pub fn atom3_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<30, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<30,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOM3 channel 7 shared interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 3 channel x."]
            #[inline(always)]
            pub fn atom3_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<31, 1, 0, IcmIrqg9_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<31,1,0,IcmIrqg9_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for IcmIrqg9 {
            #[inline(always)]
            fn default() -> IcmIrqg9 {
                <crate::RegValueT<IcmIrqg9_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct IcmIrqgAtomKCi_SPEC;
        impl crate::sealed::RegSpec for IcmIrqgAtomKCi_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group ATOM 0 for Channel Interrupt Information of ATOMm\n resetvalue={Application Reset:0x0}"]
        pub type IcmIrqgAtomKCi = crate::RegValueT<IcmIrqgAtomKCi_SPEC>;

        impl IcmIrqgAtomKCi {
            #[doc = "ATOMm channel 7 interrupt  m  4 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 0 channel x."]
            #[inline(always)]
            pub fn atom_m0_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 0 channel x."]
            #[inline(always)]
            pub fn atom_m0_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 0 channel x."]
            #[inline(always)]
            pub fn atom_m0_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 0 channel x."]
            #[inline(always)]
            pub fn atom_m0_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 0 channel x."]
            #[inline(always)]
            pub fn atom_m0_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<4,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 0 channel x."]
            #[inline(always)]
            pub fn atom_m0_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<5,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 0 channel x."]
            #[inline(always)]
            pub fn atom_m0_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<6,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 0 channel x."]
            #[inline(always)]
            pub fn atom_m0_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<7,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 1 channel x."]
            #[inline(always)]
            pub fn atom_m1_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<8,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 1 channel x."]
            #[inline(always)]
            pub fn atom_m1_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<9,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 1 channel x."]
            #[inline(always)]
            pub fn atom_m1_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<10,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 1 channel x."]
            #[inline(always)]
            pub fn atom_m1_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<11,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 1 channel x."]
            #[inline(always)]
            pub fn atom_m1_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<12,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 1 channel x."]
            #[inline(always)]
            pub fn atom_m1_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<13,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 1 channel x."]
            #[inline(always)]
            pub fn atom_m1_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<14,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 1 channel x."]
            #[inline(always)]
            pub fn atom_m1_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<15,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 2  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom_m2_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<16,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 2  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom_m2_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<17,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 2  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom_m2_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<18,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 2  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom_m2_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<19,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 2  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom_m2_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<20,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 2  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom_m2_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<21,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 2  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom_m2_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<22,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 2  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom_m2_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<23,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 3 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom_m3_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<24,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 3 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom_m3_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<25,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 3 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom_m3_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<26,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 3 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom_m3_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<27,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 3 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom_m3_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<28, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<28,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 3 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom_m3_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<29, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<29,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 3 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom_m3_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<30, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<30,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "ATOMm channel 7 interrupt  m  4 0 3 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources CCU0TCx IRQ or CCU1TCx IRQ of ATOM instance 2 channel x."]
            #[inline(always)]
            pub fn atom_m3_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<31, 1, 0, IcmIrqgAtomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<31,1,0,IcmIrqgAtomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for IcmIrqgAtomKCi {
            #[inline(always)]
            fn default() -> IcmIrqgAtomKCi {
                <crate::RegValueT<IcmIrqgAtomKCi_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct IcmIrqgClsKMei_SPEC;
        impl crate::sealed::RegSpec for IcmIrqgClsKMei_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group k for Module Error Interrupt Information for each TIMm  MCSm  SPEm  FIFOm\n resetvalue={Application Reset:0x0}"]
        pub type IcmIrqgClsKMei = crate::RegValueT<IcmIrqgClsKMei_SPEC>;

        impl IcmIrqgClsKMei {
            #[doc = "Error interrupt TIMm EIRQ  m  4 0 3  . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim_m0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, IcmIrqgClsKMei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,IcmIrqgClsKMei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "Error interrupt MCSm EIRQ  m  4 0 3  . Coding see bit 0."]
            #[inline(always)]
            pub fn mcs_m0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, IcmIrqgClsKMei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,IcmIrqgClsKMei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "Error interrupt SPEm EIRQ  m  4 0 3  . Coding see bit 0."]
            #[inline(always)]
            pub fn spe_m0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, IcmIrqgClsKMei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,IcmIrqgClsKMei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "Error interrupt FIFOm EIRQ  m  4 0 3  . Coding see bit 0."]
            #[inline(always)]
            pub fn fifo_m0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, IcmIrqgClsKMei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,IcmIrqgClsKMei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "Error interrupt TIMm EIRQ  m  4 0 3  . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim_m1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, IcmIrqgClsKMei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<8,1,0,IcmIrqgClsKMei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "Error interrupt MCSm EIRQ  m  4 0 3  . Coding see bit 0."]
            #[inline(always)]
            pub fn mcs_m1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, IcmIrqgClsKMei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<9,1,0,IcmIrqgClsKMei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "Error interrupt SPEm EIRQ  m  4 0 3  . Coding see bit 0."]
            #[inline(always)]
            pub fn spe_m1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, IcmIrqgClsKMei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<10,1,0,IcmIrqgClsKMei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "Error interrupt TIMm EIRQ  m  4 0 3  . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim_m2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, IcmIrqgClsKMei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<16,1,0,IcmIrqgClsKMei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "Error interrupt MCSm EIRQ  m  4 0 3  . Coding see bit 0."]
            #[inline(always)]
            pub fn mcs_m2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, IcmIrqgClsKMei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<17,1,0,IcmIrqgClsKMei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "Error interrupt TIMm EIRQ  m  4 0 3  . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn tim_m3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, IcmIrqgClsKMei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<24,1,0,IcmIrqgClsKMei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "Error interrupt MCSm EIRQ  m  4 0 3  . Coding see bit 0."]
            #[inline(always)]
            pub fn mcs_m3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, IcmIrqgClsKMei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<25,1,0,IcmIrqgClsKMei_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for IcmIrqgClsKMei {
            #[inline(always)]
            fn default() -> IcmIrqgClsKMei {
                <crate::RegValueT<IcmIrqgClsKMei_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct IcmIrqgMcSiCei_SPEC;
        impl crate::sealed::RegSpec for IcmIrqgMcSiCei_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group MCS 0 for Channel Error Interrupt information\n resetvalue={Application Reset:0x0}"]
        pub type IcmIrqgMcSiCei = crate::RegValueT<IcmIrqgMcSiCei_SPEC>;

        impl IcmIrqgMcSiCei {
            #[doc = "MCS channel 7 error interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs_ch0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, IcmIrqgMcSiCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,IcmIrqgMcSiCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS channel 7 error interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs_ch1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, IcmIrqgMcSiCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,IcmIrqgMcSiCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS channel 7 error interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs_ch2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, IcmIrqgMcSiCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,IcmIrqgMcSiCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS channel 7 error interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs_ch3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, IcmIrqgMcSiCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,IcmIrqgMcSiCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS channel 7 error interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs_ch4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, IcmIrqgMcSiCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<4,1,0,IcmIrqgMcSiCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS channel 7 error interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs_ch5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, IcmIrqgMcSiCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<5,1,0,IcmIrqgMcSiCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS channel 7 error interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs_ch6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, IcmIrqgMcSiCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<6,1,0,IcmIrqgMcSiCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS channel 7 error interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs_ch7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, IcmIrqgMcSiCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<7,1,0,IcmIrqgMcSiCei_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for IcmIrqgMcSiCei {
            #[inline(always)]
            fn default() -> IcmIrqgMcSiCei {
                <crate::RegValueT<IcmIrqgMcSiCei_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct IcmIrqgMcSiCi_SPEC;
        impl crate::sealed::RegSpec for IcmIrqgMcSiCi_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group MCS 0 for Channel Interrupt Information\n resetvalue={Application Reset:0x0}"]
        pub type IcmIrqgMcSiCi = crate::RegValueT<IcmIrqgMcSiCi_SPEC>;

        impl IcmIrqgMcSiCi {
            #[doc = "MCS channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, IcmIrqgMcSiCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,IcmIrqgMcSiCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, IcmIrqgMcSiCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,IcmIrqgMcSiCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, IcmIrqgMcSiCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,IcmIrqgMcSiCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, IcmIrqgMcSiCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,IcmIrqgMcSiCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, IcmIrqgMcSiCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<4,1,0,IcmIrqgMcSiCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, IcmIrqgMcSiCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<5,1,0,IcmIrqgMcSiCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, IcmIrqgMcSiCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<6,1,0,IcmIrqgMcSiCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS channel 7 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn mcs_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, IcmIrqgMcSiCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<7,1,0,IcmIrqgMcSiCi_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for IcmIrqgMcSiCi {
            #[inline(always)]
            fn default() -> IcmIrqgMcSiCi {
                <crate::RegValueT<IcmIrqgMcSiCi_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct IcmIrqgPsmKCei_SPEC;
        impl crate::sealed::RegSpec for IcmIrqgPsmKCei_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group PSM 0 for Channel Error Interrupt information of FIFO0  FIFO1  FIFO2\n resetvalue={Application Reset:0x0}"]
        pub type IcmIrqgPsmKCei = crate::RegValueT<IcmIrqgPsmKCei_SPEC>;

        impl IcmIrqgPsmKCei {
            #[doc = "PSM0 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m0_ch0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM0 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m0_ch1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM0 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m0_ch2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM0 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m0_ch3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM0 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m0_ch4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<4,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM0 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m0_ch5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<5,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM0 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m0_ch6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<6,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM0 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m0_ch7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<7,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m1_ch0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<8,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m1_ch1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<9,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m1_ch2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<10,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m1_ch3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<11,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m1_ch4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<12,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m1_ch5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<13,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m1_ch6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<14,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m1_ch7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<15,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM2 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m2_ch0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<16,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM2 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m2_ch1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<17,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM2 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m2_ch2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<18,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM2 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m2_ch3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<19,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM2 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m2_ch4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<20,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM2 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m2_ch5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<21,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM2 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m2_ch6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<22,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM2 channel 7 error interrupt  m 4 0 0 . This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn psm_m2_ch7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, IcmIrqgPsmKCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<23,1,0,IcmIrqgPsmKCei_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for IcmIrqgPsmKCei {
            #[inline(always)]
            fn default() -> IcmIrqgPsmKCei {
                <crate::RegValueT<IcmIrqgPsmKCei_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct IcmIrqgPsmKCi_SPEC;
        impl crate::sealed::RegSpec for IcmIrqgPsmKCi_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group PSM 0 for Channel Interrupt Information of FIFO0  FIFO1  FIFO2\n resetvalue={Application Reset:0x0}"]
        pub type IcmIrqgPsmKCi = crate::RegValueT<IcmIrqgPsmKCi_SPEC>;

        impl IcmIrqgPsmKCi {
            #[doc = "PSM0 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 0 channel x."]
            #[inline(always)]
            pub fn psm_m0_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM0 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 0 channel x."]
            #[inline(always)]
            pub fn psm_m0_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM0 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 0 channel x."]
            #[inline(always)]
            pub fn psm_m0_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM0 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 0 channel x."]
            #[inline(always)]
            pub fn psm_m0_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM0 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 0 channel x."]
            #[inline(always)]
            pub fn psm_m0_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<4,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM0 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 0 channel x."]
            #[inline(always)]
            pub fn psm_m0_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<5,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM0 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 0 channel x."]
            #[inline(always)]
            pub fn psm_m0_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<6,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM0 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 0 channel x."]
            #[inline(always)]
            pub fn psm_m0_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<7,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 1 channel x."]
            #[inline(always)]
            pub fn psm_m1_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<8,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 1 channel x."]
            #[inline(always)]
            pub fn psm_m1_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<9,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 1 channel x."]
            #[inline(always)]
            pub fn psm_m1_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<10,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 1 channel x."]
            #[inline(always)]
            pub fn psm_m1_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<11,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 1 channel x."]
            #[inline(always)]
            pub fn psm_m1_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<12,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 1 channel x."]
            #[inline(always)]
            pub fn psm_m1_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<13,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 1 channel x."]
            #[inline(always)]
            pub fn psm_m1_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<14,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM1 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 1 channel x."]
            #[inline(always)]
            pub fn psm_m1_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<15,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM2 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 2 channel x."]
            #[inline(always)]
            pub fn psm_m2_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<16,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM2 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 2 channel x."]
            #[inline(always)]
            pub fn psm_m2_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<17,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM2 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 2 channel x."]
            #[inline(always)]
            pub fn psm_m2_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<18,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM2 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 2 channel x."]
            #[inline(always)]
            pub fn psm_m2_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<19,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM2 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 2 channel x."]
            #[inline(always)]
            pub fn psm_m2_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<20,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM2 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 2 channel x."]
            #[inline(always)]
            pub fn psm_m2_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<21,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM2 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 2 channel x."]
            #[inline(always)]
            pub fn psm_m2_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<22,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "PSM2 channel 7 shared interrupt  m 4 0 0 . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the four interrupt sources FIFO EMPTY   FIFO FULL   FIFO LOWER WM or FIFO UPPER WM of FIFO instance 2 channel x."]
            #[inline(always)]
            pub fn psm_m2_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, IcmIrqgPsmKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<23,1,0,IcmIrqgPsmKCi_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for IcmIrqgPsmKCi {
            #[inline(always)]
            fn default() -> IcmIrqgPsmKCi {
                <crate::RegValueT<IcmIrqgPsmKCi_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct IcmIrqgSpeCei_SPEC;
        impl crate::sealed::RegSpec for IcmIrqgSpeCei_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group SPE for Module Error Interrupt Information\n resetvalue={Application Reset:0x0}"]
        pub type IcmIrqgSpeCei = crate::RegValueT<IcmIrqgSpeCei_SPEC>;

        impl IcmIrqgSpeCei {
            #[doc = "SPE channel 5 error interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn spe0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, IcmIrqgSpeCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,IcmIrqgSpeCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "SPE channel 5 error interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn spe1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, IcmIrqgSpeCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,IcmIrqgSpeCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "SPE channel 5 error interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn spe2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, IcmIrqgSpeCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,IcmIrqgSpeCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "SPE channel 5 error interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn spe3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, IcmIrqgSpeCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,IcmIrqgSpeCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "SPE channel 5 error interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn spe4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, IcmIrqgSpeCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<4,1,0,IcmIrqgSpeCei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "SPE channel 5 error interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn spe5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, IcmIrqgSpeCei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<5,1,0,IcmIrqgSpeCei_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for IcmIrqgSpeCei {
            #[inline(always)]
            fn default() -> IcmIrqgSpeCei {
                <crate::RegValueT<IcmIrqgSpeCei_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct IcmIrqgSpeCi_SPEC;
        impl crate::sealed::RegSpec for IcmIrqgSpeCi_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group SPE for Module Interrupt Information\n resetvalue={Application Reset:0x0}"]
        pub type IcmIrqgSpeCi = crate::RegValueT<IcmIrqgSpeCi_SPEC>;

        impl IcmIrqgSpeCi {
            #[doc = "SPE channel 5 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn spe0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, IcmIrqgSpeCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,IcmIrqgSpeCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "SPE channel 5 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn spe1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, IcmIrqgSpeCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,IcmIrqgSpeCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "SPE channel 5 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn spe2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, IcmIrqgSpeCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,IcmIrqgSpeCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "SPE channel 5 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn spe3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, IcmIrqgSpeCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,IcmIrqgSpeCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "SPE channel 5 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn spe4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, IcmIrqgSpeCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<4,1,0,IcmIrqgSpeCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "SPE channel 5 interrupt. This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module."]
            #[inline(always)]
            pub fn spe5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, IcmIrqgSpeCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<5,1,0,IcmIrqgSpeCi_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for IcmIrqgSpeCi {
            #[inline(always)]
            fn default() -> IcmIrqgSpeCi {
                <crate::RegValueT<IcmIrqgSpeCi_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct IcmIrqgTomKCi_SPEC;
        impl crate::sealed::RegSpec for IcmIrqgTomKCi_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group TOM 0 for Channel Interrupt Information of TOMm\n resetvalue={Application Reset:0x0}"]
        pub type IcmIrqgTomKCi = crate::RegValueT<IcmIrqgTomKCi_SPEC>;

        impl IcmIrqgTomKCi {
            #[doc = "TOMm channel 15 interrupt  m  2 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom_m0_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<0,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom_m0_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<1,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom_m0_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<2,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom_m0_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<3,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom_m0_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<4,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom_m0_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<5,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom_m0_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<6,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom_m0_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<7,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom_m0_ch8_irq(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<8,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom_m0_ch9_irq(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<9,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom_m0_ch10_irq(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<10,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom_m0_ch11_irq(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<11,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom_m0_ch12_irq(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<12,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom_m0_ch13_irq(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<13,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom_m0_ch14_irq(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<14,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 0  . This bit is only set  when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 0 channel x."]
            #[inline(always)]
            pub fn tom_m0_ch15_irq(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<15,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom_m1_ch0_irq(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<16,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom_m1_ch1_irq(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<17,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom_m1_ch2_irq(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<18,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom_m1_ch3_irq(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<19,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom_m1_ch4_irq(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<20,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom_m1_ch5_irq(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<21,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom_m1_ch6_irq(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<22,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom_m1_ch7_irq(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<23,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom_m1_ch8_irq(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<24,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom_m1_ch9_irq(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<25,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom_m1_ch10_irq(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<26,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom_m1_ch11_irq(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<27,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom_m1_ch12_irq(
                self,
            ) -> crate::common::RegisterFieldBool<28, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<28,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom_m1_ch13_irq(
                self,
            ) -> crate::common::RegisterFieldBool<29, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<29,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom_m1_ch14_irq(
                self,
            ) -> crate::common::RegisterFieldBool<30, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<30,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TOMm channel 15 interrupt  m  2 0 1  . This bit is only set when the interrupt is enabled in the interrupt        enable register of the corresponding sub module. Set this bit represents an OR function of the two interrupt sources TOM CCU0TCx IRQ or TOM CCU1TCx IRQ of TOM instance 1 channel x."]
            #[inline(always)]
            pub fn tom_m1_ch15_irq(
                self,
            ) -> crate::common::RegisterFieldBool<31, 1, 0, IcmIrqgTomKCi_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<31,1,0,IcmIrqgTomKCi_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for IcmIrqgTomKCi {
            #[inline(always)]
            fn default() -> IcmIrqgTomKCi {
                <crate::RegValueT<IcmIrqgTomKCi_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Mei_SPEC;
        impl crate::sealed::RegSpec for Mei_SPEC {
            type DataType = u32;
        }
        #[doc = "ICM Interrupt Group Register for Module Error Interrupt Information\n resetvalue={Application Reset:0x0}"]
        pub type Mei = crate::RegValueT<Mei_SPEC>;

        impl Mei {
            #[doc = "AEI Error interrupt request. This bit is only set when the error interrupt is enabled in the error        interrupt enable register of the corresponding sub module. Set this bit represents an OR function of the seven interrupt sources AEI TO XPT EIRQ   AEI USP ADDR EIRQ   AEI IM ADDR EIRQ   AEI USP BE EIRQ   AEIM USP ADDR EIRQ   AEIM IM ADDR EIRQ or AEIM USP BE EIRQ ."]
            #[inline(always)]
            pub fn gtm_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, Mei_SPEC, crate::common::R> {
                crate::common::RegisterFieldBool::<0,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "BRC error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn brc_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, Mei_SPEC, crate::common::R> {
                crate::common::RegisterFieldBool::<1,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO0 error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn fifo0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, Mei_SPEC, crate::common::R> {
                crate::common::RegisterFieldBool::<2,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "FIFO1 error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn fifo1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, Mei_SPEC, crate::common::R> {
                crate::common::RegisterFieldBool::<3,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn tim0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, Mei_SPEC, crate::common::R> {
                crate::common::RegisterFieldBool::<4,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn tim1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, Mei_SPEC, crate::common::R> {
                crate::common::RegisterFieldBool::<5,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn tim2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, Mei_SPEC, crate::common::R> {
                crate::common::RegisterFieldBool::<6,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn tim3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, Mei_SPEC, crate::common::R> {
                crate::common::RegisterFieldBool::<7,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn tim4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, Mei_SPEC, crate::common::R> {
                crate::common::RegisterFieldBool::<8,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn tim5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, Mei_SPEC, crate::common::R> {
                crate::common::RegisterFieldBool::<9,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn tim6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, Mei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<10,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "TIM7 error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn tim7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, Mei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<11,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn mcs0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, Mei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<12,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn mcs1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, Mei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<13,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn mcs2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, Mei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<14,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn mcs3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, Mei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<15,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn mcs4_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, Mei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<16,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn mcs5_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, Mei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<17,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn mcs6_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, Mei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<18,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "MCS7 error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn mcs7_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, Mei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<19,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "SPE3 error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn spe0_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, Mei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<20,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "SPE3 error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn spe1_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, Mei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<21,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "SPE3 error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn spe2_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, Mei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<22,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "SPE3 error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn spe3_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, Mei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<23,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "CMP error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn cmp_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, Mei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<24,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
            #[doc = "DPLL error interrupt. Bit coding see bit 0."]
            #[inline(always)]
            pub fn dpll_eirq(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, Mei_SPEC, crate::common::R>
            {
                crate::common::RegisterFieldBool::<25,1,0,Mei_SPEC,crate::common::R>::from_register(self,0)
            }
        }
        impl core::default::Default for Mei {
            #[inline(always)]
            fn default() -> Mei {
                <crate::RegValueT<Mei_SPEC> as RegisterValue<_>>::new(0)
            }
        }
    }
}
#[doc = "IRQ"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Irq(pub(super) *mut u8);
unsafe impl core::marker::Send for Irq {}
unsafe impl core::marker::Sync for Irq {}
impl Irq {
    #[doc = "GTM Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn en(&self) -> crate::common::Reg<irq::En_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
    }
    #[doc = "GTM Software Interrupt Generation Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn forcint(&self) -> crate::common::Reg<irq::Forcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
    }
    #[doc = "GTM Top Level Interrupts Mode Selection Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mode(&self) -> crate::common::Reg<irq::Mode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(12usize)) }
    }
    #[doc = "GTM Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn notify(&self) -> crate::common::Reg<irq::Notify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
    }
}
pub mod irq {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct En_SPEC;
    impl crate::sealed::RegSpec for En_SPEC {
        type DataType = u32;
    }
    #[doc = "GTM Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type En = crate::RegValueT<En_SPEC>;

    impl En {
        #[doc = "AEI TO XPT IRQ interrupt enable"]
        #[inline(always)]
        pub fn aei_to_xpt_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "AEI USP ADDR IRQ interrupt enable"]
        #[inline(always)]
        pub fn aei_usp_addr_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "AEI IM ADDR IRQ interrupt enable"]
        #[inline(always)]
        pub fn aei_im_addr_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "AEI USP BE IRQ interrupt enable"]
        #[inline(always)]
        pub fn aei_usp_be_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "AEI MUSP ADDR IRQ interrupt enable"]
        #[inline(always)]
        pub fn aeim_usp_addr_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "AEIM IM ADDR IRQ interrupt enable"]
        #[inline(always)]
        pub fn aeim_im_addr_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "AEIM USP BE IRQ interrupt enable"]
        #[inline(always)]
        pub fn aeim_usp_be_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "CLK EN ERR IRQ interrupt enable. Read as zero in case of INT CLK EN GEN   0b1."]
        #[inline(always)]
        pub fn clk_en_err_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
        #[doc = "CLK PER ERR IRQ interrupt enable. Read as zero in case of INT CLK EN GEN   0b1."]
        #[inline(always)]
        pub fn clk_per_err_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, En_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<8, 1, 0, En_SPEC, crate::common::RW>::from_register(
                self, 0,
            )
        }
    }
    impl core::default::Default for En {
        #[inline(always)]
        fn default() -> En {
            <crate::RegValueT<En_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Forcint_SPEC;
    impl crate::sealed::RegSpec for Forcint_SPEC {
        type DataType = u32;
    }
    #[doc = "GTM Software Interrupt Generation Register\n resetvalue={Application Reset:0x0}"]
    pub type Forcint = crate::RegValueT<Forcint_SPEC>;

    impl Forcint {
        #[doc = "Trigger AEI TO XPT IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of CTRL"]
        #[inline(always)]
        pub fn trg_aei_to_xpt(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Forcint_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger AEI USP ADDR IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of CTRL"]
        #[inline(always)]
        pub fn trg_aei_usp_addr(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Forcint_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger AEI IM ADDR IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of CTRL"]
        #[inline(always)]
        pub fn trg_aei_im_addr(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Forcint_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger AEI USP BE IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of CTRL"]
        #[inline(always)]
        pub fn trg_aei_usp_be(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Forcint_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger AEIM USP ADDR IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of CTRL"]
        #[inline(always)]
        pub fn trg_aeim_usp_addr(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Forcint_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger AEIM IM ADDR IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of CTRL"]
        #[inline(always)]
        pub fn trg_aeim_im_addr(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Forcint_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger AEIM USP BE IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of CTRL"]
        #[inline(always)]
        pub fn trg_aeim_usp_be(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Forcint_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger CLK EN ERR IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of CTRL Read as zero in case of INT CLK EN GEN   0b1."]
        #[inline(always)]
        pub fn trg_clk_en_err(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Forcint_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger CLK PER ERR IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of CTRL Read as zero in case of INT CLK EN GEN   0b1."]
        #[inline(always)]
        pub fn trg_clk_per_err(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Forcint_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<8,1,0,Forcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Forcint {
        #[inline(always)]
        fn default() -> Forcint {
            <crate::RegValueT<Forcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mode_SPEC;
    impl crate::sealed::RegSpec for Mode_SPEC {
        type DataType = u32;
    }
    #[doc = "GTM Top Level Interrupts Mode Selection Register\n resetvalue={Application Reset:0x0}"]
    pub type Mode = crate::RegValueT<Mode_SPEC>;

    impl Mode {
        #[doc = "Interrupt strategy mode selection for the AEI timeout and address monitoring interrupts. The interrupt modes are described in CROSSREFERENCE .Note         This mode selection is only valid for the six interrupts described in        section CROSSREFERENCE"]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Mode_SPEC, crate::common::RW> {
            crate::common::RegisterField::<0,0x3,1,0,u8, Mode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mode {
        #[inline(always)]
        fn default() -> Mode {
            <crate::RegValueT<Mode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Notify_SPEC;
    impl crate::sealed::RegSpec for Notify_SPEC {
        type DataType = u32;
    }
    #[doc = "GTM Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Notify = crate::RegValueT<Notify_SPEC>;

    impl Notify {
        #[doc = "AEI timeout exception occurred. This bit will be cleared on a CPU write access of value  1 .  As the bit is rw  otherwise no clear.  A read access leaves the bit unchanged."]
        #[inline(always)]
        pub fn aei_to_xpt(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Notify_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "AEI unsupported address interrupt. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
        #[inline(always)]
        pub fn aei_usp_addr(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Notify_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "AEI illegal Module address interrupt. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
        #[inline(always)]
        pub fn aei_im_addr(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Notify_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "AEI unsupported byte enable interrupt. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
        #[inline(always)]
        pub fn aei_usp_be(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Notify_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "AEI master port unsupported address interrupt. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
        #[inline(always)]
        pub fn aeim_usp_addr(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Notify_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "AEI master port illegal Module address interrupt. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
        #[inline(always)]
        pub fn aeim_im_addr(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Notify_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "AEI master port unsupported byte enable interrupt. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
        #[inline(always)]
        pub fn aeim_usp_be(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Notify_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock enable error interrupt. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged. Read as zero in case of INT CLK EN GEN   0b1."]
        #[inline(always)]
        pub fn clk_en_err(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Notify_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock period error interrupt. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged. Read as zero in case of INT CLK EN GEN   0b1."]
        #[inline(always)]
        pub fn clk_per_err(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Notify_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<8,1,0,Notify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Erroneous clock enable state. This bit field defines the GTM external clk enable state for internal        clock aei sys clkat occurrence of the CLK EN ERR event. Function only available with INT CLK EN GEN   0b0  Read as zero in case of INT CLK EN GEN   0b1."]
        #[inline(always)]
        pub fn clk_en_err_state0(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Notify_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<24,1,0,Notify_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Erroneous clock enable state. This bit field defines the GTM external clk enable state for internal clock aei sys clk   2 at occurrence of the CLK EN ERR event. Function only available with INT CLK EN GEN   0b0  Read as zero in case of INT CLK EN GEN   0b1."]
        #[inline(always)]
        pub fn clk_en_err_state1(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Notify_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<25,1,0,Notify_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Expected clock enable state. This bit field defines the GTM expected clk enable state for internal        clock aei sys clk at occurrence of the CLK EN ERR event. Function only available with INT CLK EN GEN   0b0  Read as zero in case of INT CLK EN GEN   0b1."]
        #[inline(always)]
        pub fn clk_en_exp_state0(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Notify_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<28,1,0,Notify_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Expected clock enable state. This bit field defines the GTM expected clk enable state for internal clock aei sys clk   2 at occurrence of the CLK EN ERR event. Function only available with INT CLK EN GEN   0b0  Read as zero in case of INT CLK EN GEN   0b1."]
        #[inline(always)]
        pub fn clk_en_exp_state1(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Notify_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<29,1,0,Notify_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Notify {
        #[inline(always)]
        fn default() -> Notify {
            <crate::RegValueT<Notify_SPEC> as RegisterValue<_>>::new(0)
        }
    }
}
#[doc = "MCS"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Mcs(pub(super) *mut u8);
unsafe impl core::marker::Send for Mcs {}
unsafe impl core::marker::Sync for Mcs {}
impl Mcs {
    #[doc = "MCS0 Channel 7 ARU Control Bit Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_acb(&self) -> crate::common::Reg<mcs::Ch0Acb_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(36usize)) }
    }
    #[doc = "MCS0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_ctrl(&self) -> crate::common::Reg<mcs::Ch0Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(32usize)) }
    }
    #[doc = "MCS0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_eirq_en(&self) -> crate::common::Reg<mcs::Ch0EirqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(84usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_irq_en(&self) -> crate::common::Reg<mcs::Ch0IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(72usize)) }
    }
    #[doc = "MCS0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_irq_forcint(
        &self,
    ) -> crate::common::Reg<mcs::Ch0IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(76usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_irq_mode(
        &self,
    ) -> crate::common::Reg<mcs::Ch0IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(80usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_irq_notify(
        &self,
    ) -> crate::common::Reg<mcs::Ch0IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(68usize)) }
    }
    #[doc = "MCS0 Channel 7 Memory High Byte Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_mhb(&self) -> crate::common::Reg<mcs::Ch0Mhb_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(60usize)) }
    }
    #[doc = "MCS0 Channel 7 Program Counter Register\n resetvalue={Application Reset:0x1C}"]
    #[inline(always)]
    pub const fn ch0_pc(&self) -> crate::common::Reg<mcs::Ch0Pc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(64usize)) }
    }
    #[doc = "MCS0 Channel 7 ARU Control Bit Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_acb(&self) -> crate::common::Reg<mcs::Ch1Acb_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(164usize)) }
    }
    #[doc = "MCS0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_ctrl(&self) -> crate::common::Reg<mcs::Ch1Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(160usize)) }
    }
    #[doc = "MCS0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_eirq_en(&self) -> crate::common::Reg<mcs::Ch1EirqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(212usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_irq_en(&self) -> crate::common::Reg<mcs::Ch1IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(200usize)) }
    }
    #[doc = "MCS0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_irq_forcint(
        &self,
    ) -> crate::common::Reg<mcs::Ch1IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(204usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_irq_mode(
        &self,
    ) -> crate::common::Reg<mcs::Ch1IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(208usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_irq_notify(
        &self,
    ) -> crate::common::Reg<mcs::Ch1IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(196usize)) }
    }
    #[doc = "MCS0 Channel 7 Memory High Byte Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_mhb(&self) -> crate::common::Reg<mcs::Ch1Mhb_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(188usize)) }
    }
    #[doc = "MCS0 Channel 7 Program Counter Register\n resetvalue={Application Reset:0x1C}"]
    #[inline(always)]
    pub const fn ch1_pc(&self) -> crate::common::Reg<mcs::Ch1Pc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(192usize)) }
    }
    #[doc = "MCS0 Channel 7 ARU Control Bit Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_acb(&self) -> crate::common::Reg<mcs::Ch2Acb_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(292usize)) }
    }
    #[doc = "MCS0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_ctrl(&self) -> crate::common::Reg<mcs::Ch2Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(288usize)) }
    }
    #[doc = "MCS0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_eirq_en(&self) -> crate::common::Reg<mcs::Ch2EirqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(340usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_irq_en(&self) -> crate::common::Reg<mcs::Ch2IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(328usize)) }
    }
    #[doc = "MCS0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_irq_forcint(
        &self,
    ) -> crate::common::Reg<mcs::Ch2IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(332usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_irq_mode(
        &self,
    ) -> crate::common::Reg<mcs::Ch2IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(336usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_irq_notify(
        &self,
    ) -> crate::common::Reg<mcs::Ch2IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(324usize)) }
    }
    #[doc = "MCS0 Channel 7 Memory High Byte Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_mhb(&self) -> crate::common::Reg<mcs::Ch2Mhb_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(316usize)) }
    }
    #[doc = "MCS0 Channel 7 Program Counter Register\n resetvalue={Application Reset:0x1C}"]
    #[inline(always)]
    pub const fn ch2_pc(&self) -> crate::common::Reg<mcs::Ch2Pc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(320usize)) }
    }
    #[doc = "MCS0 Channel 7 ARU Control Bit Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_acb(&self) -> crate::common::Reg<mcs::Ch3Acb_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(420usize)) }
    }
    #[doc = "MCS0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_ctrl(&self) -> crate::common::Reg<mcs::Ch3Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(416usize)) }
    }
    #[doc = "MCS0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_eirq_en(&self) -> crate::common::Reg<mcs::Ch3EirqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(468usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_irq_en(&self) -> crate::common::Reg<mcs::Ch3IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(456usize)) }
    }
    #[doc = "MCS0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_irq_forcint(
        &self,
    ) -> crate::common::Reg<mcs::Ch3IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(460usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_irq_mode(
        &self,
    ) -> crate::common::Reg<mcs::Ch3IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(464usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_irq_notify(
        &self,
    ) -> crate::common::Reg<mcs::Ch3IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(452usize)) }
    }
    #[doc = "MCS0 Channel 7 Memory High Byte Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_mhb(&self) -> crate::common::Reg<mcs::Ch3Mhb_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(444usize)) }
    }
    #[doc = "MCS0 Channel 7 Program Counter Register\n resetvalue={Application Reset:0x1C}"]
    #[inline(always)]
    pub const fn ch3_pc(&self) -> crate::common::Reg<mcs::Ch3Pc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(448usize)) }
    }
    #[doc = "MCS0 Channel 7 ARU Control Bit Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_acb(&self) -> crate::common::Reg<mcs::Ch4Acb_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(548usize)) }
    }
    #[doc = "MCS0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_ctrl(&self) -> crate::common::Reg<mcs::Ch4Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(544usize)) }
    }
    #[doc = "MCS0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_eirq_en(&self) -> crate::common::Reg<mcs::Ch4EirqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(596usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_irq_en(&self) -> crate::common::Reg<mcs::Ch4IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(584usize)) }
    }
    #[doc = "MCS0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_irq_forcint(
        &self,
    ) -> crate::common::Reg<mcs::Ch4IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(588usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_irq_mode(
        &self,
    ) -> crate::common::Reg<mcs::Ch4IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(592usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_irq_notify(
        &self,
    ) -> crate::common::Reg<mcs::Ch4IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(580usize)) }
    }
    #[doc = "MCS0 Channel 7 Memory High Byte Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_mhb(&self) -> crate::common::Reg<mcs::Ch4Mhb_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(572usize)) }
    }
    #[doc = "MCS0 Channel 7 Program Counter Register\n resetvalue={Application Reset:0x1C}"]
    #[inline(always)]
    pub const fn ch4_pc(&self) -> crate::common::Reg<mcs::Ch4Pc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(576usize)) }
    }
    #[doc = "MCS0 Channel 7 ARU Control Bit Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_acb(&self) -> crate::common::Reg<mcs::Ch5Acb_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(676usize)) }
    }
    #[doc = "MCS0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_ctrl(&self) -> crate::common::Reg<mcs::Ch5Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(672usize)) }
    }
    #[doc = "MCS0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_eirq_en(&self) -> crate::common::Reg<mcs::Ch5EirqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(724usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_irq_en(&self) -> crate::common::Reg<mcs::Ch5IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(712usize)) }
    }
    #[doc = "MCS0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_irq_forcint(
        &self,
    ) -> crate::common::Reg<mcs::Ch5IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(716usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_irq_mode(
        &self,
    ) -> crate::common::Reg<mcs::Ch5IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(720usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_irq_notify(
        &self,
    ) -> crate::common::Reg<mcs::Ch5IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(708usize)) }
    }
    #[doc = "MCS0 Channel 7 Memory High Byte Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_mhb(&self) -> crate::common::Reg<mcs::Ch5Mhb_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(700usize)) }
    }
    #[doc = "MCS0 Channel 7 Program Counter Register\n resetvalue={Application Reset:0x1C}"]
    #[inline(always)]
    pub const fn ch5_pc(&self) -> crate::common::Reg<mcs::Ch5Pc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(704usize)) }
    }
    #[doc = "MCS0 Channel 7 ARU Control Bit Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_acb(&self) -> crate::common::Reg<mcs::Ch6Acb_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(804usize)) }
    }
    #[doc = "MCS0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_ctrl(&self) -> crate::common::Reg<mcs::Ch6Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(800usize)) }
    }
    #[doc = "MCS0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_eirq_en(&self) -> crate::common::Reg<mcs::Ch6EirqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(852usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_irq_en(&self) -> crate::common::Reg<mcs::Ch6IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(840usize)) }
    }
    #[doc = "MCS0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_irq_forcint(
        &self,
    ) -> crate::common::Reg<mcs::Ch6IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(844usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_irq_mode(
        &self,
    ) -> crate::common::Reg<mcs::Ch6IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(848usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_irq_notify(
        &self,
    ) -> crate::common::Reg<mcs::Ch6IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(836usize)) }
    }
    #[doc = "MCS0 Channel 7 Memory High Byte Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_mhb(&self) -> crate::common::Reg<mcs::Ch6Mhb_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(828usize)) }
    }
    #[doc = "MCS0 Channel 7 Program Counter Register\n resetvalue={Application Reset:0x1C}"]
    #[inline(always)]
    pub const fn ch6_pc(&self) -> crate::common::Reg<mcs::Ch6Pc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(832usize)) }
    }
    #[doc = "MCS0 Channel 7 ARU Control Bit Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_acb(&self) -> crate::common::Reg<mcs::Ch7Acb_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(932usize)) }
    }
    #[doc = "MCS0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_ctrl(&self) -> crate::common::Reg<mcs::Ch7Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(928usize)) }
    }
    #[doc = "MCS0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_eirq_en(&self) -> crate::common::Reg<mcs::Ch7EirqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(980usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_irq_en(&self) -> crate::common::Reg<mcs::Ch7IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(968usize)) }
    }
    #[doc = "MCS0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_irq_forcint(
        &self,
    ) -> crate::common::Reg<mcs::Ch7IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(972usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_irq_mode(
        &self,
    ) -> crate::common::Reg<mcs::Ch7IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(976usize)) }
    }
    #[doc = "MCS0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_irq_notify(
        &self,
    ) -> crate::common::Reg<mcs::Ch7IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(964usize)) }
    }
    #[doc = "MCS0 Channel 7 Memory High Byte Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_mhb(&self) -> crate::common::Reg<mcs::Ch7Mhb_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(956usize)) }
    }
    #[doc = "MCS0 Channel 7 Program Counter Register\n resetvalue={Application Reset:0x1C}"]
    #[inline(always)]
    pub const fn ch7_pc(&self) -> crate::common::Reg<mcs::Ch7Pc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(960usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch0_r0(&self) -> crate::common::Reg<mcs::Mcs0Ch0R0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch0_r1(&self) -> crate::common::Reg<mcs::Mcs0Ch0R1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch0_r2(&self) -> crate::common::Reg<mcs::Mcs0Ch0R2_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch0_r3(&self) -> crate::common::Reg<mcs::Mcs0Ch0R3_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(12usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch0_r4(&self) -> crate::common::Reg<mcs::Mcs0Ch0R4_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(16usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch0_r5(&self) -> crate::common::Reg<mcs::Mcs0Ch0R5_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(20usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch0_r6(&self) -> crate::common::Reg<mcs::Mcs0Ch0R6_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(24usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch0_r7(&self) -> crate::common::Reg<mcs::Mcs0Ch0R7_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(28usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch1_r0(&self) -> crate::common::Reg<mcs::Mcs0Ch1R0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(128usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch1_r1(&self) -> crate::common::Reg<mcs::Mcs0Ch1R1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(132usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch1_r2(&self) -> crate::common::Reg<mcs::Mcs0Ch1R2_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(136usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch1_r3(&self) -> crate::common::Reg<mcs::Mcs0Ch1R3_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(140usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch1_r4(&self) -> crate::common::Reg<mcs::Mcs0Ch1R4_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(144usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch1_r5(&self) -> crate::common::Reg<mcs::Mcs0Ch1R5_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(148usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch1_r6(&self) -> crate::common::Reg<mcs::Mcs0Ch1R6_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(152usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch1_r7(&self) -> crate::common::Reg<mcs::Mcs0Ch1R7_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(156usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch2_r0(&self) -> crate::common::Reg<mcs::Mcs0Ch2R0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(256usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch2_r1(&self) -> crate::common::Reg<mcs::Mcs0Ch2R1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(260usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch2_r2(&self) -> crate::common::Reg<mcs::Mcs0Ch2R2_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(264usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch2_r3(&self) -> crate::common::Reg<mcs::Mcs0Ch2R3_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(268usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch2_r4(&self) -> crate::common::Reg<mcs::Mcs0Ch2R4_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(272usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch2_r5(&self) -> crate::common::Reg<mcs::Mcs0Ch2R5_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(276usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch2_r6(&self) -> crate::common::Reg<mcs::Mcs0Ch2R6_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(280usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch2_r7(&self) -> crate::common::Reg<mcs::Mcs0Ch2R7_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(284usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch3_r0(&self) -> crate::common::Reg<mcs::Mcs0Ch3R0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(384usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch3_r1(&self) -> crate::common::Reg<mcs::Mcs0Ch3R1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(388usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch3_r2(&self) -> crate::common::Reg<mcs::Mcs0Ch3R2_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(392usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch3_r3(&self) -> crate::common::Reg<mcs::Mcs0Ch3R3_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(396usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch3_r4(&self) -> crate::common::Reg<mcs::Mcs0Ch3R4_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(400usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch3_r5(&self) -> crate::common::Reg<mcs::Mcs0Ch3R5_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(404usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch3_r6(&self) -> crate::common::Reg<mcs::Mcs0Ch3R6_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(408usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch3_r7(&self) -> crate::common::Reg<mcs::Mcs0Ch3R7_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(412usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch4_r0(&self) -> crate::common::Reg<mcs::Mcs0Ch4R0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(512usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch4_r1(&self) -> crate::common::Reg<mcs::Mcs0Ch4R1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(516usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch4_r2(&self) -> crate::common::Reg<mcs::Mcs0Ch4R2_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(520usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch4_r3(&self) -> crate::common::Reg<mcs::Mcs0Ch4R3_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(524usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch4_r4(&self) -> crate::common::Reg<mcs::Mcs0Ch4R4_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(528usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch4_r5(&self) -> crate::common::Reg<mcs::Mcs0Ch4R5_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(532usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch4_r6(&self) -> crate::common::Reg<mcs::Mcs0Ch4R6_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(536usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch4_r7(&self) -> crate::common::Reg<mcs::Mcs0Ch4R7_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(540usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch5_r0(&self) -> crate::common::Reg<mcs::Mcs0Ch5R0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(640usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch5_r1(&self) -> crate::common::Reg<mcs::Mcs0Ch5R1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(644usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch5_r2(&self) -> crate::common::Reg<mcs::Mcs0Ch5R2_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(648usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch5_r3(&self) -> crate::common::Reg<mcs::Mcs0Ch5R3_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(652usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch5_r4(&self) -> crate::common::Reg<mcs::Mcs0Ch5R4_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(656usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch5_r5(&self) -> crate::common::Reg<mcs::Mcs0Ch5R5_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(660usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch5_r6(&self) -> crate::common::Reg<mcs::Mcs0Ch5R6_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(664usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch5_r7(&self) -> crate::common::Reg<mcs::Mcs0Ch5R7_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(668usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch6_r0(&self) -> crate::common::Reg<mcs::Mcs0Ch6R0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(768usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch6_r1(&self) -> crate::common::Reg<mcs::Mcs0Ch6R1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(772usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch6_r2(&self) -> crate::common::Reg<mcs::Mcs0Ch6R2_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(776usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch6_r3(&self) -> crate::common::Reg<mcs::Mcs0Ch6R3_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(780usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch6_r4(&self) -> crate::common::Reg<mcs::Mcs0Ch6R4_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(784usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch6_r5(&self) -> crate::common::Reg<mcs::Mcs0Ch6R5_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(788usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch6_r6(&self) -> crate::common::Reg<mcs::Mcs0Ch6R6_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(792usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch6_r7(&self) -> crate::common::Reg<mcs::Mcs0Ch6R7_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(796usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch7_r0(&self) -> crate::common::Reg<mcs::Mcs0Ch7R0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(896usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch7_r1(&self) -> crate::common::Reg<mcs::Mcs0Ch7R1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(900usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch7_r2(&self) -> crate::common::Reg<mcs::Mcs0Ch7R2_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(904usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch7_r3(&self) -> crate::common::Reg<mcs::Mcs0Ch7R3_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(908usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch7_r4(&self) -> crate::common::Reg<mcs::Mcs0Ch7R4_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(912usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch7_r5(&self) -> crate::common::Reg<mcs::Mcs0Ch7R5_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(916usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch7_r6(&self) -> crate::common::Reg<mcs::Mcs0Ch7R6_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(920usize)) }
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ch7_r7(&self) -> crate::common::Reg<mcs::Mcs0Ch7R7_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(924usize)) }
    }
    #[doc = "MCS0 Clear Trigger Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_ctrg(&self) -> crate::common::Reg<mcs::Mcs0Ctrg_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(40usize)) }
    }
    #[doc = "MCS0 Set Trigger Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcs0_strg(&self) -> crate::common::Reg<mcs::Mcs0Strg_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(44usize)) }
    }
    #[doc = "MCS0 Cancel ARU Transfer Instruction Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcsi_cat(&self) -> crate::common::Reg<mcs::McSiCat_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(108usize)) }
    }
    #[doc = "MCS0 Control and Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcsi_ctrl_stat(
        &self,
    ) -> crate::common::Reg<mcs::McSiCtrlStat_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(100usize)) }
    }
    #[doc = "MCS0 Cancel WURM Instruction Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcsi_cwt(&self) -> crate::common::Reg<mcs::McSiCwt_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(112usize)) }
    }
    #[doc = "MCS0 error register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcsi_err(&self) -> crate::common::Reg<mcs::McSiErr_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(124usize)) }
    }
    #[doc = "MCS0 Write Protection Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcsi_reg_prot(
        &self,
    ) -> crate::common::Reg<mcs::McSiRegProt_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(96usize)) }
    }
    #[doc = "MCS0 Reset Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn mcsi_reset(&self) -> crate::common::Reg<mcs::McSiReset_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(104usize)) }
    }
}
pub mod mcs {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Acb_SPEC;
    impl crate::sealed::RegSpec for Ch0Acb_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 ARU Control Bit Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Acb = crate::RegValueT<Ch0Acb_SPEC>;

    impl Ch0Acb {
        #[doc = "ARU Control bit 0. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch0Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch0Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 1. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb1(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch0Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<1,1,0,Ch0Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 2. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb2(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch0Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<2,1,0,Ch0Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 3. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb3(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch0Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<3,1,0,Ch0Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 4. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb4(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch0Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<4,1,0,Ch0Acb_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Acb {
        #[inline(always)]
        fn default() -> Ch0Acb {
            <crate::RegValueT<Ch0Acb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch0Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Ctrl = crate::RegValueT<Ch0Ctrl_SPEC>;

    impl Ch0Ctrl {
        #[doc = "Enable MCS channel. Note  Enabling or disabling of an MCS channel is synchronized to the ending of an instruction  and thus it may take several clock cycles  e.g. active memory transfers or pending WURM transfers have to be finished before disabling the MCS channel. The internal state of a channel can be obtained by reading bit EN. Note  To disable an MCS channel reliably  the EN bit should be cleared  followed by setting the CAT and CWT bits in order to cancel any pending WURM or ARU instructions. Note  The EN bit is write protected during RAM reset phase."]
        #[inline(always)]
        pub fn en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Interrupt state. This bit is read only  and it mirrors the internal IRQ state."]
        #[inline(always)]
        pub fn irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch0Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<1,1,0,Ch0Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Error state. This bit is read only  and it mirrors the internal error state."]
        #[inline(always)]
        pub fn err(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch0Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<2,1,0,Ch0Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Carry bit state. This bit is read only and it mirrors the internal carry flag CY."]
        #[inline(always)]
        pub fn cy(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch0Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<4,1,0,Ch0Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Zero bit state. This bit is read only and it mirrors the internal zero flag Z."]
        #[inline(always)]
        pub fn z(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch0Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<5,1,0,Ch0Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Overflow bit state. This bit is read only and it mirrors the internal carry flag V."]
        #[inline(always)]
        pub fn v(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch0Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<6,1,0,Ch0Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Negative bit state. This bit is read only and it mirrors the internal zero flag N."]
        #[inline(always)]
        pub fn n(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch0Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<7,1,0,Ch0Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Cancel ARU transfer state. This bit is read only and it mirrors the internal cancel ARU transfer        status flag CAT."]
        #[inline(always)]
        pub fn cat(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Ch0Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<8,1,0,Ch0Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Cancel WURM instruction state. This bit is read only and it mirrors the internal cancel WURM        instruction status flag CWT."]
        #[inline(always)]
        pub fn cwt(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch0Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<9,1,0,Ch0Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Successful ARU transfer bit. This bit is read only  and it mirrors the internal state of the ARU        transfer status flag SAT."]
        #[inline(always)]
        pub fn sat(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch0Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<10,1,0,Ch0Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Stack pointer counter value. Actual stack depth of channel. The bit field is incremented on behalf of        a CALL or PUSH instruction and decremented on behalf of a RET or POP        instruction. The MCS channel STK ERR IRQ is raised  when an overflow or        underflow is detected on this bit field."]
        #[inline(always)]
        pub fn sp_cnt(
            self,
        ) -> crate::common::RegisterField<16, 0x7, 1, 0, u8, Ch0Ctrl_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0x7,1,0,u8, Ch0Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Ctrl {
        #[inline(always)]
        fn default() -> Ch0Ctrl {
            <crate::RegValueT<Ch0Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0EirqEn_SPEC;
    impl crate::sealed::RegSpec for Ch0EirqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0EirqEn = crate::RegValueT<Ch0EirqEn_SPEC>;

    impl Ch0EirqEn {
        #[doc = "MCS channel x MCS EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn mcs_eirq_en0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch0EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch0EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x STK ERR IRQ error interrupt enable"]
        #[inline(always)]
        pub fn stk_err_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch0EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch0EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn err_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch0EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch0EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0EirqEn {
        #[inline(always)]
        fn default() -> Ch0EirqEn {
            <crate::RegValueT<Ch0EirqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch0IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0IrqEn = crate::RegValueT<Ch0IrqEn_SPEC>;

    impl Ch0IrqEn {
        #[doc = "MCS channel x MCS IRQ interrupt enable"]
        #[inline(always)]
        pub fn mcs_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch0IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch0IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x STK ERR IRQ interrupt enable"]
        #[inline(always)]
        pub fn stk_err_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch0IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch0IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR IRQ interrupt enable"]
        #[inline(always)]
        pub fn err_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch0IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch0IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0IrqEn {
        #[inline(always)]
        fn default() -> Ch0IrqEn {
            <crate::RegValueT<Ch0IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch0IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0IrqForcint = crate::RegValueT<Ch0IrqForcint_SPEC>;

    impl Ch0IrqForcint {
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_mcs_irq(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch0IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch0IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_stk_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch0IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch0IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch0IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch0IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0IrqForcint {
        #[inline(always)]
        fn default() -> Ch0IrqForcint {
            <crate::RegValueT<Ch0IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch0IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0IrqMode = crate::RegValueT<Ch0IrqMode_SPEC>;

    impl Ch0IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch0IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch0IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0IrqMode {
        #[inline(always)]
        fn default() -> Ch0IrqMode {
            <crate::RegValueT<Ch0IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch0IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0IrqNotify = crate::RegValueT<Ch0IrqNotify_SPEC>;

    impl Ch0IrqNotify {
        #[doc = "Interrupt request by MCS channel x. This bit will be cleared on a CPU write access with a value of  1 . A          read access leaves the bit unchanged. By writing a  1  to this register  the IRQ flag in the MCS channel          status register STA is cleared."]
        #[inline(always)]
        pub fn mcs_irq(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch0IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch0IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Stack counter overflow underflow of channel x. Note  This bit will be cleared on a CPU write access with a value of  1 . A read access leaves the bit unchanged."]
        #[inline(always)]
        pub fn stk_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch0IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch0IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR interrupt. If the ERR bit of register STA is triggered  the ERR IRQ will also be          set. This bit will be cleared on a CPU write access with a value of  1 . A          read access leaves the bit unchanged."]
        #[inline(always)]
        pub fn err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch0IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch0IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0IrqNotify {
        #[inline(always)]
        fn default() -> Ch0IrqNotify {
            <crate::RegValueT<Ch0IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Mhb_SPEC;
    impl crate::sealed::RegSpec for Ch0Mhb_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Memory High Byte Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Mhb = crate::RegValueT<Ch0Mhb_SPEC>;

    impl Ch0Mhb {
        #[doc = "Data of memory high bit register MHB"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch0Mhb_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch0Mhb_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Mhb {
        #[inline(always)]
        fn default() -> Ch0Mhb {
            <crate::RegValueT<Ch0Mhb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Pc_SPEC;
    impl crate::sealed::RegSpec for Ch0Pc_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Program Counter Register\n resetvalue={Application Reset:0x1C}"]
    pub type Ch0Pc = crate::RegValueT<Ch0Pc_SPEC>;

    impl Ch0Pc {
        #[doc = "Current Program Counter. Note  The program counter is only writable if the corresponding MCS channel is disabled. The bits 0 and 1 are always written as zeros. Note  The actual width of the program counter depends on the MCS configuration. The actual width is RAW USR 2 bits meaning that only the bits 0 to RAW USR 1 are available and the other bits  RAW USR 2 to 31  are reserved."]
        #[inline(always)]
        pub fn pc(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch0Pc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch0Pc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Pc {
        #[inline(always)]
        fn default() -> Ch0Pc {
            <crate::RegValueT<Ch0Pc_SPEC> as RegisterValue<_>>::new(28)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Acb_SPEC;
    impl crate::sealed::RegSpec for Ch1Acb_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 ARU Control Bit Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Acb = crate::RegValueT<Ch1Acb_SPEC>;

    impl Ch1Acb {
        #[doc = "ARU Control bit 0. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch1Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch1Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 1. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb1(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch1Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<1,1,0,Ch1Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 2. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb2(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch1Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<2,1,0,Ch1Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 3. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb3(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch1Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<3,1,0,Ch1Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 4. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb4(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch1Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<4,1,0,Ch1Acb_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Acb {
        #[inline(always)]
        fn default() -> Ch1Acb {
            <crate::RegValueT<Ch1Acb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch1Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Ctrl = crate::RegValueT<Ch1Ctrl_SPEC>;

    impl Ch1Ctrl {
        #[doc = "Enable MCS channel. Note  Enabling or disabling of an MCS channel is synchronized to the ending of an instruction  and thus it may take several clock cycles  e.g. active memory transfers or pending WURM transfers have to be finished before disabling the MCS channel. The internal state of a channel can be obtained by reading bit EN. Note  To disable an MCS channel reliably  the EN bit should be cleared  followed by setting the CAT and CWT bits in order to cancel any pending WURM or ARU instructions. Note  The EN bit is write protected during RAM reset phase."]
        #[inline(always)]
        pub fn en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Interrupt state. This bit is read only  and it mirrors the internal IRQ state."]
        #[inline(always)]
        pub fn irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch1Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<1,1,0,Ch1Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Error state. This bit is read only  and it mirrors the internal error state."]
        #[inline(always)]
        pub fn err(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch1Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<2,1,0,Ch1Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Carry bit state. This bit is read only and it mirrors the internal carry flag CY."]
        #[inline(always)]
        pub fn cy(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch1Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<4,1,0,Ch1Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Zero bit state. This bit is read only and it mirrors the internal zero flag Z."]
        #[inline(always)]
        pub fn z(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch1Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<5,1,0,Ch1Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Overflow bit state. This bit is read only and it mirrors the internal carry flag V."]
        #[inline(always)]
        pub fn v(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch1Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<6,1,0,Ch1Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Negative bit state. This bit is read only and it mirrors the internal zero flag N."]
        #[inline(always)]
        pub fn n(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch1Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<7,1,0,Ch1Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Cancel ARU transfer state. This bit is read only and it mirrors the internal cancel ARU transfer        status flag CAT."]
        #[inline(always)]
        pub fn cat(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Ch1Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<8,1,0,Ch1Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Cancel WURM instruction state. This bit is read only and it mirrors the internal cancel WURM        instruction status flag CWT."]
        #[inline(always)]
        pub fn cwt(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch1Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<9,1,0,Ch1Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Successful ARU transfer bit. This bit is read only  and it mirrors the internal state of the ARU        transfer status flag SAT."]
        #[inline(always)]
        pub fn sat(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch1Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<10,1,0,Ch1Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Stack pointer counter value. Actual stack depth of channel. The bit field is incremented on behalf of        a CALL or PUSH instruction and decremented on behalf of a RET or POP        instruction. The MCS channel STK ERR IRQ is raised  when an overflow or        underflow is detected on this bit field."]
        #[inline(always)]
        pub fn sp_cnt(
            self,
        ) -> crate::common::RegisterField<16, 0x7, 1, 0, u8, Ch1Ctrl_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0x7,1,0,u8, Ch1Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Ctrl {
        #[inline(always)]
        fn default() -> Ch1Ctrl {
            <crate::RegValueT<Ch1Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1EirqEn_SPEC;
    impl crate::sealed::RegSpec for Ch1EirqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1EirqEn = crate::RegValueT<Ch1EirqEn_SPEC>;

    impl Ch1EirqEn {
        #[doc = "MCS channel x MCS EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn mcs_eirq_en0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch1EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch1EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x STK ERR IRQ error interrupt enable"]
        #[inline(always)]
        pub fn stk_err_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch1EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch1EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn err_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch1EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch1EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1EirqEn {
        #[inline(always)]
        fn default() -> Ch1EirqEn {
            <crate::RegValueT<Ch1EirqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch1IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1IrqEn = crate::RegValueT<Ch1IrqEn_SPEC>;

    impl Ch1IrqEn {
        #[doc = "MCS channel x MCS IRQ interrupt enable"]
        #[inline(always)]
        pub fn mcs_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch1IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch1IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x STK ERR IRQ interrupt enable"]
        #[inline(always)]
        pub fn stk_err_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch1IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch1IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR IRQ interrupt enable"]
        #[inline(always)]
        pub fn err_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch1IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch1IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1IrqEn {
        #[inline(always)]
        fn default() -> Ch1IrqEn {
            <crate::RegValueT<Ch1IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch1IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1IrqForcint = crate::RegValueT<Ch1IrqForcint_SPEC>;

    impl Ch1IrqForcint {
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_mcs_irq(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch1IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch1IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_stk_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch1IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch1IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch1IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch1IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1IrqForcint {
        #[inline(always)]
        fn default() -> Ch1IrqForcint {
            <crate::RegValueT<Ch1IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch1IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1IrqMode = crate::RegValueT<Ch1IrqMode_SPEC>;

    impl Ch1IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch1IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch1IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1IrqMode {
        #[inline(always)]
        fn default() -> Ch1IrqMode {
            <crate::RegValueT<Ch1IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch1IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1IrqNotify = crate::RegValueT<Ch1IrqNotify_SPEC>;

    impl Ch1IrqNotify {
        #[doc = "Interrupt request by MCS channel x. This bit will be cleared on a CPU write access with a value of  1 . A          read access leaves the bit unchanged. By writing a  1  to this register  the IRQ flag in the MCS channel          status register STA is cleared."]
        #[inline(always)]
        pub fn mcs_irq(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch1IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch1IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Stack counter overflow underflow of channel x. Note  This bit will be cleared on a CPU write access with a value of  1 . A read access leaves the bit unchanged."]
        #[inline(always)]
        pub fn stk_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch1IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch1IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR interrupt. If the ERR bit of register STA is triggered  the ERR IRQ will also be          set. This bit will be cleared on a CPU write access with a value of  1 . A          read access leaves the bit unchanged."]
        #[inline(always)]
        pub fn err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch1IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch1IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1IrqNotify {
        #[inline(always)]
        fn default() -> Ch1IrqNotify {
            <crate::RegValueT<Ch1IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Mhb_SPEC;
    impl crate::sealed::RegSpec for Ch1Mhb_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Memory High Byte Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Mhb = crate::RegValueT<Ch1Mhb_SPEC>;

    impl Ch1Mhb {
        #[doc = "Data of memory high bit register MHB"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch1Mhb_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch1Mhb_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Mhb {
        #[inline(always)]
        fn default() -> Ch1Mhb {
            <crate::RegValueT<Ch1Mhb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Pc_SPEC;
    impl crate::sealed::RegSpec for Ch1Pc_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Program Counter Register\n resetvalue={Application Reset:0x1C}"]
    pub type Ch1Pc = crate::RegValueT<Ch1Pc_SPEC>;

    impl Ch1Pc {
        #[doc = "Current Program Counter. Note  The program counter is only writable if the corresponding MCS channel is disabled. The bits 0 and 1 are always written as zeros. Note  The actual width of the program counter depends on the MCS configuration. The actual width is RAW USR 2 bits meaning that only the bits 0 to RAW USR 1 are available and the other bits  RAW USR 2 to 31  are reserved."]
        #[inline(always)]
        pub fn pc(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch1Pc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch1Pc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Pc {
        #[inline(always)]
        fn default() -> Ch1Pc {
            <crate::RegValueT<Ch1Pc_SPEC> as RegisterValue<_>>::new(28)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Acb_SPEC;
    impl crate::sealed::RegSpec for Ch2Acb_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 ARU Control Bit Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Acb = crate::RegValueT<Ch2Acb_SPEC>;

    impl Ch2Acb {
        #[doc = "ARU Control bit 0. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch2Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch2Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 1. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb1(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch2Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<1,1,0,Ch2Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 2. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb2(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch2Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<2,1,0,Ch2Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 3. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb3(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch2Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<3,1,0,Ch2Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 4. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb4(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch2Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<4,1,0,Ch2Acb_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Acb {
        #[inline(always)]
        fn default() -> Ch2Acb {
            <crate::RegValueT<Ch2Acb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch2Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Ctrl = crate::RegValueT<Ch2Ctrl_SPEC>;

    impl Ch2Ctrl {
        #[doc = "Enable MCS channel. Note  Enabling or disabling of an MCS channel is synchronized to the ending of an instruction  and thus it may take several clock cycles  e.g. active memory transfers or pending WURM transfers have to be finished before disabling the MCS channel. The internal state of a channel can be obtained by reading bit EN. Note  To disable an MCS channel reliably  the EN bit should be cleared  followed by setting the CAT and CWT bits in order to cancel any pending WURM or ARU instructions. Note  The EN bit is write protected during RAM reset phase."]
        #[inline(always)]
        pub fn en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Interrupt state. This bit is read only  and it mirrors the internal IRQ state."]
        #[inline(always)]
        pub fn irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch2Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<1,1,0,Ch2Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Error state. This bit is read only  and it mirrors the internal error state."]
        #[inline(always)]
        pub fn err(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch2Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<2,1,0,Ch2Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Carry bit state. This bit is read only and it mirrors the internal carry flag CY."]
        #[inline(always)]
        pub fn cy(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch2Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<4,1,0,Ch2Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Zero bit state. This bit is read only and it mirrors the internal zero flag Z."]
        #[inline(always)]
        pub fn z(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch2Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<5,1,0,Ch2Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Overflow bit state. This bit is read only and it mirrors the internal carry flag V."]
        #[inline(always)]
        pub fn v(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch2Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<6,1,0,Ch2Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Negative bit state. This bit is read only and it mirrors the internal zero flag N."]
        #[inline(always)]
        pub fn n(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch2Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<7,1,0,Ch2Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Cancel ARU transfer state. This bit is read only and it mirrors the internal cancel ARU transfer        status flag CAT."]
        #[inline(always)]
        pub fn cat(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Ch2Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<8,1,0,Ch2Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Cancel WURM instruction state. This bit is read only and it mirrors the internal cancel WURM        instruction status flag CWT."]
        #[inline(always)]
        pub fn cwt(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch2Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<9,1,0,Ch2Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Successful ARU transfer bit. This bit is read only  and it mirrors the internal state of the ARU        transfer status flag SAT."]
        #[inline(always)]
        pub fn sat(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch2Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<10,1,0,Ch2Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Stack pointer counter value. Actual stack depth of channel. The bit field is incremented on behalf of        a CALL or PUSH instruction and decremented on behalf of a RET or POP        instruction. The MCS channel STK ERR IRQ is raised  when an overflow or        underflow is detected on this bit field."]
        #[inline(always)]
        pub fn sp_cnt(
            self,
        ) -> crate::common::RegisterField<16, 0x7, 1, 0, u8, Ch2Ctrl_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0x7,1,0,u8, Ch2Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Ctrl {
        #[inline(always)]
        fn default() -> Ch2Ctrl {
            <crate::RegValueT<Ch2Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2EirqEn_SPEC;
    impl crate::sealed::RegSpec for Ch2EirqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2EirqEn = crate::RegValueT<Ch2EirqEn_SPEC>;

    impl Ch2EirqEn {
        #[doc = "MCS channel x MCS EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn mcs_eirq_en0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch2EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch2EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x STK ERR IRQ error interrupt enable"]
        #[inline(always)]
        pub fn stk_err_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch2EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch2EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn err_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch2EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch2EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2EirqEn {
        #[inline(always)]
        fn default() -> Ch2EirqEn {
            <crate::RegValueT<Ch2EirqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch2IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2IrqEn = crate::RegValueT<Ch2IrqEn_SPEC>;

    impl Ch2IrqEn {
        #[doc = "MCS channel x MCS IRQ interrupt enable"]
        #[inline(always)]
        pub fn mcs_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch2IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch2IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x STK ERR IRQ interrupt enable"]
        #[inline(always)]
        pub fn stk_err_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch2IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch2IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR IRQ interrupt enable"]
        #[inline(always)]
        pub fn err_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch2IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch2IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2IrqEn {
        #[inline(always)]
        fn default() -> Ch2IrqEn {
            <crate::RegValueT<Ch2IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch2IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2IrqForcint = crate::RegValueT<Ch2IrqForcint_SPEC>;

    impl Ch2IrqForcint {
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_mcs_irq(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch2IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch2IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_stk_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch2IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch2IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch2IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch2IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2IrqForcint {
        #[inline(always)]
        fn default() -> Ch2IrqForcint {
            <crate::RegValueT<Ch2IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch2IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2IrqMode = crate::RegValueT<Ch2IrqMode_SPEC>;

    impl Ch2IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch2IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch2IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2IrqMode {
        #[inline(always)]
        fn default() -> Ch2IrqMode {
            <crate::RegValueT<Ch2IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch2IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2IrqNotify = crate::RegValueT<Ch2IrqNotify_SPEC>;

    impl Ch2IrqNotify {
        #[doc = "Interrupt request by MCS channel x. This bit will be cleared on a CPU write access with a value of  1 . A          read access leaves the bit unchanged. By writing a  1  to this register  the IRQ flag in the MCS channel          status register STA is cleared."]
        #[inline(always)]
        pub fn mcs_irq(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch2IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch2IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Stack counter overflow underflow of channel x. Note  This bit will be cleared on a CPU write access with a value of  1 . A read access leaves the bit unchanged."]
        #[inline(always)]
        pub fn stk_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch2IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch2IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR interrupt. If the ERR bit of register STA is triggered  the ERR IRQ will also be          set. This bit will be cleared on a CPU write access with a value of  1 . A          read access leaves the bit unchanged."]
        #[inline(always)]
        pub fn err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch2IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch2IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2IrqNotify {
        #[inline(always)]
        fn default() -> Ch2IrqNotify {
            <crate::RegValueT<Ch2IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Mhb_SPEC;
    impl crate::sealed::RegSpec for Ch2Mhb_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Memory High Byte Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Mhb = crate::RegValueT<Ch2Mhb_SPEC>;

    impl Ch2Mhb {
        #[doc = "Data of memory high bit register MHB"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch2Mhb_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch2Mhb_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Mhb {
        #[inline(always)]
        fn default() -> Ch2Mhb {
            <crate::RegValueT<Ch2Mhb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Pc_SPEC;
    impl crate::sealed::RegSpec for Ch2Pc_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Program Counter Register\n resetvalue={Application Reset:0x1C}"]
    pub type Ch2Pc = crate::RegValueT<Ch2Pc_SPEC>;

    impl Ch2Pc {
        #[doc = "Current Program Counter. Note  The program counter is only writable if the corresponding MCS channel is disabled. The bits 0 and 1 are always written as zeros. Note  The actual width of the program counter depends on the MCS configuration. The actual width is RAW USR 2 bits meaning that only the bits 0 to RAW USR 1 are available and the other bits  RAW USR 2 to 31  are reserved."]
        #[inline(always)]
        pub fn pc(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch2Pc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch2Pc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Pc {
        #[inline(always)]
        fn default() -> Ch2Pc {
            <crate::RegValueT<Ch2Pc_SPEC> as RegisterValue<_>>::new(28)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Acb_SPEC;
    impl crate::sealed::RegSpec for Ch3Acb_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 ARU Control Bit Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Acb = crate::RegValueT<Ch3Acb_SPEC>;

    impl Ch3Acb {
        #[doc = "ARU Control bit 0. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch3Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch3Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 1. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb1(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch3Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<1,1,0,Ch3Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 2. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb2(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch3Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<2,1,0,Ch3Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 3. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb3(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch3Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<3,1,0,Ch3Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 4. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb4(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch3Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<4,1,0,Ch3Acb_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Acb {
        #[inline(always)]
        fn default() -> Ch3Acb {
            <crate::RegValueT<Ch3Acb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch3Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Ctrl = crate::RegValueT<Ch3Ctrl_SPEC>;

    impl Ch3Ctrl {
        #[doc = "Enable MCS channel. Note  Enabling or disabling of an MCS channel is synchronized to the ending of an instruction  and thus it may take several clock cycles  e.g. active memory transfers or pending WURM transfers have to be finished before disabling the MCS channel. The internal state of a channel can be obtained by reading bit EN. Note  To disable an MCS channel reliably  the EN bit should be cleared  followed by setting the CAT and CWT bits in order to cancel any pending WURM or ARU instructions. Note  The EN bit is write protected during RAM reset phase."]
        #[inline(always)]
        pub fn en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Interrupt state. This bit is read only  and it mirrors the internal IRQ state."]
        #[inline(always)]
        pub fn irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch3Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<1,1,0,Ch3Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Error state. This bit is read only  and it mirrors the internal error state."]
        #[inline(always)]
        pub fn err(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch3Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<2,1,0,Ch3Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Carry bit state. This bit is read only and it mirrors the internal carry flag CY."]
        #[inline(always)]
        pub fn cy(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch3Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<4,1,0,Ch3Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Zero bit state. This bit is read only and it mirrors the internal zero flag Z."]
        #[inline(always)]
        pub fn z(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch3Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<5,1,0,Ch3Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Overflow bit state. This bit is read only and it mirrors the internal carry flag V."]
        #[inline(always)]
        pub fn v(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch3Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<6,1,0,Ch3Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Negative bit state. This bit is read only and it mirrors the internal zero flag N."]
        #[inline(always)]
        pub fn n(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch3Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<7,1,0,Ch3Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Cancel ARU transfer state. This bit is read only and it mirrors the internal cancel ARU transfer        status flag CAT."]
        #[inline(always)]
        pub fn cat(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Ch3Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<8,1,0,Ch3Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Cancel WURM instruction state. This bit is read only and it mirrors the internal cancel WURM        instruction status flag CWT."]
        #[inline(always)]
        pub fn cwt(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch3Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<9,1,0,Ch3Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Successful ARU transfer bit. This bit is read only  and it mirrors the internal state of the ARU        transfer status flag SAT."]
        #[inline(always)]
        pub fn sat(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch3Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<10,1,0,Ch3Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Stack pointer counter value. Actual stack depth of channel. The bit field is incremented on behalf of        a CALL or PUSH instruction and decremented on behalf of a RET or POP        instruction. The MCS channel STK ERR IRQ is raised  when an overflow or        underflow is detected on this bit field."]
        #[inline(always)]
        pub fn sp_cnt(
            self,
        ) -> crate::common::RegisterField<16, 0x7, 1, 0, u8, Ch3Ctrl_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0x7,1,0,u8, Ch3Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Ctrl {
        #[inline(always)]
        fn default() -> Ch3Ctrl {
            <crate::RegValueT<Ch3Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3EirqEn_SPEC;
    impl crate::sealed::RegSpec for Ch3EirqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3EirqEn = crate::RegValueT<Ch3EirqEn_SPEC>;

    impl Ch3EirqEn {
        #[doc = "MCS channel x MCS EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn mcs_eirq_en0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch3EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch3EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x STK ERR IRQ error interrupt enable"]
        #[inline(always)]
        pub fn stk_err_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch3EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch3EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn err_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch3EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch3EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3EirqEn {
        #[inline(always)]
        fn default() -> Ch3EirqEn {
            <crate::RegValueT<Ch3EirqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch3IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3IrqEn = crate::RegValueT<Ch3IrqEn_SPEC>;

    impl Ch3IrqEn {
        #[doc = "MCS channel x MCS IRQ interrupt enable"]
        #[inline(always)]
        pub fn mcs_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch3IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch3IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x STK ERR IRQ interrupt enable"]
        #[inline(always)]
        pub fn stk_err_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch3IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch3IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR IRQ interrupt enable"]
        #[inline(always)]
        pub fn err_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch3IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch3IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3IrqEn {
        #[inline(always)]
        fn default() -> Ch3IrqEn {
            <crate::RegValueT<Ch3IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch3IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3IrqForcint = crate::RegValueT<Ch3IrqForcint_SPEC>;

    impl Ch3IrqForcint {
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_mcs_irq(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch3IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch3IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_stk_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch3IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch3IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch3IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch3IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3IrqForcint {
        #[inline(always)]
        fn default() -> Ch3IrqForcint {
            <crate::RegValueT<Ch3IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch3IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3IrqMode = crate::RegValueT<Ch3IrqMode_SPEC>;

    impl Ch3IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch3IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch3IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3IrqMode {
        #[inline(always)]
        fn default() -> Ch3IrqMode {
            <crate::RegValueT<Ch3IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch3IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3IrqNotify = crate::RegValueT<Ch3IrqNotify_SPEC>;

    impl Ch3IrqNotify {
        #[doc = "Interrupt request by MCS channel x. This bit will be cleared on a CPU write access with a value of  1 . A          read access leaves the bit unchanged. By writing a  1  to this register  the IRQ flag in the MCS channel          status register STA is cleared."]
        #[inline(always)]
        pub fn mcs_irq(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch3IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch3IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Stack counter overflow underflow of channel x. Note  This bit will be cleared on a CPU write access with a value of  1 . A read access leaves the bit unchanged."]
        #[inline(always)]
        pub fn stk_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch3IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch3IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR interrupt. If the ERR bit of register STA is triggered  the ERR IRQ will also be          set. This bit will be cleared on a CPU write access with a value of  1 . A          read access leaves the bit unchanged."]
        #[inline(always)]
        pub fn err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch3IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch3IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3IrqNotify {
        #[inline(always)]
        fn default() -> Ch3IrqNotify {
            <crate::RegValueT<Ch3IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Mhb_SPEC;
    impl crate::sealed::RegSpec for Ch3Mhb_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Memory High Byte Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Mhb = crate::RegValueT<Ch3Mhb_SPEC>;

    impl Ch3Mhb {
        #[doc = "Data of memory high bit register MHB"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch3Mhb_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch3Mhb_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Mhb {
        #[inline(always)]
        fn default() -> Ch3Mhb {
            <crate::RegValueT<Ch3Mhb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Pc_SPEC;
    impl crate::sealed::RegSpec for Ch3Pc_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Program Counter Register\n resetvalue={Application Reset:0x1C}"]
    pub type Ch3Pc = crate::RegValueT<Ch3Pc_SPEC>;

    impl Ch3Pc {
        #[doc = "Current Program Counter. Note  The program counter is only writable if the corresponding MCS channel is disabled. The bits 0 and 1 are always written as zeros. Note  The actual width of the program counter depends on the MCS configuration. The actual width is RAW USR 2 bits meaning that only the bits 0 to RAW USR 1 are available and the other bits  RAW USR 2 to 31  are reserved."]
        #[inline(always)]
        pub fn pc(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch3Pc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch3Pc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Pc {
        #[inline(always)]
        fn default() -> Ch3Pc {
            <crate::RegValueT<Ch3Pc_SPEC> as RegisterValue<_>>::new(28)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Acb_SPEC;
    impl crate::sealed::RegSpec for Ch4Acb_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 ARU Control Bit Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Acb = crate::RegValueT<Ch4Acb_SPEC>;

    impl Ch4Acb {
        #[doc = "ARU Control bit 0. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch4Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch4Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 1. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb1(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch4Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<1,1,0,Ch4Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 2. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb2(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch4Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<2,1,0,Ch4Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 3. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb3(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch4Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<3,1,0,Ch4Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 4. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb4(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch4Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<4,1,0,Ch4Acb_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Acb {
        #[inline(always)]
        fn default() -> Ch4Acb {
            <crate::RegValueT<Ch4Acb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch4Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Ctrl = crate::RegValueT<Ch4Ctrl_SPEC>;

    impl Ch4Ctrl {
        #[doc = "Enable MCS channel. Note  Enabling or disabling of an MCS channel is synchronized to the ending of an instruction  and thus it may take several clock cycles  e.g. active memory transfers or pending WURM transfers have to be finished before disabling the MCS channel. The internal state of a channel can be obtained by reading bit EN. Note  To disable an MCS channel reliably  the EN bit should be cleared  followed by setting the CAT and CWT bits in order to cancel any pending WURM or ARU instructions. Note  The EN bit is write protected during RAM reset phase."]
        #[inline(always)]
        pub fn en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Interrupt state. This bit is read only  and it mirrors the internal IRQ state."]
        #[inline(always)]
        pub fn irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch4Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<1,1,0,Ch4Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Error state. This bit is read only  and it mirrors the internal error state."]
        #[inline(always)]
        pub fn err(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch4Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<2,1,0,Ch4Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Carry bit state. This bit is read only and it mirrors the internal carry flag CY."]
        #[inline(always)]
        pub fn cy(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch4Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<4,1,0,Ch4Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Zero bit state. This bit is read only and it mirrors the internal zero flag Z."]
        #[inline(always)]
        pub fn z(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch4Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<5,1,0,Ch4Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Overflow bit state. This bit is read only and it mirrors the internal carry flag V."]
        #[inline(always)]
        pub fn v(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch4Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<6,1,0,Ch4Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Negative bit state. This bit is read only and it mirrors the internal zero flag N."]
        #[inline(always)]
        pub fn n(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch4Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<7,1,0,Ch4Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Cancel ARU transfer state. This bit is read only and it mirrors the internal cancel ARU transfer        status flag CAT."]
        #[inline(always)]
        pub fn cat(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Ch4Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<8,1,0,Ch4Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Cancel WURM instruction state. This bit is read only and it mirrors the internal cancel WURM        instruction status flag CWT."]
        #[inline(always)]
        pub fn cwt(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch4Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<9,1,0,Ch4Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Successful ARU transfer bit. This bit is read only  and it mirrors the internal state of the ARU        transfer status flag SAT."]
        #[inline(always)]
        pub fn sat(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch4Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<10,1,0,Ch4Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Stack pointer counter value. Actual stack depth of channel. The bit field is incremented on behalf of        a CALL or PUSH instruction and decremented on behalf of a RET or POP        instruction. The MCS channel STK ERR IRQ is raised  when an overflow or        underflow is detected on this bit field."]
        #[inline(always)]
        pub fn sp_cnt(
            self,
        ) -> crate::common::RegisterField<16, 0x7, 1, 0, u8, Ch4Ctrl_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0x7,1,0,u8, Ch4Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Ctrl {
        #[inline(always)]
        fn default() -> Ch4Ctrl {
            <crate::RegValueT<Ch4Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4EirqEn_SPEC;
    impl crate::sealed::RegSpec for Ch4EirqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4EirqEn = crate::RegValueT<Ch4EirqEn_SPEC>;

    impl Ch4EirqEn {
        #[doc = "MCS channel x MCS EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn mcs_eirq_en0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch4EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch4EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x STK ERR IRQ error interrupt enable"]
        #[inline(always)]
        pub fn stk_err_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch4EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch4EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn err_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch4EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch4EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4EirqEn {
        #[inline(always)]
        fn default() -> Ch4EirqEn {
            <crate::RegValueT<Ch4EirqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch4IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4IrqEn = crate::RegValueT<Ch4IrqEn_SPEC>;

    impl Ch4IrqEn {
        #[doc = "MCS channel x MCS IRQ interrupt enable"]
        #[inline(always)]
        pub fn mcs_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch4IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch4IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x STK ERR IRQ interrupt enable"]
        #[inline(always)]
        pub fn stk_err_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch4IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch4IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR IRQ interrupt enable"]
        #[inline(always)]
        pub fn err_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch4IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch4IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4IrqEn {
        #[inline(always)]
        fn default() -> Ch4IrqEn {
            <crate::RegValueT<Ch4IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch4IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4IrqForcint = crate::RegValueT<Ch4IrqForcint_SPEC>;

    impl Ch4IrqForcint {
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_mcs_irq(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch4IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch4IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_stk_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch4IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch4IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch4IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch4IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4IrqForcint {
        #[inline(always)]
        fn default() -> Ch4IrqForcint {
            <crate::RegValueT<Ch4IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch4IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4IrqMode = crate::RegValueT<Ch4IrqMode_SPEC>;

    impl Ch4IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch4IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch4IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4IrqMode {
        #[inline(always)]
        fn default() -> Ch4IrqMode {
            <crate::RegValueT<Ch4IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch4IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4IrqNotify = crate::RegValueT<Ch4IrqNotify_SPEC>;

    impl Ch4IrqNotify {
        #[doc = "Interrupt request by MCS channel x. This bit will be cleared on a CPU write access with a value of  1 . A          read access leaves the bit unchanged. By writing a  1  to this register  the IRQ flag in the MCS channel          status register STA is cleared."]
        #[inline(always)]
        pub fn mcs_irq(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch4IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch4IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Stack counter overflow underflow of channel x. Note  This bit will be cleared on a CPU write access with a value of  1 . A read access leaves the bit unchanged."]
        #[inline(always)]
        pub fn stk_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch4IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch4IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR interrupt. If the ERR bit of register STA is triggered  the ERR IRQ will also be          set. This bit will be cleared on a CPU write access with a value of  1 . A          read access leaves the bit unchanged."]
        #[inline(always)]
        pub fn err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch4IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch4IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4IrqNotify {
        #[inline(always)]
        fn default() -> Ch4IrqNotify {
            <crate::RegValueT<Ch4IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Mhb_SPEC;
    impl crate::sealed::RegSpec for Ch4Mhb_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Memory High Byte Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Mhb = crate::RegValueT<Ch4Mhb_SPEC>;

    impl Ch4Mhb {
        #[doc = "Data of memory high bit register MHB"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch4Mhb_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch4Mhb_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Mhb {
        #[inline(always)]
        fn default() -> Ch4Mhb {
            <crate::RegValueT<Ch4Mhb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Pc_SPEC;
    impl crate::sealed::RegSpec for Ch4Pc_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Program Counter Register\n resetvalue={Application Reset:0x1C}"]
    pub type Ch4Pc = crate::RegValueT<Ch4Pc_SPEC>;

    impl Ch4Pc {
        #[doc = "Current Program Counter. Note  The program counter is only writable if the corresponding MCS channel is disabled. The bits 0 and 1 are always written as zeros. Note  The actual width of the program counter depends on the MCS configuration. The actual width is RAW USR 2 bits meaning that only the bits 0 to RAW USR 1 are available and the other bits  RAW USR 2 to 31  are reserved."]
        #[inline(always)]
        pub fn pc(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch4Pc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch4Pc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Pc {
        #[inline(always)]
        fn default() -> Ch4Pc {
            <crate::RegValueT<Ch4Pc_SPEC> as RegisterValue<_>>::new(28)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Acb_SPEC;
    impl crate::sealed::RegSpec for Ch5Acb_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 ARU Control Bit Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Acb = crate::RegValueT<Ch5Acb_SPEC>;

    impl Ch5Acb {
        #[doc = "ARU Control bit 0. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch5Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch5Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 1. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb1(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch5Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<1,1,0,Ch5Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 2. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb2(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch5Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<2,1,0,Ch5Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 3. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb3(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch5Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<3,1,0,Ch5Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 4. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb4(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch5Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<4,1,0,Ch5Acb_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Acb {
        #[inline(always)]
        fn default() -> Ch5Acb {
            <crate::RegValueT<Ch5Acb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch5Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Ctrl = crate::RegValueT<Ch5Ctrl_SPEC>;

    impl Ch5Ctrl {
        #[doc = "Enable MCS channel. Note  Enabling or disabling of an MCS channel is synchronized to the ending of an instruction  and thus it may take several clock cycles  e.g. active memory transfers or pending WURM transfers have to be finished before disabling the MCS channel. The internal state of a channel can be obtained by reading bit EN. Note  To disable an MCS channel reliably  the EN bit should be cleared  followed by setting the CAT and CWT bits in order to cancel any pending WURM or ARU instructions. Note  The EN bit is write protected during RAM reset phase."]
        #[inline(always)]
        pub fn en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Interrupt state. This bit is read only  and it mirrors the internal IRQ state."]
        #[inline(always)]
        pub fn irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch5Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<1,1,0,Ch5Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Error state. This bit is read only  and it mirrors the internal error state."]
        #[inline(always)]
        pub fn err(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch5Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<2,1,0,Ch5Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Carry bit state. This bit is read only and it mirrors the internal carry flag CY."]
        #[inline(always)]
        pub fn cy(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch5Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<4,1,0,Ch5Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Zero bit state. This bit is read only and it mirrors the internal zero flag Z."]
        #[inline(always)]
        pub fn z(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch5Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<5,1,0,Ch5Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Overflow bit state. This bit is read only and it mirrors the internal carry flag V."]
        #[inline(always)]
        pub fn v(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch5Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<6,1,0,Ch5Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Negative bit state. This bit is read only and it mirrors the internal zero flag N."]
        #[inline(always)]
        pub fn n(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch5Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<7,1,0,Ch5Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Cancel ARU transfer state. This bit is read only and it mirrors the internal cancel ARU transfer        status flag CAT."]
        #[inline(always)]
        pub fn cat(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Ch5Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<8,1,0,Ch5Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Cancel WURM instruction state. This bit is read only and it mirrors the internal cancel WURM        instruction status flag CWT."]
        #[inline(always)]
        pub fn cwt(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch5Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<9,1,0,Ch5Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Successful ARU transfer bit. This bit is read only  and it mirrors the internal state of the ARU        transfer status flag SAT."]
        #[inline(always)]
        pub fn sat(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch5Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<10,1,0,Ch5Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Stack pointer counter value. Actual stack depth of channel. The bit field is incremented on behalf of        a CALL or PUSH instruction and decremented on behalf of a RET or POP        instruction. The MCS channel STK ERR IRQ is raised  when an overflow or        underflow is detected on this bit field."]
        #[inline(always)]
        pub fn sp_cnt(
            self,
        ) -> crate::common::RegisterField<16, 0x7, 1, 0, u8, Ch5Ctrl_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0x7,1,0,u8, Ch5Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Ctrl {
        #[inline(always)]
        fn default() -> Ch5Ctrl {
            <crate::RegValueT<Ch5Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5EirqEn_SPEC;
    impl crate::sealed::RegSpec for Ch5EirqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5EirqEn = crate::RegValueT<Ch5EirqEn_SPEC>;

    impl Ch5EirqEn {
        #[doc = "MCS channel x MCS EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn mcs_eirq_en0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch5EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch5EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x STK ERR IRQ error interrupt enable"]
        #[inline(always)]
        pub fn stk_err_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch5EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch5EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn err_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch5EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch5EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5EirqEn {
        #[inline(always)]
        fn default() -> Ch5EirqEn {
            <crate::RegValueT<Ch5EirqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch5IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5IrqEn = crate::RegValueT<Ch5IrqEn_SPEC>;

    impl Ch5IrqEn {
        #[doc = "MCS channel x MCS IRQ interrupt enable"]
        #[inline(always)]
        pub fn mcs_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch5IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch5IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x STK ERR IRQ interrupt enable"]
        #[inline(always)]
        pub fn stk_err_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch5IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch5IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR IRQ interrupt enable"]
        #[inline(always)]
        pub fn err_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch5IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch5IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5IrqEn {
        #[inline(always)]
        fn default() -> Ch5IrqEn {
            <crate::RegValueT<Ch5IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch5IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5IrqForcint = crate::RegValueT<Ch5IrqForcint_SPEC>;

    impl Ch5IrqForcint {
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_mcs_irq(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch5IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch5IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_stk_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch5IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch5IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch5IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch5IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5IrqForcint {
        #[inline(always)]
        fn default() -> Ch5IrqForcint {
            <crate::RegValueT<Ch5IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch5IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5IrqMode = crate::RegValueT<Ch5IrqMode_SPEC>;

    impl Ch5IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch5IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch5IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5IrqMode {
        #[inline(always)]
        fn default() -> Ch5IrqMode {
            <crate::RegValueT<Ch5IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch5IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5IrqNotify = crate::RegValueT<Ch5IrqNotify_SPEC>;

    impl Ch5IrqNotify {
        #[doc = "Interrupt request by MCS channel x. This bit will be cleared on a CPU write access with a value of  1 . A          read access leaves the bit unchanged. By writing a  1  to this register  the IRQ flag in the MCS channel          status register STA is cleared."]
        #[inline(always)]
        pub fn mcs_irq(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch5IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch5IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Stack counter overflow underflow of channel x. Note  This bit will be cleared on a CPU write access with a value of  1 . A read access leaves the bit unchanged."]
        #[inline(always)]
        pub fn stk_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch5IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch5IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR interrupt. If the ERR bit of register STA is triggered  the ERR IRQ will also be          set. This bit will be cleared on a CPU write access with a value of  1 . A          read access leaves the bit unchanged."]
        #[inline(always)]
        pub fn err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch5IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch5IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5IrqNotify {
        #[inline(always)]
        fn default() -> Ch5IrqNotify {
            <crate::RegValueT<Ch5IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Mhb_SPEC;
    impl crate::sealed::RegSpec for Ch5Mhb_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Memory High Byte Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Mhb = crate::RegValueT<Ch5Mhb_SPEC>;

    impl Ch5Mhb {
        #[doc = "Data of memory high bit register MHB"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch5Mhb_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch5Mhb_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Mhb {
        #[inline(always)]
        fn default() -> Ch5Mhb {
            <crate::RegValueT<Ch5Mhb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Pc_SPEC;
    impl crate::sealed::RegSpec for Ch5Pc_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Program Counter Register\n resetvalue={Application Reset:0x1C}"]
    pub type Ch5Pc = crate::RegValueT<Ch5Pc_SPEC>;

    impl Ch5Pc {
        #[doc = "Current Program Counter. Note  The program counter is only writable if the corresponding MCS channel is disabled. The bits 0 and 1 are always written as zeros. Note  The actual width of the program counter depends on the MCS configuration. The actual width is RAW USR 2 bits meaning that only the bits 0 to RAW USR 1 are available and the other bits  RAW USR 2 to 31  are reserved."]
        #[inline(always)]
        pub fn pc(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch5Pc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch5Pc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Pc {
        #[inline(always)]
        fn default() -> Ch5Pc {
            <crate::RegValueT<Ch5Pc_SPEC> as RegisterValue<_>>::new(28)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Acb_SPEC;
    impl crate::sealed::RegSpec for Ch6Acb_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 ARU Control Bit Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Acb = crate::RegValueT<Ch6Acb_SPEC>;

    impl Ch6Acb {
        #[doc = "ARU Control bit 0. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch6Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch6Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 1. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb1(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch6Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<1,1,0,Ch6Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 2. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb2(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch6Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<2,1,0,Ch6Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 3. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb3(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch6Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<3,1,0,Ch6Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 4. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb4(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch6Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<4,1,0,Ch6Acb_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Acb {
        #[inline(always)]
        fn default() -> Ch6Acb {
            <crate::RegValueT<Ch6Acb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch6Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Ctrl = crate::RegValueT<Ch6Ctrl_SPEC>;

    impl Ch6Ctrl {
        #[doc = "Enable MCS channel. Note  Enabling or disabling of an MCS channel is synchronized to the ending of an instruction  and thus it may take several clock cycles  e.g. active memory transfers or pending WURM transfers have to be finished before disabling the MCS channel. The internal state of a channel can be obtained by reading bit EN. Note  To disable an MCS channel reliably  the EN bit should be cleared  followed by setting the CAT and CWT bits in order to cancel any pending WURM or ARU instructions. Note  The EN bit is write protected during RAM reset phase."]
        #[inline(always)]
        pub fn en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Interrupt state. This bit is read only  and it mirrors the internal IRQ state."]
        #[inline(always)]
        pub fn irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch6Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<1,1,0,Ch6Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Error state. This bit is read only  and it mirrors the internal error state."]
        #[inline(always)]
        pub fn err(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch6Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<2,1,0,Ch6Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Carry bit state. This bit is read only and it mirrors the internal carry flag CY."]
        #[inline(always)]
        pub fn cy(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch6Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<4,1,0,Ch6Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Zero bit state. This bit is read only and it mirrors the internal zero flag Z."]
        #[inline(always)]
        pub fn z(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch6Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<5,1,0,Ch6Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Overflow bit state. This bit is read only and it mirrors the internal carry flag V."]
        #[inline(always)]
        pub fn v(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch6Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<6,1,0,Ch6Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Negative bit state. This bit is read only and it mirrors the internal zero flag N."]
        #[inline(always)]
        pub fn n(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch6Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<7,1,0,Ch6Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Cancel ARU transfer state. This bit is read only and it mirrors the internal cancel ARU transfer        status flag CAT."]
        #[inline(always)]
        pub fn cat(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Ch6Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<8,1,0,Ch6Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Cancel WURM instruction state. This bit is read only and it mirrors the internal cancel WURM        instruction status flag CWT."]
        #[inline(always)]
        pub fn cwt(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch6Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<9,1,0,Ch6Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Successful ARU transfer bit. This bit is read only  and it mirrors the internal state of the ARU        transfer status flag SAT."]
        #[inline(always)]
        pub fn sat(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch6Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<10,1,0,Ch6Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Stack pointer counter value. Actual stack depth of channel. The bit field is incremented on behalf of        a CALL or PUSH instruction and decremented on behalf of a RET or POP        instruction. The MCS channel STK ERR IRQ is raised  when an overflow or        underflow is detected on this bit field."]
        #[inline(always)]
        pub fn sp_cnt(
            self,
        ) -> crate::common::RegisterField<16, 0x7, 1, 0, u8, Ch6Ctrl_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0x7,1,0,u8, Ch6Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Ctrl {
        #[inline(always)]
        fn default() -> Ch6Ctrl {
            <crate::RegValueT<Ch6Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6EirqEn_SPEC;
    impl crate::sealed::RegSpec for Ch6EirqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6EirqEn = crate::RegValueT<Ch6EirqEn_SPEC>;

    impl Ch6EirqEn {
        #[doc = "MCS channel x MCS EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn mcs_eirq_en0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch6EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch6EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x STK ERR IRQ error interrupt enable"]
        #[inline(always)]
        pub fn stk_err_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch6EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch6EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn err_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch6EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch6EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6EirqEn {
        #[inline(always)]
        fn default() -> Ch6EirqEn {
            <crate::RegValueT<Ch6EirqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch6IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6IrqEn = crate::RegValueT<Ch6IrqEn_SPEC>;

    impl Ch6IrqEn {
        #[doc = "MCS channel x MCS IRQ interrupt enable"]
        #[inline(always)]
        pub fn mcs_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch6IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch6IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x STK ERR IRQ interrupt enable"]
        #[inline(always)]
        pub fn stk_err_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch6IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch6IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR IRQ interrupt enable"]
        #[inline(always)]
        pub fn err_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch6IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch6IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6IrqEn {
        #[inline(always)]
        fn default() -> Ch6IrqEn {
            <crate::RegValueT<Ch6IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch6IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6IrqForcint = crate::RegValueT<Ch6IrqForcint_SPEC>;

    impl Ch6IrqForcint {
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_mcs_irq(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch6IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch6IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_stk_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch6IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch6IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch6IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch6IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6IrqForcint {
        #[inline(always)]
        fn default() -> Ch6IrqForcint {
            <crate::RegValueT<Ch6IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch6IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6IrqMode = crate::RegValueT<Ch6IrqMode_SPEC>;

    impl Ch6IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch6IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch6IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6IrqMode {
        #[inline(always)]
        fn default() -> Ch6IrqMode {
            <crate::RegValueT<Ch6IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch6IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6IrqNotify = crate::RegValueT<Ch6IrqNotify_SPEC>;

    impl Ch6IrqNotify {
        #[doc = "Interrupt request by MCS channel x. This bit will be cleared on a CPU write access with a value of  1 . A          read access leaves the bit unchanged. By writing a  1  to this register  the IRQ flag in the MCS channel          status register STA is cleared."]
        #[inline(always)]
        pub fn mcs_irq(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch6IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch6IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Stack counter overflow underflow of channel x. Note  This bit will be cleared on a CPU write access with a value of  1 . A read access leaves the bit unchanged."]
        #[inline(always)]
        pub fn stk_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch6IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch6IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR interrupt. If the ERR bit of register STA is triggered  the ERR IRQ will also be          set. This bit will be cleared on a CPU write access with a value of  1 . A          read access leaves the bit unchanged."]
        #[inline(always)]
        pub fn err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch6IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch6IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6IrqNotify {
        #[inline(always)]
        fn default() -> Ch6IrqNotify {
            <crate::RegValueT<Ch6IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Mhb_SPEC;
    impl crate::sealed::RegSpec for Ch6Mhb_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Memory High Byte Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Mhb = crate::RegValueT<Ch6Mhb_SPEC>;

    impl Ch6Mhb {
        #[doc = "Data of memory high bit register MHB"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch6Mhb_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch6Mhb_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Mhb {
        #[inline(always)]
        fn default() -> Ch6Mhb {
            <crate::RegValueT<Ch6Mhb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Pc_SPEC;
    impl crate::sealed::RegSpec for Ch6Pc_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Program Counter Register\n resetvalue={Application Reset:0x1C}"]
    pub type Ch6Pc = crate::RegValueT<Ch6Pc_SPEC>;

    impl Ch6Pc {
        #[doc = "Current Program Counter. Note  The program counter is only writable if the corresponding MCS channel is disabled. The bits 0 and 1 are always written as zeros. Note  The actual width of the program counter depends on the MCS configuration. The actual width is RAW USR 2 bits meaning that only the bits 0 to RAW USR 1 are available and the other bits  RAW USR 2 to 31  are reserved."]
        #[inline(always)]
        pub fn pc(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch6Pc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch6Pc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Pc {
        #[inline(always)]
        fn default() -> Ch6Pc {
            <crate::RegValueT<Ch6Pc_SPEC> as RegisterValue<_>>::new(28)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Acb_SPEC;
    impl crate::sealed::RegSpec for Ch7Acb_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 ARU Control Bit Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Acb = crate::RegValueT<Ch7Acb_SPEC>;

    impl Ch7Acb {
        #[doc = "ARU Control bit 0. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch7Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch7Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 1. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb1(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch7Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<1,1,0,Ch7Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 2. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb2(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch7Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<2,1,0,Ch7Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 3. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb3(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch7Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<3,1,0,Ch7Acb_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "ARU Control bit 4. This bit is read only  and it mirrors the internal state."]
        #[inline(always)]
        pub fn acb4(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch7Acb_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<4,1,0,Ch7Acb_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Acb {
        #[inline(always)]
        fn default() -> Ch7Acb {
            <crate::RegValueT<Ch7Acb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch7Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Ctrl = crate::RegValueT<Ch7Ctrl_SPEC>;

    impl Ch7Ctrl {
        #[doc = "Enable MCS channel. Note  Enabling or disabling of an MCS channel is synchronized to the ending of an instruction  and thus it may take several clock cycles  e.g. active memory transfers or pending WURM transfers have to be finished before disabling the MCS channel. The internal state of a channel can be obtained by reading bit EN. Note  To disable an MCS channel reliably  the EN bit should be cleared  followed by setting the CAT and CWT bits in order to cancel any pending WURM or ARU instructions. Note  The EN bit is write protected during RAM reset phase."]
        #[inline(always)]
        pub fn en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Interrupt state. This bit is read only  and it mirrors the internal IRQ state."]
        #[inline(always)]
        pub fn irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch7Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<1,1,0,Ch7Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Error state. This bit is read only  and it mirrors the internal error state."]
        #[inline(always)]
        pub fn err(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch7Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<2,1,0,Ch7Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Carry bit state. This bit is read only and it mirrors the internal carry flag CY."]
        #[inline(always)]
        pub fn cy(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch7Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<4,1,0,Ch7Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Zero bit state. This bit is read only and it mirrors the internal zero flag Z."]
        #[inline(always)]
        pub fn z(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch7Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<5,1,0,Ch7Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Overflow bit state. This bit is read only and it mirrors the internal carry flag V."]
        #[inline(always)]
        pub fn v(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch7Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<6,1,0,Ch7Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Negative bit state. This bit is read only and it mirrors the internal zero flag N."]
        #[inline(always)]
        pub fn n(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch7Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<7,1,0,Ch7Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Cancel ARU transfer state. This bit is read only and it mirrors the internal cancel ARU transfer        status flag CAT."]
        #[inline(always)]
        pub fn cat(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Ch7Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<8,1,0,Ch7Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Cancel WURM instruction state. This bit is read only and it mirrors the internal cancel WURM        instruction status flag CWT."]
        #[inline(always)]
        pub fn cwt(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Ch7Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<9,1,0,Ch7Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Successful ARU transfer bit. This bit is read only  and it mirrors the internal state of the ARU        transfer status flag SAT."]
        #[inline(always)]
        pub fn sat(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Ch7Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<10,1,0,Ch7Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Stack pointer counter value. Actual stack depth of channel. The bit field is incremented on behalf of        a CALL or PUSH instruction and decremented on behalf of a RET or POP        instruction. The MCS channel STK ERR IRQ is raised  when an overflow or        underflow is detected on this bit field."]
        #[inline(always)]
        pub fn sp_cnt(
            self,
        ) -> crate::common::RegisterField<16, 0x7, 1, 0, u8, Ch7Ctrl_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0x7,1,0,u8, Ch7Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Ctrl {
        #[inline(always)]
        fn default() -> Ch7Ctrl {
            <crate::RegValueT<Ch7Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7EirqEn_SPEC;
    impl crate::sealed::RegSpec for Ch7EirqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7EirqEn = crate::RegValueT<Ch7EirqEn_SPEC>;

    impl Ch7EirqEn {
        #[doc = "MCS channel x MCS EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn mcs_eirq_en0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch7EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch7EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x STK ERR IRQ error interrupt enable"]
        #[inline(always)]
        pub fn stk_err_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch7EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch7EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn err_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch7EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch7EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7EirqEn {
        #[inline(always)]
        fn default() -> Ch7EirqEn {
            <crate::RegValueT<Ch7EirqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch7IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7IrqEn = crate::RegValueT<Ch7IrqEn_SPEC>;

    impl Ch7IrqEn {
        #[doc = "MCS channel x MCS IRQ interrupt enable"]
        #[inline(always)]
        pub fn mcs_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch7IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch7IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x STK ERR IRQ interrupt enable"]
        #[inline(always)]
        pub fn stk_err_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch7IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch7IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR IRQ interrupt enable"]
        #[inline(always)]
        pub fn err_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch7IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch7IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7IrqEn {
        #[inline(always)]
        fn default() -> Ch7IrqEn {
            <crate::RegValueT<Ch7IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch7IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7IrqForcint = crate::RegValueT<Ch7IrqForcint_SPEC>;

    impl Ch7IrqForcint {
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_mcs_irq(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch7IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch7IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_stk_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch7IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch7IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger IRQ bit in MCS CH  x  IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch7IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch7IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7IrqForcint {
        #[inline(always)]
        fn default() -> Ch7IrqForcint {
            <crate::RegValueT<Ch7IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch7IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7IrqMode = crate::RegValueT<Ch7IrqMode_SPEC>;

    impl Ch7IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch7IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch7IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7IrqMode {
        #[inline(always)]
        fn default() -> Ch7IrqMode {
            <crate::RegValueT<Ch7IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch7IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7IrqNotify = crate::RegValueT<Ch7IrqNotify_SPEC>;

    impl Ch7IrqNotify {
        #[doc = "Interrupt request by MCS channel x. This bit will be cleared on a CPU write access with a value of  1 . A          read access leaves the bit unchanged. By writing a  1  to this register  the IRQ flag in the MCS channel          status register STA is cleared."]
        #[inline(always)]
        pub fn mcs_irq(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch7IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch7IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Stack counter overflow underflow of channel x. Note  This bit will be cleared on a CPU write access with a value of  1 . A read access leaves the bit unchanged."]
        #[inline(always)]
        pub fn stk_err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch7IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch7IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS channel x ERR interrupt. If the ERR bit of register STA is triggered  the ERR IRQ will also be          set. This bit will be cleared on a CPU write access with a value of  1 . A          read access leaves the bit unchanged."]
        #[inline(always)]
        pub fn err_irq(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch7IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch7IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7IrqNotify {
        #[inline(always)]
        fn default() -> Ch7IrqNotify {
            <crate::RegValueT<Ch7IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Mhb_SPEC;
    impl crate::sealed::RegSpec for Ch7Mhb_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Memory High Byte Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Mhb = crate::RegValueT<Ch7Mhb_SPEC>;

    impl Ch7Mhb {
        #[doc = "Data of memory high bit register MHB"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch7Mhb_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch7Mhb_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Mhb {
        #[inline(always)]
        fn default() -> Ch7Mhb {
            <crate::RegValueT<Ch7Mhb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Pc_SPEC;
    impl crate::sealed::RegSpec for Ch7Pc_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 Program Counter Register\n resetvalue={Application Reset:0x1C}"]
    pub type Ch7Pc = crate::RegValueT<Ch7Pc_SPEC>;

    impl Ch7Pc {
        #[doc = "Current Program Counter. Note  The program counter is only writable if the corresponding MCS channel is disabled. The bits 0 and 1 are always written as zeros. Note  The actual width of the program counter depends on the MCS configuration. The actual width is RAW USR 2 bits meaning that only the bits 0 to RAW USR 1 are available and the other bits  RAW USR 2 to 31  are reserved."]
        #[inline(always)]
        pub fn pc(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch7Pc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch7Pc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Pc {
        #[inline(always)]
        fn default() -> Ch7Pc {
            <crate::RegValueT<Ch7Pc_SPEC> as RegisterValue<_>>::new(28)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch0R0_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch0R0_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch0R0 = crate::RegValueT<Mcs0Ch0R0_SPEC>;

    impl Mcs0Ch0R0 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch0R0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch0R0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch0R0 {
        #[inline(always)]
        fn default() -> Mcs0Ch0R0 {
            <crate::RegValueT<Mcs0Ch0R0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch0R1_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch0R1_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch0R1 = crate::RegValueT<Mcs0Ch0R1_SPEC>;

    impl Mcs0Ch0R1 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch0R1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch0R1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch0R1 {
        #[inline(always)]
        fn default() -> Mcs0Ch0R1 {
            <crate::RegValueT<Mcs0Ch0R1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch0R2_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch0R2_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch0R2 = crate::RegValueT<Mcs0Ch0R2_SPEC>;

    impl Mcs0Ch0R2 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch0R2_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch0R2_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch0R2 {
        #[inline(always)]
        fn default() -> Mcs0Ch0R2 {
            <crate::RegValueT<Mcs0Ch0R2_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch0R3_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch0R3_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch0R3 = crate::RegValueT<Mcs0Ch0R3_SPEC>;

    impl Mcs0Ch0R3 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch0R3_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch0R3_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch0R3 {
        #[inline(always)]
        fn default() -> Mcs0Ch0R3 {
            <crate::RegValueT<Mcs0Ch0R3_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch0R4_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch0R4_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch0R4 = crate::RegValueT<Mcs0Ch0R4_SPEC>;

    impl Mcs0Ch0R4 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch0R4_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch0R4_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch0R4 {
        #[inline(always)]
        fn default() -> Mcs0Ch0R4 {
            <crate::RegValueT<Mcs0Ch0R4_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch0R5_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch0R5_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch0R5 = crate::RegValueT<Mcs0Ch0R5_SPEC>;

    impl Mcs0Ch0R5 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch0R5_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch0R5_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch0R5 {
        #[inline(always)]
        fn default() -> Mcs0Ch0R5 {
            <crate::RegValueT<Mcs0Ch0R5_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch0R6_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch0R6_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch0R6 = crate::RegValueT<Mcs0Ch0R6_SPEC>;

    impl Mcs0Ch0R6 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch0R6_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch0R6_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch0R6 {
        #[inline(always)]
        fn default() -> Mcs0Ch0R6 {
            <crate::RegValueT<Mcs0Ch0R6_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch0R7_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch0R7_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch0R7 = crate::RegValueT<Mcs0Ch0R7_SPEC>;

    impl Mcs0Ch0R7 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch0R7_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch0R7_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch0R7 {
        #[inline(always)]
        fn default() -> Mcs0Ch0R7 {
            <crate::RegValueT<Mcs0Ch0R7_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch1R0_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch1R0_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch1R0 = crate::RegValueT<Mcs0Ch1R0_SPEC>;

    impl Mcs0Ch1R0 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch1R0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch1R0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch1R0 {
        #[inline(always)]
        fn default() -> Mcs0Ch1R0 {
            <crate::RegValueT<Mcs0Ch1R0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch1R1_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch1R1_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch1R1 = crate::RegValueT<Mcs0Ch1R1_SPEC>;

    impl Mcs0Ch1R1 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch1R1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch1R1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch1R1 {
        #[inline(always)]
        fn default() -> Mcs0Ch1R1 {
            <crate::RegValueT<Mcs0Ch1R1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch1R2_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch1R2_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch1R2 = crate::RegValueT<Mcs0Ch1R2_SPEC>;

    impl Mcs0Ch1R2 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch1R2_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch1R2_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch1R2 {
        #[inline(always)]
        fn default() -> Mcs0Ch1R2 {
            <crate::RegValueT<Mcs0Ch1R2_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch1R3_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch1R3_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch1R3 = crate::RegValueT<Mcs0Ch1R3_SPEC>;

    impl Mcs0Ch1R3 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch1R3_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch1R3_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch1R3 {
        #[inline(always)]
        fn default() -> Mcs0Ch1R3 {
            <crate::RegValueT<Mcs0Ch1R3_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch1R4_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch1R4_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch1R4 = crate::RegValueT<Mcs0Ch1R4_SPEC>;

    impl Mcs0Ch1R4 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch1R4_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch1R4_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch1R4 {
        #[inline(always)]
        fn default() -> Mcs0Ch1R4 {
            <crate::RegValueT<Mcs0Ch1R4_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch1R5_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch1R5_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch1R5 = crate::RegValueT<Mcs0Ch1R5_SPEC>;

    impl Mcs0Ch1R5 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch1R5_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch1R5_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch1R5 {
        #[inline(always)]
        fn default() -> Mcs0Ch1R5 {
            <crate::RegValueT<Mcs0Ch1R5_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch1R6_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch1R6_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch1R6 = crate::RegValueT<Mcs0Ch1R6_SPEC>;

    impl Mcs0Ch1R6 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch1R6_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch1R6_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch1R6 {
        #[inline(always)]
        fn default() -> Mcs0Ch1R6 {
            <crate::RegValueT<Mcs0Ch1R6_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch1R7_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch1R7_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch1R7 = crate::RegValueT<Mcs0Ch1R7_SPEC>;

    impl Mcs0Ch1R7 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch1R7_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch1R7_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch1R7 {
        #[inline(always)]
        fn default() -> Mcs0Ch1R7 {
            <crate::RegValueT<Mcs0Ch1R7_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch2R0_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch2R0_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch2R0 = crate::RegValueT<Mcs0Ch2R0_SPEC>;

    impl Mcs0Ch2R0 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch2R0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch2R0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch2R0 {
        #[inline(always)]
        fn default() -> Mcs0Ch2R0 {
            <crate::RegValueT<Mcs0Ch2R0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch2R1_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch2R1_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch2R1 = crate::RegValueT<Mcs0Ch2R1_SPEC>;

    impl Mcs0Ch2R1 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch2R1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch2R1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch2R1 {
        #[inline(always)]
        fn default() -> Mcs0Ch2R1 {
            <crate::RegValueT<Mcs0Ch2R1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch2R2_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch2R2_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch2R2 = crate::RegValueT<Mcs0Ch2R2_SPEC>;

    impl Mcs0Ch2R2 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch2R2_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch2R2_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch2R2 {
        #[inline(always)]
        fn default() -> Mcs0Ch2R2 {
            <crate::RegValueT<Mcs0Ch2R2_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch2R3_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch2R3_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch2R3 = crate::RegValueT<Mcs0Ch2R3_SPEC>;

    impl Mcs0Ch2R3 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch2R3_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch2R3_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch2R3 {
        #[inline(always)]
        fn default() -> Mcs0Ch2R3 {
            <crate::RegValueT<Mcs0Ch2R3_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch2R4_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch2R4_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch2R4 = crate::RegValueT<Mcs0Ch2R4_SPEC>;

    impl Mcs0Ch2R4 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch2R4_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch2R4_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch2R4 {
        #[inline(always)]
        fn default() -> Mcs0Ch2R4 {
            <crate::RegValueT<Mcs0Ch2R4_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch2R5_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch2R5_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch2R5 = crate::RegValueT<Mcs0Ch2R5_SPEC>;

    impl Mcs0Ch2R5 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch2R5_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch2R5_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch2R5 {
        #[inline(always)]
        fn default() -> Mcs0Ch2R5 {
            <crate::RegValueT<Mcs0Ch2R5_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch2R6_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch2R6_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch2R6 = crate::RegValueT<Mcs0Ch2R6_SPEC>;

    impl Mcs0Ch2R6 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch2R6_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch2R6_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch2R6 {
        #[inline(always)]
        fn default() -> Mcs0Ch2R6 {
            <crate::RegValueT<Mcs0Ch2R6_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch2R7_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch2R7_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch2R7 = crate::RegValueT<Mcs0Ch2R7_SPEC>;

    impl Mcs0Ch2R7 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch2R7_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch2R7_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch2R7 {
        #[inline(always)]
        fn default() -> Mcs0Ch2R7 {
            <crate::RegValueT<Mcs0Ch2R7_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch3R0_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch3R0_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch3R0 = crate::RegValueT<Mcs0Ch3R0_SPEC>;

    impl Mcs0Ch3R0 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch3R0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch3R0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch3R0 {
        #[inline(always)]
        fn default() -> Mcs0Ch3R0 {
            <crate::RegValueT<Mcs0Ch3R0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch3R1_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch3R1_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch3R1 = crate::RegValueT<Mcs0Ch3R1_SPEC>;

    impl Mcs0Ch3R1 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch3R1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch3R1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch3R1 {
        #[inline(always)]
        fn default() -> Mcs0Ch3R1 {
            <crate::RegValueT<Mcs0Ch3R1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch3R2_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch3R2_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch3R2 = crate::RegValueT<Mcs0Ch3R2_SPEC>;

    impl Mcs0Ch3R2 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch3R2_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch3R2_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch3R2 {
        #[inline(always)]
        fn default() -> Mcs0Ch3R2 {
            <crate::RegValueT<Mcs0Ch3R2_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch3R3_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch3R3_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch3R3 = crate::RegValueT<Mcs0Ch3R3_SPEC>;

    impl Mcs0Ch3R3 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch3R3_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch3R3_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch3R3 {
        #[inline(always)]
        fn default() -> Mcs0Ch3R3 {
            <crate::RegValueT<Mcs0Ch3R3_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch3R4_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch3R4_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch3R4 = crate::RegValueT<Mcs0Ch3R4_SPEC>;

    impl Mcs0Ch3R4 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch3R4_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch3R4_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch3R4 {
        #[inline(always)]
        fn default() -> Mcs0Ch3R4 {
            <crate::RegValueT<Mcs0Ch3R4_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch3R5_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch3R5_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch3R5 = crate::RegValueT<Mcs0Ch3R5_SPEC>;

    impl Mcs0Ch3R5 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch3R5_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch3R5_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch3R5 {
        #[inline(always)]
        fn default() -> Mcs0Ch3R5 {
            <crate::RegValueT<Mcs0Ch3R5_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch3R6_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch3R6_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch3R6 = crate::RegValueT<Mcs0Ch3R6_SPEC>;

    impl Mcs0Ch3R6 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch3R6_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch3R6_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch3R6 {
        #[inline(always)]
        fn default() -> Mcs0Ch3R6 {
            <crate::RegValueT<Mcs0Ch3R6_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch3R7_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch3R7_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch3R7 = crate::RegValueT<Mcs0Ch3R7_SPEC>;

    impl Mcs0Ch3R7 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch3R7_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch3R7_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch3R7 {
        #[inline(always)]
        fn default() -> Mcs0Ch3R7 {
            <crate::RegValueT<Mcs0Ch3R7_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch4R0_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch4R0_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch4R0 = crate::RegValueT<Mcs0Ch4R0_SPEC>;

    impl Mcs0Ch4R0 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch4R0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch4R0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch4R0 {
        #[inline(always)]
        fn default() -> Mcs0Ch4R0 {
            <crate::RegValueT<Mcs0Ch4R0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch4R1_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch4R1_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch4R1 = crate::RegValueT<Mcs0Ch4R1_SPEC>;

    impl Mcs0Ch4R1 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch4R1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch4R1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch4R1 {
        #[inline(always)]
        fn default() -> Mcs0Ch4R1 {
            <crate::RegValueT<Mcs0Ch4R1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch4R2_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch4R2_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch4R2 = crate::RegValueT<Mcs0Ch4R2_SPEC>;

    impl Mcs0Ch4R2 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch4R2_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch4R2_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch4R2 {
        #[inline(always)]
        fn default() -> Mcs0Ch4R2 {
            <crate::RegValueT<Mcs0Ch4R2_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch4R3_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch4R3_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch4R3 = crate::RegValueT<Mcs0Ch4R3_SPEC>;

    impl Mcs0Ch4R3 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch4R3_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch4R3_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch4R3 {
        #[inline(always)]
        fn default() -> Mcs0Ch4R3 {
            <crate::RegValueT<Mcs0Ch4R3_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch4R4_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch4R4_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch4R4 = crate::RegValueT<Mcs0Ch4R4_SPEC>;

    impl Mcs0Ch4R4 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch4R4_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch4R4_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch4R4 {
        #[inline(always)]
        fn default() -> Mcs0Ch4R4 {
            <crate::RegValueT<Mcs0Ch4R4_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch4R5_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch4R5_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch4R5 = crate::RegValueT<Mcs0Ch4R5_SPEC>;

    impl Mcs0Ch4R5 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch4R5_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch4R5_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch4R5 {
        #[inline(always)]
        fn default() -> Mcs0Ch4R5 {
            <crate::RegValueT<Mcs0Ch4R5_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch4R6_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch4R6_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch4R6 = crate::RegValueT<Mcs0Ch4R6_SPEC>;

    impl Mcs0Ch4R6 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch4R6_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch4R6_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch4R6 {
        #[inline(always)]
        fn default() -> Mcs0Ch4R6 {
            <crate::RegValueT<Mcs0Ch4R6_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch4R7_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch4R7_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch4R7 = crate::RegValueT<Mcs0Ch4R7_SPEC>;

    impl Mcs0Ch4R7 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch4R7_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch4R7_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch4R7 {
        #[inline(always)]
        fn default() -> Mcs0Ch4R7 {
            <crate::RegValueT<Mcs0Ch4R7_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch5R0_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch5R0_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch5R0 = crate::RegValueT<Mcs0Ch5R0_SPEC>;

    impl Mcs0Ch5R0 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch5R0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch5R0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch5R0 {
        #[inline(always)]
        fn default() -> Mcs0Ch5R0 {
            <crate::RegValueT<Mcs0Ch5R0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch5R1_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch5R1_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch5R1 = crate::RegValueT<Mcs0Ch5R1_SPEC>;

    impl Mcs0Ch5R1 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch5R1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch5R1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch5R1 {
        #[inline(always)]
        fn default() -> Mcs0Ch5R1 {
            <crate::RegValueT<Mcs0Ch5R1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch5R2_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch5R2_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch5R2 = crate::RegValueT<Mcs0Ch5R2_SPEC>;

    impl Mcs0Ch5R2 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch5R2_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch5R2_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch5R2 {
        #[inline(always)]
        fn default() -> Mcs0Ch5R2 {
            <crate::RegValueT<Mcs0Ch5R2_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch5R3_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch5R3_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch5R3 = crate::RegValueT<Mcs0Ch5R3_SPEC>;

    impl Mcs0Ch5R3 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch5R3_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch5R3_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch5R3 {
        #[inline(always)]
        fn default() -> Mcs0Ch5R3 {
            <crate::RegValueT<Mcs0Ch5R3_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch5R4_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch5R4_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch5R4 = crate::RegValueT<Mcs0Ch5R4_SPEC>;

    impl Mcs0Ch5R4 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch5R4_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch5R4_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch5R4 {
        #[inline(always)]
        fn default() -> Mcs0Ch5R4 {
            <crate::RegValueT<Mcs0Ch5R4_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch5R5_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch5R5_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch5R5 = crate::RegValueT<Mcs0Ch5R5_SPEC>;

    impl Mcs0Ch5R5 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch5R5_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch5R5_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch5R5 {
        #[inline(always)]
        fn default() -> Mcs0Ch5R5 {
            <crate::RegValueT<Mcs0Ch5R5_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch5R6_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch5R6_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch5R6 = crate::RegValueT<Mcs0Ch5R6_SPEC>;

    impl Mcs0Ch5R6 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch5R6_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch5R6_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch5R6 {
        #[inline(always)]
        fn default() -> Mcs0Ch5R6 {
            <crate::RegValueT<Mcs0Ch5R6_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch5R7_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch5R7_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch5R7 = crate::RegValueT<Mcs0Ch5R7_SPEC>;

    impl Mcs0Ch5R7 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch5R7_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch5R7_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch5R7 {
        #[inline(always)]
        fn default() -> Mcs0Ch5R7 {
            <crate::RegValueT<Mcs0Ch5R7_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch6R0_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch6R0_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch6R0 = crate::RegValueT<Mcs0Ch6R0_SPEC>;

    impl Mcs0Ch6R0 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch6R0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch6R0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch6R0 {
        #[inline(always)]
        fn default() -> Mcs0Ch6R0 {
            <crate::RegValueT<Mcs0Ch6R0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch6R1_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch6R1_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch6R1 = crate::RegValueT<Mcs0Ch6R1_SPEC>;

    impl Mcs0Ch6R1 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch6R1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch6R1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch6R1 {
        #[inline(always)]
        fn default() -> Mcs0Ch6R1 {
            <crate::RegValueT<Mcs0Ch6R1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch6R2_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch6R2_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch6R2 = crate::RegValueT<Mcs0Ch6R2_SPEC>;

    impl Mcs0Ch6R2 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch6R2_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch6R2_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch6R2 {
        #[inline(always)]
        fn default() -> Mcs0Ch6R2 {
            <crate::RegValueT<Mcs0Ch6R2_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch6R3_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch6R3_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch6R3 = crate::RegValueT<Mcs0Ch6R3_SPEC>;

    impl Mcs0Ch6R3 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch6R3_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch6R3_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch6R3 {
        #[inline(always)]
        fn default() -> Mcs0Ch6R3 {
            <crate::RegValueT<Mcs0Ch6R3_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch6R4_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch6R4_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch6R4 = crate::RegValueT<Mcs0Ch6R4_SPEC>;

    impl Mcs0Ch6R4 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch6R4_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch6R4_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch6R4 {
        #[inline(always)]
        fn default() -> Mcs0Ch6R4 {
            <crate::RegValueT<Mcs0Ch6R4_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch6R5_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch6R5_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch6R5 = crate::RegValueT<Mcs0Ch6R5_SPEC>;

    impl Mcs0Ch6R5 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch6R5_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch6R5_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch6R5 {
        #[inline(always)]
        fn default() -> Mcs0Ch6R5 {
            <crate::RegValueT<Mcs0Ch6R5_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch6R6_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch6R6_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch6R6 = crate::RegValueT<Mcs0Ch6R6_SPEC>;

    impl Mcs0Ch6R6 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch6R6_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch6R6_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch6R6 {
        #[inline(always)]
        fn default() -> Mcs0Ch6R6 {
            <crate::RegValueT<Mcs0Ch6R6_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch6R7_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch6R7_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch6R7 = crate::RegValueT<Mcs0Ch6R7_SPEC>;

    impl Mcs0Ch6R7 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch6R7_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch6R7_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch6R7 {
        #[inline(always)]
        fn default() -> Mcs0Ch6R7 {
            <crate::RegValueT<Mcs0Ch6R7_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch7R0_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch7R0_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch7R0 = crate::RegValueT<Mcs0Ch7R0_SPEC>;

    impl Mcs0Ch7R0 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch7R0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch7R0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch7R0 {
        #[inline(always)]
        fn default() -> Mcs0Ch7R0 {
            <crate::RegValueT<Mcs0Ch7R0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch7R1_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch7R1_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch7R1 = crate::RegValueT<Mcs0Ch7R1_SPEC>;

    impl Mcs0Ch7R1 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch7R1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch7R1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch7R1 {
        #[inline(always)]
        fn default() -> Mcs0Ch7R1 {
            <crate::RegValueT<Mcs0Ch7R1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch7R2_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch7R2_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch7R2 = crate::RegValueT<Mcs0Ch7R2_SPEC>;

    impl Mcs0Ch7R2 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch7R2_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch7R2_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch7R2 {
        #[inline(always)]
        fn default() -> Mcs0Ch7R2 {
            <crate::RegValueT<Mcs0Ch7R2_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch7R3_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch7R3_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch7R3 = crate::RegValueT<Mcs0Ch7R3_SPEC>;

    impl Mcs0Ch7R3 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch7R3_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch7R3_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch7R3 {
        #[inline(always)]
        fn default() -> Mcs0Ch7R3 {
            <crate::RegValueT<Mcs0Ch7R3_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch7R4_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch7R4_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch7R4 = crate::RegValueT<Mcs0Ch7R4_SPEC>;

    impl Mcs0Ch7R4 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch7R4_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch7R4_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch7R4 {
        #[inline(always)]
        fn default() -> Mcs0Ch7R4 {
            <crate::RegValueT<Mcs0Ch7R4_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch7R5_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch7R5_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch7R5 = crate::RegValueT<Mcs0Ch7R5_SPEC>;

    impl Mcs0Ch7R5 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch7R5_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch7R5_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch7R5 {
        #[inline(always)]
        fn default() -> Mcs0Ch7R5 {
            <crate::RegValueT<Mcs0Ch7R5_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch7R6_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch7R6_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch7R6 = crate::RegValueT<Mcs0Ch7R6_SPEC>;

    impl Mcs0Ch7R6 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch7R6_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch7R6_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch7R6 {
        #[inline(always)]
        fn default() -> Mcs0Ch7R6 {
            <crate::RegValueT<Mcs0Ch7R6_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ch7R7_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ch7R7_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Channel 7 General Purpose Register 7\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ch7R7 = crate::RegValueT<Mcs0Ch7R7_SPEC>;

    impl Mcs0Ch7R7 {
        #[doc = "Data of general purpose register R y . Note  This register is the same as described in internal register section. Note  For the register MCS i  CH x  R6  see internal register section  an additional write protection during an active ARDI or NARDI instruction is applied"]
        #[inline(always)]
        pub fn data(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Mcs0Ch7R7_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Mcs0Ch7R7_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ch7R7 {
        #[inline(always)]
        fn default() -> Mcs0Ch7R7 {
            <crate::RegValueT<Mcs0Ch7R7_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Ctrg_SPEC;
    impl crate::sealed::RegSpec for Mcs0Ctrg_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Clear Trigger Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Ctrg = crate::RegValueT<Mcs0Ctrg_SPEC>;

    impl Mcs0Ctrg {
        #[doc = "Trigger bit 7. READ access  State of current trigger bit TRGk        if EN TIM FOUT   0 State of input signal TIM i  CH   k    F OUT        if EN TIM FOUT   1 WRITE access"]
        #[inline(always)]
        pub fn trg0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 7. READ access  State of current trigger bit TRGk        if EN TIM FOUT   0 State of input signal TIM i  CH   k    F OUT        if EN TIM FOUT   1 WRITE access"]
        #[inline(always)]
        pub fn trg1(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 7. READ access  State of current trigger bit TRGk        if EN TIM FOUT   0 State of input signal TIM i  CH   k    F OUT        if EN TIM FOUT   1 WRITE access"]
        #[inline(always)]
        pub fn trg2(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 7. READ access  State of current trigger bit TRGk        if EN TIM FOUT   0 State of input signal TIM i  CH   k    F OUT        if EN TIM FOUT   1 WRITE access"]
        #[inline(always)]
        pub fn trg3(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 7. READ access  State of current trigger bit TRGk        if EN TIM FOUT   0 State of input signal TIM i  CH   k    F OUT        if EN TIM FOUT   1 WRITE access"]
        #[inline(always)]
        pub fn trg4(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 7. READ access  State of current trigger bit TRGk        if EN TIM FOUT   0 State of input signal TIM i  CH   k    F OUT        if EN TIM FOUT   1 WRITE access"]
        #[inline(always)]
        pub fn trg5(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 7. READ access  State of current trigger bit TRGk        if EN TIM FOUT   0 State of input signal TIM i  CH   k    F OUT        if EN TIM FOUT   1 WRITE access"]
        #[inline(always)]
        pub fn trg6(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 7. READ access  State of current trigger bit TRGk        if EN TIM FOUT   0 State of input signal TIM i  CH   k    F OUT        if EN TIM FOUT   1 WRITE access"]
        #[inline(always)]
        pub fn trg7(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 15. READ access  State of current trigger bit TRGk        if EN TIM FOUT   0 State of input signal TIM i 1  CH  k 8   F OUT        if EN TIM FOUT   1 WRITE access"]
        #[inline(always)]
        pub fn trg8(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<8,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 15. READ access  State of current trigger bit TRGk        if EN TIM FOUT   0 State of input signal TIM i 1  CH  k 8   F OUT        if EN TIM FOUT   1 WRITE access"]
        #[inline(always)]
        pub fn trg9(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 15. READ access  State of current trigger bit TRGk        if EN TIM FOUT   0 State of input signal TIM i 1  CH  k 8   F OUT        if EN TIM FOUT   1 WRITE access"]
        #[inline(always)]
        pub fn trg10(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 15. READ access  State of current trigger bit TRGk        if EN TIM FOUT   0 State of input signal TIM i 1  CH  k 8   F OUT        if EN TIM FOUT   1 WRITE access"]
        #[inline(always)]
        pub fn trg11(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 15. READ access  State of current trigger bit TRGk        if EN TIM FOUT   0 State of input signal TIM i 1  CH  k 8   F OUT        if EN TIM FOUT   1 WRITE access"]
        #[inline(always)]
        pub fn trg12(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<12,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 15. READ access  State of current trigger bit TRGk        if EN TIM FOUT   0 State of input signal TIM i 1  CH  k 8   F OUT        if EN TIM FOUT   1 WRITE access"]
        #[inline(always)]
        pub fn trg13(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<13,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 15. READ access  State of current trigger bit TRGk        if EN TIM FOUT   0 State of input signal TIM i 1  CH  k 8   F OUT        if EN TIM FOUT   1 WRITE access"]
        #[inline(always)]
        pub fn trg14(
            self,
        ) -> crate::common::RegisterFieldBool<14, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<14,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 15. READ access  State of current trigger bit TRGk        if EN TIM FOUT   0 State of input signal TIM i 1  CH  k 8   F OUT        if EN TIM FOUT   1 WRITE access"]
        #[inline(always)]
        pub fn trg15(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg16(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg17(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg18(
            self,
        ) -> crate::common::RegisterFieldBool<18, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<18,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg19(
            self,
        ) -> crate::common::RegisterFieldBool<19, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<19,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg20(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg21(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg22(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg23(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Mcs0Ctrg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Mcs0Ctrg_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Ctrg {
        #[inline(always)]
        fn default() -> Mcs0Ctrg {
            <crate::RegValueT<Mcs0Ctrg_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Mcs0Strg_SPEC;
    impl crate::sealed::RegSpec for Mcs0Strg_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Set Trigger Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Mcs0Strg = crate::RegValueT<Mcs0Strg_SPEC>;

    impl Mcs0Strg {
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg1(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg2(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg3(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg4(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg5(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg6(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg7(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg8(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<8,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg9(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg10(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg11(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg12(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<12,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg13(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<13,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg14(
            self,
        ) -> crate::common::RegisterFieldBool<14, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<14,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg15(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg16(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg17(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg18(
            self,
        ) -> crate::common::RegisterFieldBool<18, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<18,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg19(
            self,
        ) -> crate::common::RegisterFieldBool<19, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<19,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg20(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg21(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg22(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger bit 23"]
        #[inline(always)]
        pub fn trg23(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Mcs0Strg_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Mcs0Strg_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Mcs0Strg {
        #[inline(always)]
        fn default() -> Mcs0Strg {
            <crate::RegValueT<Mcs0Strg_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct McSiCat_SPEC;
    impl crate::sealed::RegSpec for McSiCat_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Cancel ARU Transfer Instruction Register\n resetvalue={Application Reset:0x0}"]
    pub type McSiCat = crate::RegValueT<McSiCat_SPEC>;

    impl McSiCat {
        #[doc = "Cancel ARU transfer for channel 7. The CATx  x   0..T 1  bit inside the STA register of the corresponding          MCS channel is set  and any pending blocking ARU read or write request          is canceled. The MCS channel resumes with the instruction after the          blocking ARU transfer instruction. The CATx  x   0..T 1  bit is cleared by the corresponding MCS channel          when the channel is entering a blocking ARU read or write instruction."]
        #[inline(always)]
        pub fn cat0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, McSiCat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,McSiCat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Cancel ARU transfer for channel 7. The CATx  x   0..T 1  bit inside the STA register of the corresponding          MCS channel is set  and any pending blocking ARU read or write request          is canceled. The MCS channel resumes with the instruction after the          blocking ARU transfer instruction. The CATx  x   0..T 1  bit is cleared by the corresponding MCS channel          when the channel is entering a blocking ARU read or write instruction."]
        #[inline(always)]
        pub fn cat1(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, McSiCat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,McSiCat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Cancel ARU transfer for channel 7. The CATx  x   0..T 1  bit inside the STA register of the corresponding          MCS channel is set  and any pending blocking ARU read or write request          is canceled. The MCS channel resumes with the instruction after the          blocking ARU transfer instruction. The CATx  x   0..T 1  bit is cleared by the corresponding MCS channel          when the channel is entering a blocking ARU read or write instruction."]
        #[inline(always)]
        pub fn cat2(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, McSiCat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,McSiCat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Cancel ARU transfer for channel 7. The CATx  x   0..T 1  bit inside the STA register of the corresponding          MCS channel is set  and any pending blocking ARU read or write request          is canceled. The MCS channel resumes with the instruction after the          blocking ARU transfer instruction. The CATx  x   0..T 1  bit is cleared by the corresponding MCS channel          when the channel is entering a blocking ARU read or write instruction."]
        #[inline(always)]
        pub fn cat3(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, McSiCat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,McSiCat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Cancel ARU transfer for channel 7. The CATx  x   0..T 1  bit inside the STA register of the corresponding          MCS channel is set  and any pending blocking ARU read or write request          is canceled. The MCS channel resumes with the instruction after the          blocking ARU transfer instruction. The CATx  x   0..T 1  bit is cleared by the corresponding MCS channel          when the channel is entering a blocking ARU read or write instruction."]
        #[inline(always)]
        pub fn cat4(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, McSiCat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,McSiCat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Cancel ARU transfer for channel 7. The CATx  x   0..T 1  bit inside the STA register of the corresponding          MCS channel is set  and any pending blocking ARU read or write request          is canceled. The MCS channel resumes with the instruction after the          blocking ARU transfer instruction. The CATx  x   0..T 1  bit is cleared by the corresponding MCS channel          when the channel is entering a blocking ARU read or write instruction."]
        #[inline(always)]
        pub fn cat5(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, McSiCat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,McSiCat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Cancel ARU transfer for channel 7. The CATx  x   0..T 1  bit inside the STA register of the corresponding          MCS channel is set  and any pending blocking ARU read or write request          is canceled. The MCS channel resumes with the instruction after the          blocking ARU transfer instruction. The CATx  x   0..T 1  bit is cleared by the corresponding MCS channel          when the channel is entering a blocking ARU read or write instruction."]
        #[inline(always)]
        pub fn cat6(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, McSiCat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,McSiCat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Cancel ARU transfer for channel 7. The CATx  x   0..T 1  bit inside the STA register of the corresponding          MCS channel is set  and any pending blocking ARU read or write request          is canceled. The MCS channel resumes with the instruction after the          blocking ARU transfer instruction. The CATx  x   0..T 1  bit is cleared by the corresponding MCS channel          when the channel is entering a blocking ARU read or write instruction."]
        #[inline(always)]
        pub fn cat7(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, McSiCat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,McSiCat_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for McSiCat {
        #[inline(always)]
        fn default() -> McSiCat {
            <crate::RegValueT<McSiCat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct McSiCtrlStat_SPEC;
    impl crate::sealed::RegSpec for McSiCtrlStat_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Control and Status Register\n resetvalue={Application Reset:0x0}"]
    pub type McSiCtrlStat = crate::RegValueT<McSiCtrlStat_SPEC>;

    impl McSiCtrlStat {
        #[doc = "Select MCS scheduling mode"]
        #[inline(always)]
        pub fn scd_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, McSiCtrlStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, McSiCtrlStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Channel selection for scheduling algorithm. MCS channel identifier used by several scheduling modes. The actual width of the bit field SCD CH is calculated as ceiling log 2  T 1  . Unused MSBs are reserved and read as zero."]
        #[inline(always)]
        pub fn scd_ch(
            self,
        ) -> crate::common::RegisterField<8, 0xf, 1, 0, u8, McSiCtrlStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0xf,1,0,u8, McSiCtrlStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "RAM reset bit. The RAM reset initializes the memory content with zeros. RAM access          and enabling of MCS channels is disabled during active RAM reset. This bit is only writable if the bit RF PROT in register GTM CTRL is          cleared  and all MCS channels are disabled. The actual reset value of this bit depends on the silicon vendor          configuration. The reset value is 1  if the RAM reset is performed          together with the sub module reset  otherwise  the reset value is 0.          If the reset value is 1  the reset value is changed to 0 by hardware          when the RAM reset has finished."]
        #[inline(always)]
        pub fn ram_rst(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, McSiCtrlStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<16,1,0,McSiCtrlStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Halt on stack pointer overflow"]
        #[inline(always)]
        pub fn hlt_sp_ofl(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, McSiCtrlStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<17,1,0,McSiCtrlStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Error source identifier. This register is updated once  if an error was detected by the MCS.          The register is set to its initial value 000 after each write access to an existing ERR bit in register MCS i  ERR.          If multiple errors occur  ERR SRC ID is holding the first type of          error which has occurred."]
        #[inline(always)]
        pub fn err_src_id(
            self,
        ) -> crate::common::RegisterField<20, 0x7, 1, 0, u8, McSiCtrlStat_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<20,0x7,1,0,u8, McSiCtrlStat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Enable routing of TIM i  CH x  F OUT signal"]
        #[inline(always)]
        pub fn en_tim_fout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, McSiCtrlStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<24,1,0,McSiCtrlStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable extended register set. Note  If the extended operation register sets are disabled  the MCS instructions can only use the subset OREG of the register set as arguments in the instructions. In this case  the upper address bits in the instructions are always read as zeros  which leads to unexpected results of the MCS program if arguments A or B refer to a register that is not part of OREG ."]
        #[inline(always)]
        pub fn en_xoreg(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, McSiCtrlStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<25,1,0,McSiCtrlStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Halt on AEI bus master error. If the register HLT AEIM ERR is set  and an MCS channel x is executing          an invalid bus master access  the MCS channel x is halted  the ERR bit          of its register STA is set  and the bit field ERR SRC ID of this          register is updated. If the bus master is accessing a slave that does not insert wait          cycles  e.g. register access   it takes two additional clock cycles          until the MCS channel is halted. Within that time span  the MCS          channel can continue with its program execution  depending on the          selected scheduling mode. The registers AEIM XPT STA and AEIM XPT ADDR of the GTM sub module CCM          are always updated on the first invalid AEI bus master access           independently of the state of HLT AEIM ERR"]
        #[inline(always)]
        pub fn hlt_aeim_err(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, McSiCtrlStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<26,1,0,McSiCtrlStat_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for McSiCtrlStat {
        #[inline(always)]
        fn default() -> McSiCtrlStat {
            <crate::RegValueT<McSiCtrlStat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct McSiCwt_SPEC;
    impl crate::sealed::RegSpec for McSiCwt_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Cancel WURM Instruction Register\n resetvalue={Application Reset:0x0}"]
    pub type McSiCwt = crate::RegValueT<McSiCwt_SPEC>;

    impl McSiCwt {
        #[doc = "Cancel WURM instruction for channel 7. The CWTx  x   0..T 1  bit inside the STA register of the corresponding          MCS channel is set  and any pending WURM instruction is canceled. The          MC  channel resumes with the instruction after the WURM instruction. The CWTx  x   0..T 1  bit is cleared by the corresponding MCS channel          when the channel reaches a WURM instruction."]
        #[inline(always)]
        pub fn cwt0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, McSiCwt_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,McSiCwt_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Cancel WURM instruction for channel 7. The CWTx  x   0..T 1  bit inside the STA register of the corresponding          MCS channel is set  and any pending WURM instruction is canceled. The          MC  channel resumes with the instruction after the WURM instruction. The CWTx  x   0..T 1  bit is cleared by the corresponding MCS channel          when the channel reaches a WURM instruction."]
        #[inline(always)]
        pub fn cwt1(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, McSiCwt_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,McSiCwt_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Cancel WURM instruction for channel 7. The CWTx  x   0..T 1  bit inside the STA register of the corresponding          MCS channel is set  and any pending WURM instruction is canceled. The          MC  channel resumes with the instruction after the WURM instruction. The CWTx  x   0..T 1  bit is cleared by the corresponding MCS channel          when the channel reaches a WURM instruction."]
        #[inline(always)]
        pub fn cwt2(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, McSiCwt_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,McSiCwt_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Cancel WURM instruction for channel 7. The CWTx  x   0..T 1  bit inside the STA register of the corresponding          MCS channel is set  and any pending WURM instruction is canceled. The          MC  channel resumes with the instruction after the WURM instruction. The CWTx  x   0..T 1  bit is cleared by the corresponding MCS channel          when the channel reaches a WURM instruction."]
        #[inline(always)]
        pub fn cwt3(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, McSiCwt_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,McSiCwt_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Cancel WURM instruction for channel 7. The CWTx  x   0..T 1  bit inside the STA register of the corresponding          MCS channel is set  and any pending WURM instruction is canceled. The          MC  channel resumes with the instruction after the WURM instruction. The CWTx  x   0..T 1  bit is cleared by the corresponding MCS channel          when the channel reaches a WURM instruction."]
        #[inline(always)]
        pub fn cwt4(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, McSiCwt_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,McSiCwt_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Cancel WURM instruction for channel 7. The CWTx  x   0..T 1  bit inside the STA register of the corresponding          MCS channel is set  and any pending WURM instruction is canceled. The          MC  channel resumes with the instruction after the WURM instruction. The CWTx  x   0..T 1  bit is cleared by the corresponding MCS channel          when the channel reaches a WURM instruction."]
        #[inline(always)]
        pub fn cwt5(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, McSiCwt_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,McSiCwt_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Cancel WURM instruction for channel 7. The CWTx  x   0..T 1  bit inside the STA register of the corresponding          MCS channel is set  and any pending WURM instruction is canceled. The          MC  channel resumes with the instruction after the WURM instruction. The CWTx  x   0..T 1  bit is cleared by the corresponding MCS channel          when the channel reaches a WURM instruction."]
        #[inline(always)]
        pub fn cwt6(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, McSiCwt_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,McSiCwt_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Cancel WURM instruction for channel 7. The CWTx  x   0..T 1  bit inside the STA register of the corresponding          MCS channel is set  and any pending WURM instruction is canceled. The          MC  channel resumes with the instruction after the WURM instruction. The CWTx  x   0..T 1  bit is cleared by the corresponding MCS channel          when the channel reaches a WURM instruction."]
        #[inline(always)]
        pub fn cwt7(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, McSiCwt_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,McSiCwt_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for McSiCwt {
        #[inline(always)]
        fn default() -> McSiCwt {
            <crate::RegValueT<McSiCwt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct McSiErr_SPEC;
    impl crate::sealed::RegSpec for McSiErr_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 error register\n resetvalue={Application Reset:0x0}"]
    pub type McSiErr = crate::RegValueT<McSiErr_SPEC>;

    impl McSiErr {
        #[doc = "Error State of MCS channel 7. The CPU can read the ERRx  x   0..T 1  bits in order to determine the          current error state of the corresponding MCS channel x. The error state is also evaluated by the sub module MON  if this          module is available. Writing the value 1 to this bit resets the corresponding error state           and resets the channel internal ERR bit in the STA and channel CTRL          registers. Moreover  each write access to this bit also sets the          ERR SRC ID bit field of register MCS i  CTRL STAT to its reset value."]
        #[inline(always)]
        pub fn err0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, McSiErr_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,McSiErr_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Error State of MCS channel 7. The CPU can read the ERRx  x   0..T 1  bits in order to determine the          current error state of the corresponding MCS channel x. The error state is also evaluated by the sub module MON  if this          module is available. Writing the value 1 to this bit resets the corresponding error state           and resets the channel internal ERR bit in the STA and channel CTRL          registers. Moreover  each write access to this bit also sets the          ERR SRC ID bit field of register MCS i  CTRL STAT to its reset value."]
        #[inline(always)]
        pub fn err1(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, McSiErr_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,McSiErr_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Error State of MCS channel 7. The CPU can read the ERRx  x   0..T 1  bits in order to determine the          current error state of the corresponding MCS channel x. The error state is also evaluated by the sub module MON  if this          module is available. Writing the value 1 to this bit resets the corresponding error state           and resets the channel internal ERR bit in the STA and channel CTRL          registers. Moreover  each write access to this bit also sets the          ERR SRC ID bit field of register MCS i  CTRL STAT to its reset value."]
        #[inline(always)]
        pub fn err2(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, McSiErr_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,McSiErr_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Error State of MCS channel 7. The CPU can read the ERRx  x   0..T 1  bits in order to determine the          current error state of the corresponding MCS channel x. The error state is also evaluated by the sub module MON  if this          module is available. Writing the value 1 to this bit resets the corresponding error state           and resets the channel internal ERR bit in the STA and channel CTRL          registers. Moreover  each write access to this bit also sets the          ERR SRC ID bit field of register MCS i  CTRL STAT to its reset value."]
        #[inline(always)]
        pub fn err3(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, McSiErr_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,McSiErr_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Error State of MCS channel 7. The CPU can read the ERRx  x   0..T 1  bits in order to determine the          current error state of the corresponding MCS channel x. The error state is also evaluated by the sub module MON  if this          module is available. Writing the value 1 to this bit resets the corresponding error state           and resets the channel internal ERR bit in the STA and channel CTRL          registers. Moreover  each write access to this bit also sets the          ERR SRC ID bit field of register MCS i  CTRL STAT to its reset value."]
        #[inline(always)]
        pub fn err4(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, McSiErr_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,McSiErr_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Error State of MCS channel 7. The CPU can read the ERRx  x   0..T 1  bits in order to determine the          current error state of the corresponding MCS channel x. The error state is also evaluated by the sub module MON  if this          module is available. Writing the value 1 to this bit resets the corresponding error state           and resets the channel internal ERR bit in the STA and channel CTRL          registers. Moreover  each write access to this bit also sets the          ERR SRC ID bit field of register MCS i  CTRL STAT to its reset value."]
        #[inline(always)]
        pub fn err5(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, McSiErr_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,McSiErr_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Error State of MCS channel 7. The CPU can read the ERRx  x   0..T 1  bits in order to determine the          current error state of the corresponding MCS channel x. The error state is also evaluated by the sub module MON  if this          module is available. Writing the value 1 to this bit resets the corresponding error state           and resets the channel internal ERR bit in the STA and channel CTRL          registers. Moreover  each write access to this bit also sets the          ERR SRC ID bit field of register MCS i  CTRL STAT to its reset value."]
        #[inline(always)]
        pub fn err6(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, McSiErr_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,McSiErr_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Error State of MCS channel 7. The CPU can read the ERRx  x   0..T 1  bits in order to determine the          current error state of the corresponding MCS channel x. The error state is also evaluated by the sub module MON  if this          module is available. Writing the value 1 to this bit resets the corresponding error state           and resets the channel internal ERR bit in the STA and channel CTRL          registers. Moreover  each write access to this bit also sets the          ERR SRC ID bit field of register MCS i  CTRL STAT to its reset value."]
        #[inline(always)]
        pub fn err7(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, McSiErr_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,McSiErr_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for McSiErr {
        #[inline(always)]
        fn default() -> McSiErr {
            <crate::RegValueT<McSiErr_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct McSiRegProt_SPEC;
    impl crate::sealed::RegSpec for McSiRegProt_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Write Protection Register\n resetvalue={Application Reset:0x0}"]
    pub type McSiRegProt = crate::RegValueT<McSiRegProt_SPEC>;

    impl McSiRegProt {
        #[doc = "Register Write Protection of MCS channel 7"]
        #[inline(always)]
        pub fn wprot0(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, McSiRegProt_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, McSiRegProt_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Register Write Protection of MCS channel 7"]
        #[inline(always)]
        pub fn wprot1(
            self,
        ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, McSiRegProt_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<2,0x3,1,0,u8, McSiRegProt_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Register Write Protection of MCS channel 7"]
        #[inline(always)]
        pub fn wprot2(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, McSiRegProt_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, McSiRegProt_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Register Write Protection of MCS channel 7"]
        #[inline(always)]
        pub fn wprot3(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, McSiRegProt_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, McSiRegProt_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Register Write Protection of MCS channel 7"]
        #[inline(always)]
        pub fn wprot4(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, McSiRegProt_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, McSiRegProt_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Register Write Protection of MCS channel 7"]
        #[inline(always)]
        pub fn wprot5(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, McSiRegProt_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, McSiRegProt_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Register Write Protection of MCS channel 7"]
        #[inline(always)]
        pub fn wprot6(
            self,
        ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, McSiRegProt_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x3,1,0,u8, McSiRegProt_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Register Write Protection of MCS channel 7"]
        #[inline(always)]
        pub fn wprot7(
            self,
        ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, McSiRegProt_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<14,0x3,1,0,u8, McSiRegProt_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for McSiRegProt {
        #[inline(always)]
        fn default() -> McSiRegProt {
            <crate::RegValueT<McSiRegProt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct McSiReset_SPEC;
    impl crate::sealed::RegSpec for McSiReset_SPEC {
        type DataType = u32;
    }
    #[doc = "MCS0 Reset Register\n resetvalue={Application Reset:0x0}"]
    pub type McSiReset = crate::RegValueT<McSiReset_SPEC>;

    impl McSiReset {
        #[doc = "Software reset of channel 7"]
        #[inline(always)]
        pub fn rst0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, McSiReset_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,McSiReset_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7"]
        #[inline(always)]
        pub fn rst1(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, McSiReset_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,McSiReset_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7"]
        #[inline(always)]
        pub fn rst2(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, McSiReset_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,McSiReset_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7"]
        #[inline(always)]
        pub fn rst3(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, McSiReset_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,McSiReset_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7"]
        #[inline(always)]
        pub fn rst4(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, McSiReset_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,McSiReset_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7"]
        #[inline(always)]
        pub fn rst5(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, McSiReset_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,McSiReset_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7"]
        #[inline(always)]
        pub fn rst6(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, McSiReset_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,McSiReset_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7"]
        #[inline(always)]
        pub fn rst7(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, McSiReset_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,McSiReset_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for McSiReset {
        #[inline(always)]
        fn default() -> McSiReset {
            <crate::RegValueT<McSiReset_SPEC> as RegisterValue<_>>::new(0)
        }
    }
}
#[doc = "MON"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Mon(pub(super) *mut u8);
unsafe impl core::marker::Send for Mon {}
unsafe impl core::marker::Sync for Mon {}
impl Mon {
    #[doc = "Monitor Status Register\n resetvalue={Application Reset:0x4000}"]
    #[inline(always)]
    pub const fn status(&self) -> crate::common::Reg<mon::Status_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
    }
    #[doc = "ACTIVITY"]
    #[inline(always)]
    pub fn activity(self) -> mon::Activity {
        unsafe { mon::Activity(self.0.add(4usize)) }
    }
}
pub mod mon {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Status_SPEC;
    impl crate::sealed::RegSpec for Status_SPEC {
        type DataType = u32;
    }
    #[doc = "Monitor Status Register\n resetvalue={Application Reset:0x4000}"]
    pub type Status = crate::RegValueT<Status_SPEC>;

    impl Status {
        #[doc = "CMU CLK7 activity. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged. Bits is set  when a rising edge is detected at the considered clock."]
        #[inline(always)]
        pub fn act_cmu0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Status_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Status_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CMU CLK7 activity. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged. Bits is set  when a rising edge is detected at the considered clock."]
        #[inline(always)]
        pub fn act_cmu1(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Status_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Status_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CMU CLK7 activity. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged. Bits is set  when a rising edge is detected at the considered clock."]
        #[inline(always)]
        pub fn act_cmu2(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Status_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Status_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CMU CLK7 activity. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged. Bits is set  when a rising edge is detected at the considered clock."]
        #[inline(always)]
        pub fn act_cmu3(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Status_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Status_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CMU CLK7 activity. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged. Bits is set  when a rising edge is detected at the considered clock."]
        #[inline(always)]
        pub fn act_cmu4(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Status_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Status_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CMU CLK7 activity. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged. Bits is set  when a rising edge is detected at the considered clock."]
        #[inline(always)]
        pub fn act_cmu5(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Status_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Status_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CMU CLK7 activity. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged. Bits is set  when a rising edge is detected at the considered clock."]
        #[inline(always)]
        pub fn act_cmu6(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Status_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,Status_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CMU CLK7 activity. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged. Bits is set  when a rising edge is detected at the considered clock."]
        #[inline(always)]
        pub fn act_cmu7(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Status_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Status_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CMU CLKFX4 activity. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged. Bits is set  when a rising edge is detected at the considered clock."]
        #[inline(always)]
        pub fn act_cmufx0(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Status_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<8,1,0,Status_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CMU CLKFX4 activity. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged. Bits is set  when a rising edge is detected at the considered clock."]
        #[inline(always)]
        pub fn act_cmufx1(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Status_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Status_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CMU CLKFX4 activity. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged. Bits is set  when a rising edge is detected at the considered clock."]
        #[inline(always)]
        pub fn act_cmufx2(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Status_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<10,1,0,Status_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CMU CLKFX4 activity. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged. Bits is set  when a rising edge is detected at the considered clock."]
        #[inline(always)]
        pub fn act_cmufx3(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Status_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Status_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CMU CLKFX4 activity. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged. Bits is set  when a rising edge is detected at the considered clock."]
        #[inline(always)]
        pub fn act_cmufx4(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, Status_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<12,1,0,Status_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CMU CLK8 activity. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged. Bit is set  when a rising edge is detected at the considered clock."]
        #[inline(always)]
        pub fn act_cmu8(
            self,
        ) -> crate::common::RegisterFieldBool<14, 1, 0, Status_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<14,1,0,Status_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Error detected at CMP. This bit will be readable only. Bits is set  when the corresponding unit reports an error."]
        #[inline(always)]
        pub fn cmp_err(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<16,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Error detected at MCS9. This bit will be readable only. Bits is set  when the corresponding unit reports an error."]
        #[inline(always)]
        pub fn mcs0_err(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<20,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Error detected at MCS9. This bit will be readable only. Bits is set  when the corresponding unit reports an error."]
        #[inline(always)]
        pub fn mcs1_err(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<21,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Error detected at MCS9. This bit will be readable only. Bits is set  when the corresponding unit reports an error."]
        #[inline(always)]
        pub fn mcs2_err(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<22,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Error detected at MCS9. This bit will be readable only. Bits is set  when the corresponding unit reports an error."]
        #[inline(always)]
        pub fn mcs3_err(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<23,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Error detected at MCS9. This bit will be readable only. Bits is set  when the corresponding unit reports an error."]
        #[inline(always)]
        pub fn mcs4_err(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Status_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<24,1,0,Status_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Status {
        #[inline(always)]
        fn default() -> Status {
            <crate::RegValueT<Status_SPEC> as RegisterValue<_>>::new(16384)
        }
    }

    #[doc = "ACTIVITY"]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Activity(pub(super) *mut u8);
    unsafe impl core::marker::Send for Activity {}
    unsafe impl core::marker::Sync for Activity {}
    impl Activity {
        #[doc = "Monitor Activity Register 0\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn mon_activity_0(
            &self,
        ) -> crate::common::Reg<activity::MonActivity0_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
        }
        #[doc = "Monitor Activity Register 1\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn mon_activity_1(
            &self,
        ) -> crate::common::Reg<activity::MonActivity1_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
        }
        #[doc = "Monitor Activity Register for MCS 0\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn mon_activity_mcsz(
            &self,
        ) -> [crate::common::Reg<activity::MonActivityMcSz_SPEC, crate::common::RW>; 5] {
            unsafe {
                [
                    crate::common::Reg::from_ptr(self.0.add(0x8usize + 0x0usize)),
                    crate::common::Reg::from_ptr(self.0.add(0x8usize + 0x4usize)),
                    crate::common::Reg::from_ptr(self.0.add(0x8usize + 0x8usize)),
                    crate::common::Reg::from_ptr(self.0.add(0x8usize + 0xcusize)),
                    crate::common::Reg::from_ptr(self.0.add(0x8usize + 0x10usize)),
                ]
            }
        }
    }
    pub mod activity {
        #[allow(unused_imports)]
        use crate::common::*;
        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct MonActivity0_SPEC;
        impl crate::sealed::RegSpec for MonActivity0_SPEC {
            type DataType = u32;
        }
        #[doc = "Monitor Activity Register 0\n resetvalue={Application Reset:0x0}"]
        pub type MonActivity0 = crate::RegValueT<MonActivity0_SPEC>;

        impl MonActivity0 {
            #[doc = "Activity of check performed in module MCS 0 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_0_0(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<0,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 0 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_0_1(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<1,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 0 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_0_2(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<2,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 0 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_0_3(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<3,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 0 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_0_4(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<4,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 0 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_0_5(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<5,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 0 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_0_6(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<6,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 0 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_0_7(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<7,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 1 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_1_0(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<8,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 1 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_1_1(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<9,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 1 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_1_2(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<10,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 1 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_1_3(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<11,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 1 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_1_4(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<12,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 1 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_1_5(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<13,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 1 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_1_6(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<14,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 1 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_1_7(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<15,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 2 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_2_0(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<16,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 2 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_2_1(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<17,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 2 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_2_2(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<18,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 2 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_2_3(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<19,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 2 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_2_4(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<20,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 2 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_2_5(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<21,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 2 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_2_6(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<22,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 2 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_2_7(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<23,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 3 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_3_0(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<24,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 3 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_3_1(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<25,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 3 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_3_2(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<26,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 3 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_3_3(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<27,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 3 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_3_4(
                self,
            ) -> crate::common::RegisterFieldBool<28, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<28,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 3 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_3_5(
                self,
            ) -> crate::common::RegisterFieldBool<29, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<29,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 3 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_3_6(
                self,
            ) -> crate::common::RegisterFieldBool<30, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<30,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 3 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_3_7(
                self,
            ) -> crate::common::RegisterFieldBool<31, 1, 0, MonActivity0_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<31,1,0,MonActivity0_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for MonActivity0 {
            #[inline(always)]
            fn default() -> MonActivity0 {
                <crate::RegValueT<MonActivity0_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct MonActivity1_SPEC;
        impl crate::sealed::RegSpec for MonActivity1_SPEC {
            type DataType = u32;
        }
        #[doc = "Monitor Activity Register 1\n resetvalue={Application Reset:0x0}"]
        pub type MonActivity1 = crate::RegValueT<MonActivity1_SPEC>;

        impl MonActivity1 {
            #[doc = "Activity of check performed in module MCS 4 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_4_0(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<0,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 4 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_4_1(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<1,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 4 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_4_2(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<2,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 4 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_4_3(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<3,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 4 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_4_4(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<4,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 4 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_4_5(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<5,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 4 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_4_6(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<6,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 4 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_4_7(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<7,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 5 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_5_0(
                self,
            ) -> crate::common::RegisterFieldBool<8, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<8,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 5 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_5_1(
                self,
            ) -> crate::common::RegisterFieldBool<9, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<9,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 5 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_5_2(
                self,
            ) -> crate::common::RegisterFieldBool<10, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<10,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 5 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_5_3(
                self,
            ) -> crate::common::RegisterFieldBool<11, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<11,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 5 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_5_4(
                self,
            ) -> crate::common::RegisterFieldBool<12, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<12,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 5 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_5_5(
                self,
            ) -> crate::common::RegisterFieldBool<13, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<13,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 5 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_5_6(
                self,
            ) -> crate::common::RegisterFieldBool<14, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<14,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 5 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_5_7(
                self,
            ) -> crate::common::RegisterFieldBool<15, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<15,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 6 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_6_0(
                self,
            ) -> crate::common::RegisterFieldBool<16, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<16,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 6 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_6_1(
                self,
            ) -> crate::common::RegisterFieldBool<17, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<17,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 6 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_6_2(
                self,
            ) -> crate::common::RegisterFieldBool<18, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<18,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 6 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_6_3(
                self,
            ) -> crate::common::RegisterFieldBool<19, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<19,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 6 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_6_4(
                self,
            ) -> crate::common::RegisterFieldBool<20, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<20,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 6 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_6_5(
                self,
            ) -> crate::common::RegisterFieldBool<21, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<21,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 6 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_6_6(
                self,
            ) -> crate::common::RegisterFieldBool<22, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<22,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 6 at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_6_7(
                self,
            ) -> crate::common::RegisterFieldBool<23, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<23,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 7 at channel 7   MCA 7 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_7_0(
                self,
            ) -> crate::common::RegisterFieldBool<24, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<24,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 7 at channel 7   MCA 7 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_7_1(
                self,
            ) -> crate::common::RegisterFieldBool<25, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<25,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 7 at channel 7   MCA 7 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_7_2(
                self,
            ) -> crate::common::RegisterFieldBool<26, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<26,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 7 at channel 7   MCA 7 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_7_3(
                self,
            ) -> crate::common::RegisterFieldBool<27, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<27,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 7 at channel 7   MCA 7 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_7_4(
                self,
            ) -> crate::common::RegisterFieldBool<28, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<28,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 7 at channel 7   MCA 7 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_7_5(
                self,
            ) -> crate::common::RegisterFieldBool<29, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<29,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 7 at channel 7   MCA 7 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_7_6(
                self,
            ) -> crate::common::RegisterFieldBool<30, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<30,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS 7 at channel 7   MCA 7 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_7_7(
                self,
            ) -> crate::common::RegisterFieldBool<31, 1, 0, MonActivity1_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<31,1,0,MonActivity1_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for MonActivity1 {
            #[inline(always)]
            fn default() -> MonActivity1 {
                <crate::RegValueT<MonActivity1_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct MonActivityMcSz_SPEC;
        impl crate::sealed::RegSpec for MonActivityMcSz_SPEC {
            type DataType = u32;
        }
        #[doc = "Monitor Activity Register for MCS 0\n resetvalue={Application Reset:0x0}"]
        pub type MonActivityMcSz = crate::RegValueT<MonActivityMcSz_SPEC>;

        impl MonActivityMcSz {
            #[doc = "Activity of check performed in module MCS z  at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_0(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, MonActivityMcSz_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<0,1,0,MonActivityMcSz_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS z  at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_1(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, MonActivityMcSz_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<1,1,0,MonActivityMcSz_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS z  at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_2(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, MonActivityMcSz_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<2,1,0,MonActivityMcSz_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS z  at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_3(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, MonActivityMcSz_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<3,1,0,MonActivityMcSz_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS z  at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_4(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, MonActivityMcSz_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<4,1,0,MonActivityMcSz_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS z  at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_5(
                self,
            ) -> crate::common::RegisterFieldBool<5, 1, 0, MonActivityMcSz_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<5,1,0,MonActivityMcSz_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS z  at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_6(
                self,
            ) -> crate::common::RegisterFieldBool<6, 1, 0, MonActivityMcSz_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<6,1,0,MonActivityMcSz_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Activity of check performed in module MCS z  at channel 7. This bit will be cleared on a CPU write access of value 1. A read access        leaves the bit unchanged."]
            #[inline(always)]
            pub fn mca_7(
                self,
            ) -> crate::common::RegisterFieldBool<7, 1, 0, MonActivityMcSz_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<7,1,0,MonActivityMcSz_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for MonActivityMcSz {
            #[inline(always)]
            fn default() -> MonActivityMcSz {
                <crate::RegValueT<MonActivityMcSz_SPEC> as RegisterValue<_>>::new(0)
            }
        }
    }
}
#[doc = "MSC"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msc(pub(super) *mut u8);
unsafe impl core::marker::Send for Msc {}
unsafe impl core::marker::Sync for Msc {}
impl Msc {
    #[doc = "MSCq"]
    #[inline(always)]
    pub fn mscq(self) -> [msc::MsCq; 2] {
        unsafe {
            [
                msc::MsCq(self.0.add(0x90usize + 0x0usize)),
                msc::MsCq(self.0.add(0x90usize + 0xcusize)),
            ]
        }
    }
    #[doc = "SET"]
    #[inline(always)]
    pub fn set(self) -> [msc::Set; 4] {
        unsafe {
            [
                msc::Set(self.0.add(0x0usize + 0x0usize)),
                msc::Set(self.0.add(0x0usize + 0x4usize)),
                msc::Set(self.0.add(0x0usize + 0x8usize)),
                msc::Set(self.0.add(0x0usize + 0xcusize)),
            ]
        }
    }
}
pub mod msc {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc = "MSCq"]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct MsCq(pub(super) *mut u8);
    unsafe impl core::marker::Send for MsCq {}
    unsafe impl core::marker::Sync for MsCq {}
    impl MsCq {
        #[doc = "MSC0 Input High Control Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn msciinhcon(
            &self,
        ) -> crate::common::Reg<mscq::MsCiInhcon_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
        }
        #[doc = "MSC0 Input Low Control Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn msciinlcon(
            &self,
        ) -> crate::common::Reg<mscq::MsCiInlcon_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
        }
        #[doc = "MSC0 Input Low Extended Control Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn msciinlextcon(
            &self,
        ) -> crate::common::Reg<mscq::MsCiInlextcon_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
        }
    }
    pub mod mscq {
        #[allow(unused_imports)]
        use crate::common::*;
        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct MsCiInhcon_SPEC;
        impl crate::sealed::RegSpec for MsCiInhcon_SPEC {
            type DataType = u32;
        }
        #[doc = "MSC0 Input High Control Register\n resetvalue={Application Reset:0x0}"]
        pub type MsCiInhcon = crate::RegValueT<MsCiInhcon_SPEC>;

        impl MsCiInhcon {
            #[doc = "GTM MSCq High 15 Output Selection. GTM output gtm mscqaltinh x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel0(
                self,
            ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, MsCiInhcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<0,0x3,1,0,u8, MsCiInhcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq High 15 Output Selection. GTM output gtm mscqaltinh x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel1(
                self,
            ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, MsCiInhcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<2,0x3,1,0,u8, MsCiInhcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq High 15 Output Selection. GTM output gtm mscqaltinh x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel2(
                self,
            ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, MsCiInhcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<4,0x3,1,0,u8, MsCiInhcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq High 15 Output Selection. GTM output gtm mscqaltinh x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel3(
                self,
            ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, MsCiInhcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<6,0x3,1,0,u8, MsCiInhcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq High 15 Output Selection. GTM output gtm mscqaltinh x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel4(
                self,
            ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, MsCiInhcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<8,0x3,1,0,u8, MsCiInhcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq High 15 Output Selection. GTM output gtm mscqaltinh x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel5(
                self,
            ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, MsCiInhcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<10,0x3,1,0,u8, MsCiInhcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq High 15 Output Selection. GTM output gtm mscqaltinh x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel6(
                self,
            ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, MsCiInhcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<12,0x3,1,0,u8, MsCiInhcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq High 15 Output Selection. GTM output gtm mscqaltinh x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel7(
                self,
            ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, MsCiInhcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<14,0x3,1,0,u8, MsCiInhcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq High 15 Output Selection. GTM output gtm mscqaltinh x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel8(
                self,
            ) -> crate::common::RegisterField<16, 0x3, 1, 0, u8, MsCiInhcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<16,0x3,1,0,u8, MsCiInhcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq High 15 Output Selection. GTM output gtm mscqaltinh x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel9(
                self,
            ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, MsCiInhcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<18,0x3,1,0,u8, MsCiInhcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq High 15 Output Selection. GTM output gtm mscqaltinh x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel10(
                self,
            ) -> crate::common::RegisterField<20, 0x3, 1, 0, u8, MsCiInhcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<20,0x3,1,0,u8, MsCiInhcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq High 15 Output Selection. GTM output gtm mscqaltinh x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel11(
                self,
            ) -> crate::common::RegisterField<22, 0x3, 1, 0, u8, MsCiInhcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<22,0x3,1,0,u8, MsCiInhcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq High 15 Output Selection. GTM output gtm mscqaltinh x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel12(
                self,
            ) -> crate::common::RegisterField<24, 0x3, 1, 0, u8, MsCiInhcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<24,0x3,1,0,u8, MsCiInhcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq High 15 Output Selection. GTM output gtm mscqaltinh x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel13(
                self,
            ) -> crate::common::RegisterField<26, 0x3, 1, 0, u8, MsCiInhcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<26,0x3,1,0,u8, MsCiInhcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq High 15 Output Selection. GTM output gtm mscqaltinh x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel14(
                self,
            ) -> crate::common::RegisterField<28, 0x3, 1, 0, u8, MsCiInhcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<28,0x3,1,0,u8, MsCiInhcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq High 15 Output Selection. GTM output gtm mscqaltinh x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel15(
                self,
            ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, MsCiInhcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<30,0x3,1,0,u8, MsCiInhcon_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for MsCiInhcon {
            #[inline(always)]
            fn default() -> MsCiInhcon {
                <crate::RegValueT<MsCiInhcon_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct MsCiInlcon_SPEC;
        impl crate::sealed::RegSpec for MsCiInlcon_SPEC {
            type DataType = u32;
        }
        #[doc = "MSC0 Input Low Control Register\n resetvalue={Application Reset:0x0}"]
        pub type MsCiInlcon = crate::RegValueT<MsCiInlcon_SPEC>;

        impl MsCiInlcon {
            #[doc = "GTM MSCq Low 15 Output Selection. GTM output gtm mscqltinl x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel0(
                self,
            ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, MsCiInlcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<0,0x3,1,0,u8, MsCiInlcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq Low 15 Output Selection. GTM output gtm mscqltinl x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel1(
                self,
            ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, MsCiInlcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<2,0x3,1,0,u8, MsCiInlcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq Low 15 Output Selection. GTM output gtm mscqltinl x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel2(
                self,
            ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, MsCiInlcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<4,0x3,1,0,u8, MsCiInlcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq Low 15 Output Selection. GTM output gtm mscqltinl x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel3(
                self,
            ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, MsCiInlcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<6,0x3,1,0,u8, MsCiInlcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq Low 15 Output Selection. GTM output gtm mscqltinl x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel4(
                self,
            ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, MsCiInlcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<8,0x3,1,0,u8, MsCiInlcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq Low 15 Output Selection. GTM output gtm mscqltinl x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel5(
                self,
            ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, MsCiInlcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<10,0x3,1,0,u8, MsCiInlcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq Low 15 Output Selection. GTM output gtm mscqltinl x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel6(
                self,
            ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, MsCiInlcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<12,0x3,1,0,u8, MsCiInlcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq Low 15 Output Selection. GTM output gtm mscqltinl x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel7(
                self,
            ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, MsCiInlcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<14,0x3,1,0,u8, MsCiInlcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq Low 15 Output Selection. GTM output gtm mscqltinl x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel8(
                self,
            ) -> crate::common::RegisterField<16, 0x3, 1, 0, u8, MsCiInlcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<16,0x3,1,0,u8, MsCiInlcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq Low 15 Output Selection. GTM output gtm mscqltinl x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel9(
                self,
            ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, MsCiInlcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<18,0x3,1,0,u8, MsCiInlcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq Low 15 Output Selection. GTM output gtm mscqltinl x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel10(
                self,
            ) -> crate::common::RegisterField<20, 0x3, 1, 0, u8, MsCiInlcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<20,0x3,1,0,u8, MsCiInlcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq Low 15 Output Selection. GTM output gtm mscqltinl x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel11(
                self,
            ) -> crate::common::RegisterField<22, 0x3, 1, 0, u8, MsCiInlcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<22,0x3,1,0,u8, MsCiInlcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq Low 15 Output Selection. GTM output gtm mscqltinl x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel12(
                self,
            ) -> crate::common::RegisterField<24, 0x3, 1, 0, u8, MsCiInlcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<24,0x3,1,0,u8, MsCiInlcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq Low 15 Output Selection. GTM output gtm mscqltinl x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel13(
                self,
            ) -> crate::common::RegisterField<26, 0x3, 1, 0, u8, MsCiInlcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<26,0x3,1,0,u8, MsCiInlcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq Low 15 Output Selection. GTM output gtm mscqltinl x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel14(
                self,
            ) -> crate::common::RegisterField<28, 0x3, 1, 0, u8, MsCiInlcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<28,0x3,1,0,u8, MsCiInlcon_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "GTM MSCq Low 15 Output Selection. GTM output gtm mscqltinl x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel15(
                self,
            ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, MsCiInlcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<30,0x3,1,0,u8, MsCiInlcon_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for MsCiInlcon {
            #[inline(always)]
            fn default() -> MsCiInlcon {
                <crate::RegValueT<MsCiInlcon_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct MsCiInlextcon_SPEC;
        impl crate::sealed::RegSpec for MsCiInlextcon_SPEC {
            type DataType = u32;
        }
        #[doc = "MSC0 Input Low Extended Control Register\n resetvalue={Application Reset:0x0}"]
        pub type MsCiInlextcon = crate::RegValueT<MsCiInlextcon_SPEC>;

        impl MsCiInlextcon {
            #[doc = "GTM MSCq LowExtended 15 Output Selection. GTM output gtm mscqaltinext x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel0(
                self,
            ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, MsCiInlextcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<
                    0,
                    0x3,
                    1,
                    0,
                    u8,
                    MsCiInlextcon_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
            #[doc = "GTM MSCq LowExtended 15 Output Selection. GTM output gtm mscqaltinext x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel1(
                self,
            ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, MsCiInlextcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<
                    2,
                    0x3,
                    1,
                    0,
                    u8,
                    MsCiInlextcon_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
            #[doc = "GTM MSCq LowExtended 15 Output Selection. GTM output gtm mscqaltinext x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel2(
                self,
            ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, MsCiInlextcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<
                    4,
                    0x3,
                    1,
                    0,
                    u8,
                    MsCiInlextcon_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
            #[doc = "GTM MSCq LowExtended 15 Output Selection. GTM output gtm mscqaltinext x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel3(
                self,
            ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, MsCiInlextcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<
                    6,
                    0x3,
                    1,
                    0,
                    u8,
                    MsCiInlextcon_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
            #[doc = "GTM MSCq LowExtended 15 Output Selection. GTM output gtm mscqaltinext x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel4(
                self,
            ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, MsCiInlextcon_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<
                    8,
                    0x3,
                    1,
                    0,
                    u8,
                    MsCiInlextcon_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
            #[doc = "GTM MSCq LowExtended 15 Output Selection. GTM output gtm mscqaltinext x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel5(
                self,
            ) -> crate::common::RegisterField<
                10,
                0x3,
                1,
                0,
                u8,
                MsCiInlextcon_SPEC,
                crate::common::RW,
            > {
                crate::common::RegisterField::<
                    10,
                    0x3,
                    1,
                    0,
                    u8,
                    MsCiInlextcon_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
            #[doc = "GTM MSCq LowExtended 15 Output Selection. GTM output gtm mscqaltinext x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel6(
                self,
            ) -> crate::common::RegisterField<
                12,
                0x3,
                1,
                0,
                u8,
                MsCiInlextcon_SPEC,
                crate::common::RW,
            > {
                crate::common::RegisterField::<
                    12,
                    0x3,
                    1,
                    0,
                    u8,
                    MsCiInlextcon_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
            #[doc = "GTM MSCq LowExtended 15 Output Selection. GTM output gtm mscqaltinext x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel7(
                self,
            ) -> crate::common::RegisterField<
                14,
                0x3,
                1,
                0,
                u8,
                MsCiInlextcon_SPEC,
                crate::common::RW,
            > {
                crate::common::RegisterField::<
                    14,
                    0x3,
                    1,
                    0,
                    u8,
                    MsCiInlextcon_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
            #[doc = "GTM MSCq LowExtended 15 Output Selection. GTM output gtm mscqaltinext x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel8(
                self,
            ) -> crate::common::RegisterField<
                16,
                0x3,
                1,
                0,
                u8,
                MsCiInlextcon_SPEC,
                crate::common::RW,
            > {
                crate::common::RegisterField::<
                    16,
                    0x3,
                    1,
                    0,
                    u8,
                    MsCiInlextcon_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
            #[doc = "GTM MSCq LowExtended 15 Output Selection. GTM output gtm mscqaltinext x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel9(
                self,
            ) -> crate::common::RegisterField<
                18,
                0x3,
                1,
                0,
                u8,
                MsCiInlextcon_SPEC,
                crate::common::RW,
            > {
                crate::common::RegisterField::<
                    18,
                    0x3,
                    1,
                    0,
                    u8,
                    MsCiInlextcon_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
            #[doc = "GTM MSCq LowExtended 15 Output Selection. GTM output gtm mscqaltinext x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel10(
                self,
            ) -> crate::common::RegisterField<
                20,
                0x3,
                1,
                0,
                u8,
                MsCiInlextcon_SPEC,
                crate::common::RW,
            > {
                crate::common::RegisterField::<
                    20,
                    0x3,
                    1,
                    0,
                    u8,
                    MsCiInlextcon_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
            #[doc = "GTM MSCq LowExtended 15 Output Selection. GTM output gtm mscqaltinext x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel11(
                self,
            ) -> crate::common::RegisterField<
                22,
                0x3,
                1,
                0,
                u8,
                MsCiInlextcon_SPEC,
                crate::common::RW,
            > {
                crate::common::RegisterField::<
                    22,
                    0x3,
                    1,
                    0,
                    u8,
                    MsCiInlextcon_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
            #[doc = "GTM MSCq LowExtended 15 Output Selection. GTM output gtm mscqaltinext x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel12(
                self,
            ) -> crate::common::RegisterField<
                24,
                0x3,
                1,
                0,
                u8,
                MsCiInlextcon_SPEC,
                crate::common::RW,
            > {
                crate::common::RegisterField::<
                    24,
                    0x3,
                    1,
                    0,
                    u8,
                    MsCiInlextcon_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
            #[doc = "GTM MSCq LowExtended 15 Output Selection. GTM output gtm mscqaltinext x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel13(
                self,
            ) -> crate::common::RegisterField<
                26,
                0x3,
                1,
                0,
                u8,
                MsCiInlextcon_SPEC,
                crate::common::RW,
            > {
                crate::common::RegisterField::<
                    26,
                    0x3,
                    1,
                    0,
                    u8,
                    MsCiInlextcon_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
            #[doc = "GTM MSCq LowExtended 15 Output Selection. GTM output gtm mscqaltinext x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel14(
                self,
            ) -> crate::common::RegisterField<
                28,
                0x3,
                1,
                0,
                u8,
                MsCiInlextcon_SPEC,
                crate::common::RW,
            > {
                crate::common::RegisterField::<
                    28,
                    0x3,
                    1,
                    0,
                    u8,
                    MsCiInlextcon_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
            #[doc = "GTM MSCq LowExtended 15 Output Selection. GTM output gtm mscqaltinext x  is controlled by the timer output."]
            #[inline(always)]
            pub fn sel15(
                self,
            ) -> crate::common::RegisterField<
                30,
                0x3,
                1,
                0,
                u8,
                MsCiInlextcon_SPEC,
                crate::common::RW,
            > {
                crate::common::RegisterField::<
                    30,
                    0x3,
                    1,
                    0,
                    u8,
                    MsCiInlextcon_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
        }
        impl core::default::Default for MsCiInlextcon {
            #[inline(always)]
            fn default() -> MsCiInlextcon {
                <crate::RegValueT<MsCiInlextcon_SPEC> as RegisterValue<_>>::new(0)
            }
        }
    }
    #[doc = "SET"]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Set(pub(super) *mut u8);
    unsafe impl core::marker::Send for Set {}
    unsafe impl core::marker::Sync for Set {}
    impl Set {
        #[doc = "MSC Set 0 Control 3 Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn mscset0con0(
            &self,
        ) -> crate::common::Reg<set::Mscset0Con0_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
        }
        #[doc = "MSC Set 0 Control 3 Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn mscset0con1(
            &self,
        ) -> crate::common::Reg<set::Mscset0Con1_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
        }
        #[doc = "MSC Set 0 Control 3 Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn mscset0con2(
            &self,
        ) -> crate::common::Reg<set::Mscset0Con2_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
        }
        #[doc = "MSC Set 0 Control 3 Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn mscset0con3(
            &self,
        ) -> crate::common::Reg<set::Mscset0Con3_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(12usize)) }
        }
    }
    pub mod set {
        #[allow(unused_imports)]
        use crate::common::*;
        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Mscset0Con0_SPEC;
        impl crate::sealed::RegSpec for Mscset0Con0_SPEC {
            type DataType = u32;
        }
        #[doc = "MSC Set 0 Control 3 Register\n resetvalue={Application Reset:0x0}"]
        pub type Mscset0Con0 = crate::RegValueT<Mscset0Con0_SPEC>;

        impl Mscset0Con0 {
            #[doc = "Set 0 15  Input Selection. This bit field defines the GTM timer source configured as Set i signal k        out. Decoding is defined        in the specific appendix."]
            #[inline(always)]
            pub fn sel12(
                self,
            ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, Mscset0Con0_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<0,0x1f,1,0,u8, Mscset0Con0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Set 0 15  Input Selection. This bit field defines the GTM timer source configured as Set i signal k        out. Decoding is defined        in the specific appendix."]
            #[inline(always)]
            pub fn sel13(
                self,
            ) -> crate::common::RegisterField<8, 0x1f, 1, 0, u8, Mscset0Con0_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<8,0x1f,1,0,u8, Mscset0Con0_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Set 0 15  Input Selection. This bit field defines the GTM timer source configured as Set i signal k        out. Decoding is defined        in the specific appendix."]
            #[inline(always)]
            pub fn sel14(
                self,
            ) -> crate::common::RegisterField<16, 0x1f, 1, 0, u8, Mscset0Con0_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<
                    16,
                    0x1f,
                    1,
                    0,
                    u8,
                    Mscset0Con0_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
            #[doc = "Set 0 15  Input Selection. This bit field defines the GTM timer source configured as Set i signal k        out. Decoding is defined        in the specific appendix."]
            #[inline(always)]
            pub fn sel15(
                self,
            ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, Mscset0Con0_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<
                    24,
                    0x1f,
                    1,
                    0,
                    u8,
                    Mscset0Con0_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
        }
        impl core::default::Default for Mscset0Con0 {
            #[inline(always)]
            fn default() -> Mscset0Con0 {
                <crate::RegValueT<Mscset0Con0_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Mscset0Con1_SPEC;
        impl crate::sealed::RegSpec for Mscset0Con1_SPEC {
            type DataType = u32;
        }
        #[doc = "MSC Set 0 Control 3 Register\n resetvalue={Application Reset:0x0}"]
        pub type Mscset0Con1 = crate::RegValueT<Mscset0Con1_SPEC>;

        impl Mscset0Con1 {
            #[doc = "Set 0 15  Input Selection. This bit field defines the GTM timer source configured as Set i signal k        out. Decoding is defined        in the specific appendix."]
            #[inline(always)]
            pub fn sel12(
                self,
            ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, Mscset0Con1_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<0,0x1f,1,0,u8, Mscset0Con1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Set 0 15  Input Selection. This bit field defines the GTM timer source configured as Set i signal k        out. Decoding is defined        in the specific appendix."]
            #[inline(always)]
            pub fn sel13(
                self,
            ) -> crate::common::RegisterField<8, 0x1f, 1, 0, u8, Mscset0Con1_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<8,0x1f,1,0,u8, Mscset0Con1_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Set 0 15  Input Selection. This bit field defines the GTM timer source configured as Set i signal k        out. Decoding is defined        in the specific appendix."]
            #[inline(always)]
            pub fn sel14(
                self,
            ) -> crate::common::RegisterField<16, 0x1f, 1, 0, u8, Mscset0Con1_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<
                    16,
                    0x1f,
                    1,
                    0,
                    u8,
                    Mscset0Con1_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
            #[doc = "Set 0 15  Input Selection. This bit field defines the GTM timer source configured as Set i signal k        out. Decoding is defined        in the specific appendix."]
            #[inline(always)]
            pub fn sel15(
                self,
            ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, Mscset0Con1_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<
                    24,
                    0x1f,
                    1,
                    0,
                    u8,
                    Mscset0Con1_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
        }
        impl core::default::Default for Mscset0Con1 {
            #[inline(always)]
            fn default() -> Mscset0Con1 {
                <crate::RegValueT<Mscset0Con1_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Mscset0Con2_SPEC;
        impl crate::sealed::RegSpec for Mscset0Con2_SPEC {
            type DataType = u32;
        }
        #[doc = "MSC Set 0 Control 3 Register\n resetvalue={Application Reset:0x0}"]
        pub type Mscset0Con2 = crate::RegValueT<Mscset0Con2_SPEC>;

        impl Mscset0Con2 {
            #[doc = "Set 0 15  Input Selection. This bit field defines the GTM timer source configured as Set i signal k        out. Decoding is defined        in the specific appendix."]
            #[inline(always)]
            pub fn sel12(
                self,
            ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, Mscset0Con2_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<0,0x1f,1,0,u8, Mscset0Con2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Set 0 15  Input Selection. This bit field defines the GTM timer source configured as Set i signal k        out. Decoding is defined        in the specific appendix."]
            #[inline(always)]
            pub fn sel13(
                self,
            ) -> crate::common::RegisterField<8, 0x1f, 1, 0, u8, Mscset0Con2_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<8,0x1f,1,0,u8, Mscset0Con2_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Set 0 15  Input Selection. This bit field defines the GTM timer source configured as Set i signal k        out. Decoding is defined        in the specific appendix."]
            #[inline(always)]
            pub fn sel14(
                self,
            ) -> crate::common::RegisterField<16, 0x1f, 1, 0, u8, Mscset0Con2_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<
                    16,
                    0x1f,
                    1,
                    0,
                    u8,
                    Mscset0Con2_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
            #[doc = "Set 0 15  Input Selection. This bit field defines the GTM timer source configured as Set i signal k        out. Decoding is defined        in the specific appendix."]
            #[inline(always)]
            pub fn sel15(
                self,
            ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, Mscset0Con2_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<
                    24,
                    0x1f,
                    1,
                    0,
                    u8,
                    Mscset0Con2_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
        }
        impl core::default::Default for Mscset0Con2 {
            #[inline(always)]
            fn default() -> Mscset0Con2 {
                <crate::RegValueT<Mscset0Con2_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Mscset0Con3_SPEC;
        impl crate::sealed::RegSpec for Mscset0Con3_SPEC {
            type DataType = u32;
        }
        #[doc = "MSC Set 0 Control 3 Register\n resetvalue={Application Reset:0x0}"]
        pub type Mscset0Con3 = crate::RegValueT<Mscset0Con3_SPEC>;

        impl Mscset0Con3 {
            #[doc = "Set 0 15  Input Selection. This bit field defines the GTM timer source configured as Set i signal k        out. Decoding is defined        in the specific appendix."]
            #[inline(always)]
            pub fn sel12(
                self,
            ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, Mscset0Con3_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<0,0x1f,1,0,u8, Mscset0Con3_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Set 0 15  Input Selection. This bit field defines the GTM timer source configured as Set i signal k        out. Decoding is defined        in the specific appendix."]
            #[inline(always)]
            pub fn sel13(
                self,
            ) -> crate::common::RegisterField<8, 0x1f, 1, 0, u8, Mscset0Con3_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<8,0x1f,1,0,u8, Mscset0Con3_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Set 0 15  Input Selection. This bit field defines the GTM timer source configured as Set i signal k        out. Decoding is defined        in the specific appendix."]
            #[inline(always)]
            pub fn sel14(
                self,
            ) -> crate::common::RegisterField<16, 0x1f, 1, 0, u8, Mscset0Con3_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<
                    16,
                    0x1f,
                    1,
                    0,
                    u8,
                    Mscset0Con3_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
            #[doc = "Set 0 15  Input Selection. This bit field defines the GTM timer source configured as Set i signal k        out. Decoding is defined        in the specific appendix."]
            #[inline(always)]
            pub fn sel15(
                self,
            ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, Mscset0Con3_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<
                    24,
                    0x1f,
                    1,
                    0,
                    u8,
                    Mscset0Con3_SPEC,
                    crate::common::RW,
                >::from_register(self, 0)
            }
        }
        impl core::default::Default for Mscset0Con3 {
            #[inline(always)]
            fn default() -> Mscset0Con3 {
                <crate::RegValueT<Mscset0Con3_SPEC> as RegisterValue<_>>::new(0)
            }
        }
    }
}
#[doc = "OCDS"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ocds(pub(super) *mut u8);
unsafe impl core::marker::Send for Ocds {}
unsafe impl core::marker::Sync for Ocds {}
impl Ocds {
    #[doc = "OCDS Control and Status\n resetvalue={Debug Reset:0x0}"]
    #[inline(always)]
    pub const fn ocs(&self) -> crate::common::Reg<ocds::Ocs_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(32usize)) }
    }
    #[doc = "OCDS Debug Access Register\n resetvalue={Debug Reset:0x0}"]
    #[inline(always)]
    pub const fn oda(&self) -> crate::common::Reg<ocds::Oda_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(28usize)) }
    }
    #[doc = "OCDS TBU0 Trigger Register\n resetvalue={Debug Reset:0x0}"]
    #[inline(always)]
    pub const fn otbu0t(&self) -> crate::common::Reg<ocds::Otbu0T_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
    }
    #[doc = "OCDS TBU1 Trigger Register\n resetvalue={Debug Reset:0x0}"]
    #[inline(always)]
    pub const fn otbu1t(&self) -> crate::common::Reg<ocds::Otbu1T_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
    }
    #[doc = "OCDS TBU2 Trigger Register\n resetvalue={Debug Reset:0x0}"]
    #[inline(always)]
    pub const fn otbu2t(&self) -> crate::common::Reg<ocds::Otbu2T_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
    }
    #[doc = "OCDS TBU3 Trigger Register\n resetvalue={Debug Reset:0x0}"]
    #[inline(always)]
    pub const fn otbu3t(&self) -> crate::common::Reg<ocds::Otbu3T_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(12usize)) }
    }
    #[doc = "OCDS Trigger Set Control 0 Register\n resetvalue={Debug Reset:0x0}"]
    #[inline(always)]
    pub const fn otsc0(&self) -> crate::common::Reg<ocds::Otsc0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(20usize)) }
    }
    #[doc = "OCDS Trigger Set Control 1 Register\n resetvalue={Debug Reset:0x0}"]
    #[inline(always)]
    pub const fn otsc1(&self) -> crate::common::Reg<ocds::Otsc1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(24usize)) }
    }
    #[doc = "OCDS Trigger Set Select Register\n resetvalue={Debug Reset:0x0}"]
    #[inline(always)]
    pub const fn otss(&self) -> crate::common::Reg<ocds::Otss_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(16usize)) }
    }
}
pub mod ocds {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ocs_SPEC;
    impl crate::sealed::RegSpec for Ocs_SPEC {
        type DataType = u32;
    }
    #[doc = "OCDS Control and Status\n resetvalue={Debug Reset:0x0}"]
    pub type Ocs = crate::RegValueT<Ocs_SPEC>;

    impl Ocs {
        #[doc = "OCDS Suspend Control. Controls the sensitivity to the suspend signal coming from the OCDS        Trigger Switch  OTGS"]
        #[inline(always)]
        pub fn sus(
            self,
        ) -> crate::common::RegisterField<24, 0xf, 1, 0, u8, Ocs_SPEC, crate::common::RW> {
            crate::common::RegisterField::<24,0xf,1,0,u8, Ocs_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SUS Write Protection. SUS is only written when SUS P is 1  otherwise it remains unchanged.        Read as 0."]
        #[inline(always)]
        pub fn sus_p(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ocs_SPEC, crate::common::W> {
            crate::common::RegisterFieldBool::<28, 1, 0, Ocs_SPEC, crate::common::W>::from_register(
                self, 0,
            )
        }
        #[doc = "Suspend State"]
        #[inline(always)]
        pub fn sussta(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ocs_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<29, 1, 0, Ocs_SPEC, crate::common::R>::from_register(
                self, 0,
            )
        }
    }
    impl core::default::Default for Ocs {
        #[inline(always)]
        fn default() -> Ocs {
            <crate::RegValueT<Ocs_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Oda_SPEC;
    impl crate::sealed::RegSpec for Oda_SPEC {
        type DataType = u32;
    }
    #[doc = "OCDS Debug Access Register\n resetvalue={Debug Reset:0x0}"]
    pub type Oda = crate::RegValueT<Oda_SPEC>;

    impl Oda {
        #[doc = "Debug Read Access Control. Controls Debug Read Access  DRA  of registers with DRA behavior."]
        #[inline(always)]
        pub fn drac(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Oda_SPEC, crate::common::RW> {
            crate::common::RegisterField::<0,0x3,1,0,u8, Oda_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Oda {
        #[inline(always)]
        fn default() -> Oda {
            <crate::RegValueT<Oda_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Otbu0T_SPEC;
    impl crate::sealed::RegSpec for Otbu0T_SPEC {
        type DataType = u32;
    }
    #[doc = "OCDS TBU0 Trigger Register\n resetvalue={Debug Reset:0x0}"]
    pub type Otbu0T = crate::RegValueT<Otbu0T_SPEC>;

    impl Otbu0T {
        #[doc = "Compare Value. This value is compared to the TBU CH0 BASE register. As long as both        match  the associated TS16 IOS.MISC bit   CROSSREFERENCE          is active."]
        #[inline(always)]
        pub fn cv(
            self,
        ) -> crate::common::RegisterField<0, 0x7ffffff, 1, 0, u32, Otbu0T_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x7ffffff,1,0,u32, Otbu0T_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Compare Mode"]
        #[inline(always)]
        pub fn cm(
            self,
        ) -> crate::common::RegisterField<28, 0x3, 1, 0, u8, Otbu0T_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<28,0x3,1,0,u8, Otbu0T_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Otbu0T {
        #[inline(always)]
        fn default() -> Otbu0T {
            <crate::RegValueT<Otbu0T_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Otbu1T_SPEC;
    impl crate::sealed::RegSpec for Otbu1T_SPEC {
        type DataType = u32;
    }
    #[doc = "OCDS TBU1 Trigger Register\n resetvalue={Debug Reset:0x0}"]
    pub type Otbu1T = crate::RegValueT<Otbu1T_SPEC>;

    impl Otbu1T {
        #[doc = "Compare Value. This value is compared to the TBU CH1 BASE register. As long as both        match  the associated TS16 IOS.MISC bit   CROSSREFERENCE          is active."]
        #[inline(always)]
        pub fn cv(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Otbu1T_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Otbu1T_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable"]
        #[inline(always)]
        pub fn en(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Otbu1T_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Otbu1T_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Otbu1T {
        #[inline(always)]
        fn default() -> Otbu1T {
            <crate::RegValueT<Otbu1T_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Otbu2T_SPEC;
    impl crate::sealed::RegSpec for Otbu2T_SPEC {
        type DataType = u32;
    }
    #[doc = "OCDS TBU2 Trigger Register\n resetvalue={Debug Reset:0x0}"]
    pub type Otbu2T = crate::RegValueT<Otbu2T_SPEC>;

    impl Otbu2T {
        #[doc = "Compare Value. This value is compared to the TBU CH2 BASE register. As long as both        match  the associated TS16 IOS.MISC bit   CROSSREFERENCE          is active."]
        #[inline(always)]
        pub fn cv(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Otbu2T_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Otbu2T_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable"]
        #[inline(always)]
        pub fn en(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Otbu2T_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Otbu2T_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Otbu2T {
        #[inline(always)]
        fn default() -> Otbu2T {
            <crate::RegValueT<Otbu2T_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Otbu3T_SPEC;
    impl crate::sealed::RegSpec for Otbu3T_SPEC {
        type DataType = u32;
    }
    #[doc = "OCDS TBU3 Trigger Register\n resetvalue={Debug Reset:0x0}"]
    pub type Otbu3T = crate::RegValueT<Otbu3T_SPEC>;

    impl Otbu3T {
        #[doc = "Compare Value. This value is compared to the TBU CH3 BASE register. As long as both        match  the associated TS16 IOS.MISC bit   CROSSREFERENCE          is active."]
        #[inline(always)]
        pub fn cv(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Otbu3T_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Otbu3T_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable"]
        #[inline(always)]
        pub fn en(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Otbu3T_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Otbu3T_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Otbu3T {
        #[inline(always)]
        fn default() -> Otbu3T {
            <crate::RegValueT<Otbu3T_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Otsc0_SPEC;
    impl crate::sealed::RegSpec for Otsc0_SPEC {
        type DataType = u32;
    }
    #[doc = "OCDS Trigger Set Control 0 Register\n resetvalue={Debug Reset:0x0}"]
    pub type Otsc0 = crate::RegValueT<Otsc0_SPEC>;

    impl Otsc0 {
        #[doc = "OTGB0 TS16 IOS Low Byte Module Type"]
        #[inline(always)]
        pub fn b0lmt(
            self,
        ) -> crate::common::RegisterField<0, 0x7, 1, 0, u8, Otsc0_SPEC, crate::common::RW> {
            crate::common::RegisterField::<0,0x7,1,0,u8, Otsc0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "OTGB0 TS16 IOS Low Byte Module Instance. Index of the module instance. Index starts with 0  the max. value        depends on GTM configuration and module type. For SPE signals  there is        a specific mapping   CROSSREFERENCE  .        For MISC signals  this index is ignored."]
        #[inline(always)]
        pub fn b0lmi(
            self,
        ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, Otsc0_SPEC, crate::common::RW> {
            crate::common::RegisterField::<4,0xf,1,0,u8, Otsc0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "OTGB0 TS16 IOS High Byte Module Type"]
        #[inline(always)]
        pub fn b0hmt(
            self,
        ) -> crate::common::RegisterField<8, 0x7, 1, 0, u8, Otsc0_SPEC, crate::common::RW> {
            crate::common::RegisterField::<8,0x7,1,0,u8, Otsc0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "OTGB0 TS16 IOS High Byte Module Instance. Index of the module instance. Index starts with 0  the max. value        depends on GTM configuration and module type. For SPE signals  there is        a specific mapping   CROSSREFERENCE  .        For MISC signals  this index is ignored."]
        #[inline(always)]
        pub fn b0hmi(
            self,
        ) -> crate::common::RegisterField<12, 0xf, 1, 0, u8, Otsc0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0xf,1,0,u8, Otsc0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "OTGB1 TS16 IOS Low Byte Module Type"]
        #[inline(always)]
        pub fn b1lmt(
            self,
        ) -> crate::common::RegisterField<16, 0x7, 1, 0, u8, Otsc0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x7,1,0,u8, Otsc0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "OTGB1 TS16 IOS Low Byte Module Instance. Index of the module instance. Index starts with 0  the max. value        depends on GTM configuration and module type. For SPE signals  there is        a specific mapping   CROSSREFERENCE  .        For MISC signals  this index is ignored."]
        #[inline(always)]
        pub fn b1lmi(
            self,
        ) -> crate::common::RegisterField<20, 0xf, 1, 0, u8, Otsc0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<20,0xf,1,0,u8, Otsc0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "OTGB1 TS16 IOS High Byte Module Type"]
        #[inline(always)]
        pub fn b1hmt(
            self,
        ) -> crate::common::RegisterField<24, 0x7, 1, 0, u8, Otsc0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x7,1,0,u8, Otsc0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "OTGB1 TS16 IOS High Byte Module Instance. Index of the module instance. Index starts with 0  the max. value        depends on GTM configuration and module type. For SPE signals  there is        a specific mapping   CROSSREFERENCE  .        For MISC signals  this index is ignored."]
        #[inline(always)]
        pub fn b1hmi(
            self,
        ) -> crate::common::RegisterField<28, 0xf, 1, 0, u8, Otsc0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<28,0xf,1,0,u8, Otsc0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Otsc0 {
        #[inline(always)]
        fn default() -> Otsc0 {
            <crate::RegValueT<Otsc0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Otsc1_SPEC;
    impl crate::sealed::RegSpec for Otsc1_SPEC {
        type DataType = u32;
    }
    #[doc = "OCDS Trigger Set Control 1 Register\n resetvalue={Debug Reset:0x0}"]
    pub type Otsc1 = crate::RegValueT<Otsc1_SPEC>;

    impl Otsc1 {
        #[doc = "MCS Channel Selection. Required by TS32 MCA and TS32 MCD."]
        #[inline(always)]
        pub fn mcs(
            self,
        ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Otsc1_SPEC, crate::common::RW> {
            crate::common::RegisterField::<0,0xf,1,0,u8, Otsc1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS Instance. Required by TS32 MCA and TS32 MCD. Index of the MCS instance. Index starts with 0  the max. value depends        on the GTM configuration."]
        #[inline(always)]
        pub fn mi(
            self,
        ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, Otsc1_SPEC, crate::common::RW> {
            crate::common::RegisterField::<4,0xf,1,0,u8, Otsc1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "MCS Opcode Trace Enable. Required by TS32 MCD."]
        #[inline(always)]
        pub fn moe(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Otsc1_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<9,1,0,Otsc1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Otsc1 {
        #[inline(always)]
        fn default() -> Otsc1 {
            <crate::RegValueT<Otsc1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Otss_SPEC;
    impl crate::sealed::RegSpec for Otss_SPEC {
        type DataType = u32;
    }
    #[doc = "OCDS Trigger Set Select Register\n resetvalue={Debug Reset:0x0}"]
    pub type Otss = crate::RegValueT<Otss_SPEC>;

    impl Otss {
        #[doc = "Trigger Set for OTGB0"]
        #[inline(always)]
        pub fn otgb0(
            self,
        ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Otss_SPEC, crate::common::RW> {
            crate::common::RegisterField::<0,0xf,1,0,u8, Otss_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger Set for OTGB1"]
        #[inline(always)]
        pub fn otgb1(
            self,
        ) -> crate::common::RegisterField<8, 0xf, 1, 0, u8, Otss_SPEC, crate::common::RW> {
            crate::common::RegisterField::<8,0xf,1,0,u8, Otss_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger Set for OTGBM0"]
        #[inline(always)]
        pub fn otgbm0(
            self,
        ) -> crate::common::RegisterField<16, 0xf, 1, 0, u8, Otss_SPEC, crate::common::RW> {
            crate::common::RegisterField::<16,0xf,1,0,u8, Otss_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger Set for OTGBM1"]
        #[inline(always)]
        pub fn otgbm1(
            self,
        ) -> crate::common::RegisterField<24, 0xf, 1, 0, u8, Otss_SPEC, crate::common::RW> {
            crate::common::RegisterField::<24,0xf,1,0,u8, Otss_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Otss {
        #[inline(always)]
        fn default() -> Otss {
            <crate::RegValueT<Otss_SPEC> as RegisterValue<_>>::new(0)
        }
    }
}
#[doc = "OUT"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Out(pub(super) *mut u8);
unsafe impl core::marker::Send for Out {}
unsafe impl core::marker::Sync for Out {}
impl Out {
    #[doc = "GTM ATOM 0 Output Level\n resetvalue={Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn atom0_out(&self) -> crate::common::Reg<out::Atom0Out_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(24usize)) }
    }
    #[doc = "GTM ATOM 2 Output Level\n resetvalue={Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn atom2_out(&self) -> crate::common::Reg<out::Atom2Out_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(28usize)) }
    }
    #[doc = "GTM ATOM 4 Output Level\n resetvalue={Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn atom4_out(&self) -> crate::common::Reg<out::Atom4Out_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(32usize)) }
    }
    #[doc = "GTM TOM 0 Output Level\n resetvalue={Application Reset:0x0,Application Reset:0x0}"]
    #[inline(always)]
    pub const fn tomi_out(&self) -> [crate::common::Reg<out::ToMiOut_SPEC, crate::common::R>; 3] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x0usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x0usize + 0x4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x0usize + 0x8usize)),
            ]
        }
    }
}
pub mod out {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Atom0Out_SPEC;
    impl crate::sealed::RegSpec for Atom0Out_SPEC {
        type DataType = u32;
    }
    #[doc = "GTM ATOM 0 Output Level\n resetvalue={Application Reset:0x0,Application Reset:0x0}"]
    pub type Atom0Out = crate::RegValueT<Atom0Out_SPEC>;

    impl Atom0Out {
        #[doc = "Output level snapshot of ATOM k  OUT all channels. Actual level of primary output ports ATOM k  OUT of channel 0 to 7         after DTM ."]
        #[inline(always)]
        pub fn atom_i_out(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Atom0Out_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Atom0Out_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Output level snapshot of ATOM k  OUT N all channels. Actual level of primary output ports ATOM k  OUT N of channel 0 to 7         after DTM"]
        #[inline(always)]
        pub fn atom_i_out_n(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Atom0Out_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, Atom0Out_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Output level snapshot of ATOM k 1  OUT all channels. Actual level of primary output ports ATOM k 1  OUT of channel 0 to 7         after DTM"]
        #[inline(always)]
        pub fn atom_ip1_out(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Atom0Out_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, Atom0Out_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Output level snapshot of ATOM k 1  OUT N all channels. Actual level of primary output ports ATOM k 1  OUT N of channel 0 to 7         after DTM"]
        #[inline(always)]
        pub fn atom_ip1_out_n(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Atom0Out_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Atom0Out_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Atom0Out {
        #[inline(always)]
        fn default() -> Atom0Out {
            <crate::RegValueT<Atom0Out_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Atom2Out_SPEC;
    impl crate::sealed::RegSpec for Atom2Out_SPEC {
        type DataType = u32;
    }
    #[doc = "GTM ATOM 2 Output Level\n resetvalue={Application Reset:0x0,Application Reset:0x0}"]
    pub type Atom2Out = crate::RegValueT<Atom2Out_SPEC>;

    impl Atom2Out {
        #[doc = "Output level snapshot of ATOM k  OUT all channels. Actual level of primary output ports ATOM k  OUT of channel 0 to 7         after DTM ."]
        #[inline(always)]
        pub fn atom_i_out(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Atom2Out_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Atom2Out_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Output level snapshot of ATOM k  OUT N all channels. Actual level of primary output ports ATOM k  OUT N of channel 0 to 7         after DTM"]
        #[inline(always)]
        pub fn atom_i_out_n(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Atom2Out_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, Atom2Out_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Output level snapshot of ATOM k 1  OUT all channels. Actual level of primary output ports ATOM k 1  OUT of channel 0 to 7         after DTM"]
        #[inline(always)]
        pub fn atom_ip1_out(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Atom2Out_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, Atom2Out_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Output level snapshot of ATOM k 1  OUT N all channels. Actual level of primary output ports ATOM k 1  OUT N of channel 0 to 7         after DTM"]
        #[inline(always)]
        pub fn atom_ip1_out_n(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Atom2Out_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Atom2Out_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Atom2Out {
        #[inline(always)]
        fn default() -> Atom2Out {
            <crate::RegValueT<Atom2Out_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Atom4Out_SPEC;
    impl crate::sealed::RegSpec for Atom4Out_SPEC {
        type DataType = u32;
    }
    #[doc = "GTM ATOM 4 Output Level\n resetvalue={Application Reset:0x0,Application Reset:0x0}"]
    pub type Atom4Out = crate::RegValueT<Atom4Out_SPEC>;

    impl Atom4Out {
        #[doc = "Output level snapshot of ATOM k  OUT all channels. Actual level of primary output ports ATOM k  OUT of channel 0 to 7         after DTM ."]
        #[inline(always)]
        pub fn atom_i_out(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Atom4Out_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Atom4Out_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Output level snapshot of ATOM k  OUT N all channels. Actual level of primary output ports ATOM k  OUT N of channel 0 to 7         after DTM"]
        #[inline(always)]
        pub fn atom_i_out_n(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Atom4Out_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, Atom4Out_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Output level snapshot of ATOM k 1  OUT all channels. Actual level of primary output ports ATOM k 1  OUT of channel 0 to 7         after DTM"]
        #[inline(always)]
        pub fn atom_ip1_out(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Atom4Out_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, Atom4Out_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Output level snapshot of ATOM k 1  OUT N all channels. Actual level of primary output ports ATOM k 1  OUT N of channel 0 to 7         after DTM"]
        #[inline(always)]
        pub fn atom_ip1_out_n(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Atom4Out_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Atom4Out_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Atom4Out {
        #[inline(always)]
        fn default() -> Atom4Out {
            <crate::RegValueT<Atom4Out_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct ToMiOut_SPEC;
    impl crate::sealed::RegSpec for ToMiOut_SPEC {
        type DataType = u32;
    }
    #[doc = "GTM TOM 0 Output Level\n resetvalue={Application Reset:0x0,Application Reset:0x0}"]
    pub type ToMiOut = crate::RegValueT<ToMiOut_SPEC>;

    impl ToMiOut {
        #[doc = "Output level snapshot of TOM i  OUT all channels. Actual level of primary output ports TOM i  OUT of channel 0 to 15         after DTM . Reset value depends on the hardware configuration chosen by silicon        vendor. See GTM HW CONF for chosen value."]
        #[inline(always)]
        pub fn tom_out(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, ToMiOut_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, ToMiOut_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Output level snapshot of TOM i  OUT N all channels. Actual level of primary output ports TOM i  OUT N of channel 0 to 15         after DTM . Reset value depends on the hardware configuration chosen by silicon        vendor. See GTM HW CONF for chosen value."]
        #[inline(always)]
        pub fn tom_out_n(
            self,
        ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, ToMiOut_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0xffff,1,0,u16, ToMiOut_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for ToMiOut {
        #[inline(always)]
        fn default() -> ToMiOut {
            <crate::RegValueT<ToMiOut_SPEC> as RegisterValue<_>>::new(0)
        }
    }
}
#[doc = "PSM"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Psm(pub(super) *mut u8);
unsafe impl core::marker::Send for Psm {}
unsafe impl core::marker::Sync for Psm {}
impl Psm {
    #[doc = "AFD"]
    #[inline(always)]
    pub fn afd(self) -> psm::Afd {
        unsafe { psm::Afd(self.0.add(128usize)) }
    }
    #[doc = "F2A"]
    #[inline(always)]
    pub fn f2a(self) -> psm::F2A {
        unsafe { psm::F2A(self.0.add(0usize)) }
    }
    #[doc = "FIFO"]
    #[inline(always)]
    pub fn fifo(self) -> psm::Fifo {
        unsafe { psm::Fifo(self.0.add(1024usize)) }
    }
}
pub mod psm {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc = "AFD"]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Afd(pub(super) *mut u8);
    unsafe impl core::marker::Send for Afd {}
    unsafe impl core::marker::Sync for Afd {}
    impl Afd {
        #[doc = "CH"]
        #[inline(always)]
        pub fn ch(self) -> [afd::Ch; 8] {
            unsafe {
                [
                    afd::Ch(self.0.add(0x0usize + 0x0usize)),
                    afd::Ch(self.0.add(0x0usize + 0x10usize)),
                    afd::Ch(self.0.add(0x0usize + 0x20usize)),
                    afd::Ch(self.0.add(0x0usize + 0x30usize)),
                    afd::Ch(self.0.add(0x0usize + 0x40usize)),
                    afd::Ch(self.0.add(0x0usize + 0x50usize)),
                    afd::Ch(self.0.add(0x0usize + 0x60usize)),
                    afd::Ch(self.0.add(0x0usize + 0x70usize)),
                ]
            }
        }
    }
    pub mod afd {
        #[allow(unused_imports)]
        use crate::common::*;
        #[doc = "CH"]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Ch(pub(super) *mut u8);
        unsafe impl core::marker::Send for Ch {}
        unsafe impl core::marker::Sync for Ch {}
        impl Ch {
            #[doc = "AFD 0 FIFO 0 Buffer Access Register\n resetvalue={Application Reset:0x0}"]
            #[inline(always)]
            pub const fn afdi_chx_buf_acc(
                &self,
            ) -> crate::common::Reg<ch::AfDiCHxBufAcc_SPEC, crate::common::RW> {
                unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
            }
        }
        pub mod ch {
            #[allow(unused_imports)]
            use crate::common::*;
            #[doc(hidden)]
            #[derive(Copy, Clone, Eq, PartialEq)]
            pub struct AfDiCHxBufAcc_SPEC;
            impl crate::sealed::RegSpec for AfDiCHxBufAcc_SPEC {
                type DataType = u32;
            }
            #[doc = "AFD 0 FIFO 0 Buffer Access Register\n resetvalue={Application Reset:0x0}"]
            pub type AfDiCHxBufAcc = crate::RegValueT<AfDiCHxBufAcc_SPEC>;

            impl AfDiCHxBufAcc {
                #[doc = "Read write data from to FIFO"]
                #[inline(always)]
                pub fn data(
                    self,
                ) -> crate::common::RegisterField<
                    0,
                    0x1fffffff,
                    1,
                    0,
                    u32,
                    AfDiCHxBufAcc_SPEC,
                    crate::common::RW,
                > {
                    crate::common::RegisterField::<
                        0,
                        0x1fffffff,
                        1,
                        0,
                        u32,
                        AfDiCHxBufAcc_SPEC,
                        crate::common::RW,
                    >::from_register(self, 0)
                }
            }
            impl core::default::Default for AfDiCHxBufAcc {
                #[inline(always)]
                fn default() -> AfDiCHxBufAcc {
                    <crate::RegValueT<AfDiCHxBufAcc_SPEC> as RegisterValue<_>>::new(0)
                }
            }
        }
    }
    #[doc = "F2A"]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct F2A(pub(super) *mut u8);
    unsafe impl core::marker::Send for F2A {}
    unsafe impl core::marker::Sync for F2A {}
    impl F2A {
        #[doc = "F2A0 Stream Control Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn f2ai_ctrl(&self) -> crate::common::Reg<f2a::F2AiCtrl_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(68usize)) }
        }
        #[doc = "F2A0 Stream Activation Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn f2ai_enable(
            &self,
        ) -> crate::common::Reg<f2a::F2AiEnable_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(64usize)) }
        }
        #[doc = "RD CH"]
        #[inline(always)]
        pub fn rd_ch(self) -> [f2a::RdCh; 8] {
            unsafe {
                [
                    f2a::RdCh(self.0.add(0x0usize + 0x0usize)),
                    f2a::RdCh(self.0.add(0x0usize + 0x4usize)),
                    f2a::RdCh(self.0.add(0x0usize + 0x8usize)),
                    f2a::RdCh(self.0.add(0x0usize + 0xcusize)),
                    f2a::RdCh(self.0.add(0x0usize + 0x10usize)),
                    f2a::RdCh(self.0.add(0x0usize + 0x14usize)),
                    f2a::RdCh(self.0.add(0x0usize + 0x18usize)),
                    f2a::RdCh(self.0.add(0x0usize + 0x1cusize)),
                ]
            }
        }
        #[doc = "STR CH"]
        #[inline(always)]
        pub fn str_ch(self) -> [f2a::StrCh; 8] {
            unsafe {
                [
                    f2a::StrCh(self.0.add(0x20usize + 0x0usize)),
                    f2a::StrCh(self.0.add(0x20usize + 0x4usize)),
                    f2a::StrCh(self.0.add(0x20usize + 0x8usize)),
                    f2a::StrCh(self.0.add(0x20usize + 0xcusize)),
                    f2a::StrCh(self.0.add(0x20usize + 0x10usize)),
                    f2a::StrCh(self.0.add(0x20usize + 0x14usize)),
                    f2a::StrCh(self.0.add(0x20usize + 0x18usize)),
                    f2a::StrCh(self.0.add(0x20usize + 0x1cusize)),
                ]
            }
        }
    }
    pub mod f2a {
        #[allow(unused_imports)]
        use crate::common::*;
        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct F2AiCtrl_SPEC;
        impl crate::sealed::RegSpec for F2AiCtrl_SPEC {
            type DataType = u32;
        }
        #[doc = "F2A0 Stream Control Register\n resetvalue={Application Reset:0x0}"]
        pub type F2AiCtrl = crate::RegValueT<F2AiCtrl_SPEC>;

        impl F2AiCtrl {
            #[doc = "Reconfiguration of stream 4 to FIFO channel 0. Write of following double bit values is possible  The write protected bits of register F2A i  CTRL are only writable if the corresponding enable bit STR0 EN and STR4 EN of        register F2A ENABLE is cleared."]
            #[inline(always)]
            pub fn str4_conf(
                self,
            ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, F2AiCtrl_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<0,0x3,1,0,u8, F2AiCtrl_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Reconfiguration of stream 5 to FIFO channel 1. Write of following double bit values is possible  The write protected bits of register F2A i  CTRL are only writable if the corresponding enable bit STR1 EN and STR5 EN of        register F2A ENABLE is cleared."]
            #[inline(always)]
            pub fn str5_conf(
                self,
            ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, F2AiCtrl_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<2,0x3,1,0,u8, F2AiCtrl_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Reconfiguration of stream 6 to FIFO channel 2. Write of following double bit values is possible  The write protected bits of register F2A i  CTRL are only writable if the corresponding enable bit STR2 EN and STR6 EN of        register F2A ENABLE is cleared."]
            #[inline(always)]
            pub fn str6_conf(
                self,
            ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, F2AiCtrl_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<4,0x3,1,0,u8, F2AiCtrl_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Reconfiguration of stream 7 to FIFO channel 3. Write of following double bit values is possible  The write protected bits of register F2A i  CTRL are only writable if the corresponding enable bit STR3 EN and STR7 EN of        register F2A ENABLE is cleared."]
            #[inline(always)]
            pub fn str7_conf(
                self,
            ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, F2AiCtrl_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<6,0x3,1,0,u8, F2AiCtrl_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for F2AiCtrl {
            #[inline(always)]
            fn default() -> F2AiCtrl {
                <crate::RegValueT<F2AiCtrl_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct F2AiEnable_SPEC;
        impl crate::sealed::RegSpec for F2AiEnable_SPEC {
            type DataType = u32;
        }
        #[doc = "F2A0 Stream Activation Register\n resetvalue={Application Reset:0x0}"]
        pub type F2AiEnable = crate::RegValueT<F2AiEnable_SPEC>;

        impl F2AiEnable {
            #[doc = "Enable disable stream 7. Write of following double bit values is possible"]
            #[inline(always)]
            pub fn str0_en(
                self,
            ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, F2AiEnable_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<0,0x3,1,0,u8, F2AiEnable_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable disable stream 7. Write of following double bit values is possible"]
            #[inline(always)]
            pub fn str1_en(
                self,
            ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, F2AiEnable_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<2,0x3,1,0,u8, F2AiEnable_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable disable stream 7. Write of following double bit values is possible"]
            #[inline(always)]
            pub fn str2_en(
                self,
            ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, F2AiEnable_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<4,0x3,1,0,u8, F2AiEnable_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable disable stream 7. Write of following double bit values is possible"]
            #[inline(always)]
            pub fn str3_en(
                self,
            ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, F2AiEnable_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<6,0x3,1,0,u8, F2AiEnable_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable disable stream 7. Write of following double bit values is possible"]
            #[inline(always)]
            pub fn str4_en(
                self,
            ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, F2AiEnable_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<8,0x3,1,0,u8, F2AiEnable_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable disable stream 7. Write of following double bit values is possible"]
            #[inline(always)]
            pub fn str5_en(
                self,
            ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, F2AiEnable_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<10,0x3,1,0,u8, F2AiEnable_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable disable stream 7. Write of following double bit values is possible"]
            #[inline(always)]
            pub fn str6_en(
                self,
            ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, F2AiEnable_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<12,0x3,1,0,u8, F2AiEnable_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Enable disable stream 7. Write of following double bit values is possible"]
            #[inline(always)]
            pub fn str7_en(
                self,
            ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, F2AiEnable_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<14,0x3,1,0,u8, F2AiEnable_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for F2AiEnable {
            #[inline(always)]
            fn default() -> F2AiEnable {
                <crate::RegValueT<F2AiEnable_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc = "RD CH"]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct RdCh(pub(super) *mut u8);
        unsafe impl core::marker::Send for RdCh {}
        unsafe impl core::marker::Sync for RdCh {}
        impl RdCh {
            #[doc = "F2A0 Stream 0 Read Address Register\n resetvalue={Application Reset:0x1FE}"]
            #[inline(always)]
            pub const fn f2ai_chz_aru_rd_fifo(
                &self,
            ) -> crate::common::Reg<rd_ch::F2AiCHzAruRdFifo_SPEC, crate::common::RW> {
                unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
            }
        }
        pub mod rd_ch {
            #[allow(unused_imports)]
            use crate::common::*;
            #[doc(hidden)]
            #[derive(Copy, Clone, Eq, PartialEq)]
            pub struct F2AiCHzAruRdFifo_SPEC;
            impl crate::sealed::RegSpec for F2AiCHzAruRdFifo_SPEC {
                type DataType = u32;
            }
            #[doc = "F2A0 Stream 0 Read Address Register\n resetvalue={Application Reset:0x1FE}"]
            pub type F2AiCHzAruRdFifo = crate::RegValueT<F2AiCHzAruRdFifo_SPEC>;

            impl F2AiCHzAruRdFifo {
                #[doc = "ARU Read address. This bit field is only writable if channel is disabled."]
                #[inline(always)]
                pub fn addr(
                    self,
                ) -> crate::common::RegisterField<
                    0,
                    0x1ff,
                    1,
                    0,
                    u16,
                    F2AiCHzAruRdFifo_SPEC,
                    crate::common::RW,
                > {
                    crate::common::RegisterField::<
                        0,
                        0x1ff,
                        1,
                        0,
                        u16,
                        F2AiCHzAruRdFifo_SPEC,
                        crate::common::RW,
                    >::from_register(self, 0)
                }
            }
            impl core::default::Default for F2AiCHzAruRdFifo {
                #[inline(always)]
                fn default() -> F2AiCHzAruRdFifo {
                    <crate::RegValueT<F2AiCHzAruRdFifo_SPEC> as RegisterValue<_>>::new(510)
                }
            }
        }
        #[doc = "STR CH"]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct StrCh(pub(super) *mut u8);
        unsafe impl core::marker::Send for StrCh {}
        unsafe impl core::marker::Sync for StrCh {}
        impl StrCh {
            #[doc = "F2A0 Stream 0 Configuration Register\n resetvalue={Application Reset:0x0}"]
            #[inline(always)]
            pub const fn f2ai_chz_str_cfg(
                &self,
            ) -> crate::common::Reg<str_ch::F2AiCHzStrCfg_SPEC, crate::common::RW> {
                unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
            }
        }
        pub mod str_ch {
            #[allow(unused_imports)]
            use crate::common::*;
            #[doc(hidden)]
            #[derive(Copy, Clone, Eq, PartialEq)]
            pub struct F2AiCHzStrCfg_SPEC;
            impl crate::sealed::RegSpec for F2AiCHzStrCfg_SPEC {
                type DataType = u32;
            }
            #[doc = "F2A0 Stream 0 Configuration Register\n resetvalue={Application Reset:0x0}"]
            pub type F2AiCHzStrCfg = crate::RegValueT<F2AiCHzStrCfg_SPEC>;

            impl F2AiCHzStrCfg {
                #[doc = "Transfer mode for 53 bit ARU data from to FIFO"]
                #[inline(always)]
                pub fn tmode(
                    self,
                ) -> crate::common::RegisterField<
                    16,
                    0x3,
                    1,
                    0,
                    u8,
                    F2AiCHzStrCfg_SPEC,
                    crate::common::RW,
                > {
                    crate::common::RegisterField::<
                        16,
                        0x3,
                        1,
                        0,
                        u8,
                        F2AiCHzStrCfg_SPEC,
                        crate::common::RW,
                    >::from_register(self, 0)
                }
                #[doc = "Data transfer direction"]
                #[inline(always)]
                pub fn dir(
                    self,
                ) -> crate::common::RegisterFieldBool<18, 1, 0, F2AiCHzStrCfg_SPEC, crate::common::RW>
                {
                    crate::common::RegisterFieldBool::<
                        18,
                        1,
                        0,
                        F2AiCHzStrCfg_SPEC,
                        crate::common::RW,
                    >::from_register(self, 0)
                }
            }
            impl core::default::Default for F2AiCHzStrCfg {
                #[inline(always)]
                fn default() -> F2AiCHzStrCfg {
                    <crate::RegValueT<F2AiCHzStrCfg_SPEC> as RegisterValue<_>>::new(0)
                }
            }
        }
    }
    #[doc = "FIFO"]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Fifo(pub(super) *mut u8);
    unsafe impl core::marker::Send for Fifo {}
    unsafe impl core::marker::Sync for Fifo {}
    impl Fifo {
        #[doc = "CH"]
        #[inline(always)]
        pub fn ch(self) -> [fifo::Ch; 8] {
            unsafe {
                [
                    fifo::Ch(self.0.add(0x0usize + 0x0usize)),
                    fifo::Ch(self.0.add(0x0usize + 0x40usize)),
                    fifo::Ch(self.0.add(0x0usize + 0x80usize)),
                    fifo::Ch(self.0.add(0x0usize + 0xc0usize)),
                    fifo::Ch(self.0.add(0x0usize + 0x100usize)),
                    fifo::Ch(self.0.add(0x0usize + 0x140usize)),
                    fifo::Ch(self.0.add(0x0usize + 0x180usize)),
                    fifo::Ch(self.0.add(0x0usize + 0x1c0usize)),
                ]
            }
        }
    }
    pub mod fifo {
        #[allow(unused_imports)]
        use crate::common::*;
        #[doc = "CH"]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct Ch(pub(super) *mut u8);
        unsafe impl core::marker::Send for Ch {}
        unsafe impl core::marker::Sync for Ch {}
        impl Ch {
            #[doc = "FIFO0 Channel 0 Control Register\n resetvalue={Application Reset:0x0}"]
            #[inline(always)]
            pub const fn fifoi_chz_ctrl(
                &self,
            ) -> crate::common::Reg<ch::FifOiCHzCtrl_SPEC, crate::common::RW> {
                unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
            }
            #[doc = "FIFO0 Channel 0 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
            #[inline(always)]
            pub const fn fifoi_chz_eirq_en(
                &self,
            ) -> crate::common::Reg<ch::FifOiCHzEirqEn_SPEC, crate::common::RW> {
                unsafe { crate::common::Reg::from_ptr(self.0.add(52usize)) }
            }
            #[doc = "FIFO0 Channel 0 End Address Register\n resetvalue={Application Reset:0x7F}"]
            #[inline(always)]
            pub const fn fifoi_chz_end_addr(
                &self,
            ) -> crate::common::Reg<ch::FifOiCHzEndAddr_SPEC, crate::common::RW> {
                unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
            }
            #[doc = "FIFO0 Channel 0 Fill Level Register\n resetvalue={Application Reset:0x0}"]
            #[inline(always)]
            pub const fn fifoi_chz_fill_level(
                &self,
            ) -> crate::common::Reg<ch::FifOiCHzFillLevel_SPEC, crate::common::R> {
                unsafe { crate::common::Reg::from_ptr(self.0.add(24usize)) }
            }
            #[doc = "FIFO0 Channel 0 Lower Watermark Register\n resetvalue={Application Reset:0x20}"]
            #[inline(always)]
            pub const fn fifoi_chz_lower_wm(
                &self,
            ) -> crate::common::Reg<ch::FifOiCHzLowerWm_SPEC, crate::common::RW> {
                unsafe { crate::common::Reg::from_ptr(self.0.add(16usize)) }
            }
            #[doc = "FIFO0 Channel 0 Read Pointer Register\n resetvalue={Application Reset:0x0}"]
            #[inline(always)]
            pub const fn fifoi_chz_rd_ptr(
                &self,
            ) -> crate::common::Reg<ch::FifOiCHzRdPtr_SPEC, crate::common::R> {
                unsafe { crate::common::Reg::from_ptr(self.0.add(32usize)) }
            }
            #[doc = "FIFO0 Channel 0 Start Address Register\n resetvalue={Application Reset:0x0}"]
            #[inline(always)]
            pub const fn fifoi_chz_start_addr(
                &self,
            ) -> crate::common::Reg<ch::FifOiCHzStartAddr_SPEC, crate::common::RW> {
                unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
            }
            #[doc = "FIFO0 Channel 0 Status Register\n resetvalue={Application Reset:0x5}"]
            #[inline(always)]
            pub const fn fifoi_chz_status(
                &self,
            ) -> crate::common::Reg<ch::FifOiCHzStatus_SPEC, crate::common::R> {
                unsafe { crate::common::Reg::from_ptr(self.0.add(20usize)) }
            }
            #[doc = "FIFO0 Channel 0 Upper Watermark Register\n resetvalue={Application Reset:0x60}"]
            #[inline(always)]
            pub const fn fifoi_chz_upper_wm(
                &self,
            ) -> crate::common::Reg<ch::FifOiCHzUpperWm_SPEC, crate::common::RW> {
                unsafe { crate::common::Reg::from_ptr(self.0.add(12usize)) }
            }
            #[doc = "FIFO0 Channel 0 Write Pointer Register\n resetvalue={Application Reset:0x0}"]
            #[inline(always)]
            pub const fn fifoi_chz_wr_ptr(
                &self,
            ) -> crate::common::Reg<ch::FifOiCHzWrPtr_SPEC, crate::common::R> {
                unsafe { crate::common::Reg::from_ptr(self.0.add(28usize)) }
            }
            #[doc = "IRQ"]
            #[inline(always)]
            pub fn irq(self) -> ch::Irq {
                unsafe { ch::Irq(self.0.add(36usize)) }
            }
        }
        pub mod ch {
            #[allow(unused_imports)]
            use crate::common::*;
            #[doc(hidden)]
            #[derive(Copy, Clone, Eq, PartialEq)]
            pub struct FifOiCHzCtrl_SPEC;
            impl crate::sealed::RegSpec for FifOiCHzCtrl_SPEC {
                type DataType = u32;
            }
            #[doc = "FIFO0 Channel 0 Control Register\n resetvalue={Application Reset:0x0}"]
            pub type FifOiCHzCtrl = crate::RegValueT<FifOiCHzCtrl_SPEC>;

            impl FifOiCHzCtrl {
                #[doc = "Ring buffer mode enable"]
                #[inline(always)]
                pub fn rbm(
                    self,
                ) -> crate::common::RegisterFieldBool<0, 1, 0, FifOiCHzCtrl_SPEC, crate::common::RW>
                {
                    crate::common::RegisterFieldBool::<0,1,0,FifOiCHzCtrl_SPEC,crate::common::RW>::from_register(self,0)
                }
                #[doc = "RAM access priority. RAP bit is only functional in register FIFO 0 CTRL. The priority is        defined for all FIFO channels there."]
                #[inline(always)]
                pub fn rap(
                    self,
                ) -> crate::common::RegisterFieldBool<1, 1, 0, FifOiCHzCtrl_SPEC, crate::common::RW>
                {
                    crate::common::RegisterFieldBool::<1,1,0,FifOiCHzCtrl_SPEC,crate::common::RW>::from_register(self,0)
                }
                #[doc = "FIFO Flush control. A FIFO Flush operation resets the FIFO i  CH z  FILL LEVEL   FIFO i  CH z  WR PTR and FIFO i  CH z  RD PTR registers to their initial values."]
                #[inline(always)]
                pub fn flush(
                    self,
                ) -> crate::common::RegisterFieldBool<2, 1, 0, FifOiCHzCtrl_SPEC, crate::common::RW>
                {
                    crate::common::RegisterFieldBool::<2,1,0,FifOiCHzCtrl_SPEC,crate::common::RW>::from_register(self,0)
                }
                #[doc = "RAM write unlock. Enable disable direct RAM write access to the memory mapped FIFO region. Only the bit WULOCK of register FIFO i  CH0 CTRL enables disables the        direct RAM write access for all FIFO channel  whole FIFO RAM . The        WULOCK bits of the other channels are writeable but have no effect."]
                #[inline(always)]
                pub fn wulock(
                    self,
                ) -> crate::common::RegisterFieldBool<3, 1, 0, FifOiCHzCtrl_SPEC, crate::common::RW>
                {
                    crate::common::RegisterFieldBool::<3,1,0,FifOiCHzCtrl_SPEC,crate::common::RW>::from_register(self,0)
                }
            }
            impl core::default::Default for FifOiCHzCtrl {
                #[inline(always)]
                fn default() -> FifOiCHzCtrl {
                    <crate::RegValueT<FifOiCHzCtrl_SPEC> as RegisterValue<_>>::new(0)
                }
            }

            #[doc(hidden)]
            #[derive(Copy, Clone, Eq, PartialEq)]
            pub struct FifOiCHzEirqEn_SPEC;
            impl crate::sealed::RegSpec for FifOiCHzEirqEn_SPEC {
                type DataType = u32;
            }
            #[doc = "FIFO0 Channel 0 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
            pub type FifOiCHzEirqEn = crate::RegValueT<FifOiCHzEirqEn_SPEC>;

            impl FifOiCHzEirqEn {
                #[doc = "FIFO Empty error interrupt enable"]
                #[inline(always)]
                pub fn fifo_empty_eirq_en(
                    self,
                ) -> crate::common::RegisterFieldBool<0, 1, 0, FifOiCHzEirqEn_SPEC, crate::common::RW>
                {
                    crate::common::RegisterFieldBool::<
                        0,
                        1,
                        0,
                        FifOiCHzEirqEn_SPEC,
                        crate::common::RW,
                    >::from_register(self, 0)
                }
                #[doc = "FIFO Full error interrupt enable"]
                #[inline(always)]
                pub fn fifo_full_eirq_en(
                    self,
                ) -> crate::common::RegisterFieldBool<1, 1, 0, FifOiCHzEirqEn_SPEC, crate::common::RW>
                {
                    crate::common::RegisterFieldBool::<
                        1,
                        1,
                        0,
                        FifOiCHzEirqEn_SPEC,
                        crate::common::RW,
                    >::from_register(self, 0)
                }
                #[doc = "FIFO Lower Watermark error interrupt enable"]
                #[inline(always)]
                pub fn fifo_lwm_eirq_en(
                    self,
                ) -> crate::common::RegisterFieldBool<2, 1, 0, FifOiCHzEirqEn_SPEC, crate::common::RW>
                {
                    crate::common::RegisterFieldBool::<
                        2,
                        1,
                        0,
                        FifOiCHzEirqEn_SPEC,
                        crate::common::RW,
                    >::from_register(self, 0)
                }
                #[doc = "FIFO Upper Watermark error interrupt enable"]
                #[inline(always)]
                pub fn fifo_uwm_eirq_en(
                    self,
                ) -> crate::common::RegisterFieldBool<3, 1, 0, FifOiCHzEirqEn_SPEC, crate::common::RW>
                {
                    crate::common::RegisterFieldBool::<
                        3,
                        1,
                        0,
                        FifOiCHzEirqEn_SPEC,
                        crate::common::RW,
                    >::from_register(self, 0)
                }
            }
            impl core::default::Default for FifOiCHzEirqEn {
                #[inline(always)]
                fn default() -> FifOiCHzEirqEn {
                    <crate::RegValueT<FifOiCHzEirqEn_SPEC> as RegisterValue<_>>::new(0)
                }
            }

            #[doc(hidden)]
            #[derive(Copy, Clone, Eq, PartialEq)]
            pub struct FifOiCHzEndAddr_SPEC;
            impl crate::sealed::RegSpec for FifOiCHzEndAddr_SPEC {
                type DataType = u32;
            }
            #[doc = "FIFO0 Channel 0 End Address Register\n resetvalue={Application Reset:0x7F}"]
            pub type FifOiCHzEndAddr = crate::RegValueT<FifOiCHzEndAddr_SPEC>;

            impl FifOiCHzEndAddr {
                #[doc = "End address for FIFO channel z. value for ADDR is calculated as ADDR   128  x 1  1 A write access will flush the regarding channel"]
                #[inline(always)]
                pub fn addr(
                    self,
                ) -> crate::common::RegisterField<
                    0,
                    0x3ff,
                    1,
                    0,
                    u16,
                    FifOiCHzEndAddr_SPEC,
                    crate::common::RW,
                > {
                    crate::common::RegisterField::<
                        0,
                        0x3ff,
                        1,
                        0,
                        u16,
                        FifOiCHzEndAddr_SPEC,
                        crate::common::RW,
                    >::from_register(self, 0)
                }
            }
            impl core::default::Default for FifOiCHzEndAddr {
                #[inline(always)]
                fn default() -> FifOiCHzEndAddr {
                    <crate::RegValueT<FifOiCHzEndAddr_SPEC> as RegisterValue<_>>::new(127)
                }
            }

            #[doc(hidden)]
            #[derive(Copy, Clone, Eq, PartialEq)]
            pub struct FifOiCHzFillLevel_SPEC;
            impl crate::sealed::RegSpec for FifOiCHzFillLevel_SPEC {
                type DataType = u32;
            }
            #[doc = "FIFO0 Channel 0 Fill Level Register\n resetvalue={Application Reset:0x0}"]
            pub type FifOiCHzFillLevel = crate::RegValueT<FifOiCHzFillLevel_SPEC>;

            impl FifOiCHzFillLevel {
                #[doc = "Fill level of the current FIFO. LEVEL is in range  0   8804  LEVEL   8804  FIFO i  CH z  END ADDR   8722  FIFO i  CH z  START ADDR   1 Register content is compared to the upper and lower watermark values for        this channel to detect watermark over  and underflow."]
                #[inline(always)]
                pub fn level(
                    self,
                ) -> crate::common::RegisterField<
                    0,
                    0x7ff,
                    1,
                    0,
                    u16,
                    FifOiCHzFillLevel_SPEC,
                    crate::common::R,
                > {
                    crate::common::RegisterField::<
                        0,
                        0x7ff,
                        1,
                        0,
                        u16,
                        FifOiCHzFillLevel_SPEC,
                        crate::common::R,
                    >::from_register(self, 0)
                }
            }
            impl core::default::Default for FifOiCHzFillLevel {
                #[inline(always)]
                fn default() -> FifOiCHzFillLevel {
                    <crate::RegValueT<FifOiCHzFillLevel_SPEC> as RegisterValue<_>>::new(0)
                }
            }

            #[doc(hidden)]
            #[derive(Copy, Clone, Eq, PartialEq)]
            pub struct FifOiCHzLowerWm_SPEC;
            impl crate::sealed::RegSpec for FifOiCHzLowerWm_SPEC {
                type DataType = u32;
            }
            #[doc = "FIFO0 Channel 0 Lower Watermark Register\n resetvalue={Application Reset:0x20}"]
            pub type FifOiCHzLowerWm = crate::RegValueT<FifOiCHzLowerWm_SPEC>;

            impl FifOiCHzLowerWm {
                #[doc = "Lower watermark address for channel z. The lower watermark is configured as a relative fill level of the FIFO.        ADDR must be in range  0  lt   ADDR  lt   FIFO i  CH z  END ADDR   FIFO i  CH z  START ADDR . Initial value for ADDR is defined as ADDR   0x20."]
                #[inline(always)]
                pub fn addr(
                    self,
                ) -> crate::common::RegisterField<
                    0,
                    0x3ff,
                    1,
                    0,
                    u16,
                    FifOiCHzLowerWm_SPEC,
                    crate::common::RW,
                > {
                    crate::common::RegisterField::<
                        0,
                        0x3ff,
                        1,
                        0,
                        u16,
                        FifOiCHzLowerWm_SPEC,
                        crate::common::RW,
                    >::from_register(self, 0)
                }
            }
            impl core::default::Default for FifOiCHzLowerWm {
                #[inline(always)]
                fn default() -> FifOiCHzLowerWm {
                    <crate::RegValueT<FifOiCHzLowerWm_SPEC> as RegisterValue<_>>::new(32)
                }
            }

            #[doc(hidden)]
            #[derive(Copy, Clone, Eq, PartialEq)]
            pub struct FifOiCHzRdPtr_SPEC;
            impl crate::sealed::RegSpec for FifOiCHzRdPtr_SPEC {
                type DataType = u32;
            }
            #[doc = "FIFO0 Channel 0 Read Pointer Register\n resetvalue={Application Reset:0x0}"]
            pub type FifOiCHzRdPtr = crate::RegValueT<FifOiCHzRdPtr_SPEC>;

            impl FifOiCHzRdPtr {
                #[doc = "Position of the read pointer. ADDR must be in range 0   8804  ADDR   8804  1023. Initial value for ADDR is defined        as ADDR   FIFO i  CH z  START ADDR"]
                #[inline(always)]
                pub fn addr(
                    self,
                ) -> crate::common::RegisterField<
                    0,
                    0x3ff,
                    1,
                    0,
                    u16,
                    FifOiCHzRdPtr_SPEC,
                    crate::common::R,
                > {
                    crate::common::RegisterField::<
                        0,
                        0x3ff,
                        1,
                        0,
                        u16,
                        FifOiCHzRdPtr_SPEC,
                        crate::common::R,
                    >::from_register(self, 0)
                }
            }
            impl core::default::Default for FifOiCHzRdPtr {
                #[inline(always)]
                fn default() -> FifOiCHzRdPtr {
                    <crate::RegValueT<FifOiCHzRdPtr_SPEC> as RegisterValue<_>>::new(0)
                }
            }

            #[doc(hidden)]
            #[derive(Copy, Clone, Eq, PartialEq)]
            pub struct FifOiCHzStartAddr_SPEC;
            impl crate::sealed::RegSpec for FifOiCHzStartAddr_SPEC {
                type DataType = u32;
            }
            #[doc = "FIFO0 Channel 0 Start Address Register\n resetvalue={Application Reset:0x0}"]
            pub type FifOiCHzStartAddr = crate::RegValueT<FifOiCHzStartAddr_SPEC>;

            impl FifOiCHzStartAddr {
                #[doc = "Start address for FIFO channel z. Initial value for ADDR is calculated as ADDR   128 z. A write access will flush the regarding channel."]
                #[inline(always)]
                pub fn addr(
                    self,
                ) -> crate::common::RegisterField<
                    0,
                    0x3ff,
                    1,
                    0,
                    u16,
                    FifOiCHzStartAddr_SPEC,
                    crate::common::RW,
                > {
                    crate::common::RegisterField::<
                        0,
                        0x3ff,
                        1,
                        0,
                        u16,
                        FifOiCHzStartAddr_SPEC,
                        crate::common::RW,
                    >::from_register(self, 0)
                }
            }
            impl core::default::Default for FifOiCHzStartAddr {
                #[inline(always)]
                fn default() -> FifOiCHzStartAddr {
                    <crate::RegValueT<FifOiCHzStartAddr_SPEC> as RegisterValue<_>>::new(0)
                }
            }

            #[doc(hidden)]
            #[derive(Copy, Clone, Eq, PartialEq)]
            pub struct FifOiCHzStatus_SPEC;
            impl crate::sealed::RegSpec for FifOiCHzStatus_SPEC {
                type DataType = u32;
            }
            #[doc = "FIFO0 Channel 0 Status Register\n resetvalue={Application Reset:0x5}"]
            pub type FifOiCHzStatus = crate::RegValueT<FifOiCHzStatus_SPEC>;

            impl FifOiCHzStatus {
                #[doc = "FIFO is empty. Bit only applicable in normal mode."]
                #[inline(always)]
                pub fn empty(
                    self,
                ) -> crate::common::RegisterFieldBool<0, 1, 0, FifOiCHzStatus_SPEC, crate::common::R>
                {
                    crate::common::RegisterFieldBool::<0,1,0,FifOiCHzStatus_SPEC,crate::common::R>::from_register(self,0)
                }
                #[doc = "FIFO is full. Bit only applicable in normal mode."]
                #[inline(always)]
                pub fn full(
                    self,
                ) -> crate::common::RegisterFieldBool<1, 1, 0, FifOiCHzStatus_SPEC, crate::common::R>
                {
                    crate::common::RegisterFieldBool::<1,1,0,FifOiCHzStatus_SPEC,crate::common::R>::from_register(self,0)
                }
                #[doc = "Lower watermark reached. Bit only applicable in normal mode."]
                #[inline(always)]
                pub fn low_wm(
                    self,
                ) -> crate::common::RegisterFieldBool<2, 1, 0, FifOiCHzStatus_SPEC, crate::common::R>
                {
                    crate::common::RegisterFieldBool::<2,1,0,FifOiCHzStatus_SPEC,crate::common::R>::from_register(self,0)
                }
                #[doc = "Upper watermark reached. Bit only applicable in normal mode."]
                #[inline(always)]
                pub fn up_wm(
                    self,
                ) -> crate::common::RegisterFieldBool<3, 1, 0, FifOiCHzStatus_SPEC, crate::common::R>
                {
                    crate::common::RegisterFieldBool::<3,1,0,FifOiCHzStatus_SPEC,crate::common::R>::from_register(self,0)
                }
            }
            impl core::default::Default for FifOiCHzStatus {
                #[inline(always)]
                fn default() -> FifOiCHzStatus {
                    <crate::RegValueT<FifOiCHzStatus_SPEC> as RegisterValue<_>>::new(5)
                }
            }

            #[doc(hidden)]
            #[derive(Copy, Clone, Eq, PartialEq)]
            pub struct FifOiCHzUpperWm_SPEC;
            impl crate::sealed::RegSpec for FifOiCHzUpperWm_SPEC {
                type DataType = u32;
            }
            #[doc = "FIFO0 Channel 0 Upper Watermark Register\n resetvalue={Application Reset:0x60}"]
            pub type FifOiCHzUpperWm = crate::RegValueT<FifOiCHzUpperWm_SPEC>;

            impl FifOiCHzUpperWm {
                #[doc = "Upper watermark address for channel z. The upper watermark is configured as a relative fill level of the FIFO.        ADDR must be in range  0  lt   ADDR  lt   FIFO i  CH x  END ADDR   FIFO i  CH x  START ADDR . Initial value for ADDR is defined as ADDR   0x60."]
                #[inline(always)]
                pub fn addr(
                    self,
                ) -> crate::common::RegisterField<
                    0,
                    0x3ff,
                    1,
                    0,
                    u16,
                    FifOiCHzUpperWm_SPEC,
                    crate::common::RW,
                > {
                    crate::common::RegisterField::<
                        0,
                        0x3ff,
                        1,
                        0,
                        u16,
                        FifOiCHzUpperWm_SPEC,
                        crate::common::RW,
                    >::from_register(self, 0)
                }
            }
            impl core::default::Default for FifOiCHzUpperWm {
                #[inline(always)]
                fn default() -> FifOiCHzUpperWm {
                    <crate::RegValueT<FifOiCHzUpperWm_SPEC> as RegisterValue<_>>::new(96)
                }
            }

            #[doc(hidden)]
            #[derive(Copy, Clone, Eq, PartialEq)]
            pub struct FifOiCHzWrPtr_SPEC;
            impl crate::sealed::RegSpec for FifOiCHzWrPtr_SPEC {
                type DataType = u32;
            }
            #[doc = "FIFO0 Channel 0 Write Pointer Register\n resetvalue={Application Reset:0x0}"]
            pub type FifOiCHzWrPtr = crate::RegValueT<FifOiCHzWrPtr_SPEC>;

            impl FifOiCHzWrPtr {
                #[doc = "Position of the write pointer. ADDR must be in range 0  lt   ADDR  lt   1023. Initial value for ADDR is        defined as ADDR   FIFO i  CH z  START ADDR"]
                #[inline(always)]
                pub fn addr(
                    self,
                ) -> crate::common::RegisterField<
                    0,
                    0x3ff,
                    1,
                    0,
                    u16,
                    FifOiCHzWrPtr_SPEC,
                    crate::common::R,
                > {
                    crate::common::RegisterField::<
                        0,
                        0x3ff,
                        1,
                        0,
                        u16,
                        FifOiCHzWrPtr_SPEC,
                        crate::common::R,
                    >::from_register(self, 0)
                }
            }
            impl core::default::Default for FifOiCHzWrPtr {
                #[inline(always)]
                fn default() -> FifOiCHzWrPtr {
                    <crate::RegValueT<FifOiCHzWrPtr_SPEC> as RegisterValue<_>>::new(0)
                }
            }

            #[doc = "IRQ"]
            #[derive(Copy, Clone, Eq, PartialEq)]
            pub struct Irq(pub(super) *mut u8);
            unsafe impl core::marker::Send for Irq {}
            unsafe impl core::marker::Sync for Irq {}
            impl Irq {
                #[doc = "FIFO0 Channel 0 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
                #[inline(always)]
                pub const fn fifoi_chz_irq_en(
                    &self,
                ) -> crate::common::Reg<irq::FifOiCHzIrqEn_SPEC, crate::common::RW>
                {
                    unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
                }
                #[doc = "FIFO0 Channel 0 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
                #[inline(always)]
                pub const fn fifoi_chz_irq_forcint(
                    &self,
                ) -> crate::common::Reg<irq::FifOiCHzIrqForcint_SPEC, crate::common::RW>
                {
                    unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
                }
                #[doc = "FIFO0 Channel 0 Interrupt Mode Control Register\n resetvalue={Application Reset:0x0}"]
                #[inline(always)]
                pub const fn fifoi_chz_irq_mode(
                    &self,
                ) -> crate::common::Reg<irq::FifOiCHzIrqMode_SPEC, crate::common::RW>
                {
                    unsafe { crate::common::Reg::from_ptr(self.0.add(12usize)) }
                }
                #[doc = "FIFO0 Channel 0 Interrupt Notification Register\n resetvalue={Application Reset:0x5}"]
                #[inline(always)]
                pub const fn fifoi_chz_irq_notify(
                    &self,
                ) -> crate::common::Reg<irq::FifOiCHzIrqNotify_SPEC, crate::common::RW>
                {
                    unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
                }
            }
            pub mod irq {
                #[allow(unused_imports)]
                use crate::common::*;
                #[doc(hidden)]
                #[derive(Copy, Clone, Eq, PartialEq)]
                pub struct FifOiCHzIrqEn_SPEC;
                impl crate::sealed::RegSpec for FifOiCHzIrqEn_SPEC {
                    type DataType = u32;
                }
                #[doc = "FIFO0 Channel 0 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
                pub type FifOiCHzIrqEn = crate::RegValueT<FifOiCHzIrqEn_SPEC>;

                impl FifOiCHzIrqEn {
                    #[doc = "FIFO Empty interrupt enable"]
                    #[inline(always)]
                    pub fn fifo_empty_irq_en(
                        self,
                    ) -> crate::common::RegisterFieldBool<
                        0,
                        1,
                        0,
                        FifOiCHzIrqEn_SPEC,
                        crate::common::RW,
                    > {
                        crate::common::RegisterFieldBool::<
                            0,
                            1,
                            0,
                            FifOiCHzIrqEn_SPEC,
                            crate::common::RW,
                        >::from_register(self, 0)
                    }
                    #[doc = "FIFO Full interrupt enable"]
                    #[inline(always)]
                    pub fn fifo_full_irq_en(
                        self,
                    ) -> crate::common::RegisterFieldBool<
                        1,
                        1,
                        0,
                        FifOiCHzIrqEn_SPEC,
                        crate::common::RW,
                    > {
                        crate::common::RegisterFieldBool::<
                            1,
                            1,
                            0,
                            FifOiCHzIrqEn_SPEC,
                            crate::common::RW,
                        >::from_register(self, 0)
                    }
                    #[doc = "FIFO Lower Watermark interrupt enable"]
                    #[inline(always)]
                    pub fn fifo_lwm_irq_en(
                        self,
                    ) -> crate::common::RegisterFieldBool<
                        2,
                        1,
                        0,
                        FifOiCHzIrqEn_SPEC,
                        crate::common::RW,
                    > {
                        crate::common::RegisterFieldBool::<
                            2,
                            1,
                            0,
                            FifOiCHzIrqEn_SPEC,
                            crate::common::RW,
                        >::from_register(self, 0)
                    }
                    #[doc = "FIFO Upper Watermark interrupt enable"]
                    #[inline(always)]
                    pub fn fifo_uwm_irq_en(
                        self,
                    ) -> crate::common::RegisterFieldBool<
                        3,
                        1,
                        0,
                        FifOiCHzIrqEn_SPEC,
                        crate::common::RW,
                    > {
                        crate::common::RegisterFieldBool::<
                            3,
                            1,
                            0,
                            FifOiCHzIrqEn_SPEC,
                            crate::common::RW,
                        >::from_register(self, 0)
                    }
                }
                impl core::default::Default for FifOiCHzIrqEn {
                    #[inline(always)]
                    fn default() -> FifOiCHzIrqEn {
                        <crate::RegValueT<FifOiCHzIrqEn_SPEC> as RegisterValue<_>>::new(0)
                    }
                }

                #[doc(hidden)]
                #[derive(Copy, Clone, Eq, PartialEq)]
                pub struct FifOiCHzIrqForcint_SPEC;
                impl crate::sealed::RegSpec for FifOiCHzIrqForcint_SPEC {
                    type DataType = u32;
                }
                #[doc = "FIFO0 Channel 0 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
                pub type FifOiCHzIrqForcint = crate::RegValueT<FifOiCHzIrqForcint_SPEC>;

                impl FifOiCHzIrqForcint {
                    #[doc = "Force interrupt of FIFO Empty status. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL"]
                    #[inline(always)]
                    pub fn trg_fifo_empty(
                        self,
                    ) -> crate::common::RegisterFieldBool<
                        0,
                        1,
                        0,
                        FifOiCHzIrqForcint_SPEC,
                        crate::common::RW,
                    > {
                        crate::common::RegisterFieldBool::<
                            0,
                            1,
                            0,
                            FifOiCHzIrqForcint_SPEC,
                            crate::common::RW,
                        >::from_register(self, 0)
                    }
                    #[doc = "Force interrupt of FIFO Full status. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
                    #[inline(always)]
                    pub fn trg_fifo_full(
                        self,
                    ) -> crate::common::RegisterFieldBool<
                        1,
                        1,
                        0,
                        FifOiCHzIrqForcint_SPEC,
                        crate::common::RW,
                    > {
                        crate::common::RegisterFieldBool::<
                            1,
                            1,
                            0,
                            FifOiCHzIrqForcint_SPEC,
                            crate::common::RW,
                        >::from_register(self, 0)
                    }
                    #[doc = "Force interrupt of Lower Watermark. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
                    #[inline(always)]
                    pub fn trg_fifo_lwm(
                        self,
                    ) -> crate::common::RegisterFieldBool<
                        2,
                        1,
                        0,
                        FifOiCHzIrqForcint_SPEC,
                        crate::common::RW,
                    > {
                        crate::common::RegisterFieldBool::<
                            2,
                            1,
                            0,
                            FifOiCHzIrqForcint_SPEC,
                            crate::common::RW,
                        >::from_register(self, 0)
                    }
                    #[doc = "Force interrupt of Upper Watermark. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
                    #[inline(always)]
                    pub fn trg_fifo_uwm(
                        self,
                    ) -> crate::common::RegisterFieldBool<
                        3,
                        1,
                        0,
                        FifOiCHzIrqForcint_SPEC,
                        crate::common::RW,
                    > {
                        crate::common::RegisterFieldBool::<
                            3,
                            1,
                            0,
                            FifOiCHzIrqForcint_SPEC,
                            crate::common::RW,
                        >::from_register(self, 0)
                    }
                }
                impl core::default::Default for FifOiCHzIrqForcint {
                    #[inline(always)]
                    fn default() -> FifOiCHzIrqForcint {
                        <crate::RegValueT<FifOiCHzIrqForcint_SPEC> as RegisterValue<_>>::new(0)
                    }
                }

                #[doc(hidden)]
                #[derive(Copy, Clone, Eq, PartialEq)]
                pub struct FifOiCHzIrqMode_SPEC;
                impl crate::sealed::RegSpec for FifOiCHzIrqMode_SPEC {
                    type DataType = u32;
                }
                #[doc = "FIFO0 Channel 0 Interrupt Mode Control Register\n resetvalue={Application Reset:0x0}"]
                pub type FifOiCHzIrqMode = crate::RegValueT<FifOiCHzIrqMode_SPEC>;

                impl FifOiCHzIrqMode {
                    #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
                    #[inline(always)]
                    pub fn irq_mode(
                        self,
                    ) -> crate::common::RegisterField<
                        0,
                        0x3,
                        1,
                        0,
                        u8,
                        FifOiCHzIrqMode_SPEC,
                        crate::common::RW,
                    > {
                        crate::common::RegisterField::<
                            0,
                            0x3,
                            1,
                            0,
                            u8,
                            FifOiCHzIrqMode_SPEC,
                            crate::common::RW,
                        >::from_register(self, 0)
                    }
                    #[doc = "Enable DMA hysteresis mode"]
                    #[inline(always)]
                    pub fn dma_hysteresis(
                        self,
                    ) -> crate::common::RegisterFieldBool<
                        2,
                        1,
                        0,
                        FifOiCHzIrqMode_SPEC,
                        crate::common::RW,
                    > {
                        crate::common::RegisterFieldBool::<
                            2,
                            1,
                            0,
                            FifOiCHzIrqMode_SPEC,
                            crate::common::RW,
                        >::from_register(self, 0)
                    }
                    #[doc = "DMA direction in hysteresis mode. In the case of DMA writing data to a FIFO  the DMA requests must be        generated by the lower watermark. If the DMA hysteresis is enabled  the        FIFO does not generate a new DMA request until the upper watermark is        reached. In the case of DMA reading data from FIFO  the DMA requests must be        generated by the upper watermark. If the DMA hysteresis is enabled  the        FIFO does not generate a new DMA request until the lower watermark is        reached."]
                    #[inline(always)]
                    pub fn dma_hyst_dir(
                        self,
                    ) -> crate::common::RegisterFieldBool<
                        3,
                        1,
                        0,
                        FifOiCHzIrqMode_SPEC,
                        crate::common::RW,
                    > {
                        crate::common::RegisterFieldBool::<
                            3,
                            1,
                            0,
                            FifOiCHzIrqMode_SPEC,
                            crate::common::RW,
                        >::from_register(self, 0)
                    }
                }
                impl core::default::Default for FifOiCHzIrqMode {
                    #[inline(always)]
                    fn default() -> FifOiCHzIrqMode {
                        <crate::RegValueT<FifOiCHzIrqMode_SPEC> as RegisterValue<_>>::new(0)
                    }
                }

                #[doc(hidden)]
                #[derive(Copy, Clone, Eq, PartialEq)]
                pub struct FifOiCHzIrqNotify_SPEC;
                impl crate::sealed::RegSpec for FifOiCHzIrqNotify_SPEC {
                    type DataType = u32;
                }
                #[doc = "FIFO0 Channel 0 Interrupt Notification Register\n resetvalue={Application Reset:0x5}"]
                pub type FifOiCHzIrqNotify = crate::RegValueT<FifOiCHzIrqNotify_SPEC>;

                impl FifOiCHzIrqNotify {
                    #[doc = "FIFO is empty. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
                    #[inline(always)]
                    pub fn fifo_empty(
                        self,
                    ) -> crate::common::RegisterFieldBool<
                        0,
                        1,
                        0,
                        FifOiCHzIrqNotify_SPEC,
                        crate::common::RW,
                    > {
                        crate::common::RegisterFieldBool::<
                            0,
                            1,
                            0,
                            FifOiCHzIrqNotify_SPEC,
                            crate::common::RW,
                        >::from_register(self, 0)
                    }
                    #[doc = "FIFO is full. See bit 0."]
                    #[inline(always)]
                    pub fn fifo_full(
                        self,
                    ) -> crate::common::RegisterFieldBool<
                        1,
                        1,
                        0,
                        FifOiCHzIrqNotify_SPEC,
                        crate::common::RW,
                    > {
                        crate::common::RegisterFieldBool::<
                            1,
                            1,
                            0,
                            FifOiCHzIrqNotify_SPEC,
                            crate::common::RW,
                        >::from_register(self, 0)
                    }
                    #[doc = "FIFO lower watermark was under run. See bit 0."]
                    #[inline(always)]
                    pub fn fifo_lwm(
                        self,
                    ) -> crate::common::RegisterFieldBool<
                        2,
                        1,
                        0,
                        FifOiCHzIrqNotify_SPEC,
                        crate::common::RW,
                    > {
                        crate::common::RegisterFieldBool::<
                            2,
                            1,
                            0,
                            FifOiCHzIrqNotify_SPEC,
                            crate::common::RW,
                        >::from_register(self, 0)
                    }
                    #[doc = "FIFO upper watermark was over run. See bit 0."]
                    #[inline(always)]
                    pub fn fifo_uwm(
                        self,
                    ) -> crate::common::RegisterFieldBool<
                        3,
                        1,
                        0,
                        FifOiCHzIrqNotify_SPEC,
                        crate::common::RW,
                    > {
                        crate::common::RegisterFieldBool::<
                            3,
                            1,
                            0,
                            FifOiCHzIrqNotify_SPEC,
                            crate::common::RW,
                        >::from_register(self, 0)
                    }
                }
                impl core::default::Default for FifOiCHzIrqNotify {
                    #[inline(always)]
                    fn default() -> FifOiCHzIrqNotify {
                        <crate::RegValueT<FifOiCHzIrqNotify_SPEC> as RegisterValue<_>>::new(5)
                    }
                }
            }
        }
    }
}
#[doc = "SPE"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Spe(pub(super) *mut u8);
unsafe impl core::marker::Send for Spe {}
unsafe impl core::marker::Sync for Spe {}
impl Spe {
    #[doc = "SPE0 Output Definition Register z\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn out_pat(&self) -> [crate::common::Reg<spe::OutPat_SPEC, crate::common::RW>; 8] {
        unsafe {
            [
                crate::common::Reg::from_ptr(self.0.add(0x8usize + 0x0usize)),
                crate::common::Reg::from_ptr(self.0.add(0x8usize + 0x4usize)),
                crate::common::Reg::from_ptr(self.0.add(0x8usize + 0x8usize)),
                crate::common::Reg::from_ptr(self.0.add(0x8usize + 0xcusize)),
                crate::common::Reg::from_ptr(self.0.add(0x8usize + 0x10usize)),
                crate::common::Reg::from_ptr(self.0.add(0x8usize + 0x14usize)),
                crate::common::Reg::from_ptr(self.0.add(0x8usize + 0x18usize)),
                crate::common::Reg::from_ptr(self.0.add(0x8usize + 0x1cusize)),
            ]
        }
    }
    #[doc = "SPE0 Command register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn spei_cmd(&self) -> crate::common::Reg<spe::SpEiCmd_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(76usize)) }
    }
    #[doc = "SPE0 Control Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn spei_ctrl_stat(
        &self,
    ) -> crate::common::Reg<spe::SpEiCtrlStat_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
    }
    #[doc = "SPE0 Control Status Register 2\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn spei_ctrl_stat2(
        &self,
    ) -> crate::common::Reg<spe::SpEiCtrlStat2_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(72usize)) }
    }
    #[doc = "SPE0 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn spei_eirq_en(
        &self,
    ) -> crate::common::Reg<spe::SpEiEirqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(60usize)) }
    }
    #[doc = "SPE0 Output Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn spei_out_ctrl(
        &self,
    ) -> crate::common::Reg<spe::SpEiOutCtrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(40usize)) }
    }
    #[doc = "SPE0 Input Pattern Definition Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn spei_pat(&self) -> crate::common::Reg<spe::SpEiPat_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
    }
    #[doc = "SPE0 Revolution Counter Compare Value\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn spei_rev_cmp(
        &self,
    ) -> crate::common::Reg<spe::SpEiRevCmp_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(68usize)) }
    }
    #[doc = "SPE0 Input Revolution Counter\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn spei_rev_cnt(
        &self,
    ) -> crate::common::Reg<spe::SpEiRevCnt_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(64usize)) }
    }
    #[doc = "IRQ"]
    #[inline(always)]
    pub fn irq(self) -> spe::Irq {
        unsafe { spe::Irq(self.0.add(44usize)) }
    }
}
pub mod spe {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct OutPat_SPEC;
    impl crate::sealed::RegSpec for OutPat_SPEC {
        type DataType = u32;
    }
    #[doc = "SPE0 Output Definition Register z\n resetvalue={Application Reset:0x0}"]
    pub type OutPat = crate::RegValueT<OutPat_SPEC>;

    impl OutPat {
        #[doc = "SPE output control value for TOM CH0 to TOM CH7. SPE OUT PAT n 1 n  defines output select signal of TOM i  CH n  with n 0...7 Current output control selection for SPE i  OUT 0..7 ."]
        #[inline(always)]
        pub fn spe_out_pat(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, OutPat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, OutPat_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for OutPat {
        #[inline(always)]
        fn default() -> OutPat {
            <crate::RegValueT<OutPat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct SpEiCmd_SPEC;
    impl crate::sealed::RegSpec for SpEiCmd_SPEC {
        type DataType = u32;
    }
    #[doc = "SPE0 Command register\n resetvalue={Application Reset:0x0}"]
    pub type SpEiCmd = crate::RegValueT<SpEiCmd_SPEC>;

    impl SpEiCmd {
        #[doc = "SPE control command"]
        #[inline(always)]
        pub fn spe_ctrl_cmd(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, SpEiCmd_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, SpEiCmd_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE updater trigger. 1   trigger update of SPE OUT CTRL with register selected by CTR CMD        multiplexer. This bit is automatically reset to 0."]
        #[inline(always)]
        pub fn spe_upd_trig(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, SpEiCmd_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,SpEiCmd_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for SpEiCmd {
        #[inline(always)]
        fn default() -> SpEiCmd {
            <crate::RegValueT<SpEiCmd_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct SpEiCtrlStat_SPEC;
    impl crate::sealed::RegSpec for SpEiCtrlStat_SPEC {
        type DataType = u32;
    }
    #[doc = "SPE0 Control Status Register\n resetvalue={Application Reset:0x0}"]
    pub type SpEiCtrlStat = crate::RegValueT<SpEiCtrlStat_SPEC>;

    impl SpEiCtrlStat {
        #[doc = "SPE Submodule enable"]
        #[inline(always)]
        pub fn en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, SpEiCtrlStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,SpEiCtrlStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE Input enable for TIM CHx 48 . When the input is disabled  a 0 signal is sampled for this input.        However  the bit field NIP of this register shows the true value of the        input signal."]
        #[inline(always)]
        pub fn sie0(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, SpEiCtrlStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,SpEiCtrlStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE Input enable for TIM CHy 48 . Coding see bit 1."]
        #[inline(always)]
        pub fn sie1(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, SpEiCtrlStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,SpEiCtrlStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE Input enable for TIM CHz 48 . Coding see bit 1."]
        #[inline(always)]
        pub fn sie2(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, SpEiCtrlStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<3,1,0,SpEiCtrlStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select trigger input signal. ETRIG SEL   0   ETRIG SEL   1  In case of ETRIG SEL 1  according to selected TOM CH x  TRIG CCU1          signal the configuration bits SPE TRIG and OSM of register          TOM CH x  CTRL have to be set in same TOM channel x to enable the          trigger signal generation in one shot mode."]
        #[inline(always)]
        pub fn trig_sel(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, SpEiCtrlStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, SpEiCtrlStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM input signal. The GTM supports up to 6 SPE modules.SPE0"]
        #[inline(always)]
        pub fn tim_sel(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, SpEiCtrlStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<6,1,0,SpEiCtrlStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Fast Shutoff Mode"]
        #[inline(always)]
        pub fn fsom(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, SpEiCtrlStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<7,1,0,SpEiCtrlStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Pattern selector for TOM output signals. Actual index into the SPE i  OUT PAT x  register table. Each register        SPE i  OUT PAT x  is fixed assigned to one bit field IPx PAT of register        SPE i  PAT. Thus  the pointer SPE i  PAT PTR represents an index to the        selected SPE i  OUT PAT x  register as well as the actual detected input        pattern IPx PAT."]
        #[inline(always)]
        pub fn spe_pat_ptr(
            self,
        ) -> crate::common::RegisterField<8, 0x7, 1, 0, u8, SpEiCtrlStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x7,1,0,u8, SpEiCtrlStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Actual input pattern that was detected by a regular input pattern change"]
        #[inline(always)]
        pub fn aip(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, SpEiCtrlStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, SpEiCtrlStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Actual rotation direction"]
        #[inline(always)]
        pub fn adir(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, SpEiCtrlStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<15,1,0,SpEiCtrlStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Previous input pattern that was detected by a regular input pattern change"]
        #[inline(always)]
        pub fn pip(
            self,
        ) -> crate::common::RegisterField<16, 0x7, 1, 0, u8, SpEiCtrlStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x7,1,0,u8, SpEiCtrlStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Previous rotation direction"]
        #[inline(always)]
        pub fn pdir(
            self,
        ) -> crate::common::RegisterFieldBool<19, 1, 0, SpEiCtrlStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<19,1,0,SpEiCtrlStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "New input pattern that was detected. This bit field mirrors the new input pattern. SPE internal functionality        is triggered on each change of this bit field."]
        #[inline(always)]
        pub fn nip(
            self,
        ) -> crate::common::RegisterField<20, 0x7, 1, 0, u8, SpEiCtrlStat_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<20,0x7,1,0,u8, SpEiCtrlStat_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Extended TRIG SEL. Extended trigger selection. Details described in TRIG SEL bit field. ETRIG SEL   0   ETRIG SEL   1  00   SPE i  NIPD selected   TOM CH6 TRIG CCU1 selected 01   TOM CH0 TRIG CCU0 selected   TOM CH7 TRIG CCU1 selected 10   TOM CH0 TRIG CCU1 selected   TOM CH8 TRIG CCU1 selected 11   TOM CH2 TRIG CCU1 selected   TOM CH9 TRIG CCU1 selected"]
        #[inline(always)]
        pub fn etrig_sel(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, SpEiCtrlStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<23,1,0,SpEiCtrlStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Fast Shutoff Level for TOM i  channel 0 to 7"]
        #[inline(always)]
        pub fn fsol(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, SpEiCtrlStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, SpEiCtrlStat_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for SpEiCtrlStat {
        #[inline(always)]
        fn default() -> SpEiCtrlStat {
            <crate::RegValueT<SpEiCtrlStat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct SpEiCtrlStat2_SPEC;
    impl crate::sealed::RegSpec for SpEiCtrlStat2_SPEC {
        type DataType = u32;
    }
    #[doc = "SPE0 Control Status Register 2\n resetvalue={Application Reset:0x0}"]
    pub type SpEiCtrlStat2 = crate::RegValueT<SpEiCtrlStat2_SPEC>;

    impl SpEiCtrlStat2 {
        #[doc = "Pattern selector for TOM output signals in case of SPE CTRL CMD   0b01  e.g. backward direction . Index into the SPE i  OUT PAT z  register table in case of SPE CTRL CMD          0b01 which may be used for backward direction. Each register SPE i  OUT PAT x  is fixed assigned to one bit field        IPx PAT of register SPE i  PAT. Thus  the pointer SPE i  PAT PTR BWD        represents an index to the selected SPE i  OUT PAT x  register as well        as the actual detected input pattern IPx PAT. The index pointer SPE PAT PTR BWD is used if SPE CTRL CMD  160   0b01. The index pointer SPE PAT PTR is used if SPE CTRL CMD  160    160 0b00  by        default ."]
        #[inline(always)]
        pub fn spe_pat_ptr_bwd(
            self,
        ) -> crate::common::RegisterField<8, 0x7, 1, 0, u8, SpEiCtrlStat2_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x7,1,0,u8, SpEiCtrlStat2_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for SpEiCtrlStat2 {
        #[inline(always)]
        fn default() -> SpEiCtrlStat2 {
            <crate::RegValueT<SpEiCtrlStat2_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct SpEiEirqEn_SPEC;
    impl crate::sealed::RegSpec for SpEiEirqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "SPE0 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type SpEiEirqEn = crate::RegValueT<SpEiEirqEn_SPEC>;

    impl SpEiEirqEn {
        #[doc = "SPE NIPD EIRQ interrupt enable"]
        #[inline(always)]
        pub fn spe_nipd_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, SpEiEirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,SpEiEirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE DCHG EIRQ error interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn spe_dchg_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, SpEiEirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,SpEiEirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE PERR EIRQ error interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn spe_perr_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, SpEiEirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,SpEiEirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE BIS EIRQ error interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn spe_bis_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, SpEiEirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,SpEiEirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE RCMP EIRQ error interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn spe_rcmp_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, SpEiEirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,SpEiEirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for SpEiEirqEn {
        #[inline(always)]
        fn default() -> SpEiEirqEn {
            <crate::RegValueT<SpEiEirqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct SpEiOutCtrl_SPEC;
    impl crate::sealed::RegSpec for SpEiOutCtrl_SPEC {
        type DataType = u32;
    }
    #[doc = "SPE0 Output Control Register\n resetvalue={Application Reset:0x0}"]
    pub type SpEiOutCtrl = crate::RegValueT<SpEiOutCtrl_SPEC>;

    impl SpEiOutCtrl {
        #[doc = "SPE output control value for TOM CH0 to TOM CH7. SPE OUT CTRL n 1 n  defines output select signal of TOM CHn. Current output control selection for SPE i  OUT 0..7 ."]
        #[inline(always)]
        pub fn spe_out_ctrl(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, SpEiOutCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, SpEiOutCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for SpEiOutCtrl {
        #[inline(always)]
        fn default() -> SpEiOutCtrl {
            <crate::RegValueT<SpEiOutCtrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct SpEiPat_SPEC;
    impl crate::sealed::RegSpec for SpEiPat_SPEC {
        type DataType = u32;
    }
    #[doc = "SPE0 Input Pattern Definition Register\n resetvalue={Application Reset:0x0}"]
    pub type SpEiPat = crate::RegValueT<SpEiPat_SPEC>;

    impl SpEiPat {
        #[doc = "Input pattern 7 is a valid pattern"]
        #[inline(always)]
        pub fn ip0_val(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, SpEiPat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,SpEiPat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input pattern 7   IP7 PAT. Bit field defines the input pattern z of the SPE input signals. Bit 1 defines the TIM i  CHx 48  input signal. Bit 2 defines the TIM i  CHy 48  input signal. Bit 3 defines the TIM i  CHz 48  input signal."]
        #[inline(always)]
        pub fn ip0_pat(
            self,
        ) -> crate::common::RegisterField<1, 0x7, 1, 0, u8, SpEiPat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<1,0x7,1,0,u8, SpEiPat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input pattern 7 is a valid pattern"]
        #[inline(always)]
        pub fn ip1_val(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, SpEiPat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,SpEiPat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input pattern 7   IP7 PAT. Bit field defines the input pattern z of the SPE input signals. Bit 1 defines the TIM i  CHx 48  input signal. Bit 2 defines the TIM i  CHy 48  input signal. Bit 3 defines the TIM i  CHz 48  input signal."]
        #[inline(always)]
        pub fn ip1_pat(
            self,
        ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, SpEiPat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<5,0x7,1,0,u8, SpEiPat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input pattern 7 is a valid pattern"]
        #[inline(always)]
        pub fn ip2_val(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, SpEiPat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<8,1,0,SpEiPat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input pattern 7   IP7 PAT. Bit field defines the input pattern z of the SPE input signals. Bit 1 defines the TIM i  CHx 48  input signal. Bit 2 defines the TIM i  CHy 48  input signal. Bit 3 defines the TIM i  CHz 48  input signal."]
        #[inline(always)]
        pub fn ip2_pat(
            self,
        ) -> crate::common::RegisterField<9, 0x7, 1, 0, u8, SpEiPat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<9,0x7,1,0,u8, SpEiPat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input pattern 7 is a valid pattern"]
        #[inline(always)]
        pub fn ip3_val(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, SpEiPat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<12,1,0,SpEiPat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input pattern 7   IP7 PAT. Bit field defines the input pattern z of the SPE input signals. Bit 1 defines the TIM i  CHx 48  input signal. Bit 2 defines the TIM i  CHy 48  input signal. Bit 3 defines the TIM i  CHz 48  input signal."]
        #[inline(always)]
        pub fn ip3_pat(
            self,
        ) -> crate::common::RegisterField<13, 0x7, 1, 0, u8, SpEiPat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<13,0x7,1,0,u8, SpEiPat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input pattern 7 is a valid pattern"]
        #[inline(always)]
        pub fn ip4_val(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, SpEiPat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,SpEiPat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input pattern 7   IP7 PAT. Bit field defines the input pattern z of the SPE input signals. Bit 1 defines the TIM i  CHx 48  input signal. Bit 2 defines the TIM i  CHy 48  input signal. Bit 3 defines the TIM i  CHz 48  input signal."]
        #[inline(always)]
        pub fn ip4_pat(
            self,
        ) -> crate::common::RegisterField<17, 0x7, 1, 0, u8, SpEiPat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<17,0x7,1,0,u8, SpEiPat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input pattern 7 is a valid pattern"]
        #[inline(always)]
        pub fn ip5_val(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, SpEiPat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,SpEiPat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input pattern 7   IP7 PAT. Bit field defines the input pattern z of the SPE input signals. Bit 1 defines the TIM i  CHx 48  input signal. Bit 2 defines the TIM i  CHy 48  input signal. Bit 3 defines the TIM i  CHz 48  input signal."]
        #[inline(always)]
        pub fn ip5_pat(
            self,
        ) -> crate::common::RegisterField<21, 0x7, 1, 0, u8, SpEiPat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<21,0x7,1,0,u8, SpEiPat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input pattern 7 is a valid pattern"]
        #[inline(always)]
        pub fn ip6_val(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, SpEiPat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,SpEiPat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input pattern 7   IP7 PAT. Bit field defines the input pattern z of the SPE input signals. Bit 1 defines the TIM i  CHx 48  input signal. Bit 2 defines the TIM i  CHy 48  input signal. Bit 3 defines the TIM i  CHz 48  input signal."]
        #[inline(always)]
        pub fn ip6_pat(
            self,
        ) -> crate::common::RegisterField<25, 0x7, 1, 0, u8, SpEiPat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<25,0x7,1,0,u8, SpEiPat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input pattern 7 is a valid pattern"]
        #[inline(always)]
        pub fn ip7_val(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, SpEiPat_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,SpEiPat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input pattern 7   IP7 PAT. Bit field defines the input pattern z of the SPE input signals. Bit 1 defines the TIM i  CHx 48  input signal. Bit 2 defines the TIM i  CHy 48  input signal. Bit 3 defines the TIM i  CHz 48  input signal."]
        #[inline(always)]
        pub fn ip7_pat(
            self,
        ) -> crate::common::RegisterField<29, 0x7, 1, 0, u8, SpEiPat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<29,0x7,1,0,u8, SpEiPat_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for SpEiPat {
        #[inline(always)]
        fn default() -> SpEiPat {
            <crate::RegValueT<SpEiPat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct SpEiRevCmp_SPEC;
    impl crate::sealed::RegSpec for SpEiRevCmp_SPEC {
        type DataType = u32;
    }
    #[doc = "SPE0 Revolution Counter Compare Value\n resetvalue={Application Reset:0x0}"]
    pub type SpEiRevCmp = crate::RegValueT<SpEiRevCmp_SPEC>;

    impl SpEiRevCmp {
        #[doc = "Input signal revolution counter compare value. The interrupt SPE i  RCMP is raised when the SPE i  REV CNT value equals the        SPE i  REV CMP register. It should be noted that SPE i  RCMP is only raised if an incrementation or decrementation of        SPE i  REV CNT is applied  due to an input signal change. Any update of        SPE i  REV CNT or SPE i  REV CMP via AEI does not raise a SPE i  RCMP interrupt."]
        #[inline(always)]
        pub fn rev_cmp(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, SpEiRevCmp_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, SpEiRevCmp_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for SpEiRevCmp {
        #[inline(always)]
        fn default() -> SpEiRevCmp {
            <crate::RegValueT<SpEiRevCmp_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct SpEiRevCnt_SPEC;
    impl crate::sealed::RegSpec for SpEiRevCnt_SPEC {
        type DataType = u32;
    }
    #[doc = "SPE0 Input Revolution Counter\n resetvalue={Application Reset:0x0}"]
    pub type SpEiRevCnt = crate::RegValueT<SpEiRevCnt_SPEC>;

    impl SpEiRevCnt {
        #[doc = "Input signal revolution counter. The counter is running if SPE module is enabled  bit SPE EN . REV CNT is incrementing if SPE PAT PTR is incrementing. REV CNT is decrementing if SPE PAT PTR is decrementing"]
        #[inline(always)]
        pub fn rev_cnt(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, SpEiRevCnt_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, SpEiRevCnt_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for SpEiRevCnt {
        #[inline(always)]
        fn default() -> SpEiRevCnt {
            <crate::RegValueT<SpEiRevCnt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc = "IRQ"]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Irq(pub(super) *mut u8);
    unsafe impl core::marker::Send for Irq {}
    unsafe impl core::marker::Sync for Irq {}
    impl Irq {
        #[doc = "SPE0 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn spei_irq_en(
            &self,
        ) -> crate::common::Reg<irq::SpEiIrqEn_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
        }
        #[doc = "SPE0 Interrupt Generation by Software\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn spei_irq_forcint(
            &self,
        ) -> crate::common::Reg<irq::SpEiIrqForcint_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
        }
        #[doc = "SPE0 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn spei_irq_mode(
            &self,
        ) -> crate::common::Reg<irq::SpEiIrqMode_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(12usize)) }
        }
        #[doc = "SPE0 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
        #[inline(always)]
        pub const fn spei_irq_notify(
            &self,
        ) -> crate::common::Reg<irq::SpEiIrqNotify_SPEC, crate::common::RW> {
            unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
        }
    }
    pub mod irq {
        #[allow(unused_imports)]
        use crate::common::*;
        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct SpEiIrqEn_SPEC;
        impl crate::sealed::RegSpec for SpEiIrqEn_SPEC {
            type DataType = u32;
        }
        #[doc = "SPE0 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
        pub type SpEiIrqEn = crate::RegValueT<SpEiIrqEn_SPEC>;

        impl SpEiIrqEn {
            #[doc = "SPE NIPD IRQ interrupt enable"]
            #[inline(always)]
            pub fn spe_nipd_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, SpEiIrqEn_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<0,1,0,SpEiIrqEn_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "SPE DCHG IRQ interrupt enable. Coding see bit 0."]
            #[inline(always)]
            pub fn spe_dchg_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, SpEiIrqEn_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<1,1,0,SpEiIrqEn_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "SPE PERR IRQ interrupt enable. Coding see bit 0."]
            #[inline(always)]
            pub fn spe_perr_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, SpEiIrqEn_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<2,1,0,SpEiIrqEn_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "SPE BIS IRQ interrupt enable. Coding see bit 0."]
            #[inline(always)]
            pub fn spe_bis_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, SpEiIrqEn_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<3,1,0,SpEiIrqEn_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "SPE RCMP IRQ interrupt enable. Coding see bit 0."]
            #[inline(always)]
            pub fn spe_rcmp_irq_en(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, SpEiIrqEn_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<4,1,0,SpEiIrqEn_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for SpEiIrqEn {
            #[inline(always)]
            fn default() -> SpEiIrqEn {
                <crate::RegValueT<SpEiIrqEn_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct SpEiIrqForcint_SPEC;
        impl crate::sealed::RegSpec for SpEiIrqForcint_SPEC {
            type DataType = u32;
        }
        #[doc = "SPE0 Interrupt Generation by Software\n resetvalue={Application Reset:0x0}"]
        pub type SpEiIrqForcint = crate::RegValueT<SpEiIrqForcint_SPEC>;

        impl SpEiIrqForcint {
            #[doc = "Force interrupt of SPE NIPD. This bit is cleared automatically after interrupt is released. This bit is write protected by bit RF PROT of register GTM CTRL."]
            #[inline(always)]
            pub fn trg_spe_nipd(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, SpEiIrqForcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<0,1,0,SpEiIrqForcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force interrupt of SPE DCHG. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_spe_dchg(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, SpEiIrqForcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<1,1,0,SpEiIrqForcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force interrupt of SPE PERR. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_spe_perr(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, SpEiIrqForcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<2,1,0,SpEiIrqForcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force interrupt of SPE BIS. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_spe_bis(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, SpEiIrqForcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<3,1,0,SpEiIrqForcint_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Force interrupt of SPE RCMP. Coding see bit 0."]
            #[inline(always)]
            pub fn trg_spe_rcmp(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, SpEiIrqForcint_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<4,1,0,SpEiIrqForcint_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for SpEiIrqForcint {
            #[inline(always)]
            fn default() -> SpEiIrqForcint {
                <crate::RegValueT<SpEiIrqForcint_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct SpEiIrqMode_SPEC;
        impl crate::sealed::RegSpec for SpEiIrqMode_SPEC {
            type DataType = u32;
        }
        #[doc = "SPE0 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
        pub type SpEiIrqMode = crate::RegValueT<SpEiIrqMode_SPEC>;

        impl SpEiIrqMode {
            #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
            #[inline(always)]
            pub fn irq_mode(
                self,
            ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, SpEiIrqMode_SPEC, crate::common::RW>
            {
                crate::common::RegisterField::<0,0x3,1,0,u8, SpEiIrqMode_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for SpEiIrqMode {
            #[inline(always)]
            fn default() -> SpEiIrqMode {
                <crate::RegValueT<SpEiIrqMode_SPEC> as RegisterValue<_>>::new(0)
            }
        }

        #[doc(hidden)]
        #[derive(Copy, Clone, Eq, PartialEq)]
        pub struct SpEiIrqNotify_SPEC;
        impl crate::sealed::RegSpec for SpEiIrqNotify_SPEC {
            type DataType = u32;
        }
        #[doc = "SPE0 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
        pub type SpEiIrqNotify = crate::RegValueT<SpEiIrqNotify_SPEC>;

        impl SpEiIrqNotify {
            #[doc = "New input pattern interrupt occurred. This bit will be cleared on a CPU write access of value 1.  As the bit is rw  otherwise no clear.  A read access leaves the bit unchanged."]
            #[inline(always)]
            pub fn spe_nipd(
                self,
            ) -> crate::common::RegisterFieldBool<0, 1, 0, SpEiIrqNotify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<0,1,0,SpEiIrqNotify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "SPE DIR bit changed on behalf of new input pattern. Coding see bit 0."]
            #[inline(always)]
            pub fn spe_dchg(
                self,
            ) -> crate::common::RegisterFieldBool<1, 1, 0, SpEiIrqNotify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<1,1,0,SpEiIrqNotify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Wrong or invalid pattern detected at input. Coding see bit 0."]
            #[inline(always)]
            pub fn spe_perr(
                self,
            ) -> crate::common::RegisterFieldBool<2, 1, 0, SpEiIrqNotify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<2,1,0,SpEiIrqNotify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "Bouncing input signal detected. Coding see bit 0."]
            #[inline(always)]
            pub fn spe_bis(
                self,
            ) -> crate::common::RegisterFieldBool<3, 1, 0, SpEiIrqNotify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<3,1,0,SpEiIrqNotify_SPEC,crate::common::RW>::from_register(self,0)
            }
            #[doc = "SPE revolution counter match event. Coding see bit 0."]
            #[inline(always)]
            pub fn spe_rcmp(
                self,
            ) -> crate::common::RegisterFieldBool<4, 1, 0, SpEiIrqNotify_SPEC, crate::common::RW>
            {
                crate::common::RegisterFieldBool::<4,1,0,SpEiIrqNotify_SPEC,crate::common::RW>::from_register(self,0)
            }
        }
        impl core::default::Default for SpEiIrqNotify {
            #[inline(always)]
            fn default() -> SpEiIrqNotify {
                <crate::RegValueT<SpEiIrqNotify_SPEC> as RegisterValue<_>>::new(0)
            }
        }
    }
}
#[doc = "TBU"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Tbu(pub(super) *mut u8);
unsafe impl core::marker::Send for Tbu {}
unsafe impl core::marker::Sync for Tbu {}
impl Tbu {
    #[doc = "TBU Channel 0 Base Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_base(&self) -> crate::common::Reg<tbu::Ch0Base_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
    }
    #[doc = "TBU Channel 0 Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_ctrl(&self) -> crate::common::Reg<tbu::Ch0Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
    }
    #[doc = "TBU Channel 1 Base Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_base(&self) -> crate::common::Reg<tbu::Ch1Base_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(16usize)) }
    }
    #[doc = "TBU Channel 1 Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_ctrl(&self) -> crate::common::Reg<tbu::Ch1Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(12usize)) }
    }
    #[doc = "TBU Channel 2 Base Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_base(&self) -> crate::common::Reg<tbu::Ch2Base_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(24usize)) }
    }
    #[doc = "TBU Channel 2 Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_ctrl(&self) -> crate::common::Reg<tbu::Ch2Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(20usize)) }
    }
    #[doc = "TBU Channel 3 Base Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_base(&self) -> crate::common::Reg<tbu::Ch3Base_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(32usize)) }
    }
    #[doc = "TBU Channel 3 Base Captured Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_base_capture(
        &self,
    ) -> crate::common::Reg<tbu::Ch3BaseCapture_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(40usize)) }
    }
    #[doc = "TBU Channel 3 Modulo Value Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_base_mark(
        &self,
    ) -> crate::common::Reg<tbu::Ch3BaseMark_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(36usize)) }
    }
    #[doc = "TBU Channel 3 Control Register\n resetvalue={Application Reset:0x1}"]
    #[inline(always)]
    pub const fn ch3_ctrl(&self) -> crate::common::Reg<tbu::Ch3Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(28usize)) }
    }
    #[doc = "TBU Global Channel Enable\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn chen(&self) -> crate::common::Reg<tbu::Chen_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
    }
}
pub mod tbu {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Base_SPEC;
    impl crate::sealed::RegSpec for Ch0Base_SPEC {
        type DataType = u32;
    }
    #[doc = "TBU Channel 0 Base Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Base = crate::RegValueT<Ch0Base_SPEC>;

    impl Ch0Base {
        #[doc = "Time base value for channel 0. The value of BASE can only be written if        the TBU channel 0 is disabled. If channel 0 is enabled  a read access to this register provides the        current value of the underlying 27 bit counter."]
        #[inline(always)]
        pub fn base(
            self,
        ) -> crate::common::RegisterField<0, 0x7ffffff, 1, 0, u32, Ch0Base_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x7ffffff,1,0,u32, Ch0Base_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Base {
        #[inline(always)]
        fn default() -> Ch0Base {
            <crate::RegValueT<Ch0Base_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch0Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TBU Channel 0 Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Ctrl = crate::RegValueT<Ch0Ctrl_SPEC>;

    impl Ch0Ctrl {
        #[doc = "TBU CH0 BASE register resolution. The two resolutions for the TBU channel 0 can be used in the TIM channel        0 and the DPLL sub modules. This value can only be modified if channel 0 is disabled."]
        #[inline(always)]
        pub fn low_res(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source for channel x  x 0...2  time base counter. This value can only be modified if channel 0 is disabled."]
        #[inline(always)]
        pub fn ch_clk_src(
            self,
        ) -> crate::common::RegisterField<1, 0x7, 1, 0, u8, Ch0Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<1,0x7,1,0,u8, Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Ctrl {
        #[inline(always)]
        fn default() -> Ch0Ctrl {
            <crate::RegValueT<Ch0Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Base_SPEC;
    impl crate::sealed::RegSpec for Ch1Base_SPEC {
        type DataType = u32;
    }
    #[doc = "TBU Channel 1 Base Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Base = crate::RegValueT<Ch1Base_SPEC>;

    impl Ch1Base {
        #[doc = "Time base value for channel y  y  1  2 . The value of BASE can only be written if        the corresponding TBU channel y is disabled. If the corresponding channel y is enabled  a read access to this        register provides the current value of the underlying counter."]
        #[inline(always)]
        pub fn base(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch1Base_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch1Base_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Base {
        #[inline(always)]
        fn default() -> Ch1Base {
            <crate::RegValueT<Ch1Base_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch1Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TBU Channel 1 Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Ctrl = crate::RegValueT<Ch1Ctrl_SPEC>;

    impl Ch1Ctrl {
        #[doc = "Channel mode. This value can only be modified if channel 1 is disabled. In Free        running counter mode the CMU clock source specified by CH CLK SRC is used for the counter. In Forward Backward counter mode the SUB INC1c clock signal in combination with the DIR1 input signal is used to determine the counter direction and clock        frequency."]
        #[inline(always)]
        pub fn ch_mode(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source for channel 1 time base counter. This value can only be modified if channel 1 was disabled"]
        #[inline(always)]
        pub fn ch_clk_src(
            self,
        ) -> crate::common::RegisterField<1, 0x7, 1, 0, u8, Ch1Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<1,0x7,1,0,u8, Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Ctrl {
        #[inline(always)]
        fn default() -> Ch1Ctrl {
            <crate::RegValueT<Ch1Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Base_SPEC;
    impl crate::sealed::RegSpec for Ch2Base_SPEC {
        type DataType = u32;
    }
    #[doc = "TBU Channel 2 Base Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Base = crate::RegValueT<Ch2Base_SPEC>;

    impl Ch2Base {
        #[doc = "Time base value for channel y  y  1  2 . The value of BASE can only be written if        the corresponding TBU channel y is disabled. If the corresponding channel y is enabled  a read access to this        register provides the current value of the underlying counter."]
        #[inline(always)]
        pub fn base(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch2Base_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch2Base_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Base {
        #[inline(always)]
        fn default() -> Ch2Base {
            <crate::RegValueT<Ch2Base_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch2Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TBU Channel 2 Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Ctrl = crate::RegValueT<Ch2Ctrl_SPEC>;

    impl Ch2Ctrl {
        #[doc = "Channel mode. This value can only be modified if channel 2 is disabled. In Free        running counter mode the CMU clock source specified by CH CLK SRC is used for the counter. In Forward Backward counter mode the SUB INC2c clock signal in combination with the DIR2 input signal is used to determine the counter direction and clock        frequency."]
        #[inline(always)]
        pub fn ch_mode(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source for channel 2 time base counter. This value can only be modified if channel 2 was disabled"]
        #[inline(always)]
        pub fn ch_clk_src(
            self,
        ) -> crate::common::RegisterField<1, 0x7, 1, 0, u8, Ch2Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<1,0x7,1,0,u8, Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Ctrl {
        #[inline(always)]
        fn default() -> Ch2Ctrl {
            <crate::RegValueT<Ch2Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Base_SPEC;
    impl crate::sealed::RegSpec for Ch3Base_SPEC {
        type DataType = u32;
    }
    #[doc = "TBU Channel 3 Base Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Base = crate::RegValueT<Ch3Base_SPEC>;

    impl Ch3Base {
        #[doc = "Time base value for channel 3. The value of BASE can only be written if        the corresponding TBU channel 3 is disabled. If the corresponding channel 3 is enabled  a read access to this        register provides the current value of the underlying counter."]
        #[inline(always)]
        pub fn base(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch3Base_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch3Base_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Base {
        #[inline(always)]
        fn default() -> Ch3Base {
            <crate::RegValueT<Ch3Base_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3BaseCapture_SPEC;
    impl crate::sealed::RegSpec for Ch3BaseCapture_SPEC {
        type DataType = u32;
    }
    #[doc = "TBU Channel 3 Base Captured Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3BaseCapture = crate::RegValueT<Ch3BaseCapture_SPEC>;

    impl Ch3BaseCapture {
        #[doc = "Captured value of time base channel 1 or 2. When USE CH2 0  TBU TS1 is captured  and if USE CH2 is set TBU TS2 is        captured."]
        #[inline(always)]
        pub fn base_capture(
            self,
        ) -> crate::common::RegisterField<
            0,
            0xffffff,
            1,
            0,
            u32,
            Ch3BaseCapture_SPEC,
            crate::common::R,
        > {
            crate::common::RegisterField::<
                0,
                0xffffff,
                1,
                0,
                u32,
                Ch3BaseCapture_SPEC,
                crate::common::R,
            >::from_register(self, 0)
        }
    }
    impl core::default::Default for Ch3BaseCapture {
        #[inline(always)]
        fn default() -> Ch3BaseCapture {
            <crate::RegValueT<Ch3BaseCapture_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3BaseMark_SPEC;
    impl crate::sealed::RegSpec for Ch3BaseMark_SPEC {
        type DataType = u32;
    }
    #[doc = "TBU Channel 3 Modulo Value Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3BaseMark = crate::RegValueT<Ch3BaseMark_SPEC>;

    impl Ch3BaseMark {
        #[doc = "Modulo value for channel 3. The value of BASE MARK can only be written        if the corresponding TBU channel 3 is disabled."]
        #[inline(always)]
        pub fn base_mark(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch3BaseMark_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<
                0,
                0xffffff,
                1,
                0,
                u32,
                Ch3BaseMark_SPEC,
                crate::common::RW,
            >::from_register(self, 0)
        }
    }
    impl core::default::Default for Ch3BaseMark {
        #[inline(always)]
        fn default() -> Ch3BaseMark {
            <crate::RegValueT<Ch3BaseMark_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch3Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TBU Channel 3 Control Register\n resetvalue={Application Reset:0x1}"]
    pub type Ch3Ctrl = crate::RegValueT<Ch3Ctrl_SPEC>;

    impl Ch3Ctrl {
        #[doc = "Channel mode. 1   Forward backward counter mode"]
        #[inline(always)]
        pub fn ch_mode(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch3Ctrl_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch3Ctrl_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Channel selector for modulo counter. This value can only be modified if channel 3 was disabled"]
        #[inline(always)]
        pub fn use_ch2(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Ctrl {
        #[inline(always)]
        fn default() -> Ch3Ctrl {
            <crate::RegValueT<Ch3Ctrl_SPEC> as RegisterValue<_>>::new(1)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Chen_SPEC;
    impl crate::sealed::RegSpec for Chen_SPEC {
        type DataType = u32;
    }
    #[doc = "TBU Global Channel Enable\n resetvalue={Application Reset:0x0}"]
    pub type Chen = crate::RegValueT<Chen_SPEC>;

    impl Chen {
        #[doc = "TBU channel 3 enable disable control. Write   Read"]
        #[inline(always)]
        pub fn endis_ch0(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Chen_SPEC, crate::common::RW> {
            crate::common::RegisterField::<0,0x3,1,0,u8, Chen_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TBU channel 3 enable disable control. Write   Read"]
        #[inline(always)]
        pub fn endis_ch1(
            self,
        ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, Chen_SPEC, crate::common::RW> {
            crate::common::RegisterField::<2,0x3,1,0,u8, Chen_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TBU channel 3 enable disable control. Write   Read"]
        #[inline(always)]
        pub fn endis_ch2(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Chen_SPEC, crate::common::RW> {
            crate::common::RegisterField::<4,0x3,1,0,u8, Chen_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TBU channel 3 enable disable control. Write   Read"]
        #[inline(always)]
        pub fn endis_ch3(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Chen_SPEC, crate::common::RW> {
            crate::common::RegisterField::<6,0x3,1,0,u8, Chen_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Chen {
        #[inline(always)]
        fn default() -> Chen {
            <crate::RegValueT<Chen_SPEC> as RegisterValue<_>>::new(0)
        }
    }
}
#[doc = "TIM"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Tim(pub(super) *mut u8);
unsafe impl core::marker::Send for Tim {}
unsafe impl core::marker::Sync for Tim {}
impl Tim {
    #[doc = "TIM0 Channel 7 SMU Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_cnt(&self) -> crate::common::Reg<tim::Ch0Cnt_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
    }
    #[doc = "TIM0 Channel 7 SMU Shadow Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_cnts(&self) -> crate::common::Reg<tim::Ch0Cnts_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(16usize)) }
    }
    #[doc = "TIM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_ctrl(&self) -> crate::common::Reg<tim::Ch0Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(36usize)) }
    }
    #[doc = "TIM0 Channel 7 SMU Edge Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_ecnt(&self) -> crate::common::Reg<tim::Ch0Ecnt_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(12usize)) }
    }
    #[doc = "TIM0 Channel 7 Extended Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_ectrl(&self) -> crate::common::Reg<tim::Ch0Ectrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(40usize)) }
    }
    #[doc = "TIM0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_eirq_en(&self) -> crate::common::Reg<tim::Ch0EirqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(60usize)) }
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 1 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_flt_fe(&self) -> crate::common::Reg<tim::Ch0FltFe_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(32usize)) }
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 0 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_flt_re(&self) -> crate::common::Reg<tim::Ch0FltRe_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(28usize)) }
    }
    #[doc = "TIM0 Channel 7 General Purpose 0 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_gpr0(&self) -> crate::common::Reg<tim::Ch0Gpr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
    }
    #[doc = "TIM0 Channel 7 General Purpose 1 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_gpr1(&self) -> crate::common::Reg<tim::Ch0Gpr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_irq_en(&self) -> crate::common::Reg<tim::Ch0IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(48usize)) }
    }
    #[doc = "TIM0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_irq_forcint(
        &self,
    ) -> crate::common::Reg<tim::Ch0IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(52usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_irq_mode(
        &self,
    ) -> crate::common::Reg<tim::Ch0IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(56usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_irq_notify(
        &self,
    ) -> crate::common::Reg<tim::Ch0IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(44usize)) }
    }
    #[doc = "TIM0 Channel 7 TDU Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_tduc(&self) -> crate::common::Reg<tim::Ch0Tduc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(20usize)) }
    }
    #[doc = "TIM0 Channel 7 TDU Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_tduv(&self) -> crate::common::Reg<tim::Ch0Tduv_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(24usize)) }
    }
    #[doc = "TIM0 Channel 7 SMU Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_cnt(&self) -> crate::common::Reg<tim::Ch1Cnt_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(136usize)) }
    }
    #[doc = "TIM0 Channel 7 SMU Shadow Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_cnts(&self) -> crate::common::Reg<tim::Ch1Cnts_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(144usize)) }
    }
    #[doc = "TIM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_ctrl(&self) -> crate::common::Reg<tim::Ch1Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(164usize)) }
    }
    #[doc = "TIM0 Channel 7 SMU Edge Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_ecnt(&self) -> crate::common::Reg<tim::Ch1Ecnt_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(140usize)) }
    }
    #[doc = "TIM0 Channel 7 Extended Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_ectrl(&self) -> crate::common::Reg<tim::Ch1Ectrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(168usize)) }
    }
    #[doc = "TIM0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_eirq_en(&self) -> crate::common::Reg<tim::Ch1EirqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(188usize)) }
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 1 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_flt_fe(&self) -> crate::common::Reg<tim::Ch1FltFe_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(160usize)) }
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 0 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_flt_re(&self) -> crate::common::Reg<tim::Ch1FltRe_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(156usize)) }
    }
    #[doc = "TIM0 Channel 7 General Purpose 0 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_gpr0(&self) -> crate::common::Reg<tim::Ch1Gpr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(128usize)) }
    }
    #[doc = "TIM0 Channel 7 General Purpose 1 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_gpr1(&self) -> crate::common::Reg<tim::Ch1Gpr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(132usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_irq_en(&self) -> crate::common::Reg<tim::Ch1IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(176usize)) }
    }
    #[doc = "TIM0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_irq_forcint(
        &self,
    ) -> crate::common::Reg<tim::Ch1IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(180usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_irq_mode(
        &self,
    ) -> crate::common::Reg<tim::Ch1IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(184usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_irq_notify(
        &self,
    ) -> crate::common::Reg<tim::Ch1IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(172usize)) }
    }
    #[doc = "TIM0 Channel 7 TDU Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_tduc(&self) -> crate::common::Reg<tim::Ch1Tduc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(148usize)) }
    }
    #[doc = "TIM0 Channel 7 TDU Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_tduv(&self) -> crate::common::Reg<tim::Ch1Tduv_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(152usize)) }
    }
    #[doc = "TIM0 Channel 7 SMU Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_cnt(&self) -> crate::common::Reg<tim::Ch2Cnt_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(264usize)) }
    }
    #[doc = "TIM0 Channel 7 SMU Shadow Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_cnts(&self) -> crate::common::Reg<tim::Ch2Cnts_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(272usize)) }
    }
    #[doc = "TIM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_ctrl(&self) -> crate::common::Reg<tim::Ch2Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(292usize)) }
    }
    #[doc = "TIM0 Channel 7 SMU Edge Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_ecnt(&self) -> crate::common::Reg<tim::Ch2Ecnt_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(268usize)) }
    }
    #[doc = "TIM0 Channel 7 Extended Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_ectrl(&self) -> crate::common::Reg<tim::Ch2Ectrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(296usize)) }
    }
    #[doc = "TIM0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_eirq_en(&self) -> crate::common::Reg<tim::Ch2EirqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(316usize)) }
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 1 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_flt_fe(&self) -> crate::common::Reg<tim::Ch2FltFe_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(288usize)) }
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 0 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_flt_re(&self) -> crate::common::Reg<tim::Ch2FltRe_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(284usize)) }
    }
    #[doc = "TIM0 Channel 7 General Purpose 0 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_gpr0(&self) -> crate::common::Reg<tim::Ch2Gpr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(256usize)) }
    }
    #[doc = "TIM0 Channel 7 General Purpose 1 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_gpr1(&self) -> crate::common::Reg<tim::Ch2Gpr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(260usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_irq_en(&self) -> crate::common::Reg<tim::Ch2IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(304usize)) }
    }
    #[doc = "TIM0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_irq_forcint(
        &self,
    ) -> crate::common::Reg<tim::Ch2IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(308usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_irq_mode(
        &self,
    ) -> crate::common::Reg<tim::Ch2IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(312usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_irq_notify(
        &self,
    ) -> crate::common::Reg<tim::Ch2IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(300usize)) }
    }
    #[doc = "TIM0 Channel 7 TDU Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_tduc(&self) -> crate::common::Reg<tim::Ch2Tduc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(276usize)) }
    }
    #[doc = "TIM0 Channel 7 TDU Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_tduv(&self) -> crate::common::Reg<tim::Ch2Tduv_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(280usize)) }
    }
    #[doc = "TIM0 Channel 7 SMU Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_cnt(&self) -> crate::common::Reg<tim::Ch3Cnt_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(392usize)) }
    }
    #[doc = "TIM0 Channel 7 SMU Shadow Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_cnts(&self) -> crate::common::Reg<tim::Ch3Cnts_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(400usize)) }
    }
    #[doc = "TIM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_ctrl(&self) -> crate::common::Reg<tim::Ch3Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(420usize)) }
    }
    #[doc = "TIM0 Channel 7 SMU Edge Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_ecnt(&self) -> crate::common::Reg<tim::Ch3Ecnt_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(396usize)) }
    }
    #[doc = "TIM0 Channel 7 Extended Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_ectrl(&self) -> crate::common::Reg<tim::Ch3Ectrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(424usize)) }
    }
    #[doc = "TIM0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_eirq_en(&self) -> crate::common::Reg<tim::Ch3EirqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(444usize)) }
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 1 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_flt_fe(&self) -> crate::common::Reg<tim::Ch3FltFe_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(416usize)) }
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 0 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_flt_re(&self) -> crate::common::Reg<tim::Ch3FltRe_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(412usize)) }
    }
    #[doc = "TIM0 Channel 7 General Purpose 0 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_gpr0(&self) -> crate::common::Reg<tim::Ch3Gpr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(384usize)) }
    }
    #[doc = "TIM0 Channel 7 General Purpose 1 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_gpr1(&self) -> crate::common::Reg<tim::Ch3Gpr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(388usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_irq_en(&self) -> crate::common::Reg<tim::Ch3IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(432usize)) }
    }
    #[doc = "TIM0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_irq_forcint(
        &self,
    ) -> crate::common::Reg<tim::Ch3IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(436usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_irq_mode(
        &self,
    ) -> crate::common::Reg<tim::Ch3IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(440usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_irq_notify(
        &self,
    ) -> crate::common::Reg<tim::Ch3IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(428usize)) }
    }
    #[doc = "TIM0 Channel 7 TDU Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_tduc(&self) -> crate::common::Reg<tim::Ch3Tduc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(404usize)) }
    }
    #[doc = "TIM0 Channel 7 TDU Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_tduv(&self) -> crate::common::Reg<tim::Ch3Tduv_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(408usize)) }
    }
    #[doc = "TIM0 Channel 7 SMU Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_cnt(&self) -> crate::common::Reg<tim::Ch4Cnt_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(520usize)) }
    }
    #[doc = "TIM0 Channel 7 SMU Shadow Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_cnts(&self) -> crate::common::Reg<tim::Ch4Cnts_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(528usize)) }
    }
    #[doc = "TIM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_ctrl(&self) -> crate::common::Reg<tim::Ch4Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(548usize)) }
    }
    #[doc = "TIM0 Channel 7 SMU Edge Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_ecnt(&self) -> crate::common::Reg<tim::Ch4Ecnt_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(524usize)) }
    }
    #[doc = "TIM0 Channel 7 Extended Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_ectrl(&self) -> crate::common::Reg<tim::Ch4Ectrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(552usize)) }
    }
    #[doc = "TIM0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_eirq_en(&self) -> crate::common::Reg<tim::Ch4EirqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(572usize)) }
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 1 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_flt_fe(&self) -> crate::common::Reg<tim::Ch4FltFe_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(544usize)) }
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 0 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_flt_re(&self) -> crate::common::Reg<tim::Ch4FltRe_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(540usize)) }
    }
    #[doc = "TIM0 Channel 7 General Purpose 0 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_gpr0(&self) -> crate::common::Reg<tim::Ch4Gpr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(512usize)) }
    }
    #[doc = "TIM0 Channel 7 General Purpose 1 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_gpr1(&self) -> crate::common::Reg<tim::Ch4Gpr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(516usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_irq_en(&self) -> crate::common::Reg<tim::Ch4IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(560usize)) }
    }
    #[doc = "TIM0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_irq_forcint(
        &self,
    ) -> crate::common::Reg<tim::Ch4IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(564usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_irq_mode(
        &self,
    ) -> crate::common::Reg<tim::Ch4IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(568usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_irq_notify(
        &self,
    ) -> crate::common::Reg<tim::Ch4IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(556usize)) }
    }
    #[doc = "TIM0 Channel 7 TDU Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_tduc(&self) -> crate::common::Reg<tim::Ch4Tduc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(532usize)) }
    }
    #[doc = "TIM0 Channel 7 TDU Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_tduv(&self) -> crate::common::Reg<tim::Ch4Tduv_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(536usize)) }
    }
    #[doc = "TIM0 Channel 7 SMU Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_cnt(&self) -> crate::common::Reg<tim::Ch5Cnt_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(648usize)) }
    }
    #[doc = "TIM0 Channel 7 SMU Shadow Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_cnts(&self) -> crate::common::Reg<tim::Ch5Cnts_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(656usize)) }
    }
    #[doc = "TIM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_ctrl(&self) -> crate::common::Reg<tim::Ch5Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(676usize)) }
    }
    #[doc = "TIM0 Channel 7 SMU Edge Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_ecnt(&self) -> crate::common::Reg<tim::Ch5Ecnt_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(652usize)) }
    }
    #[doc = "TIM0 Channel 7 Extended Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_ectrl(&self) -> crate::common::Reg<tim::Ch5Ectrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(680usize)) }
    }
    #[doc = "TIM0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_eirq_en(&self) -> crate::common::Reg<tim::Ch5EirqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(700usize)) }
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 1 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_flt_fe(&self) -> crate::common::Reg<tim::Ch5FltFe_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(672usize)) }
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 0 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_flt_re(&self) -> crate::common::Reg<tim::Ch5FltRe_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(668usize)) }
    }
    #[doc = "TIM0 Channel 7 General Purpose 0 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_gpr0(&self) -> crate::common::Reg<tim::Ch5Gpr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(640usize)) }
    }
    #[doc = "TIM0 Channel 7 General Purpose 1 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_gpr1(&self) -> crate::common::Reg<tim::Ch5Gpr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(644usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_irq_en(&self) -> crate::common::Reg<tim::Ch5IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(688usize)) }
    }
    #[doc = "TIM0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_irq_forcint(
        &self,
    ) -> crate::common::Reg<tim::Ch5IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(692usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_irq_mode(
        &self,
    ) -> crate::common::Reg<tim::Ch5IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(696usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_irq_notify(
        &self,
    ) -> crate::common::Reg<tim::Ch5IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(684usize)) }
    }
    #[doc = "TIM0 Channel 7 TDU Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_tduc(&self) -> crate::common::Reg<tim::Ch5Tduc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(660usize)) }
    }
    #[doc = "TIM0 Channel 7 TDU Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_tduv(&self) -> crate::common::Reg<tim::Ch5Tduv_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(664usize)) }
    }
    #[doc = "TIM0 Channel 7 SMU Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_cnt(&self) -> crate::common::Reg<tim::Ch6Cnt_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(776usize)) }
    }
    #[doc = "TIM0 Channel 7 SMU Shadow Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_cnts(&self) -> crate::common::Reg<tim::Ch6Cnts_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(784usize)) }
    }
    #[doc = "TIM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_ctrl(&self) -> crate::common::Reg<tim::Ch6Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(804usize)) }
    }
    #[doc = "TIM0 Channel 7 SMU Edge Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_ecnt(&self) -> crate::common::Reg<tim::Ch6Ecnt_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(780usize)) }
    }
    #[doc = "TIM0 Channel 7 Extended Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_ectrl(&self) -> crate::common::Reg<tim::Ch6Ectrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(808usize)) }
    }
    #[doc = "TIM0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_eirq_en(&self) -> crate::common::Reg<tim::Ch6EirqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(828usize)) }
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 1 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_flt_fe(&self) -> crate::common::Reg<tim::Ch6FltFe_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(800usize)) }
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 0 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_flt_re(&self) -> crate::common::Reg<tim::Ch6FltRe_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(796usize)) }
    }
    #[doc = "TIM0 Channel 7 General Purpose 0 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_gpr0(&self) -> crate::common::Reg<tim::Ch6Gpr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(768usize)) }
    }
    #[doc = "TIM0 Channel 7 General Purpose 1 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_gpr1(&self) -> crate::common::Reg<tim::Ch6Gpr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(772usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_irq_en(&self) -> crate::common::Reg<tim::Ch6IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(816usize)) }
    }
    #[doc = "TIM0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_irq_forcint(
        &self,
    ) -> crate::common::Reg<tim::Ch6IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(820usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_irq_mode(
        &self,
    ) -> crate::common::Reg<tim::Ch6IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(824usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_irq_notify(
        &self,
    ) -> crate::common::Reg<tim::Ch6IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(812usize)) }
    }
    #[doc = "TIM0 Channel 7 TDU Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_tduc(&self) -> crate::common::Reg<tim::Ch6Tduc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(788usize)) }
    }
    #[doc = "TIM0 Channel 7 TDU Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_tduv(&self) -> crate::common::Reg<tim::Ch6Tduv_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(792usize)) }
    }
    #[doc = "TIM0 Channel 7 SMU Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_cnt(&self) -> crate::common::Reg<tim::Ch7Cnt_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(904usize)) }
    }
    #[doc = "TIM0 Channel 7 SMU Shadow Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_cnts(&self) -> crate::common::Reg<tim::Ch7Cnts_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(912usize)) }
    }
    #[doc = "TIM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_ctrl(&self) -> crate::common::Reg<tim::Ch7Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(932usize)) }
    }
    #[doc = "TIM0 Channel 7 SMU Edge Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_ecnt(&self) -> crate::common::Reg<tim::Ch7Ecnt_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(908usize)) }
    }
    #[doc = "TIM0 Channel 7 Extended Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_ectrl(&self) -> crate::common::Reg<tim::Ch7Ectrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(936usize)) }
    }
    #[doc = "TIM0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_eirq_en(&self) -> crate::common::Reg<tim::Ch7EirqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(956usize)) }
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 1 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_flt_fe(&self) -> crate::common::Reg<tim::Ch7FltFe_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(928usize)) }
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 0 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_flt_re(&self) -> crate::common::Reg<tim::Ch7FltRe_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(924usize)) }
    }
    #[doc = "TIM0 Channel 7 General Purpose 0 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_gpr0(&self) -> crate::common::Reg<tim::Ch7Gpr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(896usize)) }
    }
    #[doc = "TIM0 Channel 7 General Purpose 1 Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_gpr1(&self) -> crate::common::Reg<tim::Ch7Gpr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(900usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_irq_en(&self) -> crate::common::Reg<tim::Ch7IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(944usize)) }
    }
    #[doc = "TIM0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_irq_forcint(
        &self,
    ) -> crate::common::Reg<tim::Ch7IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(948usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_irq_mode(
        &self,
    ) -> crate::common::Reg<tim::Ch7IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(952usize)) }
    }
    #[doc = "TIM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_irq_notify(
        &self,
    ) -> crate::common::Reg<tim::Ch7IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(940usize)) }
    }
    #[doc = "TIM0 Channel 7 TDU Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_tduc(&self) -> crate::common::Reg<tim::Ch7Tduc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(916usize)) }
    }
    #[doc = "TIM0 Channel 7 TDU Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_tduv(&self) -> crate::common::Reg<tim::Ch7Tduv_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(920usize)) }
    }
    #[doc = "TIM0 Input Value Observation Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn timi_inp_val(&self) -> crate::common::Reg<tim::TiMiInpVal_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(116usize)) }
    }
    #[doc = "TIM0 AUX IN Source Selection Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn timi_in_src(&self) -> crate::common::Reg<tim::TiMiInSrc_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(120usize)) }
    }
    #[doc = "TIM0 Global Software Reset Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn timi_rst(&self) -> crate::common::Reg<tim::TiMiRst_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(124usize)) }
    }
}
pub mod tim {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Cnt_SPEC;
    impl crate::sealed::RegSpec for Ch0Cnt_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Cnt = crate::RegValueT<Ch0Cnt_SPEC>;

    impl Ch0Cnt {
        #[doc = "Actual SMU counter value. The meaning of this value depends on the configured mode  TPWM   actual duration of PWM signal.TPIM   actual duration of all        pulses  sum of pulses .TIEM   actual number of received edges.TIPM          actual number of received edges.TGPS   elapsed time for periodic        sampling.TSSM   shift data."]
        #[inline(always)]
        pub fn cnt(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch0Cnt_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch0Cnt_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Cnt {
        #[inline(always)]
        fn default() -> Ch0Cnt {
            <crate::RegValueT<Ch0Cnt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Cnts_SPEC;
    impl crate::sealed::RegSpec for Ch0Cnts_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Shadow Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Cnts = crate::RegValueT<Ch0Cnts_SPEC>;

    impl Ch0Cnts {
        #[doc = "Counter shadow register. The content of this register has different meaning for the TIM channels        modes. The content depends directly on the bit field CNTS SEL of register TIM i  CH x  CTRL . The register TIM i  CH x  CNTS is only        writable in TIPM TBCM  TGPS and TSSM mode."]
        #[inline(always)]
        pub fn cnts(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch0Cnts_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch0Cnts_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter   ECNT. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch0Cnts_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch0Cnts_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Cnts {
        #[inline(always)]
        fn default() -> Ch0Cnts {
            <crate::RegValueT<Ch0Cnts_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch0Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Ctrl = crate::RegValueT<Ch0Ctrl_SPEC>;

    impl Ch0Ctrl {
        #[doc = "TIM channel x enable. Enabling of the channel resets the registers ECNT         TIM i  CH x  CNT  TIM i  CH x  GPR0  and TIM i  CH x  GPR1 to their reset values. After finishing the action in one shot mode the TIM EN bit is cleared automatically. Otherwise  the bit must be cleared        manually."]
        #[inline(always)]
        pub fn tim_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM channel x mode. If an undefined value is written to the TIM MODE register  the hardware        switches automatically to TIM MODE   0b000  TPWM mode . The TIM MODE register should not be changed while the TIM channel is        enabled. If the TIM channel is enabled and operating in TPWM or TPIM mode after        the first valid edge defined by DSL has occurred  a reconfiguration of        DSL ISL TIM MODE will not change the channel behavior. Reading these bit        fields after reconfiguration will show the newly configured settings but        the initial channel behavior will not change. Only a disabling of the        TIM channel by setting TIM EN  0 and reenabling with TIM EN  1 will        change the channel operation mode."]
        #[inline(always)]
        pub fn tim_mode(
            self,
        ) -> crate::common::RegisterField<1, 0x7, 1, 0, u8, Ch0Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<1,0x7,1,0,u8, Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. After finishing the action in one shot mode the TIM EN bit is cleared automatically."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "GPR0 and GPR1 register values routed to ARU"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Channel Input Control"]
        #[inline(always)]
        pub fn cictrl(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TBU TS0 bits input select for TIM0 CH x  GPRz  z  0  1 . This bit is only applicable for TIM0."]
        #[inline(always)]
        pub fn tbu0_sel(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for GPR0 register. If EGPR0 SEL  0   EGPR0 SEL  1   If a reserved value is written to the EGPR0 SEL  GPR0 SEL bit fields         the hardware will use TBU TS0 input."]
        #[inline(always)]
        pub fn gpr0_sel(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Ch0Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for GPR1 register. If EGPR1 SEL  0   EGPR1 SEL  1  If a reserved value is written to the EGPR1 SEL  GPR1 SEL bit fields         the hardware will use TBU TS0 input. Note  In TBCM mode  EGPR1 SEL 1         GPR1 SEL 01 selects TIM INP VAL as input  in all other cases  TIM Filter        F OUT is used."]
        #[inline(always)]
        pub fn gpr1_sel(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, Ch0Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for CNTS register. The functionality of the CNTS SEL is        disabled in the modes TIPM TGPS and TBCM. CNTS SEL in TSSM mode selects the source        signal for registered or latched shift out operation. 0 B   160   160   160   160   160 use F OUTx 1 B   160   160   160   160   160 use TIM INx"]
        #[inline(always)]
        pub fn cnts_sel(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<12,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control. In TIM MODE 0b110  TSSM   the bit field DSL defines the shift direction. 0 B   160   160   160   160   160 Shift left 1 B   160   160   160   160   160 Shift right"]
        #[inline(always)]
        pub fn dsl(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<13,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Ignore signal level. This bit is mode dependent and will have different meanings  see details        in the TIM Channel mode description ."]
        #[inline(always)]
        pub fn isl(
            self,
        ) -> crate::common::RegisterFieldBool<14, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<14,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enables resetting of counter in certain modes. If TIM MODE 0b101  TGPS    TIM MODE 0b000  TPWM  else ECNT counter operating in wrap around mode  In TIM MODE 0b110  TSSM   the bit field ECNT RESET defines the initial        polarity for the shift register."]
        #[inline(always)]
        pub fn ecnt_reset(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter enable for channel x. If the filter is disabled  all filter related units  including CSU  are        bypassed  which means that the signal F IN is directly routed to signal F OUT ."]
        #[inline(always)]
        pub fn flt_en(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter frequency select"]
        #[inline(always)]
        pub fn flt_cnt_frq(
            self,
        ) -> crate::common::RegisterField<17, 0x3, 1, 0, u8, Ch0Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<17,0x3,1,0,u8, Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enables external capture mode. The selected TIM mode is only sensitive to external capture pulses the        input event changes are ignored."]
        #[inline(always)]
        pub fn ext_cap_en(
            self,
        ) -> crate::common::RegisterFieldBool<19, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<19,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter mode for rising edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_mode_re(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter mode for rising edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_ctr_re(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter mode for falling edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_mode_fe(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter mode for falling edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_ctr_fe(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CMU clock source select for channel. If ECLK SEL  0   ECLK SEL  1"]
        #[inline(always)]
        pub fn clk_sel(
            self,
        ) -> crate::common::RegisterField<24, 0x7, 1, 0, u8, Ch0Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x7,1,0,u8, Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended Edge counter overflow behavior"]
        #[inline(always)]
        pub fn fr_ecnt_ofl(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of GPR0 SEL bit field. Details described in GPR0 SEL bit field."]
        #[inline(always)]
        pub fn egpr0_sel(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of GPR1 SEL bit field. Details described in GPR1 SEL bit field."]
        #[inline(always)]
        pub fn egpr1_sel(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout control. It has to be mentioned that writing of TOCTRL  0 will every time stop        the TDU  independent of the previous state of TOCTRL."]
        #[inline(always)]
        pub fn toctrl(
            self,
        ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, Ch0Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<30,0x3,1,0,u8, Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Ctrl {
        #[inline(always)]
        fn default() -> Ch0Ctrl {
            <crate::RegValueT<Ch0Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Ecnt_SPEC;
    impl crate::sealed::RegSpec for Ch0Ecnt_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Edge Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Ecnt = crate::RegValueT<Ch0Ecnt_SPEC>;

    impl Ch0Ecnt {
        #[doc = "Edge counter. If TIM channel is disabled the content of ECNT gets frozen. A read will        auto clear the bits  15 1 . Further read accesses to ECNT will show on        Bit 0 the actual input signal value of the channel."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch0Ecnt_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch0Ecnt_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Ecnt {
        #[inline(always)]
        fn default() -> Ch0Ecnt {
            <crate::RegValueT<Ch0Ecnt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Ectrl_SPEC;
    impl crate::sealed::RegSpec for Ch0Ectrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Extended Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Ectrl = crate::RegValueT<Ch0Ectrl_SPEC>;

    impl Ch0Ectrl {
        #[doc = "Defines selected source for triggering the EXT CAPTURE functionality"]
        #[inline(always)]
        pub fn ext_cap_src(
            self,
        ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Ch0Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xf,1,0,u8, Ch0Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input data source for TDU"]
        #[inline(always)]
        pub fn use_prev_tdu_in(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch0Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch0Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "selection of source for TODET IRQ. With TODET IRQ SRC 0b00 the ACB bit 2 will be driven by signal        tdu timeout evt  if TODET IRQ SRC  0b00 ACB2 will be 0."]
        #[inline(always)]
        pub fn todet_irq_src(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Ch0Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, Ch0Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will start the TDU unit. In mode SLICING 0b11 every start restart will load the TO CNT with value        TOV2. Note  tdu start 000 event is defined as  Each writing of TOCTRL           0  independent of current TOCTRL  while TDU START 0b000 and TDU is        stopped  initially or stopped by TDU STOP event . This event will last 1        system clock cycle."]
        #[inline(always)]
        pub fn tdu_start(
            self,
        ) -> crate::common::RegisterField<8, 0x7, 1, 0, u8, Ch0Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x7,1,0,u8, Ch0Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will stop the TDU unit. Note  tdu toctrl 0 event is defined as  Each writing of TOCTRL   0         independent of current TOCTRL  while TDU is started. This event will        last 1 system clock cycle."]
        #[inline(always)]
        pub fn tdu_stop(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch0Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch0Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will resynchronize the TDU unit. Encoding see Table  160 14 and Table  160 15 ."]
        #[inline(always)]
        pub fn tdu_resync(
            self,
        ) -> crate::common::RegisterField<16, 0xf, 1, 0, u8, Ch0Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xf,1,0,u8, Ch0Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Generate Filter input by lookup table"]
        #[inline(always)]
        pub fn use_lut(
            self,
        ) -> crate::common::RegisterField<22, 0x3, 1, 0, u8, Ch0Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<22,0x3,1,0,u8, Ch0Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field FLT CTR RE. Details described in FLT CTR RE bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eflt_ctr_re(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch0Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch0Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field FLT CTR FE. Details described in FLT CTR FE bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eflt_ctr_fe(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch0Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch0Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Swap point of time of capturing CNTS and GPR1. This bit is only applicable in TPWM and TPIM mode. Set to 0 in all other        modes."]
        #[inline(always)]
        pub fn swap_capture(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch0Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch0Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Start immediately the measurement. This bit is only applicable in TPWM and TPIM mode. Set to 0 in all other        modes."]
        #[inline(always)]
        pub fn imm_start(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch0Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch0Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field CLK SEL. Details described in CLK SEL bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eclk_sel(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch0Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch0Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input data source for TIM channel"]
        #[inline(always)]
        pub fn use_prev_ch_in(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch0Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch0Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Ectrl {
        #[inline(always)]
        fn default() -> Ch0Ectrl {
            <crate::RegValueT<Ch0Ectrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0EirqEn_SPEC;
    impl crate::sealed::RegSpec for Ch0EirqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0EirqEn = crate::RegValueT<Ch0EirqEn_SPEC>;

    impl Ch0EirqEn {
        #[doc = "TIM NEWVALx EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn newval_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch0EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch0EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM ECNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ecntofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch0EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch0EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM CNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn cntofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch0EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch0EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GPROFL IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn gprofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch0EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch0EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM TODETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn todet_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch0EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch0EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GLITCHDETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn glitchdet_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch0EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch0EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0EirqEn {
        #[inline(always)]
        fn default() -> Ch0EirqEn {
            <crate::RegValueT<Ch0EirqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0FltFe_SPEC;
    impl crate::sealed::RegSpec for Ch0FltFe_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 1 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0FltFe = crate::RegValueT<Ch0FltFe_SPEC>;

    impl Ch0FltFe {
        #[doc = "Filter parameter for falling edge. FLT FE has different meanings in the various filter modes.Immediate edge propagation mode   acceptance time for falling edge Individual deglitch time mode   deglitch time for falling edge."]
        #[inline(always)]
        pub fn flt_fe(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch0FltFe_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch0FltFe_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0FltFe {
        #[inline(always)]
        fn default() -> Ch0FltFe {
            <crate::RegValueT<Ch0FltFe_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0FltRe_SPEC;
    impl crate::sealed::RegSpec for Ch0FltRe_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 0 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0FltRe = crate::RegValueT<Ch0FltRe_SPEC>;

    impl Ch0FltRe {
        #[doc = "Filter parameter for rising edge. FLT RE has different meanings in the various filter modes.Immediate edge        propagation mode   acceptance time for rising edgeIndividual deglitch        time mode   deglitch time for rising edge."]
        #[inline(always)]
        pub fn flt_re(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch0FltRe_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch0FltRe_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0FltRe {
        #[inline(always)]
        fn default() -> Ch0FltRe {
            <crate::RegValueT<Ch0FltRe_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Gpr0_SPEC;
    impl crate::sealed::RegSpec for Ch0Gpr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 General Purpose 0 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Gpr0 = crate::RegValueT<Ch0Gpr0_SPEC>;

    impl Ch0Gpr0 {
        #[doc = "Input signal characteristic parameter 0. The content of this register has different meaning for the TIM channels        modes. The content directly depends on the bit fields EGPR0 SEL   GPR0 SEL of register TIM i  CH x  CTRL . Note  The content of this register can only        be written in TIM channel mode TSSM."]
        #[inline(always)]
        pub fn gpr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch0Gpr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch0Gpr0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch0Gpr0_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch0Gpr0_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Gpr0 {
        #[inline(always)]
        fn default() -> Ch0Gpr0 {
            <crate::RegValueT<Ch0Gpr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Gpr1_SPEC;
    impl crate::sealed::RegSpec for Ch0Gpr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 General Purpose 1 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Gpr1 = crate::RegValueT<Ch0Gpr1_SPEC>;

    impl Ch0Gpr1 {
        #[doc = "Input signal characteristic parameter 1. The content of this register has different meaning for the TIM channels        modes. The content directly depends on the bit fields EGPR1 SEL   GPR1 SEL of register TIM i  CH x  CTRL . In TBCM mode if EGPR1 SEL 1  GPR1 SEL 01 then TIM INP VAL is used as        input in all other cases TIM Filter F OUT is used as input and Bits        GPR1 23 8    0 The content of this register can only be written in TIM channel mode        TGPS and TSSM."]
        #[inline(always)]
        pub fn gpr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch0Gpr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch0Gpr1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch0Gpr1_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch0Gpr1_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Gpr1 {
        #[inline(always)]
        fn default() -> Ch0Gpr1 {
            <crate::RegValueT<Ch0Gpr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch0IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0IrqEn = crate::RegValueT<Ch0IrqEn_SPEC>;

    impl Ch0IrqEn {
        #[doc = "TIM NEWVALx IRQ interrupt enable"]
        #[inline(always)]
        pub fn newval_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch0IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch0IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM ECNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ecntofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch0IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch0IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM CNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn cntofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch0IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch0IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GPROFL IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn gprofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch0IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch0IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM TODETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn todet_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch0IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch0IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GLITCHDETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn glitchdet_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch0IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch0IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0IrqEn {
        #[inline(always)]
        fn default() -> Ch0IrqEn {
            <crate::RegValueT<Ch0IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch0IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0IrqForcint = crate::RegValueT<Ch0IrqForcint_SPEC>;

    impl Ch0IrqForcint {
        #[doc = "Trigger NEWVAL bit in TIM CHx IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_newval(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch0IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch0IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger ECNTOFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_ecntofl(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch0IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch0IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger CNTOFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_cntofl(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch0IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch0IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger GPROFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_gprofl(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch0IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<3,1,0,Ch0IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TODET bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_todet(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch0IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<4,1,0,Ch0IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger GLITCHDET bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_glitchdet(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch0IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<5,1,0,Ch0IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0IrqForcint {
        #[inline(always)]
        fn default() -> Ch0IrqForcint {
            <crate::RegValueT<Ch0IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch0IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0IrqMode = crate::RegValueT<Ch0IrqMode_SPEC>;

    impl Ch0IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch0IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch0IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0IrqMode {
        #[inline(always)]
        fn default() -> Ch0IrqMode {
            <crate::RegValueT<Ch0IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch0IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0IrqNotify = crate::RegValueT<Ch0IrqNotify_SPEC>;

    impl Ch0IrqNotify {
        #[doc = "New measurement value detected by in channel x. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
        #[inline(always)]
        pub fn newval(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch0IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch0IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "counter overflow of channel x. See bit 0."]
        #[inline(always)]
        pub fn ecntofl(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch0IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch0IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SMU CNT counter overflow of channel x. See bit 0."]
        #[inline(always)]
        pub fn cntofl(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch0IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch0IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "GPR0 and GPR1 data overflow. Old data not read out before new data has arrived at input pin. See bit        0."]
        #[inline(always)]
        pub fn gprofl(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch0IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<3,1,0,Ch0IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout reached for input signal of channel x. See bit 0."]
        #[inline(always)]
        pub fn todet(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch0IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<4,1,0,Ch0IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Glitch detected on channel x   x 0...m 1 . This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
        #[inline(always)]
        pub fn glitchdet(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch0IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<5,1,0,Ch0IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0IrqNotify {
        #[inline(always)]
        fn default() -> Ch0IrqNotify {
            <crate::RegValueT<Ch0IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Tduc_SPEC;
    impl crate::sealed::RegSpec for Ch0Tduc_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 TDU Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Tduc = crate::RegValueT<Ch0Tduc_SPEC>;

    impl Ch0Tduc {
        #[doc = "Current Timeout value slice0 for channel x. SLICING    0b11  counter will be reset to 0X0 on TDU RESYNC condition. SLICING   0b11   counter will be loaded with TOV2 on TDU RESYNC        condition."]
        #[inline(always)]
        pub fn to_cnt(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch0Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch0Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Current Timeout value slice1 for channel x. Counter will be reset to 0x0 on TDU RESYNC condition."]
        #[inline(always)]
        pub fn to_cnt1(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Ch0Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, Ch0Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Current Timeout value slice2 for channel x. Counter will be reset to 0x0 on TDU RESYNC condition."]
        #[inline(always)]
        pub fn to_cnt2(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Ch0Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, Ch0Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Tduc {
        #[inline(always)]
        fn default() -> Ch0Tduc {
            <crate::RegValueT<Ch0Tduc_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Tduv_SPEC;
    impl crate::sealed::RegSpec for Ch0Tduv_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 TDU Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Tduv = crate::RegValueT<Ch0Tduv_SPEC>;

    impl Ch0Tduv {
        #[doc = "Time out compare value slice0 for channel x. Compare value for TO CNT."]
        #[inline(always)]
        pub fn tov(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch0Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch0Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Time out compare value slice1 for channel x. Compare value for TO CNT1."]
        #[inline(always)]
        pub fn tov1(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Ch0Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, Ch0Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Time out compare value slice2 for channel x. SLICING  0b11  Compare value for TO CNT2. SLICING  0b11  TOV2 operate as a shadow register for TO CNT."]
        #[inline(always)]
        pub fn tov2(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Ch0Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, Ch0Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Cascading of counter slices. If USE LUT 0b00   USE LUT   0b00"]
        #[inline(always)]
        pub fn slicing(
            self,
        ) -> crate::common::RegisterField<24, 0x3, 1, 0, u8, Ch0Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x3,1,0,u8, Ch0Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use tdu sample evt as Timeout Clock"]
        #[inline(always)]
        pub fn tcs_use_sample_evt(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch0Tduv_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch0Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Define clocking of TO CNT  TO CNT1"]
        #[inline(always)]
        pub fn tdu_same_cnt_clk(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch0Tduv_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch0Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout Clock selection"]
        #[inline(always)]
        pub fn tcs(
            self,
        ) -> crate::common::RegisterField<28, 0x7, 1, 0, u8, Ch0Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<28,0x7,1,0,u8, Ch0Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Tduv {
        #[inline(always)]
        fn default() -> Ch0Tduv {
            <crate::RegValueT<Ch0Tduv_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Cnt_SPEC;
    impl crate::sealed::RegSpec for Ch1Cnt_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Cnt = crate::RegValueT<Ch1Cnt_SPEC>;

    impl Ch1Cnt {
        #[doc = "Actual SMU counter value. The meaning of this value depends on the configured mode  TPWM   actual duration of PWM signal.TPIM   actual duration of all        pulses  sum of pulses .TIEM   actual number of received edges.TIPM          actual number of received edges.TGPS   elapsed time for periodic        sampling.TSSM   shift data."]
        #[inline(always)]
        pub fn cnt(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch1Cnt_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch1Cnt_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Cnt {
        #[inline(always)]
        fn default() -> Ch1Cnt {
            <crate::RegValueT<Ch1Cnt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Cnts_SPEC;
    impl crate::sealed::RegSpec for Ch1Cnts_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Shadow Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Cnts = crate::RegValueT<Ch1Cnts_SPEC>;

    impl Ch1Cnts {
        #[doc = "Counter shadow register. The content of this register has different meaning for the TIM channels        modes. The content depends directly on the bit field CNTS SEL of register TIM i  CH x  CTRL . The register TIM i  CH x  CNTS is only        writable in TIPM TBCM  TGPS and TSSM mode."]
        #[inline(always)]
        pub fn cnts(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch1Cnts_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch1Cnts_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter   ECNT. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch1Cnts_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch1Cnts_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Cnts {
        #[inline(always)]
        fn default() -> Ch1Cnts {
            <crate::RegValueT<Ch1Cnts_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch1Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Ctrl = crate::RegValueT<Ch1Ctrl_SPEC>;

    impl Ch1Ctrl {
        #[doc = "TIM channel x enable. Enabling of the channel resets the registers ECNT         TIM i  CH x  CNT  TIM i  CH x  GPR0  and TIM i  CH x  GPR1 to their reset values. After finishing the action in one shot mode the TIM EN bit is cleared automatically. Otherwise  the bit must be cleared        manually."]
        #[inline(always)]
        pub fn tim_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM channel x mode. If an undefined value is written to the TIM MODE register  the hardware        switches automatically to TIM MODE   0b000  TPWM mode . The TIM MODE register should not be changed while the TIM channel is        enabled. If the TIM channel is enabled and operating in TPWM or TPIM mode after        the first valid edge defined by DSL has occurred  a reconfiguration of        DSL ISL TIM MODE will not change the channel behavior. Reading these bit        fields after reconfiguration will show the newly configured settings but        the initial channel behavior will not change. Only a disabling of the        TIM channel by setting TIM EN  0 and reenabling with TIM EN  1 will        change the channel operation mode."]
        #[inline(always)]
        pub fn tim_mode(
            self,
        ) -> crate::common::RegisterField<1, 0x7, 1, 0, u8, Ch1Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<1,0x7,1,0,u8, Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. After finishing the action in one shot mode the TIM EN bit is cleared automatically."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "GPR0 and GPR1 register values routed to ARU"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Channel Input Control"]
        #[inline(always)]
        pub fn cictrl(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TBU TS0 bits input select for TIM0 CH x  GPRz  z  0  1 . This bit is only applicable for TIM0."]
        #[inline(always)]
        pub fn tbu0_sel(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for GPR0 register. If EGPR0 SEL  0   EGPR0 SEL  1   If a reserved value is written to the EGPR0 SEL  GPR0 SEL bit fields         the hardware will use TBU TS0 input."]
        #[inline(always)]
        pub fn gpr0_sel(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Ch1Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for GPR1 register. If EGPR1 SEL  0   EGPR1 SEL  1  If a reserved value is written to the EGPR1 SEL  GPR1 SEL bit fields         the hardware will use TBU TS0 input. Note  In TBCM mode  EGPR1 SEL 1         GPR1 SEL 01 selects TIM INP VAL as input  in all other cases  TIM Filter        F OUT is used."]
        #[inline(always)]
        pub fn gpr1_sel(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, Ch1Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for CNTS register. The functionality of the CNTS SEL is        disabled in the modes TIPM TGPS and TBCM. CNTS SEL in TSSM mode selects the source        signal for registered or latched shift out operation. 0 B   160   160   160   160   160 use F OUTx 1 B   160   160   160   160   160 use TIM INx"]
        #[inline(always)]
        pub fn cnts_sel(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<12,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control. In TIM MODE 0b110  TSSM   the bit field DSL defines the shift direction. 0 B   160   160   160   160   160 Shift left 1 B   160   160   160   160   160 Shift right"]
        #[inline(always)]
        pub fn dsl(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<13,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Ignore signal level. This bit is mode dependent and will have different meanings  see details        in the TIM Channel mode description ."]
        #[inline(always)]
        pub fn isl(
            self,
        ) -> crate::common::RegisterFieldBool<14, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<14,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enables resetting of counter in certain modes. If TIM MODE 0b101  TGPS    TIM MODE 0b000  TPWM  else ECNT counter operating in wrap around mode  In TIM MODE 0b110  TSSM   the bit field ECNT RESET defines the initial        polarity for the shift register."]
        #[inline(always)]
        pub fn ecnt_reset(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter enable for channel x. If the filter is disabled  all filter related units  including CSU  are        bypassed  which means that the signal F IN is directly routed to signal F OUT ."]
        #[inline(always)]
        pub fn flt_en(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter frequency select"]
        #[inline(always)]
        pub fn flt_cnt_frq(
            self,
        ) -> crate::common::RegisterField<17, 0x3, 1, 0, u8, Ch1Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<17,0x3,1,0,u8, Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enables external capture mode. The selected TIM mode is only sensitive to external capture pulses the        input event changes are ignored."]
        #[inline(always)]
        pub fn ext_cap_en(
            self,
        ) -> crate::common::RegisterFieldBool<19, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<19,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter mode for rising edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_mode_re(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter mode for rising edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_ctr_re(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter mode for falling edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_mode_fe(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter mode for falling edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_ctr_fe(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CMU clock source select for channel. If ECLK SEL  0   ECLK SEL  1"]
        #[inline(always)]
        pub fn clk_sel(
            self,
        ) -> crate::common::RegisterField<24, 0x7, 1, 0, u8, Ch1Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x7,1,0,u8, Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended Edge counter overflow behavior"]
        #[inline(always)]
        pub fn fr_ecnt_ofl(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of GPR0 SEL bit field. Details described in GPR0 SEL bit field."]
        #[inline(always)]
        pub fn egpr0_sel(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of GPR1 SEL bit field. Details described in GPR1 SEL bit field."]
        #[inline(always)]
        pub fn egpr1_sel(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout control. It has to be mentioned that writing of TOCTRL  0 will every time stop        the TDU  independent of the previous state of TOCTRL."]
        #[inline(always)]
        pub fn toctrl(
            self,
        ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, Ch1Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<30,0x3,1,0,u8, Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Ctrl {
        #[inline(always)]
        fn default() -> Ch1Ctrl {
            <crate::RegValueT<Ch1Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Ecnt_SPEC;
    impl crate::sealed::RegSpec for Ch1Ecnt_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Edge Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Ecnt = crate::RegValueT<Ch1Ecnt_SPEC>;

    impl Ch1Ecnt {
        #[doc = "Edge counter. If TIM channel is disabled the content of ECNT gets frozen. A read will        auto clear the bits  15 1 . Further read accesses to ECNT will show on        Bit 0 the actual input signal value of the channel."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch1Ecnt_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch1Ecnt_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Ecnt {
        #[inline(always)]
        fn default() -> Ch1Ecnt {
            <crate::RegValueT<Ch1Ecnt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Ectrl_SPEC;
    impl crate::sealed::RegSpec for Ch1Ectrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Extended Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Ectrl = crate::RegValueT<Ch1Ectrl_SPEC>;

    impl Ch1Ectrl {
        #[doc = "Defines selected source for triggering the EXT CAPTURE functionality"]
        #[inline(always)]
        pub fn ext_cap_src(
            self,
        ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Ch1Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xf,1,0,u8, Ch1Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input data source for TDU"]
        #[inline(always)]
        pub fn use_prev_tdu_in(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch1Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch1Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "selection of source for TODET IRQ. With TODET IRQ SRC 0b00 the ACB bit 2 will be driven by signal        tdu timeout evt  if TODET IRQ SRC  0b00 ACB2 will be 0."]
        #[inline(always)]
        pub fn todet_irq_src(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Ch1Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, Ch1Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will start the TDU unit. In mode SLICING 0b11 every start restart will load the TO CNT with value        TOV2. Note  tdu start 000 event is defined as  Each writing of TOCTRL           0  independent of current TOCTRL  while TDU START 0b000 and TDU is        stopped  initially or stopped by TDU STOP event . This event will last 1        system clock cycle."]
        #[inline(always)]
        pub fn tdu_start(
            self,
        ) -> crate::common::RegisterField<8, 0x7, 1, 0, u8, Ch1Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x7,1,0,u8, Ch1Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will stop the TDU unit. Note  tdu toctrl 0 event is defined as  Each writing of TOCTRL   0         independent of current TOCTRL  while TDU is started. This event will        last 1 system clock cycle."]
        #[inline(always)]
        pub fn tdu_stop(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch1Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch1Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will resynchronize the TDU unit. Encoding see Table  160 14 and Table  160 15 ."]
        #[inline(always)]
        pub fn tdu_resync(
            self,
        ) -> crate::common::RegisterField<16, 0xf, 1, 0, u8, Ch1Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xf,1,0,u8, Ch1Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Generate Filter input by lookup table"]
        #[inline(always)]
        pub fn use_lut(
            self,
        ) -> crate::common::RegisterField<22, 0x3, 1, 0, u8, Ch1Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<22,0x3,1,0,u8, Ch1Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field FLT CTR RE. Details described in FLT CTR RE bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eflt_ctr_re(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch1Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch1Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field FLT CTR FE. Details described in FLT CTR FE bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eflt_ctr_fe(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch1Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch1Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Swap point of time of capturing CNTS and GPR1. This bit is only applicable in TPWM and TPIM mode. Set to 0 in all other        modes."]
        #[inline(always)]
        pub fn swap_capture(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch1Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch1Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Start immediately the measurement. This bit is only applicable in TPWM and TPIM mode. Set to 0 in all other        modes."]
        #[inline(always)]
        pub fn imm_start(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch1Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch1Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field CLK SEL. Details described in CLK SEL bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eclk_sel(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch1Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch1Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input data source for TIM channel"]
        #[inline(always)]
        pub fn use_prev_ch_in(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch1Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch1Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Ectrl {
        #[inline(always)]
        fn default() -> Ch1Ectrl {
            <crate::RegValueT<Ch1Ectrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1EirqEn_SPEC;
    impl crate::sealed::RegSpec for Ch1EirqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1EirqEn = crate::RegValueT<Ch1EirqEn_SPEC>;

    impl Ch1EirqEn {
        #[doc = "TIM NEWVALx EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn newval_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch1EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch1EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM ECNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ecntofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch1EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch1EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM CNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn cntofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch1EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch1EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GPROFL IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn gprofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch1EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch1EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM TODETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn todet_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch1EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch1EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GLITCHDETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn glitchdet_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch1EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch1EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1EirqEn {
        #[inline(always)]
        fn default() -> Ch1EirqEn {
            <crate::RegValueT<Ch1EirqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1FltFe_SPEC;
    impl crate::sealed::RegSpec for Ch1FltFe_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 1 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1FltFe = crate::RegValueT<Ch1FltFe_SPEC>;

    impl Ch1FltFe {
        #[doc = "Filter parameter for falling edge. FLT FE has different meanings in the various filter modes.Immediate edge propagation mode   acceptance time for falling edge Individual deglitch time mode   deglitch time for falling edge."]
        #[inline(always)]
        pub fn flt_fe(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch1FltFe_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch1FltFe_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1FltFe {
        #[inline(always)]
        fn default() -> Ch1FltFe {
            <crate::RegValueT<Ch1FltFe_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1FltRe_SPEC;
    impl crate::sealed::RegSpec for Ch1FltRe_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 0 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1FltRe = crate::RegValueT<Ch1FltRe_SPEC>;

    impl Ch1FltRe {
        #[doc = "Filter parameter for rising edge. FLT RE has different meanings in the various filter modes.Immediate edge        propagation mode   acceptance time for rising edgeIndividual deglitch        time mode   deglitch time for rising edge."]
        #[inline(always)]
        pub fn flt_re(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch1FltRe_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch1FltRe_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1FltRe {
        #[inline(always)]
        fn default() -> Ch1FltRe {
            <crate::RegValueT<Ch1FltRe_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Gpr0_SPEC;
    impl crate::sealed::RegSpec for Ch1Gpr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 General Purpose 0 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Gpr0 = crate::RegValueT<Ch1Gpr0_SPEC>;

    impl Ch1Gpr0 {
        #[doc = "Input signal characteristic parameter 0. The content of this register has different meaning for the TIM channels        modes. The content directly depends on the bit fields EGPR0 SEL   GPR0 SEL of register TIM i  CH x  CTRL . Note  The content of this register can only        be written in TIM channel mode TSSM."]
        #[inline(always)]
        pub fn gpr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch1Gpr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch1Gpr0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch1Gpr0_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch1Gpr0_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Gpr0 {
        #[inline(always)]
        fn default() -> Ch1Gpr0 {
            <crate::RegValueT<Ch1Gpr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Gpr1_SPEC;
    impl crate::sealed::RegSpec for Ch1Gpr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 General Purpose 1 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Gpr1 = crate::RegValueT<Ch1Gpr1_SPEC>;

    impl Ch1Gpr1 {
        #[doc = "Input signal characteristic parameter 1. The content of this register has different meaning for the TIM channels        modes. The content directly depends on the bit fields EGPR1 SEL   GPR1 SEL of register TIM i  CH x  CTRL . In TBCM mode if EGPR1 SEL 1  GPR1 SEL 01 then TIM INP VAL is used as        input in all other cases TIM Filter F OUT is used as input and Bits        GPR1 23 8    0 The content of this register can only be written in TIM channel mode        TGPS and TSSM."]
        #[inline(always)]
        pub fn gpr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch1Gpr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch1Gpr1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch1Gpr1_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch1Gpr1_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Gpr1 {
        #[inline(always)]
        fn default() -> Ch1Gpr1 {
            <crate::RegValueT<Ch1Gpr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch1IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1IrqEn = crate::RegValueT<Ch1IrqEn_SPEC>;

    impl Ch1IrqEn {
        #[doc = "TIM NEWVALx IRQ interrupt enable"]
        #[inline(always)]
        pub fn newval_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch1IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch1IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM ECNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ecntofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch1IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch1IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM CNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn cntofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch1IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch1IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GPROFL IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn gprofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch1IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch1IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM TODETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn todet_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch1IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch1IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GLITCHDETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn glitchdet_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch1IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch1IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1IrqEn {
        #[inline(always)]
        fn default() -> Ch1IrqEn {
            <crate::RegValueT<Ch1IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch1IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1IrqForcint = crate::RegValueT<Ch1IrqForcint_SPEC>;

    impl Ch1IrqForcint {
        #[doc = "Trigger NEWVAL bit in TIM CHx IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_newval(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch1IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch1IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger ECNTOFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_ecntofl(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch1IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch1IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger CNTOFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_cntofl(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch1IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch1IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger GPROFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_gprofl(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch1IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<3,1,0,Ch1IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TODET bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_todet(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch1IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<4,1,0,Ch1IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger GLITCHDET bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_glitchdet(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch1IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<5,1,0,Ch1IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1IrqForcint {
        #[inline(always)]
        fn default() -> Ch1IrqForcint {
            <crate::RegValueT<Ch1IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch1IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1IrqMode = crate::RegValueT<Ch1IrqMode_SPEC>;

    impl Ch1IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch1IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch1IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1IrqMode {
        #[inline(always)]
        fn default() -> Ch1IrqMode {
            <crate::RegValueT<Ch1IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch1IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1IrqNotify = crate::RegValueT<Ch1IrqNotify_SPEC>;

    impl Ch1IrqNotify {
        #[doc = "New measurement value detected by in channel x. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
        #[inline(always)]
        pub fn newval(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch1IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch1IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "counter overflow of channel x. See bit 0."]
        #[inline(always)]
        pub fn ecntofl(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch1IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch1IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SMU CNT counter overflow of channel x. See bit 0."]
        #[inline(always)]
        pub fn cntofl(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch1IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch1IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "GPR0 and GPR1 data overflow. Old data not read out before new data has arrived at input pin. See bit        0."]
        #[inline(always)]
        pub fn gprofl(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch1IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<3,1,0,Ch1IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout reached for input signal of channel x. See bit 0."]
        #[inline(always)]
        pub fn todet(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch1IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<4,1,0,Ch1IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Glitch detected on channel x   x 0...m 1 . This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
        #[inline(always)]
        pub fn glitchdet(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch1IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<5,1,0,Ch1IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1IrqNotify {
        #[inline(always)]
        fn default() -> Ch1IrqNotify {
            <crate::RegValueT<Ch1IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Tduc_SPEC;
    impl crate::sealed::RegSpec for Ch1Tduc_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 TDU Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Tduc = crate::RegValueT<Ch1Tduc_SPEC>;

    impl Ch1Tduc {
        #[doc = "Current Timeout value slice0 for channel x. SLICING    0b11  counter will be reset to 0X0 on TDU RESYNC condition. SLICING   0b11   counter will be loaded with TOV2 on TDU RESYNC        condition."]
        #[inline(always)]
        pub fn to_cnt(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch1Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch1Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Current Timeout value slice1 for channel x. Counter will be reset to 0x0 on TDU RESYNC condition."]
        #[inline(always)]
        pub fn to_cnt1(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Ch1Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, Ch1Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Current Timeout value slice2 for channel x. Counter will be reset to 0x0 on TDU RESYNC condition."]
        #[inline(always)]
        pub fn to_cnt2(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Ch1Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, Ch1Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Tduc {
        #[inline(always)]
        fn default() -> Ch1Tduc {
            <crate::RegValueT<Ch1Tduc_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Tduv_SPEC;
    impl crate::sealed::RegSpec for Ch1Tduv_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 TDU Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Tduv = crate::RegValueT<Ch1Tduv_SPEC>;

    impl Ch1Tduv {
        #[doc = "Time out compare value slice0 for channel x. Compare value for TO CNT."]
        #[inline(always)]
        pub fn tov(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch1Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch1Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Time out compare value slice1 for channel x. Compare value for TO CNT1."]
        #[inline(always)]
        pub fn tov1(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Ch1Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, Ch1Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Time out compare value slice2 for channel x. SLICING  0b11  Compare value for TO CNT2. SLICING  0b11  TOV2 operate as a shadow register for TO CNT."]
        #[inline(always)]
        pub fn tov2(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Ch1Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, Ch1Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Cascading of counter slices. If USE LUT 0b00   USE LUT   0b00"]
        #[inline(always)]
        pub fn slicing(
            self,
        ) -> crate::common::RegisterField<24, 0x3, 1, 0, u8, Ch1Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x3,1,0,u8, Ch1Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use tdu sample evt as Timeout Clock"]
        #[inline(always)]
        pub fn tcs_use_sample_evt(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch1Tduv_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch1Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Define clocking of TO CNT  TO CNT1"]
        #[inline(always)]
        pub fn tdu_same_cnt_clk(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch1Tduv_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch1Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout Clock selection"]
        #[inline(always)]
        pub fn tcs(
            self,
        ) -> crate::common::RegisterField<28, 0x7, 1, 0, u8, Ch1Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<28,0x7,1,0,u8, Ch1Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Tduv {
        #[inline(always)]
        fn default() -> Ch1Tduv {
            <crate::RegValueT<Ch1Tduv_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Cnt_SPEC;
    impl crate::sealed::RegSpec for Ch2Cnt_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Cnt = crate::RegValueT<Ch2Cnt_SPEC>;

    impl Ch2Cnt {
        #[doc = "Actual SMU counter value. The meaning of this value depends on the configured mode  TPWM   actual duration of PWM signal.TPIM   actual duration of all        pulses  sum of pulses .TIEM   actual number of received edges.TIPM          actual number of received edges.TGPS   elapsed time for periodic        sampling.TSSM   shift data."]
        #[inline(always)]
        pub fn cnt(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch2Cnt_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch2Cnt_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Cnt {
        #[inline(always)]
        fn default() -> Ch2Cnt {
            <crate::RegValueT<Ch2Cnt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Cnts_SPEC;
    impl crate::sealed::RegSpec for Ch2Cnts_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Shadow Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Cnts = crate::RegValueT<Ch2Cnts_SPEC>;

    impl Ch2Cnts {
        #[doc = "Counter shadow register. The content of this register has different meaning for the TIM channels        modes. The content depends directly on the bit field CNTS SEL of register TIM i  CH x  CTRL . The register TIM i  CH x  CNTS is only        writable in TIPM TBCM  TGPS and TSSM mode."]
        #[inline(always)]
        pub fn cnts(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch2Cnts_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch2Cnts_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter   ECNT. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch2Cnts_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch2Cnts_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Cnts {
        #[inline(always)]
        fn default() -> Ch2Cnts {
            <crate::RegValueT<Ch2Cnts_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch2Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Ctrl = crate::RegValueT<Ch2Ctrl_SPEC>;

    impl Ch2Ctrl {
        #[doc = "TIM channel x enable. Enabling of the channel resets the registers ECNT         TIM i  CH x  CNT  TIM i  CH x  GPR0  and TIM i  CH x  GPR1 to their reset values. After finishing the action in one shot mode the TIM EN bit is cleared automatically. Otherwise  the bit must be cleared        manually."]
        #[inline(always)]
        pub fn tim_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM channel x mode. If an undefined value is written to the TIM MODE register  the hardware        switches automatically to TIM MODE   0b000  TPWM mode . The TIM MODE register should not be changed while the TIM channel is        enabled. If the TIM channel is enabled and operating in TPWM or TPIM mode after        the first valid edge defined by DSL has occurred  a reconfiguration of        DSL ISL TIM MODE will not change the channel behavior. Reading these bit        fields after reconfiguration will show the newly configured settings but        the initial channel behavior will not change. Only a disabling of the        TIM channel by setting TIM EN  0 and reenabling with TIM EN  1 will        change the channel operation mode."]
        #[inline(always)]
        pub fn tim_mode(
            self,
        ) -> crate::common::RegisterField<1, 0x7, 1, 0, u8, Ch2Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<1,0x7,1,0,u8, Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. After finishing the action in one shot mode the TIM EN bit is cleared automatically."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "GPR0 and GPR1 register values routed to ARU"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Channel Input Control"]
        #[inline(always)]
        pub fn cictrl(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TBU TS0 bits input select for TIM0 CH x  GPRz  z  0  1 . This bit is only applicable for TIM0."]
        #[inline(always)]
        pub fn tbu0_sel(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for GPR0 register. If EGPR0 SEL  0   EGPR0 SEL  1   If a reserved value is written to the EGPR0 SEL  GPR0 SEL bit fields         the hardware will use TBU TS0 input."]
        #[inline(always)]
        pub fn gpr0_sel(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Ch2Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for GPR1 register. If EGPR1 SEL  0   EGPR1 SEL  1  If a reserved value is written to the EGPR1 SEL  GPR1 SEL bit fields         the hardware will use TBU TS0 input. Note  In TBCM mode  EGPR1 SEL 1         GPR1 SEL 01 selects TIM INP VAL as input  in all other cases  TIM Filter        F OUT is used."]
        #[inline(always)]
        pub fn gpr1_sel(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, Ch2Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for CNTS register. The functionality of the CNTS SEL is        disabled in the modes TIPM TGPS and TBCM. CNTS SEL in TSSM mode selects the source        signal for registered or latched shift out operation. 0 B   160   160   160   160   160 use F OUTx 1 B   160   160   160   160   160 use TIM INx"]
        #[inline(always)]
        pub fn cnts_sel(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<12,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control. In TIM MODE 0b110  TSSM   the bit field DSL defines the shift direction. 0 B   160   160   160   160   160 Shift left 1 B   160   160   160   160   160 Shift right"]
        #[inline(always)]
        pub fn dsl(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<13,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Ignore signal level. This bit is mode dependent and will have different meanings  see details        in the TIM Channel mode description ."]
        #[inline(always)]
        pub fn isl(
            self,
        ) -> crate::common::RegisterFieldBool<14, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<14,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enables resetting of counter in certain modes. If TIM MODE 0b101  TGPS    TIM MODE 0b000  TPWM  else ECNT counter operating in wrap around mode  In TIM MODE 0b110  TSSM   the bit field ECNT RESET defines the initial        polarity for the shift register."]
        #[inline(always)]
        pub fn ecnt_reset(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter enable for channel x. If the filter is disabled  all filter related units  including CSU  are        bypassed  which means that the signal F IN is directly routed to signal F OUT ."]
        #[inline(always)]
        pub fn flt_en(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter frequency select"]
        #[inline(always)]
        pub fn flt_cnt_frq(
            self,
        ) -> crate::common::RegisterField<17, 0x3, 1, 0, u8, Ch2Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<17,0x3,1,0,u8, Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enables external capture mode. The selected TIM mode is only sensitive to external capture pulses the        input event changes are ignored."]
        #[inline(always)]
        pub fn ext_cap_en(
            self,
        ) -> crate::common::RegisterFieldBool<19, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<19,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter mode for rising edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_mode_re(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter mode for rising edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_ctr_re(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter mode for falling edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_mode_fe(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter mode for falling edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_ctr_fe(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CMU clock source select for channel. If ECLK SEL  0   ECLK SEL  1"]
        #[inline(always)]
        pub fn clk_sel(
            self,
        ) -> crate::common::RegisterField<24, 0x7, 1, 0, u8, Ch2Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x7,1,0,u8, Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended Edge counter overflow behavior"]
        #[inline(always)]
        pub fn fr_ecnt_ofl(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of GPR0 SEL bit field. Details described in GPR0 SEL bit field."]
        #[inline(always)]
        pub fn egpr0_sel(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of GPR1 SEL bit field. Details described in GPR1 SEL bit field."]
        #[inline(always)]
        pub fn egpr1_sel(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout control. It has to be mentioned that writing of TOCTRL  0 will every time stop        the TDU  independent of the previous state of TOCTRL."]
        #[inline(always)]
        pub fn toctrl(
            self,
        ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, Ch2Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<30,0x3,1,0,u8, Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Ctrl {
        #[inline(always)]
        fn default() -> Ch2Ctrl {
            <crate::RegValueT<Ch2Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Ecnt_SPEC;
    impl crate::sealed::RegSpec for Ch2Ecnt_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Edge Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Ecnt = crate::RegValueT<Ch2Ecnt_SPEC>;

    impl Ch2Ecnt {
        #[doc = "Edge counter. If TIM channel is disabled the content of ECNT gets frozen. A read will        auto clear the bits  15 1 . Further read accesses to ECNT will show on        Bit 0 the actual input signal value of the channel."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch2Ecnt_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch2Ecnt_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Ecnt {
        #[inline(always)]
        fn default() -> Ch2Ecnt {
            <crate::RegValueT<Ch2Ecnt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Ectrl_SPEC;
    impl crate::sealed::RegSpec for Ch2Ectrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Extended Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Ectrl = crate::RegValueT<Ch2Ectrl_SPEC>;

    impl Ch2Ectrl {
        #[doc = "Defines selected source for triggering the EXT CAPTURE functionality"]
        #[inline(always)]
        pub fn ext_cap_src(
            self,
        ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Ch2Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xf,1,0,u8, Ch2Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input data source for TDU"]
        #[inline(always)]
        pub fn use_prev_tdu_in(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch2Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch2Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "selection of source for TODET IRQ. With TODET IRQ SRC 0b00 the ACB bit 2 will be driven by signal        tdu timeout evt  if TODET IRQ SRC  0b00 ACB2 will be 0."]
        #[inline(always)]
        pub fn todet_irq_src(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Ch2Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, Ch2Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will start the TDU unit. In mode SLICING 0b11 every start restart will load the TO CNT with value        TOV2. Note  tdu start 000 event is defined as  Each writing of TOCTRL           0  independent of current TOCTRL  while TDU START 0b000 and TDU is        stopped  initially or stopped by TDU STOP event . This event will last 1        system clock cycle."]
        #[inline(always)]
        pub fn tdu_start(
            self,
        ) -> crate::common::RegisterField<8, 0x7, 1, 0, u8, Ch2Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x7,1,0,u8, Ch2Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will stop the TDU unit. Note  tdu toctrl 0 event is defined as  Each writing of TOCTRL   0         independent of current TOCTRL  while TDU is started. This event will        last 1 system clock cycle."]
        #[inline(always)]
        pub fn tdu_stop(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch2Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch2Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will resynchronize the TDU unit. Encoding see Table  160 14 and Table  160 15 ."]
        #[inline(always)]
        pub fn tdu_resync(
            self,
        ) -> crate::common::RegisterField<16, 0xf, 1, 0, u8, Ch2Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xf,1,0,u8, Ch2Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Generate Filter input by lookup table"]
        #[inline(always)]
        pub fn use_lut(
            self,
        ) -> crate::common::RegisterField<22, 0x3, 1, 0, u8, Ch2Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<22,0x3,1,0,u8, Ch2Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field FLT CTR RE. Details described in FLT CTR RE bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eflt_ctr_re(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch2Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch2Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field FLT CTR FE. Details described in FLT CTR FE bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eflt_ctr_fe(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch2Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch2Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Swap point of time of capturing CNTS and GPR1. This bit is only applicable in TPWM and TPIM mode. Set to 0 in all other        modes."]
        #[inline(always)]
        pub fn swap_capture(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch2Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch2Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Start immediately the measurement. This bit is only applicable in TPWM and TPIM mode. Set to 0 in all other        modes."]
        #[inline(always)]
        pub fn imm_start(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch2Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch2Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field CLK SEL. Details described in CLK SEL bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eclk_sel(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch2Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch2Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input data source for TIM channel"]
        #[inline(always)]
        pub fn use_prev_ch_in(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch2Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch2Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Ectrl {
        #[inline(always)]
        fn default() -> Ch2Ectrl {
            <crate::RegValueT<Ch2Ectrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2EirqEn_SPEC;
    impl crate::sealed::RegSpec for Ch2EirqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2EirqEn = crate::RegValueT<Ch2EirqEn_SPEC>;

    impl Ch2EirqEn {
        #[doc = "TIM NEWVALx EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn newval_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch2EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch2EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM ECNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ecntofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch2EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch2EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM CNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn cntofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch2EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch2EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GPROFL IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn gprofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch2EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch2EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM TODETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn todet_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch2EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch2EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GLITCHDETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn glitchdet_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch2EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch2EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2EirqEn {
        #[inline(always)]
        fn default() -> Ch2EirqEn {
            <crate::RegValueT<Ch2EirqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2FltFe_SPEC;
    impl crate::sealed::RegSpec for Ch2FltFe_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 1 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2FltFe = crate::RegValueT<Ch2FltFe_SPEC>;

    impl Ch2FltFe {
        #[doc = "Filter parameter for falling edge. FLT FE has different meanings in the various filter modes.Immediate edge propagation mode   acceptance time for falling edge Individual deglitch time mode   deglitch time for falling edge."]
        #[inline(always)]
        pub fn flt_fe(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch2FltFe_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch2FltFe_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2FltFe {
        #[inline(always)]
        fn default() -> Ch2FltFe {
            <crate::RegValueT<Ch2FltFe_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2FltRe_SPEC;
    impl crate::sealed::RegSpec for Ch2FltRe_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 0 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2FltRe = crate::RegValueT<Ch2FltRe_SPEC>;

    impl Ch2FltRe {
        #[doc = "Filter parameter for rising edge. FLT RE has different meanings in the various filter modes.Immediate edge        propagation mode   acceptance time for rising edgeIndividual deglitch        time mode   deglitch time for rising edge."]
        #[inline(always)]
        pub fn flt_re(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch2FltRe_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch2FltRe_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2FltRe {
        #[inline(always)]
        fn default() -> Ch2FltRe {
            <crate::RegValueT<Ch2FltRe_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Gpr0_SPEC;
    impl crate::sealed::RegSpec for Ch2Gpr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 General Purpose 0 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Gpr0 = crate::RegValueT<Ch2Gpr0_SPEC>;

    impl Ch2Gpr0 {
        #[doc = "Input signal characteristic parameter 0. The content of this register has different meaning for the TIM channels        modes. The content directly depends on the bit fields EGPR0 SEL   GPR0 SEL of register TIM i  CH x  CTRL . Note  The content of this register can only        be written in TIM channel mode TSSM."]
        #[inline(always)]
        pub fn gpr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch2Gpr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch2Gpr0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch2Gpr0_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch2Gpr0_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Gpr0 {
        #[inline(always)]
        fn default() -> Ch2Gpr0 {
            <crate::RegValueT<Ch2Gpr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Gpr1_SPEC;
    impl crate::sealed::RegSpec for Ch2Gpr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 General Purpose 1 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Gpr1 = crate::RegValueT<Ch2Gpr1_SPEC>;

    impl Ch2Gpr1 {
        #[doc = "Input signal characteristic parameter 1. The content of this register has different meaning for the TIM channels        modes. The content directly depends on the bit fields EGPR1 SEL   GPR1 SEL of register TIM i  CH x  CTRL . In TBCM mode if EGPR1 SEL 1  GPR1 SEL 01 then TIM INP VAL is used as        input in all other cases TIM Filter F OUT is used as input and Bits        GPR1 23 8    0 The content of this register can only be written in TIM channel mode        TGPS and TSSM."]
        #[inline(always)]
        pub fn gpr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch2Gpr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch2Gpr1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch2Gpr1_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch2Gpr1_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Gpr1 {
        #[inline(always)]
        fn default() -> Ch2Gpr1 {
            <crate::RegValueT<Ch2Gpr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch2IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2IrqEn = crate::RegValueT<Ch2IrqEn_SPEC>;

    impl Ch2IrqEn {
        #[doc = "TIM NEWVALx IRQ interrupt enable"]
        #[inline(always)]
        pub fn newval_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch2IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch2IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM ECNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ecntofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch2IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch2IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM CNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn cntofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch2IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch2IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GPROFL IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn gprofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch2IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch2IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM TODETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn todet_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch2IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch2IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GLITCHDETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn glitchdet_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch2IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch2IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2IrqEn {
        #[inline(always)]
        fn default() -> Ch2IrqEn {
            <crate::RegValueT<Ch2IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch2IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2IrqForcint = crate::RegValueT<Ch2IrqForcint_SPEC>;

    impl Ch2IrqForcint {
        #[doc = "Trigger NEWVAL bit in TIM CHx IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_newval(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch2IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch2IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger ECNTOFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_ecntofl(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch2IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch2IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger CNTOFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_cntofl(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch2IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch2IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger GPROFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_gprofl(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch2IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<3,1,0,Ch2IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TODET bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_todet(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch2IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<4,1,0,Ch2IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger GLITCHDET bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_glitchdet(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch2IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<5,1,0,Ch2IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2IrqForcint {
        #[inline(always)]
        fn default() -> Ch2IrqForcint {
            <crate::RegValueT<Ch2IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch2IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2IrqMode = crate::RegValueT<Ch2IrqMode_SPEC>;

    impl Ch2IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch2IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch2IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2IrqMode {
        #[inline(always)]
        fn default() -> Ch2IrqMode {
            <crate::RegValueT<Ch2IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch2IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2IrqNotify = crate::RegValueT<Ch2IrqNotify_SPEC>;

    impl Ch2IrqNotify {
        #[doc = "New measurement value detected by in channel x. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
        #[inline(always)]
        pub fn newval(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch2IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch2IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "counter overflow of channel x. See bit 0."]
        #[inline(always)]
        pub fn ecntofl(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch2IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch2IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SMU CNT counter overflow of channel x. See bit 0."]
        #[inline(always)]
        pub fn cntofl(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch2IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch2IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "GPR0 and GPR1 data overflow. Old data not read out before new data has arrived at input pin. See bit        0."]
        #[inline(always)]
        pub fn gprofl(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch2IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<3,1,0,Ch2IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout reached for input signal of channel x. See bit 0."]
        #[inline(always)]
        pub fn todet(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch2IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<4,1,0,Ch2IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Glitch detected on channel x   x 0...m 1 . This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
        #[inline(always)]
        pub fn glitchdet(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch2IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<5,1,0,Ch2IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2IrqNotify {
        #[inline(always)]
        fn default() -> Ch2IrqNotify {
            <crate::RegValueT<Ch2IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Tduc_SPEC;
    impl crate::sealed::RegSpec for Ch2Tduc_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 TDU Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Tduc = crate::RegValueT<Ch2Tduc_SPEC>;

    impl Ch2Tduc {
        #[doc = "Current Timeout value slice0 for channel x. SLICING    0b11  counter will be reset to 0X0 on TDU RESYNC condition. SLICING   0b11   counter will be loaded with TOV2 on TDU RESYNC        condition."]
        #[inline(always)]
        pub fn to_cnt(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch2Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch2Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Current Timeout value slice1 for channel x. Counter will be reset to 0x0 on TDU RESYNC condition."]
        #[inline(always)]
        pub fn to_cnt1(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Ch2Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, Ch2Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Current Timeout value slice2 for channel x. Counter will be reset to 0x0 on TDU RESYNC condition."]
        #[inline(always)]
        pub fn to_cnt2(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Ch2Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, Ch2Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Tduc {
        #[inline(always)]
        fn default() -> Ch2Tduc {
            <crate::RegValueT<Ch2Tduc_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Tduv_SPEC;
    impl crate::sealed::RegSpec for Ch2Tduv_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 TDU Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Tduv = crate::RegValueT<Ch2Tduv_SPEC>;

    impl Ch2Tduv {
        #[doc = "Time out compare value slice0 for channel x. Compare value for TO CNT."]
        #[inline(always)]
        pub fn tov(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch2Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch2Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Time out compare value slice1 for channel x. Compare value for TO CNT1."]
        #[inline(always)]
        pub fn tov1(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Ch2Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, Ch2Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Time out compare value slice2 for channel x. SLICING  0b11  Compare value for TO CNT2. SLICING  0b11  TOV2 operate as a shadow register for TO CNT."]
        #[inline(always)]
        pub fn tov2(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Ch2Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, Ch2Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Cascading of counter slices. If USE LUT 0b00   USE LUT   0b00"]
        #[inline(always)]
        pub fn slicing(
            self,
        ) -> crate::common::RegisterField<24, 0x3, 1, 0, u8, Ch2Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x3,1,0,u8, Ch2Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use tdu sample evt as Timeout Clock"]
        #[inline(always)]
        pub fn tcs_use_sample_evt(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch2Tduv_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch2Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Define clocking of TO CNT  TO CNT1"]
        #[inline(always)]
        pub fn tdu_same_cnt_clk(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch2Tduv_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch2Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout Clock selection"]
        #[inline(always)]
        pub fn tcs(
            self,
        ) -> crate::common::RegisterField<28, 0x7, 1, 0, u8, Ch2Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<28,0x7,1,0,u8, Ch2Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Tduv {
        #[inline(always)]
        fn default() -> Ch2Tduv {
            <crate::RegValueT<Ch2Tduv_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Cnt_SPEC;
    impl crate::sealed::RegSpec for Ch3Cnt_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Cnt = crate::RegValueT<Ch3Cnt_SPEC>;

    impl Ch3Cnt {
        #[doc = "Actual SMU counter value. The meaning of this value depends on the configured mode  TPWM   actual duration of PWM signal.TPIM   actual duration of all        pulses  sum of pulses .TIEM   actual number of received edges.TIPM          actual number of received edges.TGPS   elapsed time for periodic        sampling.TSSM   shift data."]
        #[inline(always)]
        pub fn cnt(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch3Cnt_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch3Cnt_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Cnt {
        #[inline(always)]
        fn default() -> Ch3Cnt {
            <crate::RegValueT<Ch3Cnt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Cnts_SPEC;
    impl crate::sealed::RegSpec for Ch3Cnts_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Shadow Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Cnts = crate::RegValueT<Ch3Cnts_SPEC>;

    impl Ch3Cnts {
        #[doc = "Counter shadow register. The content of this register has different meaning for the TIM channels        modes. The content depends directly on the bit field CNTS SEL of register TIM i  CH x  CTRL . The register TIM i  CH x  CNTS is only        writable in TIPM TBCM  TGPS and TSSM mode."]
        #[inline(always)]
        pub fn cnts(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch3Cnts_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch3Cnts_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter   ECNT. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch3Cnts_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch3Cnts_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Cnts {
        #[inline(always)]
        fn default() -> Ch3Cnts {
            <crate::RegValueT<Ch3Cnts_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch3Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Ctrl = crate::RegValueT<Ch3Ctrl_SPEC>;

    impl Ch3Ctrl {
        #[doc = "TIM channel x enable. Enabling of the channel resets the registers ECNT         TIM i  CH x  CNT  TIM i  CH x  GPR0  and TIM i  CH x  GPR1 to their reset values. After finishing the action in one shot mode the TIM EN bit is cleared automatically. Otherwise  the bit must be cleared        manually."]
        #[inline(always)]
        pub fn tim_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM channel x mode. If an undefined value is written to the TIM MODE register  the hardware        switches automatically to TIM MODE   0b000  TPWM mode . The TIM MODE register should not be changed while the TIM channel is        enabled. If the TIM channel is enabled and operating in TPWM or TPIM mode after        the first valid edge defined by DSL has occurred  a reconfiguration of        DSL ISL TIM MODE will not change the channel behavior. Reading these bit        fields after reconfiguration will show the newly configured settings but        the initial channel behavior will not change. Only a disabling of the        TIM channel by setting TIM EN  0 and reenabling with TIM EN  1 will        change the channel operation mode."]
        #[inline(always)]
        pub fn tim_mode(
            self,
        ) -> crate::common::RegisterField<1, 0x7, 1, 0, u8, Ch3Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<1,0x7,1,0,u8, Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. After finishing the action in one shot mode the TIM EN bit is cleared automatically."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "GPR0 and GPR1 register values routed to ARU"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Channel Input Control"]
        #[inline(always)]
        pub fn cictrl(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TBU TS0 bits input select for TIM0 CH x  GPRz  z  0  1 . This bit is only applicable for TIM0."]
        #[inline(always)]
        pub fn tbu0_sel(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for GPR0 register. If EGPR0 SEL  0   EGPR0 SEL  1   If a reserved value is written to the EGPR0 SEL  GPR0 SEL bit fields         the hardware will use TBU TS0 input."]
        #[inline(always)]
        pub fn gpr0_sel(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Ch3Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for GPR1 register. If EGPR1 SEL  0   EGPR1 SEL  1  If a reserved value is written to the EGPR1 SEL  GPR1 SEL bit fields         the hardware will use TBU TS0 input. Note  In TBCM mode  EGPR1 SEL 1         GPR1 SEL 01 selects TIM INP VAL as input  in all other cases  TIM Filter        F OUT is used."]
        #[inline(always)]
        pub fn gpr1_sel(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, Ch3Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for CNTS register. The functionality of the CNTS SEL is        disabled in the modes TIPM TGPS and TBCM. CNTS SEL in TSSM mode selects the source        signal for registered or latched shift out operation. 0 B   160   160   160   160   160 use F OUTx 1 B   160   160   160   160   160 use TIM INx"]
        #[inline(always)]
        pub fn cnts_sel(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<12,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control. In TIM MODE 0b110  TSSM   the bit field DSL defines the shift direction. 0 B   160   160   160   160   160 Shift left 1 B   160   160   160   160   160 Shift right"]
        #[inline(always)]
        pub fn dsl(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<13,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Ignore signal level. This bit is mode dependent and will have different meanings  see details        in the TIM Channel mode description ."]
        #[inline(always)]
        pub fn isl(
            self,
        ) -> crate::common::RegisterFieldBool<14, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<14,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enables resetting of counter in certain modes. If TIM MODE 0b101  TGPS    TIM MODE 0b000  TPWM  else ECNT counter operating in wrap around mode  In TIM MODE 0b110  TSSM   the bit field ECNT RESET defines the initial        polarity for the shift register."]
        #[inline(always)]
        pub fn ecnt_reset(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter enable for channel x. If the filter is disabled  all filter related units  including CSU  are        bypassed  which means that the signal F IN is directly routed to signal F OUT ."]
        #[inline(always)]
        pub fn flt_en(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter frequency select"]
        #[inline(always)]
        pub fn flt_cnt_frq(
            self,
        ) -> crate::common::RegisterField<17, 0x3, 1, 0, u8, Ch3Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<17,0x3,1,0,u8, Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enables external capture mode. The selected TIM mode is only sensitive to external capture pulses the        input event changes are ignored."]
        #[inline(always)]
        pub fn ext_cap_en(
            self,
        ) -> crate::common::RegisterFieldBool<19, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<19,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter mode for rising edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_mode_re(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter mode for rising edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_ctr_re(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter mode for falling edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_mode_fe(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter mode for falling edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_ctr_fe(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CMU clock source select for channel. If ECLK SEL  0   ECLK SEL  1"]
        #[inline(always)]
        pub fn clk_sel(
            self,
        ) -> crate::common::RegisterField<24, 0x7, 1, 0, u8, Ch3Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x7,1,0,u8, Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended Edge counter overflow behavior"]
        #[inline(always)]
        pub fn fr_ecnt_ofl(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of GPR0 SEL bit field. Details described in GPR0 SEL bit field."]
        #[inline(always)]
        pub fn egpr0_sel(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of GPR1 SEL bit field. Details described in GPR1 SEL bit field."]
        #[inline(always)]
        pub fn egpr1_sel(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout control. It has to be mentioned that writing of TOCTRL  0 will every time stop        the TDU  independent of the previous state of TOCTRL."]
        #[inline(always)]
        pub fn toctrl(
            self,
        ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, Ch3Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<30,0x3,1,0,u8, Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Ctrl {
        #[inline(always)]
        fn default() -> Ch3Ctrl {
            <crate::RegValueT<Ch3Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Ecnt_SPEC;
    impl crate::sealed::RegSpec for Ch3Ecnt_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Edge Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Ecnt = crate::RegValueT<Ch3Ecnt_SPEC>;

    impl Ch3Ecnt {
        #[doc = "Edge counter. If TIM channel is disabled the content of ECNT gets frozen. A read will        auto clear the bits  15 1 . Further read accesses to ECNT will show on        Bit 0 the actual input signal value of the channel."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch3Ecnt_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch3Ecnt_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Ecnt {
        #[inline(always)]
        fn default() -> Ch3Ecnt {
            <crate::RegValueT<Ch3Ecnt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Ectrl_SPEC;
    impl crate::sealed::RegSpec for Ch3Ectrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Extended Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Ectrl = crate::RegValueT<Ch3Ectrl_SPEC>;

    impl Ch3Ectrl {
        #[doc = "Defines selected source for triggering the EXT CAPTURE functionality"]
        #[inline(always)]
        pub fn ext_cap_src(
            self,
        ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Ch3Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xf,1,0,u8, Ch3Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input data source for TDU"]
        #[inline(always)]
        pub fn use_prev_tdu_in(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch3Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch3Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "selection of source for TODET IRQ. With TODET IRQ SRC 0b00 the ACB bit 2 will be driven by signal        tdu timeout evt  if TODET IRQ SRC  0b00 ACB2 will be 0."]
        #[inline(always)]
        pub fn todet_irq_src(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Ch3Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, Ch3Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will start the TDU unit. In mode SLICING 0b11 every start restart will load the TO CNT with value        TOV2. Note  tdu start 000 event is defined as  Each writing of TOCTRL           0  independent of current TOCTRL  while TDU START 0b000 and TDU is        stopped  initially or stopped by TDU STOP event . This event will last 1        system clock cycle."]
        #[inline(always)]
        pub fn tdu_start(
            self,
        ) -> crate::common::RegisterField<8, 0x7, 1, 0, u8, Ch3Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x7,1,0,u8, Ch3Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will stop the TDU unit. Note  tdu toctrl 0 event is defined as  Each writing of TOCTRL   0         independent of current TOCTRL  while TDU is started. This event will        last 1 system clock cycle."]
        #[inline(always)]
        pub fn tdu_stop(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch3Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch3Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will resynchronize the TDU unit. Encoding see Table  160 14 and Table  160 15 ."]
        #[inline(always)]
        pub fn tdu_resync(
            self,
        ) -> crate::common::RegisterField<16, 0xf, 1, 0, u8, Ch3Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xf,1,0,u8, Ch3Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Generate Filter input by lookup table"]
        #[inline(always)]
        pub fn use_lut(
            self,
        ) -> crate::common::RegisterField<22, 0x3, 1, 0, u8, Ch3Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<22,0x3,1,0,u8, Ch3Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field FLT CTR RE. Details described in FLT CTR RE bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eflt_ctr_re(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch3Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch3Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field FLT CTR FE. Details described in FLT CTR FE bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eflt_ctr_fe(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch3Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch3Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Swap point of time of capturing CNTS and GPR1. This bit is only applicable in TPWM and TPIM mode. Set to 0 in all other        modes."]
        #[inline(always)]
        pub fn swap_capture(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch3Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch3Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Start immediately the measurement. This bit is only applicable in TPWM and TPIM mode. Set to 0 in all other        modes."]
        #[inline(always)]
        pub fn imm_start(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch3Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch3Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field CLK SEL. Details described in CLK SEL bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eclk_sel(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch3Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch3Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input data source for TIM channel"]
        #[inline(always)]
        pub fn use_prev_ch_in(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch3Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch3Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Ectrl {
        #[inline(always)]
        fn default() -> Ch3Ectrl {
            <crate::RegValueT<Ch3Ectrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3EirqEn_SPEC;
    impl crate::sealed::RegSpec for Ch3EirqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3EirqEn = crate::RegValueT<Ch3EirqEn_SPEC>;

    impl Ch3EirqEn {
        #[doc = "TIM NEWVALx EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn newval_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch3EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch3EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM ECNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ecntofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch3EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch3EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM CNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn cntofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch3EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch3EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GPROFL IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn gprofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch3EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch3EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM TODETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn todet_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch3EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch3EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GLITCHDETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn glitchdet_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch3EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch3EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3EirqEn {
        #[inline(always)]
        fn default() -> Ch3EirqEn {
            <crate::RegValueT<Ch3EirqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3FltFe_SPEC;
    impl crate::sealed::RegSpec for Ch3FltFe_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 1 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3FltFe = crate::RegValueT<Ch3FltFe_SPEC>;

    impl Ch3FltFe {
        #[doc = "Filter parameter for falling edge. FLT FE has different meanings in the various filter modes.Immediate edge propagation mode   acceptance time for falling edge Individual deglitch time mode   deglitch time for falling edge."]
        #[inline(always)]
        pub fn flt_fe(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch3FltFe_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch3FltFe_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3FltFe {
        #[inline(always)]
        fn default() -> Ch3FltFe {
            <crate::RegValueT<Ch3FltFe_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3FltRe_SPEC;
    impl crate::sealed::RegSpec for Ch3FltRe_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 0 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3FltRe = crate::RegValueT<Ch3FltRe_SPEC>;

    impl Ch3FltRe {
        #[doc = "Filter parameter for rising edge. FLT RE has different meanings in the various filter modes.Immediate edge        propagation mode   acceptance time for rising edgeIndividual deglitch        time mode   deglitch time for rising edge."]
        #[inline(always)]
        pub fn flt_re(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch3FltRe_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch3FltRe_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3FltRe {
        #[inline(always)]
        fn default() -> Ch3FltRe {
            <crate::RegValueT<Ch3FltRe_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Gpr0_SPEC;
    impl crate::sealed::RegSpec for Ch3Gpr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 General Purpose 0 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Gpr0 = crate::RegValueT<Ch3Gpr0_SPEC>;

    impl Ch3Gpr0 {
        #[doc = "Input signal characteristic parameter 0. The content of this register has different meaning for the TIM channels        modes. The content directly depends on the bit fields EGPR0 SEL   GPR0 SEL of register TIM i  CH x  CTRL . Note  The content of this register can only        be written in TIM channel mode TSSM."]
        #[inline(always)]
        pub fn gpr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch3Gpr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch3Gpr0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch3Gpr0_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch3Gpr0_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Gpr0 {
        #[inline(always)]
        fn default() -> Ch3Gpr0 {
            <crate::RegValueT<Ch3Gpr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Gpr1_SPEC;
    impl crate::sealed::RegSpec for Ch3Gpr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 General Purpose 1 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Gpr1 = crate::RegValueT<Ch3Gpr1_SPEC>;

    impl Ch3Gpr1 {
        #[doc = "Input signal characteristic parameter 1. The content of this register has different meaning for the TIM channels        modes. The content directly depends on the bit fields EGPR1 SEL   GPR1 SEL of register TIM i  CH x  CTRL . In TBCM mode if EGPR1 SEL 1  GPR1 SEL 01 then TIM INP VAL is used as        input in all other cases TIM Filter F OUT is used as input and Bits        GPR1 23 8    0 The content of this register can only be written in TIM channel mode        TGPS and TSSM."]
        #[inline(always)]
        pub fn gpr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch3Gpr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch3Gpr1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch3Gpr1_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch3Gpr1_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Gpr1 {
        #[inline(always)]
        fn default() -> Ch3Gpr1 {
            <crate::RegValueT<Ch3Gpr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch3IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3IrqEn = crate::RegValueT<Ch3IrqEn_SPEC>;

    impl Ch3IrqEn {
        #[doc = "TIM NEWVALx IRQ interrupt enable"]
        #[inline(always)]
        pub fn newval_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch3IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch3IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM ECNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ecntofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch3IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch3IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM CNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn cntofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch3IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch3IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GPROFL IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn gprofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch3IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch3IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM TODETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn todet_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch3IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch3IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GLITCHDETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn glitchdet_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch3IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch3IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3IrqEn {
        #[inline(always)]
        fn default() -> Ch3IrqEn {
            <crate::RegValueT<Ch3IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch3IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3IrqForcint = crate::RegValueT<Ch3IrqForcint_SPEC>;

    impl Ch3IrqForcint {
        #[doc = "Trigger NEWVAL bit in TIM CHx IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_newval(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch3IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch3IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger ECNTOFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_ecntofl(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch3IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch3IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger CNTOFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_cntofl(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch3IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch3IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger GPROFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_gprofl(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch3IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<3,1,0,Ch3IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TODET bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_todet(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch3IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<4,1,0,Ch3IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger GLITCHDET bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_glitchdet(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch3IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<5,1,0,Ch3IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3IrqForcint {
        #[inline(always)]
        fn default() -> Ch3IrqForcint {
            <crate::RegValueT<Ch3IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch3IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3IrqMode = crate::RegValueT<Ch3IrqMode_SPEC>;

    impl Ch3IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch3IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch3IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3IrqMode {
        #[inline(always)]
        fn default() -> Ch3IrqMode {
            <crate::RegValueT<Ch3IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch3IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3IrqNotify = crate::RegValueT<Ch3IrqNotify_SPEC>;

    impl Ch3IrqNotify {
        #[doc = "New measurement value detected by in channel x. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
        #[inline(always)]
        pub fn newval(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch3IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch3IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "counter overflow of channel x. See bit 0."]
        #[inline(always)]
        pub fn ecntofl(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch3IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch3IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SMU CNT counter overflow of channel x. See bit 0."]
        #[inline(always)]
        pub fn cntofl(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch3IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch3IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "GPR0 and GPR1 data overflow. Old data not read out before new data has arrived at input pin. See bit        0."]
        #[inline(always)]
        pub fn gprofl(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch3IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<3,1,0,Ch3IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout reached for input signal of channel x. See bit 0."]
        #[inline(always)]
        pub fn todet(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch3IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<4,1,0,Ch3IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Glitch detected on channel x   x 0...m 1 . This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
        #[inline(always)]
        pub fn glitchdet(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch3IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<5,1,0,Ch3IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3IrqNotify {
        #[inline(always)]
        fn default() -> Ch3IrqNotify {
            <crate::RegValueT<Ch3IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Tduc_SPEC;
    impl crate::sealed::RegSpec for Ch3Tduc_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 TDU Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Tduc = crate::RegValueT<Ch3Tduc_SPEC>;

    impl Ch3Tduc {
        #[doc = "Current Timeout value slice0 for channel x. SLICING    0b11  counter will be reset to 0X0 on TDU RESYNC condition. SLICING   0b11   counter will be loaded with TOV2 on TDU RESYNC        condition."]
        #[inline(always)]
        pub fn to_cnt(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch3Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch3Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Current Timeout value slice1 for channel x. Counter will be reset to 0x0 on TDU RESYNC condition."]
        #[inline(always)]
        pub fn to_cnt1(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Ch3Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, Ch3Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Current Timeout value slice2 for channel x. Counter will be reset to 0x0 on TDU RESYNC condition."]
        #[inline(always)]
        pub fn to_cnt2(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Ch3Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, Ch3Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Tduc {
        #[inline(always)]
        fn default() -> Ch3Tduc {
            <crate::RegValueT<Ch3Tduc_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Tduv_SPEC;
    impl crate::sealed::RegSpec for Ch3Tduv_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 TDU Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Tduv = crate::RegValueT<Ch3Tduv_SPEC>;

    impl Ch3Tduv {
        #[doc = "Time out compare value slice0 for channel x. Compare value for TO CNT."]
        #[inline(always)]
        pub fn tov(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch3Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch3Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Time out compare value slice1 for channel x. Compare value for TO CNT1."]
        #[inline(always)]
        pub fn tov1(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Ch3Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, Ch3Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Time out compare value slice2 for channel x. SLICING  0b11  Compare value for TO CNT2. SLICING  0b11  TOV2 operate as a shadow register for TO CNT."]
        #[inline(always)]
        pub fn tov2(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Ch3Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, Ch3Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Cascading of counter slices. If USE LUT 0b00   USE LUT   0b00"]
        #[inline(always)]
        pub fn slicing(
            self,
        ) -> crate::common::RegisterField<24, 0x3, 1, 0, u8, Ch3Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x3,1,0,u8, Ch3Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use tdu sample evt as Timeout Clock"]
        #[inline(always)]
        pub fn tcs_use_sample_evt(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch3Tduv_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch3Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Define clocking of TO CNT  TO CNT1"]
        #[inline(always)]
        pub fn tdu_same_cnt_clk(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch3Tduv_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch3Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout Clock selection"]
        #[inline(always)]
        pub fn tcs(
            self,
        ) -> crate::common::RegisterField<28, 0x7, 1, 0, u8, Ch3Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<28,0x7,1,0,u8, Ch3Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Tduv {
        #[inline(always)]
        fn default() -> Ch3Tduv {
            <crate::RegValueT<Ch3Tduv_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Cnt_SPEC;
    impl crate::sealed::RegSpec for Ch4Cnt_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Cnt = crate::RegValueT<Ch4Cnt_SPEC>;

    impl Ch4Cnt {
        #[doc = "Actual SMU counter value. The meaning of this value depends on the configured mode  TPWM   actual duration of PWM signal.TPIM   actual duration of all        pulses  sum of pulses .TIEM   actual number of received edges.TIPM          actual number of received edges.TGPS   elapsed time for periodic        sampling.TSSM   shift data."]
        #[inline(always)]
        pub fn cnt(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch4Cnt_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch4Cnt_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Cnt {
        #[inline(always)]
        fn default() -> Ch4Cnt {
            <crate::RegValueT<Ch4Cnt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Cnts_SPEC;
    impl crate::sealed::RegSpec for Ch4Cnts_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Shadow Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Cnts = crate::RegValueT<Ch4Cnts_SPEC>;

    impl Ch4Cnts {
        #[doc = "Counter shadow register. The content of this register has different meaning for the TIM channels        modes. The content depends directly on the bit field CNTS SEL of register TIM i  CH x  CTRL . The register TIM i  CH x  CNTS is only        writable in TIPM TBCM  TGPS and TSSM mode."]
        #[inline(always)]
        pub fn cnts(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch4Cnts_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch4Cnts_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter   ECNT. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch4Cnts_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch4Cnts_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Cnts {
        #[inline(always)]
        fn default() -> Ch4Cnts {
            <crate::RegValueT<Ch4Cnts_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch4Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Ctrl = crate::RegValueT<Ch4Ctrl_SPEC>;

    impl Ch4Ctrl {
        #[doc = "TIM channel x enable. Enabling of the channel resets the registers ECNT         TIM i  CH x  CNT  TIM i  CH x  GPR0  and TIM i  CH x  GPR1 to their reset values. After finishing the action in one shot mode the TIM EN bit is cleared automatically. Otherwise  the bit must be cleared        manually."]
        #[inline(always)]
        pub fn tim_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM channel x mode. If an undefined value is written to the TIM MODE register  the hardware        switches automatically to TIM MODE   0b000  TPWM mode . The TIM MODE register should not be changed while the TIM channel is        enabled. If the TIM channel is enabled and operating in TPWM or TPIM mode after        the first valid edge defined by DSL has occurred  a reconfiguration of        DSL ISL TIM MODE will not change the channel behavior. Reading these bit        fields after reconfiguration will show the newly configured settings but        the initial channel behavior will not change. Only a disabling of the        TIM channel by setting TIM EN  0 and reenabling with TIM EN  1 will        change the channel operation mode."]
        #[inline(always)]
        pub fn tim_mode(
            self,
        ) -> crate::common::RegisterField<1, 0x7, 1, 0, u8, Ch4Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<1,0x7,1,0,u8, Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. After finishing the action in one shot mode the TIM EN bit is cleared automatically."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "GPR0 and GPR1 register values routed to ARU"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Channel Input Control"]
        #[inline(always)]
        pub fn cictrl(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TBU TS0 bits input select for TIM0 CH x  GPRz  z  0  1 . This bit is only applicable for TIM0."]
        #[inline(always)]
        pub fn tbu0_sel(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for GPR0 register. If EGPR0 SEL  0   EGPR0 SEL  1   If a reserved value is written to the EGPR0 SEL  GPR0 SEL bit fields         the hardware will use TBU TS0 input."]
        #[inline(always)]
        pub fn gpr0_sel(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Ch4Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for GPR1 register. If EGPR1 SEL  0   EGPR1 SEL  1  If a reserved value is written to the EGPR1 SEL  GPR1 SEL bit fields         the hardware will use TBU TS0 input. Note  In TBCM mode  EGPR1 SEL 1         GPR1 SEL 01 selects TIM INP VAL as input  in all other cases  TIM Filter        F OUT is used."]
        #[inline(always)]
        pub fn gpr1_sel(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, Ch4Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for CNTS register. The functionality of the CNTS SEL is        disabled in the modes TIPM TGPS and TBCM. CNTS SEL in TSSM mode selects the source        signal for registered or latched shift out operation. 0 B   160   160   160   160   160 use F OUTx 1 B   160   160   160   160   160 use TIM INx"]
        #[inline(always)]
        pub fn cnts_sel(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<12,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control. In TIM MODE 0b110  TSSM   the bit field DSL defines the shift direction. 0 B   160   160   160   160   160 Shift left 1 B   160   160   160   160   160 Shift right"]
        #[inline(always)]
        pub fn dsl(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<13,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Ignore signal level. This bit is mode dependent and will have different meanings  see details        in the TIM Channel mode description ."]
        #[inline(always)]
        pub fn isl(
            self,
        ) -> crate::common::RegisterFieldBool<14, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<14,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enables resetting of counter in certain modes. If TIM MODE 0b101  TGPS    TIM MODE 0b000  TPWM  else ECNT counter operating in wrap around mode  In TIM MODE 0b110  TSSM   the bit field ECNT RESET defines the initial        polarity for the shift register."]
        #[inline(always)]
        pub fn ecnt_reset(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter enable for channel x. If the filter is disabled  all filter related units  including CSU  are        bypassed  which means that the signal F IN is directly routed to signal F OUT ."]
        #[inline(always)]
        pub fn flt_en(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter frequency select"]
        #[inline(always)]
        pub fn flt_cnt_frq(
            self,
        ) -> crate::common::RegisterField<17, 0x3, 1, 0, u8, Ch4Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<17,0x3,1,0,u8, Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enables external capture mode. The selected TIM mode is only sensitive to external capture pulses the        input event changes are ignored."]
        #[inline(always)]
        pub fn ext_cap_en(
            self,
        ) -> crate::common::RegisterFieldBool<19, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<19,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter mode for rising edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_mode_re(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter mode for rising edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_ctr_re(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter mode for falling edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_mode_fe(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter mode for falling edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_ctr_fe(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CMU clock source select for channel. If ECLK SEL  0   ECLK SEL  1"]
        #[inline(always)]
        pub fn clk_sel(
            self,
        ) -> crate::common::RegisterField<24, 0x7, 1, 0, u8, Ch4Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x7,1,0,u8, Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended Edge counter overflow behavior"]
        #[inline(always)]
        pub fn fr_ecnt_ofl(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of GPR0 SEL bit field. Details described in GPR0 SEL bit field."]
        #[inline(always)]
        pub fn egpr0_sel(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of GPR1 SEL bit field. Details described in GPR1 SEL bit field."]
        #[inline(always)]
        pub fn egpr1_sel(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout control. It has to be mentioned that writing of TOCTRL  0 will every time stop        the TDU  independent of the previous state of TOCTRL."]
        #[inline(always)]
        pub fn toctrl(
            self,
        ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, Ch4Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<30,0x3,1,0,u8, Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Ctrl {
        #[inline(always)]
        fn default() -> Ch4Ctrl {
            <crate::RegValueT<Ch4Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Ecnt_SPEC;
    impl crate::sealed::RegSpec for Ch4Ecnt_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Edge Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Ecnt = crate::RegValueT<Ch4Ecnt_SPEC>;

    impl Ch4Ecnt {
        #[doc = "Edge counter. If TIM channel is disabled the content of ECNT gets frozen. A read will        auto clear the bits  15 1 . Further read accesses to ECNT will show on        Bit 0 the actual input signal value of the channel."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch4Ecnt_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch4Ecnt_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Ecnt {
        #[inline(always)]
        fn default() -> Ch4Ecnt {
            <crate::RegValueT<Ch4Ecnt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Ectrl_SPEC;
    impl crate::sealed::RegSpec for Ch4Ectrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Extended Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Ectrl = crate::RegValueT<Ch4Ectrl_SPEC>;

    impl Ch4Ectrl {
        #[doc = "Defines selected source for triggering the EXT CAPTURE functionality"]
        #[inline(always)]
        pub fn ext_cap_src(
            self,
        ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Ch4Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xf,1,0,u8, Ch4Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input data source for TDU"]
        #[inline(always)]
        pub fn use_prev_tdu_in(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch4Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch4Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "selection of source for TODET IRQ. With TODET IRQ SRC 0b00 the ACB bit 2 will be driven by signal        tdu timeout evt  if TODET IRQ SRC  0b00 ACB2 will be 0."]
        #[inline(always)]
        pub fn todet_irq_src(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Ch4Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, Ch4Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will start the TDU unit. In mode SLICING 0b11 every start restart will load the TO CNT with value        TOV2. Note  tdu start 000 event is defined as  Each writing of TOCTRL           0  independent of current TOCTRL  while TDU START 0b000 and TDU is        stopped  initially or stopped by TDU STOP event . This event will last 1        system clock cycle."]
        #[inline(always)]
        pub fn tdu_start(
            self,
        ) -> crate::common::RegisterField<8, 0x7, 1, 0, u8, Ch4Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x7,1,0,u8, Ch4Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will stop the TDU unit. Note  tdu toctrl 0 event is defined as  Each writing of TOCTRL   0         independent of current TOCTRL  while TDU is started. This event will        last 1 system clock cycle."]
        #[inline(always)]
        pub fn tdu_stop(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch4Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch4Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will resynchronize the TDU unit. Encoding see Table  160 14 and Table  160 15 ."]
        #[inline(always)]
        pub fn tdu_resync(
            self,
        ) -> crate::common::RegisterField<16, 0xf, 1, 0, u8, Ch4Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xf,1,0,u8, Ch4Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Generate Filter input by lookup table"]
        #[inline(always)]
        pub fn use_lut(
            self,
        ) -> crate::common::RegisterField<22, 0x3, 1, 0, u8, Ch4Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<22,0x3,1,0,u8, Ch4Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field FLT CTR RE. Details described in FLT CTR RE bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eflt_ctr_re(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch4Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch4Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field FLT CTR FE. Details described in FLT CTR FE bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eflt_ctr_fe(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch4Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch4Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Swap point of time of capturing CNTS and GPR1. This bit is only applicable in TPWM and TPIM mode. Set to 0 in all other        modes."]
        #[inline(always)]
        pub fn swap_capture(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch4Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch4Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Start immediately the measurement. This bit is only applicable in TPWM and TPIM mode. Set to 0 in all other        modes."]
        #[inline(always)]
        pub fn imm_start(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch4Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch4Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field CLK SEL. Details described in CLK SEL bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eclk_sel(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch4Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch4Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input data source for TIM channel"]
        #[inline(always)]
        pub fn use_prev_ch_in(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch4Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch4Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Ectrl {
        #[inline(always)]
        fn default() -> Ch4Ectrl {
            <crate::RegValueT<Ch4Ectrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4EirqEn_SPEC;
    impl crate::sealed::RegSpec for Ch4EirqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4EirqEn = crate::RegValueT<Ch4EirqEn_SPEC>;

    impl Ch4EirqEn {
        #[doc = "TIM NEWVALx EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn newval_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch4EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch4EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM ECNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ecntofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch4EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch4EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM CNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn cntofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch4EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch4EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GPROFL IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn gprofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch4EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch4EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM TODETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn todet_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch4EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch4EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GLITCHDETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn glitchdet_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch4EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch4EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4EirqEn {
        #[inline(always)]
        fn default() -> Ch4EirqEn {
            <crate::RegValueT<Ch4EirqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4FltFe_SPEC;
    impl crate::sealed::RegSpec for Ch4FltFe_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 1 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4FltFe = crate::RegValueT<Ch4FltFe_SPEC>;

    impl Ch4FltFe {
        #[doc = "Filter parameter for falling edge. FLT FE has different meanings in the various filter modes.Immediate edge propagation mode   acceptance time for falling edge Individual deglitch time mode   deglitch time for falling edge."]
        #[inline(always)]
        pub fn flt_fe(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch4FltFe_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch4FltFe_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4FltFe {
        #[inline(always)]
        fn default() -> Ch4FltFe {
            <crate::RegValueT<Ch4FltFe_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4FltRe_SPEC;
    impl crate::sealed::RegSpec for Ch4FltRe_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 0 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4FltRe = crate::RegValueT<Ch4FltRe_SPEC>;

    impl Ch4FltRe {
        #[doc = "Filter parameter for rising edge. FLT RE has different meanings in the various filter modes.Immediate edge        propagation mode   acceptance time for rising edgeIndividual deglitch        time mode   deglitch time for rising edge."]
        #[inline(always)]
        pub fn flt_re(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch4FltRe_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch4FltRe_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4FltRe {
        #[inline(always)]
        fn default() -> Ch4FltRe {
            <crate::RegValueT<Ch4FltRe_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Gpr0_SPEC;
    impl crate::sealed::RegSpec for Ch4Gpr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 General Purpose 0 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Gpr0 = crate::RegValueT<Ch4Gpr0_SPEC>;

    impl Ch4Gpr0 {
        #[doc = "Input signal characteristic parameter 0. The content of this register has different meaning for the TIM channels        modes. The content directly depends on the bit fields EGPR0 SEL   GPR0 SEL of register TIM i  CH x  CTRL . Note  The content of this register can only        be written in TIM channel mode TSSM."]
        #[inline(always)]
        pub fn gpr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch4Gpr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch4Gpr0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch4Gpr0_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch4Gpr0_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Gpr0 {
        #[inline(always)]
        fn default() -> Ch4Gpr0 {
            <crate::RegValueT<Ch4Gpr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Gpr1_SPEC;
    impl crate::sealed::RegSpec for Ch4Gpr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 General Purpose 1 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Gpr1 = crate::RegValueT<Ch4Gpr1_SPEC>;

    impl Ch4Gpr1 {
        #[doc = "Input signal characteristic parameter 1. The content of this register has different meaning for the TIM channels        modes. The content directly depends on the bit fields EGPR1 SEL   GPR1 SEL of register TIM i  CH x  CTRL . In TBCM mode if EGPR1 SEL 1  GPR1 SEL 01 then TIM INP VAL is used as        input in all other cases TIM Filter F OUT is used as input and Bits        GPR1 23 8    0 The content of this register can only be written in TIM channel mode        TGPS and TSSM."]
        #[inline(always)]
        pub fn gpr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch4Gpr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch4Gpr1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch4Gpr1_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch4Gpr1_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Gpr1 {
        #[inline(always)]
        fn default() -> Ch4Gpr1 {
            <crate::RegValueT<Ch4Gpr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch4IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4IrqEn = crate::RegValueT<Ch4IrqEn_SPEC>;

    impl Ch4IrqEn {
        #[doc = "TIM NEWVALx IRQ interrupt enable"]
        #[inline(always)]
        pub fn newval_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch4IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch4IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM ECNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ecntofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch4IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch4IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM CNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn cntofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch4IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch4IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GPROFL IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn gprofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch4IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch4IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM TODETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn todet_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch4IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch4IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GLITCHDETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn glitchdet_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch4IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch4IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4IrqEn {
        #[inline(always)]
        fn default() -> Ch4IrqEn {
            <crate::RegValueT<Ch4IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch4IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4IrqForcint = crate::RegValueT<Ch4IrqForcint_SPEC>;

    impl Ch4IrqForcint {
        #[doc = "Trigger NEWVAL bit in TIM CHx IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_newval(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch4IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch4IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger ECNTOFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_ecntofl(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch4IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch4IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger CNTOFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_cntofl(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch4IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch4IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger GPROFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_gprofl(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch4IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<3,1,0,Ch4IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TODET bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_todet(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch4IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<4,1,0,Ch4IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger GLITCHDET bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_glitchdet(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch4IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<5,1,0,Ch4IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4IrqForcint {
        #[inline(always)]
        fn default() -> Ch4IrqForcint {
            <crate::RegValueT<Ch4IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch4IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4IrqMode = crate::RegValueT<Ch4IrqMode_SPEC>;

    impl Ch4IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch4IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch4IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4IrqMode {
        #[inline(always)]
        fn default() -> Ch4IrqMode {
            <crate::RegValueT<Ch4IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch4IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4IrqNotify = crate::RegValueT<Ch4IrqNotify_SPEC>;

    impl Ch4IrqNotify {
        #[doc = "New measurement value detected by in channel x. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
        #[inline(always)]
        pub fn newval(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch4IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch4IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "counter overflow of channel x. See bit 0."]
        #[inline(always)]
        pub fn ecntofl(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch4IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch4IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SMU CNT counter overflow of channel x. See bit 0."]
        #[inline(always)]
        pub fn cntofl(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch4IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch4IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "GPR0 and GPR1 data overflow. Old data not read out before new data has arrived at input pin. See bit        0."]
        #[inline(always)]
        pub fn gprofl(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch4IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<3,1,0,Ch4IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout reached for input signal of channel x. See bit 0."]
        #[inline(always)]
        pub fn todet(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch4IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<4,1,0,Ch4IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Glitch detected on channel x   x 0...m 1 . This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
        #[inline(always)]
        pub fn glitchdet(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch4IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<5,1,0,Ch4IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4IrqNotify {
        #[inline(always)]
        fn default() -> Ch4IrqNotify {
            <crate::RegValueT<Ch4IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Tduc_SPEC;
    impl crate::sealed::RegSpec for Ch4Tduc_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 TDU Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Tduc = crate::RegValueT<Ch4Tduc_SPEC>;

    impl Ch4Tduc {
        #[doc = "Current Timeout value slice0 for channel x. SLICING    0b11  counter will be reset to 0X0 on TDU RESYNC condition. SLICING   0b11   counter will be loaded with TOV2 on TDU RESYNC        condition."]
        #[inline(always)]
        pub fn to_cnt(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch4Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch4Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Current Timeout value slice1 for channel x. Counter will be reset to 0x0 on TDU RESYNC condition."]
        #[inline(always)]
        pub fn to_cnt1(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Ch4Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, Ch4Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Current Timeout value slice2 for channel x. Counter will be reset to 0x0 on TDU RESYNC condition."]
        #[inline(always)]
        pub fn to_cnt2(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Ch4Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, Ch4Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Tduc {
        #[inline(always)]
        fn default() -> Ch4Tduc {
            <crate::RegValueT<Ch4Tduc_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Tduv_SPEC;
    impl crate::sealed::RegSpec for Ch4Tduv_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 TDU Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Tduv = crate::RegValueT<Ch4Tduv_SPEC>;

    impl Ch4Tduv {
        #[doc = "Time out compare value slice0 for channel x. Compare value for TO CNT."]
        #[inline(always)]
        pub fn tov(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch4Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch4Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Time out compare value slice1 for channel x. Compare value for TO CNT1."]
        #[inline(always)]
        pub fn tov1(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Ch4Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, Ch4Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Time out compare value slice2 for channel x. SLICING  0b11  Compare value for TO CNT2. SLICING  0b11  TOV2 operate as a shadow register for TO CNT."]
        #[inline(always)]
        pub fn tov2(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Ch4Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, Ch4Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Cascading of counter slices. If USE LUT 0b00   USE LUT   0b00"]
        #[inline(always)]
        pub fn slicing(
            self,
        ) -> crate::common::RegisterField<24, 0x3, 1, 0, u8, Ch4Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x3,1,0,u8, Ch4Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use tdu sample evt as Timeout Clock"]
        #[inline(always)]
        pub fn tcs_use_sample_evt(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch4Tduv_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch4Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Define clocking of TO CNT  TO CNT1"]
        #[inline(always)]
        pub fn tdu_same_cnt_clk(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch4Tduv_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch4Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout Clock selection"]
        #[inline(always)]
        pub fn tcs(
            self,
        ) -> crate::common::RegisterField<28, 0x7, 1, 0, u8, Ch4Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<28,0x7,1,0,u8, Ch4Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Tduv {
        #[inline(always)]
        fn default() -> Ch4Tduv {
            <crate::RegValueT<Ch4Tduv_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Cnt_SPEC;
    impl crate::sealed::RegSpec for Ch5Cnt_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Cnt = crate::RegValueT<Ch5Cnt_SPEC>;

    impl Ch5Cnt {
        #[doc = "Actual SMU counter value. The meaning of this value depends on the configured mode  TPWM   actual duration of PWM signal.TPIM   actual duration of all        pulses  sum of pulses .TIEM   actual number of received edges.TIPM          actual number of received edges.TGPS   elapsed time for periodic        sampling.TSSM   shift data."]
        #[inline(always)]
        pub fn cnt(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch5Cnt_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch5Cnt_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Cnt {
        #[inline(always)]
        fn default() -> Ch5Cnt {
            <crate::RegValueT<Ch5Cnt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Cnts_SPEC;
    impl crate::sealed::RegSpec for Ch5Cnts_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Shadow Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Cnts = crate::RegValueT<Ch5Cnts_SPEC>;

    impl Ch5Cnts {
        #[doc = "Counter shadow register. The content of this register has different meaning for the TIM channels        modes. The content depends directly on the bit field CNTS SEL of register TIM i  CH x  CTRL . The register TIM i  CH x  CNTS is only        writable in TIPM TBCM  TGPS and TSSM mode."]
        #[inline(always)]
        pub fn cnts(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch5Cnts_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch5Cnts_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter   ECNT. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch5Cnts_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch5Cnts_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Cnts {
        #[inline(always)]
        fn default() -> Ch5Cnts {
            <crate::RegValueT<Ch5Cnts_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch5Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Ctrl = crate::RegValueT<Ch5Ctrl_SPEC>;

    impl Ch5Ctrl {
        #[doc = "TIM channel x enable. Enabling of the channel resets the registers ECNT         TIM i  CH x  CNT  TIM i  CH x  GPR0  and TIM i  CH x  GPR1 to their reset values. After finishing the action in one shot mode the TIM EN bit is cleared automatically. Otherwise  the bit must be cleared        manually."]
        #[inline(always)]
        pub fn tim_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM channel x mode. If an undefined value is written to the TIM MODE register  the hardware        switches automatically to TIM MODE   0b000  TPWM mode . The TIM MODE register should not be changed while the TIM channel is        enabled. If the TIM channel is enabled and operating in TPWM or TPIM mode after        the first valid edge defined by DSL has occurred  a reconfiguration of        DSL ISL TIM MODE will not change the channel behavior. Reading these bit        fields after reconfiguration will show the newly configured settings but        the initial channel behavior will not change. Only a disabling of the        TIM channel by setting TIM EN  0 and reenabling with TIM EN  1 will        change the channel operation mode."]
        #[inline(always)]
        pub fn tim_mode(
            self,
        ) -> crate::common::RegisterField<1, 0x7, 1, 0, u8, Ch5Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<1,0x7,1,0,u8, Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. After finishing the action in one shot mode the TIM EN bit is cleared automatically."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "GPR0 and GPR1 register values routed to ARU"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Channel Input Control"]
        #[inline(always)]
        pub fn cictrl(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TBU TS0 bits input select for TIM0 CH x  GPRz  z  0  1 . This bit is only applicable for TIM0."]
        #[inline(always)]
        pub fn tbu0_sel(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for GPR0 register. If EGPR0 SEL  0   EGPR0 SEL  1   If a reserved value is written to the EGPR0 SEL  GPR0 SEL bit fields         the hardware will use TBU TS0 input."]
        #[inline(always)]
        pub fn gpr0_sel(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Ch5Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for GPR1 register. If EGPR1 SEL  0   EGPR1 SEL  1  If a reserved value is written to the EGPR1 SEL  GPR1 SEL bit fields         the hardware will use TBU TS0 input. Note  In TBCM mode  EGPR1 SEL 1         GPR1 SEL 01 selects TIM INP VAL as input  in all other cases  TIM Filter        F OUT is used."]
        #[inline(always)]
        pub fn gpr1_sel(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, Ch5Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for CNTS register. The functionality of the CNTS SEL is        disabled in the modes TIPM TGPS and TBCM. CNTS SEL in TSSM mode selects the source        signal for registered or latched shift out operation. 0 B   160   160   160   160   160 use F OUTx 1 B   160   160   160   160   160 use TIM INx"]
        #[inline(always)]
        pub fn cnts_sel(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<12,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control. In TIM MODE 0b110  TSSM   the bit field DSL defines the shift direction. 0 B   160   160   160   160   160 Shift left 1 B   160   160   160   160   160 Shift right"]
        #[inline(always)]
        pub fn dsl(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<13,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Ignore signal level. This bit is mode dependent and will have different meanings  see details        in the TIM Channel mode description ."]
        #[inline(always)]
        pub fn isl(
            self,
        ) -> crate::common::RegisterFieldBool<14, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<14,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enables resetting of counter in certain modes. If TIM MODE 0b101  TGPS    TIM MODE 0b000  TPWM  else ECNT counter operating in wrap around mode  In TIM MODE 0b110  TSSM   the bit field ECNT RESET defines the initial        polarity for the shift register."]
        #[inline(always)]
        pub fn ecnt_reset(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter enable for channel x. If the filter is disabled  all filter related units  including CSU  are        bypassed  which means that the signal F IN is directly routed to signal F OUT ."]
        #[inline(always)]
        pub fn flt_en(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter frequency select"]
        #[inline(always)]
        pub fn flt_cnt_frq(
            self,
        ) -> crate::common::RegisterField<17, 0x3, 1, 0, u8, Ch5Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<17,0x3,1,0,u8, Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enables external capture mode. The selected TIM mode is only sensitive to external capture pulses the        input event changes are ignored."]
        #[inline(always)]
        pub fn ext_cap_en(
            self,
        ) -> crate::common::RegisterFieldBool<19, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<19,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter mode for rising edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_mode_re(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter mode for rising edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_ctr_re(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter mode for falling edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_mode_fe(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter mode for falling edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_ctr_fe(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CMU clock source select for channel. If ECLK SEL  0   ECLK SEL  1"]
        #[inline(always)]
        pub fn clk_sel(
            self,
        ) -> crate::common::RegisterField<24, 0x7, 1, 0, u8, Ch5Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x7,1,0,u8, Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended Edge counter overflow behavior"]
        #[inline(always)]
        pub fn fr_ecnt_ofl(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of GPR0 SEL bit field. Details described in GPR0 SEL bit field."]
        #[inline(always)]
        pub fn egpr0_sel(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of GPR1 SEL bit field. Details described in GPR1 SEL bit field."]
        #[inline(always)]
        pub fn egpr1_sel(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout control. It has to be mentioned that writing of TOCTRL  0 will every time stop        the TDU  independent of the previous state of TOCTRL."]
        #[inline(always)]
        pub fn toctrl(
            self,
        ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, Ch5Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<30,0x3,1,0,u8, Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Ctrl {
        #[inline(always)]
        fn default() -> Ch5Ctrl {
            <crate::RegValueT<Ch5Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Ecnt_SPEC;
    impl crate::sealed::RegSpec for Ch5Ecnt_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Edge Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Ecnt = crate::RegValueT<Ch5Ecnt_SPEC>;

    impl Ch5Ecnt {
        #[doc = "Edge counter. If TIM channel is disabled the content of ECNT gets frozen. A read will        auto clear the bits  15 1 . Further read accesses to ECNT will show on        Bit 0 the actual input signal value of the channel."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch5Ecnt_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch5Ecnt_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Ecnt {
        #[inline(always)]
        fn default() -> Ch5Ecnt {
            <crate::RegValueT<Ch5Ecnt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Ectrl_SPEC;
    impl crate::sealed::RegSpec for Ch5Ectrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Extended Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Ectrl = crate::RegValueT<Ch5Ectrl_SPEC>;

    impl Ch5Ectrl {
        #[doc = "Defines selected source for triggering the EXT CAPTURE functionality"]
        #[inline(always)]
        pub fn ext_cap_src(
            self,
        ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Ch5Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xf,1,0,u8, Ch5Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input data source for TDU"]
        #[inline(always)]
        pub fn use_prev_tdu_in(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch5Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch5Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "selection of source for TODET IRQ. With TODET IRQ SRC 0b00 the ACB bit 2 will be driven by signal        tdu timeout evt  if TODET IRQ SRC  0b00 ACB2 will be 0."]
        #[inline(always)]
        pub fn todet_irq_src(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Ch5Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, Ch5Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will start the TDU unit. In mode SLICING 0b11 every start restart will load the TO CNT with value        TOV2. Note  tdu start 000 event is defined as  Each writing of TOCTRL           0  independent of current TOCTRL  while TDU START 0b000 and TDU is        stopped  initially or stopped by TDU STOP event . This event will last 1        system clock cycle."]
        #[inline(always)]
        pub fn tdu_start(
            self,
        ) -> crate::common::RegisterField<8, 0x7, 1, 0, u8, Ch5Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x7,1,0,u8, Ch5Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will stop the TDU unit. Note  tdu toctrl 0 event is defined as  Each writing of TOCTRL   0         independent of current TOCTRL  while TDU is started. This event will        last 1 system clock cycle."]
        #[inline(always)]
        pub fn tdu_stop(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch5Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch5Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will resynchronize the TDU unit. Encoding see Table  160 14 and Table  160 15 ."]
        #[inline(always)]
        pub fn tdu_resync(
            self,
        ) -> crate::common::RegisterField<16, 0xf, 1, 0, u8, Ch5Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xf,1,0,u8, Ch5Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Generate Filter input by lookup table"]
        #[inline(always)]
        pub fn use_lut(
            self,
        ) -> crate::common::RegisterField<22, 0x3, 1, 0, u8, Ch5Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<22,0x3,1,0,u8, Ch5Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field FLT CTR RE. Details described in FLT CTR RE bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eflt_ctr_re(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch5Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch5Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field FLT CTR FE. Details described in FLT CTR FE bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eflt_ctr_fe(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch5Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch5Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Swap point of time of capturing CNTS and GPR1. This bit is only applicable in TPWM and TPIM mode. Set to 0 in all other        modes."]
        #[inline(always)]
        pub fn swap_capture(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch5Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch5Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Start immediately the measurement. This bit is only applicable in TPWM and TPIM mode. Set to 0 in all other        modes."]
        #[inline(always)]
        pub fn imm_start(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch5Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch5Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field CLK SEL. Details described in CLK SEL bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eclk_sel(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch5Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch5Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input data source for TIM channel"]
        #[inline(always)]
        pub fn use_prev_ch_in(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch5Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch5Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Ectrl {
        #[inline(always)]
        fn default() -> Ch5Ectrl {
            <crate::RegValueT<Ch5Ectrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5EirqEn_SPEC;
    impl crate::sealed::RegSpec for Ch5EirqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5EirqEn = crate::RegValueT<Ch5EirqEn_SPEC>;

    impl Ch5EirqEn {
        #[doc = "TIM NEWVALx EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn newval_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch5EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch5EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM ECNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ecntofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch5EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch5EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM CNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn cntofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch5EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch5EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GPROFL IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn gprofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch5EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch5EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM TODETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn todet_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch5EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch5EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GLITCHDETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn glitchdet_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch5EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch5EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5EirqEn {
        #[inline(always)]
        fn default() -> Ch5EirqEn {
            <crate::RegValueT<Ch5EirqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5FltFe_SPEC;
    impl crate::sealed::RegSpec for Ch5FltFe_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 1 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5FltFe = crate::RegValueT<Ch5FltFe_SPEC>;

    impl Ch5FltFe {
        #[doc = "Filter parameter for falling edge. FLT FE has different meanings in the various filter modes.Immediate edge propagation mode   acceptance time for falling edge Individual deglitch time mode   deglitch time for falling edge."]
        #[inline(always)]
        pub fn flt_fe(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch5FltFe_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch5FltFe_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5FltFe {
        #[inline(always)]
        fn default() -> Ch5FltFe {
            <crate::RegValueT<Ch5FltFe_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5FltRe_SPEC;
    impl crate::sealed::RegSpec for Ch5FltRe_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 0 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5FltRe = crate::RegValueT<Ch5FltRe_SPEC>;

    impl Ch5FltRe {
        #[doc = "Filter parameter for rising edge. FLT RE has different meanings in the various filter modes.Immediate edge        propagation mode   acceptance time for rising edgeIndividual deglitch        time mode   deglitch time for rising edge."]
        #[inline(always)]
        pub fn flt_re(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch5FltRe_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch5FltRe_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5FltRe {
        #[inline(always)]
        fn default() -> Ch5FltRe {
            <crate::RegValueT<Ch5FltRe_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Gpr0_SPEC;
    impl crate::sealed::RegSpec for Ch5Gpr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 General Purpose 0 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Gpr0 = crate::RegValueT<Ch5Gpr0_SPEC>;

    impl Ch5Gpr0 {
        #[doc = "Input signal characteristic parameter 0. The content of this register has different meaning for the TIM channels        modes. The content directly depends on the bit fields EGPR0 SEL   GPR0 SEL of register TIM i  CH x  CTRL . Note  The content of this register can only        be written in TIM channel mode TSSM."]
        #[inline(always)]
        pub fn gpr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch5Gpr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch5Gpr0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch5Gpr0_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch5Gpr0_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Gpr0 {
        #[inline(always)]
        fn default() -> Ch5Gpr0 {
            <crate::RegValueT<Ch5Gpr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Gpr1_SPEC;
    impl crate::sealed::RegSpec for Ch5Gpr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 General Purpose 1 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Gpr1 = crate::RegValueT<Ch5Gpr1_SPEC>;

    impl Ch5Gpr1 {
        #[doc = "Input signal characteristic parameter 1. The content of this register has different meaning for the TIM channels        modes. The content directly depends on the bit fields EGPR1 SEL   GPR1 SEL of register TIM i  CH x  CTRL . In TBCM mode if EGPR1 SEL 1  GPR1 SEL 01 then TIM INP VAL is used as        input in all other cases TIM Filter F OUT is used as input and Bits        GPR1 23 8    0 The content of this register can only be written in TIM channel mode        TGPS and TSSM."]
        #[inline(always)]
        pub fn gpr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch5Gpr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch5Gpr1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch5Gpr1_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch5Gpr1_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Gpr1 {
        #[inline(always)]
        fn default() -> Ch5Gpr1 {
            <crate::RegValueT<Ch5Gpr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch5IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5IrqEn = crate::RegValueT<Ch5IrqEn_SPEC>;

    impl Ch5IrqEn {
        #[doc = "TIM NEWVALx IRQ interrupt enable"]
        #[inline(always)]
        pub fn newval_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch5IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch5IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM ECNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ecntofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch5IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch5IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM CNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn cntofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch5IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch5IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GPROFL IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn gprofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch5IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch5IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM TODETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn todet_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch5IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch5IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GLITCHDETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn glitchdet_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch5IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch5IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5IrqEn {
        #[inline(always)]
        fn default() -> Ch5IrqEn {
            <crate::RegValueT<Ch5IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch5IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5IrqForcint = crate::RegValueT<Ch5IrqForcint_SPEC>;

    impl Ch5IrqForcint {
        #[doc = "Trigger NEWVAL bit in TIM CHx IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_newval(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch5IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch5IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger ECNTOFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_ecntofl(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch5IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch5IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger CNTOFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_cntofl(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch5IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch5IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger GPROFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_gprofl(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch5IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<3,1,0,Ch5IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TODET bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_todet(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch5IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<4,1,0,Ch5IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger GLITCHDET bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_glitchdet(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch5IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<5,1,0,Ch5IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5IrqForcint {
        #[inline(always)]
        fn default() -> Ch5IrqForcint {
            <crate::RegValueT<Ch5IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch5IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5IrqMode = crate::RegValueT<Ch5IrqMode_SPEC>;

    impl Ch5IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch5IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch5IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5IrqMode {
        #[inline(always)]
        fn default() -> Ch5IrqMode {
            <crate::RegValueT<Ch5IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch5IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5IrqNotify = crate::RegValueT<Ch5IrqNotify_SPEC>;

    impl Ch5IrqNotify {
        #[doc = "New measurement value detected by in channel x. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
        #[inline(always)]
        pub fn newval(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch5IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch5IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "counter overflow of channel x. See bit 0."]
        #[inline(always)]
        pub fn ecntofl(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch5IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch5IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SMU CNT counter overflow of channel x. See bit 0."]
        #[inline(always)]
        pub fn cntofl(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch5IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch5IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "GPR0 and GPR1 data overflow. Old data not read out before new data has arrived at input pin. See bit        0."]
        #[inline(always)]
        pub fn gprofl(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch5IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<3,1,0,Ch5IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout reached for input signal of channel x. See bit 0."]
        #[inline(always)]
        pub fn todet(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch5IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<4,1,0,Ch5IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Glitch detected on channel x   x 0...m 1 . This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
        #[inline(always)]
        pub fn glitchdet(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch5IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<5,1,0,Ch5IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5IrqNotify {
        #[inline(always)]
        fn default() -> Ch5IrqNotify {
            <crate::RegValueT<Ch5IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Tduc_SPEC;
    impl crate::sealed::RegSpec for Ch5Tduc_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 TDU Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Tduc = crate::RegValueT<Ch5Tduc_SPEC>;

    impl Ch5Tduc {
        #[doc = "Current Timeout value slice0 for channel x. SLICING    0b11  counter will be reset to 0X0 on TDU RESYNC condition. SLICING   0b11   counter will be loaded with TOV2 on TDU RESYNC        condition."]
        #[inline(always)]
        pub fn to_cnt(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch5Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch5Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Current Timeout value slice1 for channel x. Counter will be reset to 0x0 on TDU RESYNC condition."]
        #[inline(always)]
        pub fn to_cnt1(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Ch5Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, Ch5Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Current Timeout value slice2 for channel x. Counter will be reset to 0x0 on TDU RESYNC condition."]
        #[inline(always)]
        pub fn to_cnt2(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Ch5Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, Ch5Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Tduc {
        #[inline(always)]
        fn default() -> Ch5Tduc {
            <crate::RegValueT<Ch5Tduc_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Tduv_SPEC;
    impl crate::sealed::RegSpec for Ch5Tduv_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 TDU Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Tduv = crate::RegValueT<Ch5Tduv_SPEC>;

    impl Ch5Tduv {
        #[doc = "Time out compare value slice0 for channel x. Compare value for TO CNT."]
        #[inline(always)]
        pub fn tov(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch5Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch5Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Time out compare value slice1 for channel x. Compare value for TO CNT1."]
        #[inline(always)]
        pub fn tov1(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Ch5Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, Ch5Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Time out compare value slice2 for channel x. SLICING  0b11  Compare value for TO CNT2. SLICING  0b11  TOV2 operate as a shadow register for TO CNT."]
        #[inline(always)]
        pub fn tov2(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Ch5Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, Ch5Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Cascading of counter slices. If USE LUT 0b00   USE LUT   0b00"]
        #[inline(always)]
        pub fn slicing(
            self,
        ) -> crate::common::RegisterField<24, 0x3, 1, 0, u8, Ch5Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x3,1,0,u8, Ch5Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use tdu sample evt as Timeout Clock"]
        #[inline(always)]
        pub fn tcs_use_sample_evt(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch5Tduv_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch5Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Define clocking of TO CNT  TO CNT1"]
        #[inline(always)]
        pub fn tdu_same_cnt_clk(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch5Tduv_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch5Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout Clock selection"]
        #[inline(always)]
        pub fn tcs(
            self,
        ) -> crate::common::RegisterField<28, 0x7, 1, 0, u8, Ch5Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<28,0x7,1,0,u8, Ch5Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Tduv {
        #[inline(always)]
        fn default() -> Ch5Tduv {
            <crate::RegValueT<Ch5Tduv_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Cnt_SPEC;
    impl crate::sealed::RegSpec for Ch6Cnt_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Cnt = crate::RegValueT<Ch6Cnt_SPEC>;

    impl Ch6Cnt {
        #[doc = "Actual SMU counter value. The meaning of this value depends on the configured mode  TPWM   actual duration of PWM signal.TPIM   actual duration of all        pulses  sum of pulses .TIEM   actual number of received edges.TIPM          actual number of received edges.TGPS   elapsed time for periodic        sampling.TSSM   shift data."]
        #[inline(always)]
        pub fn cnt(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch6Cnt_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch6Cnt_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Cnt {
        #[inline(always)]
        fn default() -> Ch6Cnt {
            <crate::RegValueT<Ch6Cnt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Cnts_SPEC;
    impl crate::sealed::RegSpec for Ch6Cnts_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Shadow Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Cnts = crate::RegValueT<Ch6Cnts_SPEC>;

    impl Ch6Cnts {
        #[doc = "Counter shadow register. The content of this register has different meaning for the TIM channels        modes. The content depends directly on the bit field CNTS SEL of register TIM i  CH x  CTRL . The register TIM i  CH x  CNTS is only        writable in TIPM TBCM  TGPS and TSSM mode."]
        #[inline(always)]
        pub fn cnts(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch6Cnts_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch6Cnts_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter   ECNT. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch6Cnts_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch6Cnts_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Cnts {
        #[inline(always)]
        fn default() -> Ch6Cnts {
            <crate::RegValueT<Ch6Cnts_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch6Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Ctrl = crate::RegValueT<Ch6Ctrl_SPEC>;

    impl Ch6Ctrl {
        #[doc = "TIM channel x enable. Enabling of the channel resets the registers ECNT         TIM i  CH x  CNT  TIM i  CH x  GPR0  and TIM i  CH x  GPR1 to their reset values. After finishing the action in one shot mode the TIM EN bit is cleared automatically. Otherwise  the bit must be cleared        manually."]
        #[inline(always)]
        pub fn tim_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM channel x mode. If an undefined value is written to the TIM MODE register  the hardware        switches automatically to TIM MODE   0b000  TPWM mode . The TIM MODE register should not be changed while the TIM channel is        enabled. If the TIM channel is enabled and operating in TPWM or TPIM mode after        the first valid edge defined by DSL has occurred  a reconfiguration of        DSL ISL TIM MODE will not change the channel behavior. Reading these bit        fields after reconfiguration will show the newly configured settings but        the initial channel behavior will not change. Only a disabling of the        TIM channel by setting TIM EN  0 and reenabling with TIM EN  1 will        change the channel operation mode."]
        #[inline(always)]
        pub fn tim_mode(
            self,
        ) -> crate::common::RegisterField<1, 0x7, 1, 0, u8, Ch6Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<1,0x7,1,0,u8, Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. After finishing the action in one shot mode the TIM EN bit is cleared automatically."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "GPR0 and GPR1 register values routed to ARU"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Channel Input Control"]
        #[inline(always)]
        pub fn cictrl(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TBU TS0 bits input select for TIM0 CH x  GPRz  z  0  1 . This bit is only applicable for TIM0."]
        #[inline(always)]
        pub fn tbu0_sel(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for GPR0 register. If EGPR0 SEL  0   EGPR0 SEL  1   If a reserved value is written to the EGPR0 SEL  GPR0 SEL bit fields         the hardware will use TBU TS0 input."]
        #[inline(always)]
        pub fn gpr0_sel(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Ch6Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for GPR1 register. If EGPR1 SEL  0   EGPR1 SEL  1  If a reserved value is written to the EGPR1 SEL  GPR1 SEL bit fields         the hardware will use TBU TS0 input. Note  In TBCM mode  EGPR1 SEL 1         GPR1 SEL 01 selects TIM INP VAL as input  in all other cases  TIM Filter        F OUT is used."]
        #[inline(always)]
        pub fn gpr1_sel(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, Ch6Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for CNTS register. The functionality of the CNTS SEL is        disabled in the modes TIPM TGPS and TBCM. CNTS SEL in TSSM mode selects the source        signal for registered or latched shift out operation. 0 B   160   160   160   160   160 use F OUTx 1 B   160   160   160   160   160 use TIM INx"]
        #[inline(always)]
        pub fn cnts_sel(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<12,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control. In TIM MODE 0b110  TSSM   the bit field DSL defines the shift direction. 0 B   160   160   160   160   160 Shift left 1 B   160   160   160   160   160 Shift right"]
        #[inline(always)]
        pub fn dsl(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<13,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Ignore signal level. This bit is mode dependent and will have different meanings  see details        in the TIM Channel mode description ."]
        #[inline(always)]
        pub fn isl(
            self,
        ) -> crate::common::RegisterFieldBool<14, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<14,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enables resetting of counter in certain modes. If TIM MODE 0b101  TGPS    TIM MODE 0b000  TPWM  else ECNT counter operating in wrap around mode  In TIM MODE 0b110  TSSM   the bit field ECNT RESET defines the initial        polarity for the shift register."]
        #[inline(always)]
        pub fn ecnt_reset(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter enable for channel x. If the filter is disabled  all filter related units  including CSU  are        bypassed  which means that the signal F IN is directly routed to signal F OUT ."]
        #[inline(always)]
        pub fn flt_en(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter frequency select"]
        #[inline(always)]
        pub fn flt_cnt_frq(
            self,
        ) -> crate::common::RegisterField<17, 0x3, 1, 0, u8, Ch6Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<17,0x3,1,0,u8, Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enables external capture mode. The selected TIM mode is only sensitive to external capture pulses the        input event changes are ignored."]
        #[inline(always)]
        pub fn ext_cap_en(
            self,
        ) -> crate::common::RegisterFieldBool<19, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<19,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter mode for rising edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_mode_re(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter mode for rising edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_ctr_re(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter mode for falling edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_mode_fe(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter mode for falling edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_ctr_fe(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CMU clock source select for channel. If ECLK SEL  0   ECLK SEL  1"]
        #[inline(always)]
        pub fn clk_sel(
            self,
        ) -> crate::common::RegisterField<24, 0x7, 1, 0, u8, Ch6Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x7,1,0,u8, Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended Edge counter overflow behavior"]
        #[inline(always)]
        pub fn fr_ecnt_ofl(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of GPR0 SEL bit field. Details described in GPR0 SEL bit field."]
        #[inline(always)]
        pub fn egpr0_sel(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of GPR1 SEL bit field. Details described in GPR1 SEL bit field."]
        #[inline(always)]
        pub fn egpr1_sel(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout control. It has to be mentioned that writing of TOCTRL  0 will every time stop        the TDU  independent of the previous state of TOCTRL."]
        #[inline(always)]
        pub fn toctrl(
            self,
        ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, Ch6Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<30,0x3,1,0,u8, Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Ctrl {
        #[inline(always)]
        fn default() -> Ch6Ctrl {
            <crate::RegValueT<Ch6Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Ecnt_SPEC;
    impl crate::sealed::RegSpec for Ch6Ecnt_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Edge Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Ecnt = crate::RegValueT<Ch6Ecnt_SPEC>;

    impl Ch6Ecnt {
        #[doc = "Edge counter. If TIM channel is disabled the content of ECNT gets frozen. A read will        auto clear the bits  15 1 . Further read accesses to ECNT will show on        Bit 0 the actual input signal value of the channel."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch6Ecnt_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch6Ecnt_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Ecnt {
        #[inline(always)]
        fn default() -> Ch6Ecnt {
            <crate::RegValueT<Ch6Ecnt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Ectrl_SPEC;
    impl crate::sealed::RegSpec for Ch6Ectrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Extended Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Ectrl = crate::RegValueT<Ch6Ectrl_SPEC>;

    impl Ch6Ectrl {
        #[doc = "Defines selected source for triggering the EXT CAPTURE functionality"]
        #[inline(always)]
        pub fn ext_cap_src(
            self,
        ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Ch6Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xf,1,0,u8, Ch6Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input data source for TDU"]
        #[inline(always)]
        pub fn use_prev_tdu_in(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch6Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch6Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "selection of source for TODET IRQ. With TODET IRQ SRC 0b00 the ACB bit 2 will be driven by signal        tdu timeout evt  if TODET IRQ SRC  0b00 ACB2 will be 0."]
        #[inline(always)]
        pub fn todet_irq_src(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Ch6Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, Ch6Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will start the TDU unit. In mode SLICING 0b11 every start restart will load the TO CNT with value        TOV2. Note  tdu start 000 event is defined as  Each writing of TOCTRL           0  independent of current TOCTRL  while TDU START 0b000 and TDU is        stopped  initially or stopped by TDU STOP event . This event will last 1        system clock cycle."]
        #[inline(always)]
        pub fn tdu_start(
            self,
        ) -> crate::common::RegisterField<8, 0x7, 1, 0, u8, Ch6Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x7,1,0,u8, Ch6Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will stop the TDU unit. Note  tdu toctrl 0 event is defined as  Each writing of TOCTRL   0         independent of current TOCTRL  while TDU is started. This event will        last 1 system clock cycle."]
        #[inline(always)]
        pub fn tdu_stop(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch6Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch6Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will resynchronize the TDU unit. Encoding see Table  160 14 and Table  160 15 ."]
        #[inline(always)]
        pub fn tdu_resync(
            self,
        ) -> crate::common::RegisterField<16, 0xf, 1, 0, u8, Ch6Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xf,1,0,u8, Ch6Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Generate Filter input by lookup table"]
        #[inline(always)]
        pub fn use_lut(
            self,
        ) -> crate::common::RegisterField<22, 0x3, 1, 0, u8, Ch6Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<22,0x3,1,0,u8, Ch6Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field FLT CTR RE. Details described in FLT CTR RE bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eflt_ctr_re(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch6Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch6Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field FLT CTR FE. Details described in FLT CTR FE bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eflt_ctr_fe(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch6Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch6Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Swap point of time of capturing CNTS and GPR1. This bit is only applicable in TPWM and TPIM mode. Set to 0 in all other        modes."]
        #[inline(always)]
        pub fn swap_capture(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch6Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch6Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Start immediately the measurement. This bit is only applicable in TPWM and TPIM mode. Set to 0 in all other        modes."]
        #[inline(always)]
        pub fn imm_start(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch6Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch6Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field CLK SEL. Details described in CLK SEL bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eclk_sel(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch6Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch6Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input data source for TIM channel"]
        #[inline(always)]
        pub fn use_prev_ch_in(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch6Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch6Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Ectrl {
        #[inline(always)]
        fn default() -> Ch6Ectrl {
            <crate::RegValueT<Ch6Ectrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6EirqEn_SPEC;
    impl crate::sealed::RegSpec for Ch6EirqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6EirqEn = crate::RegValueT<Ch6EirqEn_SPEC>;

    impl Ch6EirqEn {
        #[doc = "TIM NEWVALx EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn newval_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch6EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch6EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM ECNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ecntofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch6EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch6EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM CNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn cntofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch6EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch6EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GPROFL IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn gprofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch6EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch6EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM TODETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn todet_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch6EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch6EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GLITCHDETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn glitchdet_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch6EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch6EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6EirqEn {
        #[inline(always)]
        fn default() -> Ch6EirqEn {
            <crate::RegValueT<Ch6EirqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6FltFe_SPEC;
    impl crate::sealed::RegSpec for Ch6FltFe_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 1 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6FltFe = crate::RegValueT<Ch6FltFe_SPEC>;

    impl Ch6FltFe {
        #[doc = "Filter parameter for falling edge. FLT FE has different meanings in the various filter modes.Immediate edge propagation mode   acceptance time for falling edge Individual deglitch time mode   deglitch time for falling edge."]
        #[inline(always)]
        pub fn flt_fe(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch6FltFe_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch6FltFe_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6FltFe {
        #[inline(always)]
        fn default() -> Ch6FltFe {
            <crate::RegValueT<Ch6FltFe_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6FltRe_SPEC;
    impl crate::sealed::RegSpec for Ch6FltRe_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 0 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6FltRe = crate::RegValueT<Ch6FltRe_SPEC>;

    impl Ch6FltRe {
        #[doc = "Filter parameter for rising edge. FLT RE has different meanings in the various filter modes.Immediate edge        propagation mode   acceptance time for rising edgeIndividual deglitch        time mode   deglitch time for rising edge."]
        #[inline(always)]
        pub fn flt_re(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch6FltRe_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch6FltRe_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6FltRe {
        #[inline(always)]
        fn default() -> Ch6FltRe {
            <crate::RegValueT<Ch6FltRe_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Gpr0_SPEC;
    impl crate::sealed::RegSpec for Ch6Gpr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 General Purpose 0 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Gpr0 = crate::RegValueT<Ch6Gpr0_SPEC>;

    impl Ch6Gpr0 {
        #[doc = "Input signal characteristic parameter 0. The content of this register has different meaning for the TIM channels        modes. The content directly depends on the bit fields EGPR0 SEL   GPR0 SEL of register TIM i  CH x  CTRL . Note  The content of this register can only        be written in TIM channel mode TSSM."]
        #[inline(always)]
        pub fn gpr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch6Gpr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch6Gpr0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch6Gpr0_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch6Gpr0_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Gpr0 {
        #[inline(always)]
        fn default() -> Ch6Gpr0 {
            <crate::RegValueT<Ch6Gpr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Gpr1_SPEC;
    impl crate::sealed::RegSpec for Ch6Gpr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 General Purpose 1 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Gpr1 = crate::RegValueT<Ch6Gpr1_SPEC>;

    impl Ch6Gpr1 {
        #[doc = "Input signal characteristic parameter 1. The content of this register has different meaning for the TIM channels        modes. The content directly depends on the bit fields EGPR1 SEL   GPR1 SEL of register TIM i  CH x  CTRL . In TBCM mode if EGPR1 SEL 1  GPR1 SEL 01 then TIM INP VAL is used as        input in all other cases TIM Filter F OUT is used as input and Bits        GPR1 23 8    0 The content of this register can only be written in TIM channel mode        TGPS and TSSM."]
        #[inline(always)]
        pub fn gpr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch6Gpr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch6Gpr1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch6Gpr1_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch6Gpr1_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Gpr1 {
        #[inline(always)]
        fn default() -> Ch6Gpr1 {
            <crate::RegValueT<Ch6Gpr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch6IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6IrqEn = crate::RegValueT<Ch6IrqEn_SPEC>;

    impl Ch6IrqEn {
        #[doc = "TIM NEWVALx IRQ interrupt enable"]
        #[inline(always)]
        pub fn newval_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch6IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch6IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM ECNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ecntofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch6IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch6IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM CNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn cntofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch6IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch6IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GPROFL IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn gprofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch6IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch6IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM TODETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn todet_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch6IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch6IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GLITCHDETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn glitchdet_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch6IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch6IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6IrqEn {
        #[inline(always)]
        fn default() -> Ch6IrqEn {
            <crate::RegValueT<Ch6IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch6IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6IrqForcint = crate::RegValueT<Ch6IrqForcint_SPEC>;

    impl Ch6IrqForcint {
        #[doc = "Trigger NEWVAL bit in TIM CHx IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_newval(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch6IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch6IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger ECNTOFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_ecntofl(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch6IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch6IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger CNTOFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_cntofl(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch6IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch6IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger GPROFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_gprofl(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch6IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<3,1,0,Ch6IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TODET bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_todet(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch6IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<4,1,0,Ch6IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger GLITCHDET bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_glitchdet(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch6IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<5,1,0,Ch6IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6IrqForcint {
        #[inline(always)]
        fn default() -> Ch6IrqForcint {
            <crate::RegValueT<Ch6IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch6IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6IrqMode = crate::RegValueT<Ch6IrqMode_SPEC>;

    impl Ch6IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch6IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch6IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6IrqMode {
        #[inline(always)]
        fn default() -> Ch6IrqMode {
            <crate::RegValueT<Ch6IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch6IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6IrqNotify = crate::RegValueT<Ch6IrqNotify_SPEC>;

    impl Ch6IrqNotify {
        #[doc = "New measurement value detected by in channel x. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
        #[inline(always)]
        pub fn newval(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch6IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch6IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "counter overflow of channel x. See bit 0."]
        #[inline(always)]
        pub fn ecntofl(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch6IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch6IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SMU CNT counter overflow of channel x. See bit 0."]
        #[inline(always)]
        pub fn cntofl(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch6IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch6IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "GPR0 and GPR1 data overflow. Old data not read out before new data has arrived at input pin. See bit        0."]
        #[inline(always)]
        pub fn gprofl(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch6IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<3,1,0,Ch6IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout reached for input signal of channel x. See bit 0."]
        #[inline(always)]
        pub fn todet(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch6IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<4,1,0,Ch6IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Glitch detected on channel x   x 0...m 1 . This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
        #[inline(always)]
        pub fn glitchdet(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch6IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<5,1,0,Ch6IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6IrqNotify {
        #[inline(always)]
        fn default() -> Ch6IrqNotify {
            <crate::RegValueT<Ch6IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Tduc_SPEC;
    impl crate::sealed::RegSpec for Ch6Tduc_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 TDU Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Tduc = crate::RegValueT<Ch6Tduc_SPEC>;

    impl Ch6Tduc {
        #[doc = "Current Timeout value slice0 for channel x. SLICING    0b11  counter will be reset to 0X0 on TDU RESYNC condition. SLICING   0b11   counter will be loaded with TOV2 on TDU RESYNC        condition."]
        #[inline(always)]
        pub fn to_cnt(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch6Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch6Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Current Timeout value slice1 for channel x. Counter will be reset to 0x0 on TDU RESYNC condition."]
        #[inline(always)]
        pub fn to_cnt1(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Ch6Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, Ch6Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Current Timeout value slice2 for channel x. Counter will be reset to 0x0 on TDU RESYNC condition."]
        #[inline(always)]
        pub fn to_cnt2(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Ch6Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, Ch6Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Tduc {
        #[inline(always)]
        fn default() -> Ch6Tduc {
            <crate::RegValueT<Ch6Tduc_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Tduv_SPEC;
    impl crate::sealed::RegSpec for Ch6Tduv_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 TDU Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Tduv = crate::RegValueT<Ch6Tduv_SPEC>;

    impl Ch6Tduv {
        #[doc = "Time out compare value slice0 for channel x. Compare value for TO CNT."]
        #[inline(always)]
        pub fn tov(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch6Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch6Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Time out compare value slice1 for channel x. Compare value for TO CNT1."]
        #[inline(always)]
        pub fn tov1(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Ch6Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, Ch6Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Time out compare value slice2 for channel x. SLICING  0b11  Compare value for TO CNT2. SLICING  0b11  TOV2 operate as a shadow register for TO CNT."]
        #[inline(always)]
        pub fn tov2(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Ch6Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, Ch6Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Cascading of counter slices. If USE LUT 0b00   USE LUT   0b00"]
        #[inline(always)]
        pub fn slicing(
            self,
        ) -> crate::common::RegisterField<24, 0x3, 1, 0, u8, Ch6Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x3,1,0,u8, Ch6Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use tdu sample evt as Timeout Clock"]
        #[inline(always)]
        pub fn tcs_use_sample_evt(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch6Tduv_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch6Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Define clocking of TO CNT  TO CNT1"]
        #[inline(always)]
        pub fn tdu_same_cnt_clk(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch6Tduv_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch6Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout Clock selection"]
        #[inline(always)]
        pub fn tcs(
            self,
        ) -> crate::common::RegisterField<28, 0x7, 1, 0, u8, Ch6Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<28,0x7,1,0,u8, Ch6Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Tduv {
        #[inline(always)]
        fn default() -> Ch6Tduv {
            <crate::RegValueT<Ch6Tduv_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Cnt_SPEC;
    impl crate::sealed::RegSpec for Ch7Cnt_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Cnt = crate::RegValueT<Ch7Cnt_SPEC>;

    impl Ch7Cnt {
        #[doc = "Actual SMU counter value. The meaning of this value depends on the configured mode  TPWM   actual duration of PWM signal.TPIM   actual duration of all        pulses  sum of pulses .TIEM   actual number of received edges.TIPM          actual number of received edges.TGPS   elapsed time for periodic        sampling.TSSM   shift data."]
        #[inline(always)]
        pub fn cnt(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch7Cnt_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch7Cnt_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Cnt {
        #[inline(always)]
        fn default() -> Ch7Cnt {
            <crate::RegValueT<Ch7Cnt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Cnts_SPEC;
    impl crate::sealed::RegSpec for Ch7Cnts_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Shadow Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Cnts = crate::RegValueT<Ch7Cnts_SPEC>;

    impl Ch7Cnts {
        #[doc = "Counter shadow register. The content of this register has different meaning for the TIM channels        modes. The content depends directly on the bit field CNTS SEL of register TIM i  CH x  CTRL . The register TIM i  CH x  CNTS is only        writable in TIPM TBCM  TGPS and TSSM mode."]
        #[inline(always)]
        pub fn cnts(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch7Cnts_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch7Cnts_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter   ECNT. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch7Cnts_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch7Cnts_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Cnts {
        #[inline(always)]
        fn default() -> Ch7Cnts {
            <crate::RegValueT<Ch7Cnts_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch7Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Ctrl = crate::RegValueT<Ch7Ctrl_SPEC>;

    impl Ch7Ctrl {
        #[doc = "TIM channel x enable. Enabling of the channel resets the registers ECNT         TIM i  CH x  CNT  TIM i  CH x  GPR0  and TIM i  CH x  GPR1 to their reset values. After finishing the action in one shot mode the TIM EN bit is cleared automatically. Otherwise  the bit must be cleared        manually."]
        #[inline(always)]
        pub fn tim_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM channel x mode. If an undefined value is written to the TIM MODE register  the hardware        switches automatically to TIM MODE   0b000  TPWM mode . The TIM MODE register should not be changed while the TIM channel is        enabled. If the TIM channel is enabled and operating in TPWM or TPIM mode after        the first valid edge defined by DSL has occurred  a reconfiguration of        DSL ISL TIM MODE will not change the channel behavior. Reading these bit        fields after reconfiguration will show the newly configured settings but        the initial channel behavior will not change. Only a disabling of the        TIM channel by setting TIM EN  0 and reenabling with TIM EN  1 will        change the channel operation mode."]
        #[inline(always)]
        pub fn tim_mode(
            self,
        ) -> crate::common::RegisterField<1, 0x7, 1, 0, u8, Ch7Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<1,0x7,1,0,u8, Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. After finishing the action in one shot mode the TIM EN bit is cleared automatically."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "GPR0 and GPR1 register values routed to ARU"]
        #[inline(always)]
        pub fn aru_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Channel Input Control"]
        #[inline(always)]
        pub fn cictrl(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TBU TS0 bits input select for TIM0 CH x  GPRz  z  0  1 . This bit is only applicable for TIM0."]
        #[inline(always)]
        pub fn tbu0_sel(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for GPR0 register. If EGPR0 SEL  0   EGPR0 SEL  1   If a reserved value is written to the EGPR0 SEL  GPR0 SEL bit fields         the hardware will use TBU TS0 input."]
        #[inline(always)]
        pub fn gpr0_sel(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Ch7Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for GPR1 register. If EGPR1 SEL  0   EGPR1 SEL  1  If a reserved value is written to the EGPR1 SEL  GPR1 SEL bit fields         the hardware will use TBU TS0 input. Note  In TBCM mode  EGPR1 SEL 1         GPR1 SEL 01 selects TIM INP VAL as input  in all other cases  TIM Filter        F OUT is used."]
        #[inline(always)]
        pub fn gpr1_sel(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, Ch7Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection for CNTS register. The functionality of the CNTS SEL is        disabled in the modes TIPM TGPS and TBCM. CNTS SEL in TSSM mode selects the source        signal for registered or latched shift out operation. 0 B   160   160   160   160   160 use F OUTx 1 B   160   160   160   160   160 use TIM INx"]
        #[inline(always)]
        pub fn cnts_sel(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<12,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level control. In TIM MODE 0b110  TSSM   the bit field DSL defines the shift direction. 0 B   160   160   160   160   160 Shift left 1 B   160   160   160   160   160 Shift right"]
        #[inline(always)]
        pub fn dsl(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<13,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Ignore signal level. This bit is mode dependent and will have different meanings  see details        in the TIM Channel mode description ."]
        #[inline(always)]
        pub fn isl(
            self,
        ) -> crate::common::RegisterFieldBool<14, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<14,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enables resetting of counter in certain modes. If TIM MODE 0b101  TGPS    TIM MODE 0b000  TPWM  else ECNT counter operating in wrap around mode  In TIM MODE 0b110  TSSM   the bit field ECNT RESET defines the initial        polarity for the shift register."]
        #[inline(always)]
        pub fn ecnt_reset(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter enable for channel x. If the filter is disabled  all filter related units  including CSU  are        bypassed  which means that the signal F IN is directly routed to signal F OUT ."]
        #[inline(always)]
        pub fn flt_en(
            self,
        ) -> crate::common::RegisterFieldBool<16, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<16,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter frequency select"]
        #[inline(always)]
        pub fn flt_cnt_frq(
            self,
        ) -> crate::common::RegisterField<17, 0x3, 1, 0, u8, Ch7Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<17,0x3,1,0,u8, Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enables external capture mode. The selected TIM mode is only sensitive to external capture pulses the        input event changes are ignored."]
        #[inline(always)]
        pub fn ext_cap_en(
            self,
        ) -> crate::common::RegisterFieldBool<19, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<19,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter mode for rising edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_mode_re(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter mode for rising edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_ctr_re(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter mode for falling edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_mode_fe(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Filter counter mode for falling edge. Coding see CROSSREFERENCE . Coding see Family Spec."]
        #[inline(always)]
        pub fn flt_ctr_fe(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CMU clock source select for channel. If ECLK SEL  0   ECLK SEL  1"]
        #[inline(always)]
        pub fn clk_sel(
            self,
        ) -> crate::common::RegisterField<24, 0x7, 1, 0, u8, Ch7Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x7,1,0,u8, Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extended Edge counter overflow behavior"]
        #[inline(always)]
        pub fn fr_ecnt_ofl(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of GPR0 SEL bit field. Details described in GPR0 SEL bit field."]
        #[inline(always)]
        pub fn egpr0_sel(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of GPR1 SEL bit field. Details described in GPR1 SEL bit field."]
        #[inline(always)]
        pub fn egpr1_sel(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout control. It has to be mentioned that writing of TOCTRL  0 will every time stop        the TDU  independent of the previous state of TOCTRL."]
        #[inline(always)]
        pub fn toctrl(
            self,
        ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, Ch7Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<30,0x3,1,0,u8, Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Ctrl {
        #[inline(always)]
        fn default() -> Ch7Ctrl {
            <crate::RegValueT<Ch7Ctrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Ecnt_SPEC;
    impl crate::sealed::RegSpec for Ch7Ecnt_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 SMU Edge Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Ecnt = crate::RegValueT<Ch7Ecnt_SPEC>;

    impl Ch7Ecnt {
        #[doc = "Edge counter. If TIM channel is disabled the content of ECNT gets frozen. A read will        auto clear the bits  15 1 . Further read accesses to ECNT will show on        Bit 0 the actual input signal value of the channel."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch7Ecnt_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch7Ecnt_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Ecnt {
        #[inline(always)]
        fn default() -> Ch7Ecnt {
            <crate::RegValueT<Ch7Ecnt_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Ectrl_SPEC;
    impl crate::sealed::RegSpec for Ch7Ectrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Extended Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Ectrl = crate::RegValueT<Ch7Ectrl_SPEC>;

    impl Ch7Ectrl {
        #[doc = "Defines selected source for triggering the EXT CAPTURE functionality"]
        #[inline(always)]
        pub fn ext_cap_src(
            self,
        ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Ch7Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xf,1,0,u8, Ch7Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input data source for TDU"]
        #[inline(always)]
        pub fn use_prev_tdu_in(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch7Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch7Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "selection of source for TODET IRQ. With TODET IRQ SRC 0b00 the ACB bit 2 will be driven by signal        tdu timeout evt  if TODET IRQ SRC  0b00 ACB2 will be 0."]
        #[inline(always)]
        pub fn todet_irq_src(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Ch7Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, Ch7Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will start the TDU unit. In mode SLICING 0b11 every start restart will load the TO CNT with value        TOV2. Note  tdu start 000 event is defined as  Each writing of TOCTRL           0  independent of current TOCTRL  while TDU START 0b000 and TDU is        stopped  initially or stopped by TDU STOP event . This event will last 1        system clock cycle."]
        #[inline(always)]
        pub fn tdu_start(
            self,
        ) -> crate::common::RegisterField<8, 0x7, 1, 0, u8, Ch7Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x7,1,0,u8, Ch7Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will stop the TDU unit. Note  tdu toctrl 0 event is defined as  Each writing of TOCTRL   0         independent of current TOCTRL  while TDU is started. This event will        last 1 system clock cycle."]
        #[inline(always)]
        pub fn tdu_stop(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch7Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch7Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Defines condition which will resynchronize the TDU unit. Encoding see Table  160 14 and Table  160 15 ."]
        #[inline(always)]
        pub fn tdu_resync(
            self,
        ) -> crate::common::RegisterField<16, 0xf, 1, 0, u8, Ch7Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xf,1,0,u8, Ch7Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Generate Filter input by lookup table"]
        #[inline(always)]
        pub fn use_lut(
            self,
        ) -> crate::common::RegisterField<22, 0x3, 1, 0, u8, Ch7Ectrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<22,0x3,1,0,u8, Ch7Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field FLT CTR RE. Details described in FLT CTR RE bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eflt_ctr_re(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch7Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch7Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field FLT CTR FE. Details described in FLT CTR FE bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eflt_ctr_fe(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch7Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch7Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Swap point of time of capturing CNTS and GPR1. This bit is only applicable in TPWM and TPIM mode. Set to 0 in all other        modes."]
        #[inline(always)]
        pub fn swap_capture(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch7Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch7Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Start immediately the measurement. This bit is only applicable in TPWM and TPIM mode. Set to 0 in all other        modes."]
        #[inline(always)]
        pub fn imm_start(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch7Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch7Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extension of bit field CLK SEL. Details described in CLK SEL bit field of register TIM i  CH x  CTRL."]
        #[inline(always)]
        pub fn eclk_sel(
            self,
        ) -> crate::common::RegisterFieldBool<30, 1, 0, Ch7Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<30,1,0,Ch7Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input data source for TIM channel"]
        #[inline(always)]
        pub fn use_prev_ch_in(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch7Ectrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch7Ectrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Ectrl {
        #[inline(always)]
        fn default() -> Ch7Ectrl {
            <crate::RegValueT<Ch7Ectrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7EirqEn_SPEC;
    impl crate::sealed::RegSpec for Ch7EirqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Error Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7EirqEn = crate::RegValueT<Ch7EirqEn_SPEC>;

    impl Ch7EirqEn {
        #[doc = "TIM NEWVALx EIRQ error interrupt enable"]
        #[inline(always)]
        pub fn newval_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch7EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch7EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM ECNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ecntofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch7EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch7EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM CNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn cntofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch7EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch7EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GPROFL IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn gprofl_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch7EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch7EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM TODETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn todet_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch7EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch7EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GLITCHDETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn glitchdet_eirq_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch7EirqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch7EirqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7EirqEn {
        #[inline(always)]
        fn default() -> Ch7EirqEn {
            <crate::RegValueT<Ch7EirqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7FltFe_SPEC;
    impl crate::sealed::RegSpec for Ch7FltFe_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 1 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7FltFe = crate::RegValueT<Ch7FltFe_SPEC>;

    impl Ch7FltFe {
        #[doc = "Filter parameter for falling edge. FLT FE has different meanings in the various filter modes.Immediate edge propagation mode   acceptance time for falling edge Individual deglitch time mode   deglitch time for falling edge."]
        #[inline(always)]
        pub fn flt_fe(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch7FltFe_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch7FltFe_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7FltFe {
        #[inline(always)]
        fn default() -> Ch7FltFe {
            <crate::RegValueT<Ch7FltFe_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7FltRe_SPEC;
    impl crate::sealed::RegSpec for Ch7FltRe_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Filter Parameter 0 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7FltRe = crate::RegValueT<Ch7FltRe_SPEC>;

    impl Ch7FltRe {
        #[doc = "Filter parameter for rising edge. FLT RE has different meanings in the various filter modes.Immediate edge        propagation mode   acceptance time for rising edgeIndividual deglitch        time mode   deglitch time for rising edge."]
        #[inline(always)]
        pub fn flt_re(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch7FltRe_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch7FltRe_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7FltRe {
        #[inline(always)]
        fn default() -> Ch7FltRe {
            <crate::RegValueT<Ch7FltRe_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Gpr0_SPEC;
    impl crate::sealed::RegSpec for Ch7Gpr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 General Purpose 0 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Gpr0 = crate::RegValueT<Ch7Gpr0_SPEC>;

    impl Ch7Gpr0 {
        #[doc = "Input signal characteristic parameter 0. The content of this register has different meaning for the TIM channels        modes. The content directly depends on the bit fields EGPR0 SEL   GPR0 SEL of register TIM i  CH x  CTRL . Note  The content of this register can only        be written in TIM channel mode TSSM."]
        #[inline(always)]
        pub fn gpr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch7Gpr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch7Gpr0_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch7Gpr0_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch7Gpr0_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Gpr0 {
        #[inline(always)]
        fn default() -> Ch7Gpr0 {
            <crate::RegValueT<Ch7Gpr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Gpr1_SPEC;
    impl crate::sealed::RegSpec for Ch7Gpr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 General Purpose 1 Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Gpr1 = crate::RegValueT<Ch7Gpr1_SPEC>;

    impl Ch7Gpr1 {
        #[doc = "Input signal characteristic parameter 1. The content of this register has different meaning for the TIM channels        modes. The content directly depends on the bit fields EGPR1 SEL   GPR1 SEL of register TIM i  CH x  CTRL . In TBCM mode if EGPR1 SEL 1  GPR1 SEL 01 then TIM INP VAL is used as        input in all other cases TIM Filter F OUT is used as input and Bits        GPR1 23 8    0 The content of this register can only be written in TIM channel mode        TGPS and TSSM."]
        #[inline(always)]
        pub fn gpr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Ch7Gpr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Ch7Gpr1_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Edge counter. The ECNT counts every incoming filtered        edge  rising and falling . The counter value is uneven in case of        detected rising  and even in case of detected falling edge. Thus  the        input signal level is part of the counter and can be obtained by bit 0        of ECNT ."]
        #[inline(always)]
        pub fn ecnt(
            self,
        ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Ch7Gpr1_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<24,0xff,1,0,u8, Ch7Gpr1_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Gpr1 {
        #[inline(always)]
        fn default() -> Ch7Gpr1 {
            <crate::RegValueT<Ch7Gpr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch7IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7IrqEn = crate::RegValueT<Ch7IrqEn_SPEC>;

    impl Ch7IrqEn {
        #[doc = "TIM NEWVALx IRQ interrupt enable"]
        #[inline(always)]
        pub fn newval_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch7IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch7IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM ECNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ecntofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch7IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch7IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM CNTOFLx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn cntofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch7IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,Ch7IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GPROFL IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn gprofl_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch7IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,Ch7IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM TODETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn todet_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch7IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,Ch7IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM GLITCHDETx IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn glitchdet_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch7IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,Ch7IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7IrqEn {
        #[inline(always)]
        fn default() -> Ch7IrqEn {
            <crate::RegValueT<Ch7IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch7IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7IrqForcint = crate::RegValueT<Ch7IrqForcint_SPEC>;

    impl Ch7IrqForcint {
        #[doc = "Trigger NEWVAL bit in TIM CHx IRQ NOTIFY register by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_newval(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch7IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch7IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger ECNTOFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_ecntofl(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch7IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch7IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger CNTOFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_cntofl(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch7IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch7IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger GPROFL bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_gprofl(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch7IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<3,1,0,Ch7IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TODET bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_todet(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch7IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<4,1,0,Ch7IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger GLITCHDET bit in TIM CHx IRQ NOTIFY register by software. Coding see bit 0."]
        #[inline(always)]
        pub fn trg_glitchdet(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch7IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<5,1,0,Ch7IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7IrqForcint {
        #[inline(always)]
        fn default() -> Ch7IrqForcint {
            <crate::RegValueT<Ch7IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch7IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Mode Configuration Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7IrqMode = crate::RegValueT<Ch7IrqMode_SPEC>;

    impl Ch7IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch7IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch7IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7IrqMode {
        #[inline(always)]
        fn default() -> Ch7IrqMode {
            <crate::RegValueT<Ch7IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch7IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7IrqNotify = crate::RegValueT<Ch7IrqNotify_SPEC>;

    impl Ch7IrqNotify {
        #[doc = "New measurement value detected by in channel x. This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
        #[inline(always)]
        pub fn newval(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch7IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch7IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "counter overflow of channel x. See bit 0."]
        #[inline(always)]
        pub fn ecntofl(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch7IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch7IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SMU CNT counter overflow of channel x. See bit 0."]
        #[inline(always)]
        pub fn cntofl(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, Ch7IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<2,1,0,Ch7IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "GPR0 and GPR1 data overflow. Old data not read out before new data has arrived at input pin. See bit        0."]
        #[inline(always)]
        pub fn gprofl(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, Ch7IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<3,1,0,Ch7IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout reached for input signal of channel x. See bit 0."]
        #[inline(always)]
        pub fn todet(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, Ch7IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<4,1,0,Ch7IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Glitch detected on channel x   x 0...m 1 . This bit will be cleared on a CPU write access of value  1 . A read        access leaves the bit unchanged."]
        #[inline(always)]
        pub fn glitchdet(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, Ch7IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<5,1,0,Ch7IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7IrqNotify {
        #[inline(always)]
        fn default() -> Ch7IrqNotify {
            <crate::RegValueT<Ch7IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Tduc_SPEC;
    impl crate::sealed::RegSpec for Ch7Tduc_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 TDU Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Tduc = crate::RegValueT<Ch7Tduc_SPEC>;

    impl Ch7Tduc {
        #[doc = "Current Timeout value slice0 for channel x. SLICING    0b11  counter will be reset to 0X0 on TDU RESYNC condition. SLICING   0b11   counter will be loaded with TOV2 on TDU RESYNC        condition."]
        #[inline(always)]
        pub fn to_cnt(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch7Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch7Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Current Timeout value slice1 for channel x. Counter will be reset to 0x0 on TDU RESYNC condition."]
        #[inline(always)]
        pub fn to_cnt1(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Ch7Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, Ch7Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Current Timeout value slice2 for channel x. Counter will be reset to 0x0 on TDU RESYNC condition."]
        #[inline(always)]
        pub fn to_cnt2(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Ch7Tduc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, Ch7Tduc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Tduc {
        #[inline(always)]
        fn default() -> Ch7Tduc {
            <crate::RegValueT<Ch7Tduc_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Tduv_SPEC;
    impl crate::sealed::RegSpec for Ch7Tduv_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Channel 7 TDU Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Tduv = crate::RegValueT<Ch7Tduv_SPEC>;

    impl Ch7Tduv {
        #[doc = "Time out compare value slice0 for channel x. Compare value for TO CNT."]
        #[inline(always)]
        pub fn tov(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ch7Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, Ch7Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Time out compare value slice1 for channel x. Compare value for TO CNT1."]
        #[inline(always)]
        pub fn tov1(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Ch7Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, Ch7Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Time out compare value slice2 for channel x. SLICING  0b11  Compare value for TO CNT2. SLICING  0b11  TOV2 operate as a shadow register for TO CNT."]
        #[inline(always)]
        pub fn tov2(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Ch7Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, Ch7Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Cascading of counter slices. If USE LUT 0b00   USE LUT   0b00"]
        #[inline(always)]
        pub fn slicing(
            self,
        ) -> crate::common::RegisterField<24, 0x3, 1, 0, u8, Ch7Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x3,1,0,u8, Ch7Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Use tdu sample evt as Timeout Clock"]
        #[inline(always)]
        pub fn tcs_use_sample_evt(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch7Tduv_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch7Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Define clocking of TO CNT  TO CNT1"]
        #[inline(always)]
        pub fn tdu_same_cnt_clk(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch7Tduv_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch7Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Timeout Clock selection"]
        #[inline(always)]
        pub fn tcs(
            self,
        ) -> crate::common::RegisterField<28, 0x7, 1, 0, u8, Ch7Tduv_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<28,0x7,1,0,u8, Ch7Tduv_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Tduv {
        #[inline(always)]
        fn default() -> Ch7Tduv {
            <crate::RegValueT<Ch7Tduv_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct TiMiInpVal_SPEC;
    impl crate::sealed::RegSpec for TiMiInpVal_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Input Value Observation Register\n resetvalue={Application Reset:0x0}"]
    pub type TiMiInpVal = crate::RegValueT<TiMiInpVal_SPEC>;

    impl TiMiInpVal {
        #[doc = "Signals after TIM FLT unit"]
        #[inline(always)]
        pub fn f_out(
            self,
        ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, TiMiInpVal_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<0,0xff,1,0,u8, TiMiInpVal_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Signals after INPSRC selection  before TIM FLT unit"]
        #[inline(always)]
        pub fn f_in(
            self,
        ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, TiMiInpVal_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<8,0xff,1,0,u8, TiMiInpVal_SPEC,crate::common::R>::from_register(self,0)
        }
        #[doc = "Signals after TIM input signal synchronization"]
        #[inline(always)]
        pub fn tim_in(
            self,
        ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, TiMiInpVal_SPEC, crate::common::R>
        {
            crate::common::RegisterField::<16,0xff,1,0,u8, TiMiInpVal_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for TiMiInpVal {
        #[inline(always)]
        fn default() -> TiMiInpVal {
            <crate::RegValueT<TiMiInpVal_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct TiMiInSrc_SPEC;
    impl crate::sealed::RegSpec for TiMiInSrc_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 AUX IN Source Selection Register\n resetvalue={Application Reset:0x0}"]
    pub type TiMiInSrc = crate::RegValueT<TiMiInSrc_SPEC>;

    impl TiMiInSrc {
        #[doc = "Value to be fed to Channel 7. Multicore encoding in use   VAL x 1  defines        the state of the signal . Function depends on the combination of VAL x 1  and MODE x 1  see MODE 0        description. Any read access to a VAL x bit field will        always result in a value 00 or 11 indicating current state. A        modification of the state is only performed with the values 01 and 10.        Writing the values 00 and 11 is always ignored."]
        #[inline(always)]
        pub fn val_0(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, TiMiInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, TiMiInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input source to Channel 7. Multicore encoding in use   MODE x 1  defines the state of the signal . Function table  MODE x 1  0   VAL x 1   0           160   160   160   160 The input signal defined by bit field CICTRL of the TIM channel is used   160   160   160   160 as input source. MODE x 1  0   VAL x 1   1    160   160   160   160 The signal TIM AUX IN of the TIM channel is used as input source. MODE x 1  1     160   160   160   160 The state VAL x 1  defines the input level for the TIM channel. Any read access to a MODE x bit field will        always result in a value 00 or 11 indicating current state. A        modification of the state is only performed with the values 01 and 10.        Writing the values 00 and 11 is always ignored."]
        #[inline(always)]
        pub fn mode_0(
            self,
        ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, TiMiInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<2,0x3,1,0,u8, TiMiInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Value to be fed to Channel 7. Multicore encoding in use   VAL x 1  defines        the state of the signal . Function depends on the combination of VAL x 1  and MODE x 1  see MODE 0        description. Any read access to a VAL x bit field will        always result in a value 00 or 11 indicating current state. A        modification of the state is only performed with the values 01 and 10.        Writing the values 00 and 11 is always ignored."]
        #[inline(always)]
        pub fn val_1(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, TiMiInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, TiMiInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input source to Channel 7. Multicore encoding in use   MODE x 1  defines the state of the signal . Function table  MODE x 1  0   VAL x 1   0           160   160   160   160 The input signal defined by bit field CICTRL of the TIM channel is used   160   160   160   160 as input source. MODE x 1  0   VAL x 1   1    160   160   160   160 The signal TIM AUX IN of the TIM channel is used as input source. MODE x 1  1     160   160   160   160 The state VAL x 1  defines the input level for the TIM channel. Any read access to a MODE x bit field will        always result in a value 00 or 11 indicating current state. A        modification of the state is only performed with the values 01 and 10.        Writing the values 00 and 11 is always ignored."]
        #[inline(always)]
        pub fn mode_1(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, TiMiInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, TiMiInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Value to be fed to Channel 7. Multicore encoding in use   VAL x 1  defines        the state of the signal . Function depends on the combination of VAL x 1  and MODE x 1  see MODE 0        description. Any read access to a VAL x bit field will        always result in a value 00 or 11 indicating current state. A        modification of the state is only performed with the values 01 and 10.        Writing the values 00 and 11 is always ignored."]
        #[inline(always)]
        pub fn val_2(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, TiMiInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, TiMiInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input source to Channel 7. Multicore encoding in use   MODE x 1  defines the state of the signal . Function table  MODE x 1  0   VAL x 1   0           160   160   160   160 The input signal defined by bit field CICTRL of the TIM channel is used   160   160   160   160 as input source. MODE x 1  0   VAL x 1   1    160   160   160   160 The signal TIM AUX IN of the TIM channel is used as input source. MODE x 1  1     160   160   160   160 The state VAL x 1  defines the input level for the TIM channel. Any read access to a MODE x bit field will        always result in a value 00 or 11 indicating current state. A        modification of the state is only performed with the values 01 and 10.        Writing the values 00 and 11 is always ignored."]
        #[inline(always)]
        pub fn mode_2(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, TiMiInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, TiMiInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Value to be fed to Channel 7. Multicore encoding in use   VAL x 1  defines        the state of the signal . Function depends on the combination of VAL x 1  and MODE x 1  see MODE 0        description. Any read access to a VAL x bit field will        always result in a value 00 or 11 indicating current state. A        modification of the state is only performed with the values 01 and 10.        Writing the values 00 and 11 is always ignored."]
        #[inline(always)]
        pub fn val_3(
            self,
        ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, TiMiInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x3,1,0,u8, TiMiInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input source to Channel 7. Multicore encoding in use   MODE x 1  defines the state of the signal . Function table  MODE x 1  0   VAL x 1   0           160   160   160   160 The input signal defined by bit field CICTRL of the TIM channel is used   160   160   160   160 as input source. MODE x 1  0   VAL x 1   1    160   160   160   160 The signal TIM AUX IN of the TIM channel is used as input source. MODE x 1  1     160   160   160   160 The state VAL x 1  defines the input level for the TIM channel. Any read access to a MODE x bit field will        always result in a value 00 or 11 indicating current state. A        modification of the state is only performed with the values 01 and 10.        Writing the values 00 and 11 is always ignored."]
        #[inline(always)]
        pub fn mode_3(
            self,
        ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, TiMiInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<14,0x3,1,0,u8, TiMiInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Value to be fed to Channel 7. Multicore encoding in use   VAL x 1  defines        the state of the signal . Function depends on the combination of VAL x 1  and MODE x 1  see MODE 0        description. Any read access to a VAL x bit field will        always result in a value 00 or 11 indicating current state. A        modification of the state is only performed with the values 01 and 10.        Writing the values 00 and 11 is always ignored."]
        #[inline(always)]
        pub fn val_4(
            self,
        ) -> crate::common::RegisterField<16, 0x3, 1, 0, u8, TiMiInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x3,1,0,u8, TiMiInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input source to Channel 7. Multicore encoding in use   MODE x 1  defines the state of the signal . Function table  MODE x 1  0   VAL x 1   0           160   160   160   160 The input signal defined by bit field CICTRL of the TIM channel is used   160   160   160   160 as input source. MODE x 1  0   VAL x 1   1    160   160   160   160 The signal TIM AUX IN of the TIM channel is used as input source. MODE x 1  1     160   160   160   160 The state VAL x 1  defines the input level for the TIM channel. Any read access to a MODE x bit field will        always result in a value 00 or 11 indicating current state. A        modification of the state is only performed with the values 01 and 10.        Writing the values 00 and 11 is always ignored."]
        #[inline(always)]
        pub fn mode_4(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, TiMiInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, TiMiInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Value to be fed to Channel 7. Multicore encoding in use   VAL x 1  defines        the state of the signal . Function depends on the combination of VAL x 1  and MODE x 1  see MODE 0        description. Any read access to a VAL x bit field will        always result in a value 00 or 11 indicating current state. A        modification of the state is only performed with the values 01 and 10.        Writing the values 00 and 11 is always ignored."]
        #[inline(always)]
        pub fn val_5(
            self,
        ) -> crate::common::RegisterField<20, 0x3, 1, 0, u8, TiMiInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<20,0x3,1,0,u8, TiMiInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input source to Channel 7. Multicore encoding in use   MODE x 1  defines the state of the signal . Function table  MODE x 1  0   VAL x 1   0           160   160   160   160 The input signal defined by bit field CICTRL of the TIM channel is used   160   160   160   160 as input source. MODE x 1  0   VAL x 1   1    160   160   160   160 The signal TIM AUX IN of the TIM channel is used as input source. MODE x 1  1     160   160   160   160 The state VAL x 1  defines the input level for the TIM channel. Any read access to a MODE x bit field will        always result in a value 00 or 11 indicating current state. A        modification of the state is only performed with the values 01 and 10.        Writing the values 00 and 11 is always ignored."]
        #[inline(always)]
        pub fn mode_5(
            self,
        ) -> crate::common::RegisterField<22, 0x3, 1, 0, u8, TiMiInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<22,0x3,1,0,u8, TiMiInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Value to be fed to Channel 7. Multicore encoding in use   VAL x 1  defines        the state of the signal . Function depends on the combination of VAL x 1  and MODE x 1  see MODE 0        description. Any read access to a VAL x bit field will        always result in a value 00 or 11 indicating current state. A        modification of the state is only performed with the values 01 and 10.        Writing the values 00 and 11 is always ignored."]
        #[inline(always)]
        pub fn val_6(
            self,
        ) -> crate::common::RegisterField<24, 0x3, 1, 0, u8, TiMiInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x3,1,0,u8, TiMiInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input source to Channel 7. Multicore encoding in use   MODE x 1  defines the state of the signal . Function table  MODE x 1  0   VAL x 1   0           160   160   160   160 The input signal defined by bit field CICTRL of the TIM channel is used   160   160   160   160 as input source. MODE x 1  0   VAL x 1   1    160   160   160   160 The signal TIM AUX IN of the TIM channel is used as input source. MODE x 1  1     160   160   160   160 The state VAL x 1  defines the input level for the TIM channel. Any read access to a MODE x bit field will        always result in a value 00 or 11 indicating current state. A        modification of the state is only performed with the values 01 and 10.        Writing the values 00 and 11 is always ignored."]
        #[inline(always)]
        pub fn mode_6(
            self,
        ) -> crate::common::RegisterField<26, 0x3, 1, 0, u8, TiMiInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<26,0x3,1,0,u8, TiMiInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Value to be fed to Channel 7. Multicore encoding in use   VAL x 1  defines        the state of the signal . Function depends on the combination of VAL x 1  and MODE x 1  see MODE 0        description. Any read access to a VAL x bit field will        always result in a value 00 or 11 indicating current state. A        modification of the state is only performed with the values 01 and 10.        Writing the values 00 and 11 is always ignored."]
        #[inline(always)]
        pub fn val_7(
            self,
        ) -> crate::common::RegisterField<28, 0x3, 1, 0, u8, TiMiInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<28,0x3,1,0,u8, TiMiInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Input source to Channel 7. Multicore encoding in use   MODE x 1  defines the state of the signal . Function table  MODE x 1  0   VAL x 1   0           160   160   160   160 The input signal defined by bit field CICTRL of the TIM channel is used   160   160   160   160 as input source. MODE x 1  0   VAL x 1   1    160   160   160   160 The signal TIM AUX IN of the TIM channel is used as input source. MODE x 1  1     160   160   160   160 The state VAL x 1  defines the input level for the TIM channel. Any read access to a MODE x bit field will        always result in a value 00 or 11 indicating current state. A        modification of the state is only performed with the values 01 and 10.        Writing the values 00 and 11 is always ignored."]
        #[inline(always)]
        pub fn mode_7(
            self,
        ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, TiMiInSrc_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<30,0x3,1,0,u8, TiMiInSrc_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for TiMiInSrc {
        #[inline(always)]
        fn default() -> TiMiInSrc {
            <crate::RegValueT<TiMiInSrc_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct TiMiRst_SPEC;
    impl crate::sealed::RegSpec for TiMiRst_SPEC {
        type DataType = u32;
    }
    #[doc = "TIM0 Global Software Reset Register\n resetvalue={Application Reset:0x0}"]
    pub type TiMiRst = crate::RegValueT<TiMiRst_SPEC>;

    impl TiMiRst {
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        registers are set to their reset values and channel operation is stopped        immediately. Please note  that the RST field width of this register depends on the        number of implemented channels m within this sub module. This register        description represents a register layout for m   8."]
        #[inline(always)]
        pub fn rst_ch0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, TiMiRst_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,TiMiRst_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        registers are set to their reset values and channel operation is stopped        immediately. Please note  that the RST field width of this register depends on the        number of implemented channels m within this sub module. This register        description represents a register layout for m   8."]
        #[inline(always)]
        pub fn rst_ch1(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, TiMiRst_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,TiMiRst_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        registers are set to their reset values and channel operation is stopped        immediately. Please note  that the RST field width of this register depends on the        number of implemented channels m within this sub module. This register        description represents a register layout for m   8."]
        #[inline(always)]
        pub fn rst_ch2(
            self,
        ) -> crate::common::RegisterFieldBool<2, 1, 0, TiMiRst_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<2,1,0,TiMiRst_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        registers are set to their reset values and channel operation is stopped        immediately. Please note  that the RST field width of this register depends on the        number of implemented channels m within this sub module. This register        description represents a register layout for m   8."]
        #[inline(always)]
        pub fn rst_ch3(
            self,
        ) -> crate::common::RegisterFieldBool<3, 1, 0, TiMiRst_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<3,1,0,TiMiRst_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        registers are set to their reset values and channel operation is stopped        immediately. Please note  that the RST field width of this register depends on the        number of implemented channels m within this sub module. This register        description represents a register layout for m   8."]
        #[inline(always)]
        pub fn rst_ch4(
            self,
        ) -> crate::common::RegisterFieldBool<4, 1, 0, TiMiRst_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<4,1,0,TiMiRst_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        registers are set to their reset values and channel operation is stopped        immediately. Please note  that the RST field width of this register depends on the        number of implemented channels m within this sub module. This register        description represents a register layout for m   8."]
        #[inline(always)]
        pub fn rst_ch5(
            self,
        ) -> crate::common::RegisterFieldBool<5, 1, 0, TiMiRst_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<5,1,0,TiMiRst_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        registers are set to their reset values and channel operation is stopped        immediately. Please note  that the RST field width of this register depends on the        number of implemented channels m within this sub module. This register        description represents a register layout for m   8."]
        #[inline(always)]
        pub fn rst_ch6(
            self,
        ) -> crate::common::RegisterFieldBool<6, 1, 0, TiMiRst_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<6,1,0,TiMiRst_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        registers are set to their reset values and channel operation is stopped        immediately. Please note  that the RST field width of this register depends on the        number of implemented channels m within this sub module. This register        description represents a register layout for m   8."]
        #[inline(always)]
        pub fn rst_ch7(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, TiMiRst_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,TiMiRst_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for TiMiRst {
        #[inline(always)]
        fn default() -> TiMiRst {
            <crate::RegValueT<TiMiRst_SPEC> as RegisterValue<_>>::new(0)
        }
    }
}
#[doc = "TOM"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Tom(pub(super) *mut u8);
unsafe impl core::marker::Send for Tom {}
unsafe impl core::marker::Sync for Tom {}
impl Tom {
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_cm0(&self) -> crate::common::Reg<tom::Ch0Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(12usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_cm1(&self) -> crate::common::Reg<tom::Ch0Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(16usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_cn0(&self) -> crate::common::Reg<tom::Ch0Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(20usize)) }
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    #[inline(always)]
    pub const fn ch0_ctrl(&self) -> crate::common::Reg<tom::Ch0Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(0usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_irq_en(&self) -> crate::common::Reg<tom::Ch0IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(32usize)) }
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_irq_forcint(
        &self,
    ) -> crate::common::Reg<tom::Ch0IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(36usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_irq_mode(
        &self,
    ) -> crate::common::Reg<tom::Ch0IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(40usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_irq_notify(
        &self,
    ) -> crate::common::Reg<tom::Ch0IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(28usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_sr0(&self) -> crate::common::Reg<tom::Ch0Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(4usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_sr1(&self) -> crate::common::Reg<tom::Ch0Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(8usize)) }
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch0_stat(&self) -> crate::common::Reg<tom::Ch0Stat_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(24usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch10_cm0(&self) -> crate::common::Reg<tom::Ch10Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(652usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch10_cm1(&self) -> crate::common::Reg<tom::Ch10Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(656usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch10_cn0(&self) -> crate::common::Reg<tom::Ch10Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(660usize)) }
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    #[inline(always)]
    pub const fn ch10_ctrl(&self) -> crate::common::Reg<tom::Ch10Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(640usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch10_irq_en(&self) -> crate::common::Reg<tom::Ch10IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(672usize)) }
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch10_irq_forcint(
        &self,
    ) -> crate::common::Reg<tom::Ch10IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(676usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch10_irq_mode(
        &self,
    ) -> crate::common::Reg<tom::Ch10IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(680usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch10_irq_notify(
        &self,
    ) -> crate::common::Reg<tom::Ch10IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(668usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch10_sr0(&self) -> crate::common::Reg<tom::Ch10Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(644usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch10_sr1(&self) -> crate::common::Reg<tom::Ch10Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(648usize)) }
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch10_stat(&self) -> crate::common::Reg<tom::Ch10Stat_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(664usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch11_cm0(&self) -> crate::common::Reg<tom::Ch11Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(716usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch11_cm1(&self) -> crate::common::Reg<tom::Ch11Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(720usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch11_cn0(&self) -> crate::common::Reg<tom::Ch11Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(724usize)) }
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    #[inline(always)]
    pub const fn ch11_ctrl(&self) -> crate::common::Reg<tom::Ch11Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(704usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch11_irq_en(&self) -> crate::common::Reg<tom::Ch11IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(736usize)) }
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch11_irq_forcint(
        &self,
    ) -> crate::common::Reg<tom::Ch11IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(740usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch11_irq_mode(
        &self,
    ) -> crate::common::Reg<tom::Ch11IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(744usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch11_irq_notify(
        &self,
    ) -> crate::common::Reg<tom::Ch11IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(732usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch11_sr0(&self) -> crate::common::Reg<tom::Ch11Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(708usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch11_sr1(&self) -> crate::common::Reg<tom::Ch11Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(712usize)) }
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch11_stat(&self) -> crate::common::Reg<tom::Ch11Stat_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(728usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch12_cm0(&self) -> crate::common::Reg<tom::Ch12Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(780usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch12_cm1(&self) -> crate::common::Reg<tom::Ch12Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(784usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch12_cn0(&self) -> crate::common::Reg<tom::Ch12Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(788usize)) }
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    #[inline(always)]
    pub const fn ch12_ctrl(&self) -> crate::common::Reg<tom::Ch12Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(768usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch12_irq_en(&self) -> crate::common::Reg<tom::Ch12IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(800usize)) }
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch12_irq_forcint(
        &self,
    ) -> crate::common::Reg<tom::Ch12IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(804usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch12_irq_mode(
        &self,
    ) -> crate::common::Reg<tom::Ch12IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(808usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch12_irq_notify(
        &self,
    ) -> crate::common::Reg<tom::Ch12IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(796usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch12_sr0(&self) -> crate::common::Reg<tom::Ch12Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(772usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch12_sr1(&self) -> crate::common::Reg<tom::Ch12Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(776usize)) }
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch12_stat(&self) -> crate::common::Reg<tom::Ch12Stat_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(792usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch13_cm0(&self) -> crate::common::Reg<tom::Ch13Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(844usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch13_cm1(&self) -> crate::common::Reg<tom::Ch13Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(848usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch13_cn0(&self) -> crate::common::Reg<tom::Ch13Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(852usize)) }
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    #[inline(always)]
    pub const fn ch13_ctrl(&self) -> crate::common::Reg<tom::Ch13Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(832usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch13_irq_en(&self) -> crate::common::Reg<tom::Ch13IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(864usize)) }
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch13_irq_forcint(
        &self,
    ) -> crate::common::Reg<tom::Ch13IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(868usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch13_irq_mode(
        &self,
    ) -> crate::common::Reg<tom::Ch13IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(872usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch13_irq_notify(
        &self,
    ) -> crate::common::Reg<tom::Ch13IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(860usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch13_sr0(&self) -> crate::common::Reg<tom::Ch13Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(836usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch13_sr1(&self) -> crate::common::Reg<tom::Ch13Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(840usize)) }
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch13_stat(&self) -> crate::common::Reg<tom::Ch13Stat_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(856usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch14_cm0(&self) -> crate::common::Reg<tom::Ch14Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(908usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch14_cm1(&self) -> crate::common::Reg<tom::Ch14Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(912usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch14_cn0(&self) -> crate::common::Reg<tom::Ch14Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(916usize)) }
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    #[inline(always)]
    pub const fn ch14_ctrl(&self) -> crate::common::Reg<tom::Ch14Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(896usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch14_irq_en(&self) -> crate::common::Reg<tom::Ch14IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(928usize)) }
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch14_irq_forcint(
        &self,
    ) -> crate::common::Reg<tom::Ch14IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(932usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch14_irq_mode(
        &self,
    ) -> crate::common::Reg<tom::Ch14IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(936usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch14_irq_notify(
        &self,
    ) -> crate::common::Reg<tom::Ch14IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(924usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch14_sr0(&self) -> crate::common::Reg<tom::Ch14Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(900usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch14_sr1(&self) -> crate::common::Reg<tom::Ch14Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(904usize)) }
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch14_stat(&self) -> crate::common::Reg<tom::Ch14Stat_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(920usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch15_cm0(&self) -> crate::common::Reg<tom::Ch15Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(972usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch15_cm1(&self) -> crate::common::Reg<tom::Ch15Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(976usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch15_cn0(&self) -> crate::common::Reg<tom::Ch15Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(980usize)) }
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    #[inline(always)]
    pub const fn ch15_ctrl(&self) -> crate::common::Reg<tom::Ch15Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(960usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch15_irq_en(&self) -> crate::common::Reg<tom::Ch15IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(992usize)) }
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch15_irq_forcint(
        &self,
    ) -> crate::common::Reg<tom::Ch15IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(996usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch15_irq_mode(
        &self,
    ) -> crate::common::Reg<tom::Ch15IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(1000usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch15_irq_notify(
        &self,
    ) -> crate::common::Reg<tom::Ch15IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(988usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch15_sr0(&self) -> crate::common::Reg<tom::Ch15Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(964usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch15_sr1(&self) -> crate::common::Reg<tom::Ch15Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(968usize)) }
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch15_stat(&self) -> crate::common::Reg<tom::Ch15Stat_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(984usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_cm0(&self) -> crate::common::Reg<tom::Ch1Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(76usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_cm1(&self) -> crate::common::Reg<tom::Ch1Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(80usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_cn0(&self) -> crate::common::Reg<tom::Ch1Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(84usize)) }
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    #[inline(always)]
    pub const fn ch1_ctrl(&self) -> crate::common::Reg<tom::Ch1Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(64usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_irq_en(&self) -> crate::common::Reg<tom::Ch1IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(96usize)) }
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_irq_forcint(
        &self,
    ) -> crate::common::Reg<tom::Ch1IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(100usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_irq_mode(
        &self,
    ) -> crate::common::Reg<tom::Ch1IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(104usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_irq_notify(
        &self,
    ) -> crate::common::Reg<tom::Ch1IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(92usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_sr0(&self) -> crate::common::Reg<tom::Ch1Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(68usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_sr1(&self) -> crate::common::Reg<tom::Ch1Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(72usize)) }
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch1_stat(&self) -> crate::common::Reg<tom::Ch1Stat_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(88usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_cm0(&self) -> crate::common::Reg<tom::Ch2Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(140usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_cm1(&self) -> crate::common::Reg<tom::Ch2Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(144usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_cn0(&self) -> crate::common::Reg<tom::Ch2Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(148usize)) }
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    #[inline(always)]
    pub const fn ch2_ctrl(&self) -> crate::common::Reg<tom::Ch2Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(128usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_irq_en(&self) -> crate::common::Reg<tom::Ch2IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(160usize)) }
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_irq_forcint(
        &self,
    ) -> crate::common::Reg<tom::Ch2IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(164usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_irq_mode(
        &self,
    ) -> crate::common::Reg<tom::Ch2IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(168usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_irq_notify(
        &self,
    ) -> crate::common::Reg<tom::Ch2IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(156usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_sr0(&self) -> crate::common::Reg<tom::Ch2Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(132usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_sr1(&self) -> crate::common::Reg<tom::Ch2Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(136usize)) }
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch2_stat(&self) -> crate::common::Reg<tom::Ch2Stat_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(152usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_cm0(&self) -> crate::common::Reg<tom::Ch3Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(204usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_cm1(&self) -> crate::common::Reg<tom::Ch3Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(208usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_cn0(&self) -> crate::common::Reg<tom::Ch3Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(212usize)) }
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    #[inline(always)]
    pub const fn ch3_ctrl(&self) -> crate::common::Reg<tom::Ch3Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(192usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_irq_en(&self) -> crate::common::Reg<tom::Ch3IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(224usize)) }
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_irq_forcint(
        &self,
    ) -> crate::common::Reg<tom::Ch3IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(228usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_irq_mode(
        &self,
    ) -> crate::common::Reg<tom::Ch3IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(232usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_irq_notify(
        &self,
    ) -> crate::common::Reg<tom::Ch3IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(220usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_sr0(&self) -> crate::common::Reg<tom::Ch3Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(196usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_sr1(&self) -> crate::common::Reg<tom::Ch3Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(200usize)) }
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch3_stat(&self) -> crate::common::Reg<tom::Ch3Stat_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(216usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_cm0(&self) -> crate::common::Reg<tom::Ch4Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(268usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_cm1(&self) -> crate::common::Reg<tom::Ch4Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(272usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_cn0(&self) -> crate::common::Reg<tom::Ch4Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(276usize)) }
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    #[inline(always)]
    pub const fn ch4_ctrl(&self) -> crate::common::Reg<tom::Ch4Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(256usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_irq_en(&self) -> crate::common::Reg<tom::Ch4IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(288usize)) }
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_irq_forcint(
        &self,
    ) -> crate::common::Reg<tom::Ch4IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(292usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_irq_mode(
        &self,
    ) -> crate::common::Reg<tom::Ch4IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(296usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_irq_notify(
        &self,
    ) -> crate::common::Reg<tom::Ch4IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(284usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_sr0(&self) -> crate::common::Reg<tom::Ch4Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(260usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_sr1(&self) -> crate::common::Reg<tom::Ch4Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(264usize)) }
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch4_stat(&self) -> crate::common::Reg<tom::Ch4Stat_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(280usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_cm0(&self) -> crate::common::Reg<tom::Ch5Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(332usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_cm1(&self) -> crate::common::Reg<tom::Ch5Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(336usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_cn0(&self) -> crate::common::Reg<tom::Ch5Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(340usize)) }
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    #[inline(always)]
    pub const fn ch5_ctrl(&self) -> crate::common::Reg<tom::Ch5Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(320usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_irq_en(&self) -> crate::common::Reg<tom::Ch5IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(352usize)) }
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_irq_forcint(
        &self,
    ) -> crate::common::Reg<tom::Ch5IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(356usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_irq_mode(
        &self,
    ) -> crate::common::Reg<tom::Ch5IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(360usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_irq_notify(
        &self,
    ) -> crate::common::Reg<tom::Ch5IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(348usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_sr0(&self) -> crate::common::Reg<tom::Ch5Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(324usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_sr1(&self) -> crate::common::Reg<tom::Ch5Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(328usize)) }
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch5_stat(&self) -> crate::common::Reg<tom::Ch5Stat_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(344usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_cm0(&self) -> crate::common::Reg<tom::Ch6Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(396usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_cm1(&self) -> crate::common::Reg<tom::Ch6Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(400usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_cn0(&self) -> crate::common::Reg<tom::Ch6Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(404usize)) }
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    #[inline(always)]
    pub const fn ch6_ctrl(&self) -> crate::common::Reg<tom::Ch6Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(384usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_irq_en(&self) -> crate::common::Reg<tom::Ch6IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(416usize)) }
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_irq_forcint(
        &self,
    ) -> crate::common::Reg<tom::Ch6IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(420usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_irq_mode(
        &self,
    ) -> crate::common::Reg<tom::Ch6IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(424usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_irq_notify(
        &self,
    ) -> crate::common::Reg<tom::Ch6IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(412usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_sr0(&self) -> crate::common::Reg<tom::Ch6Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(388usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_sr1(&self) -> crate::common::Reg<tom::Ch6Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(392usize)) }
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch6_stat(&self) -> crate::common::Reg<tom::Ch6Stat_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(408usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_cm0(&self) -> crate::common::Reg<tom::Ch7Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(460usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_cm1(&self) -> crate::common::Reg<tom::Ch7Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(464usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_cn0(&self) -> crate::common::Reg<tom::Ch7Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(468usize)) }
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    #[inline(always)]
    pub const fn ch7_ctrl(&self) -> crate::common::Reg<tom::Ch7Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(448usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_irq_en(&self) -> crate::common::Reg<tom::Ch7IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(480usize)) }
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_irq_forcint(
        &self,
    ) -> crate::common::Reg<tom::Ch7IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(484usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_irq_mode(
        &self,
    ) -> crate::common::Reg<tom::Ch7IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(488usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_irq_notify(
        &self,
    ) -> crate::common::Reg<tom::Ch7IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(476usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_sr0(&self) -> crate::common::Reg<tom::Ch7Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(452usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_sr1(&self) -> crate::common::Reg<tom::Ch7Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(456usize)) }
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch7_stat(&self) -> crate::common::Reg<tom::Ch7Stat_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(472usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch8_cm0(&self) -> crate::common::Reg<tom::Ch8Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(524usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch8_cm1(&self) -> crate::common::Reg<tom::Ch8Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(528usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch8_cn0(&self) -> crate::common::Reg<tom::Ch8Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(532usize)) }
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    #[inline(always)]
    pub const fn ch8_ctrl(&self) -> crate::common::Reg<tom::Ch8Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(512usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch8_irq_en(&self) -> crate::common::Reg<tom::Ch8IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(544usize)) }
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch8_irq_forcint(
        &self,
    ) -> crate::common::Reg<tom::Ch8IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(548usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch8_irq_mode(
        &self,
    ) -> crate::common::Reg<tom::Ch8IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(552usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch8_irq_notify(
        &self,
    ) -> crate::common::Reg<tom::Ch8IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(540usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch8_sr0(&self) -> crate::common::Reg<tom::Ch8Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(516usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch8_sr1(&self) -> crate::common::Reg<tom::Ch8Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(520usize)) }
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch8_stat(&self) -> crate::common::Reg<tom::Ch8Stat_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(536usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch9_cm0(&self) -> crate::common::Reg<tom::Ch9Cm0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(588usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch9_cm1(&self) -> crate::common::Reg<tom::Ch9Cm1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(592usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch9_cn0(&self) -> crate::common::Reg<tom::Ch9Cn0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(596usize)) }
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    #[inline(always)]
    pub const fn ch9_ctrl(&self) -> crate::common::Reg<tom::Ch9Ctrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(576usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch9_irq_en(&self) -> crate::common::Reg<tom::Ch9IrqEn_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(608usize)) }
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch9_irq_forcint(
        &self,
    ) -> crate::common::Reg<tom::Ch9IrqForcint_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(612usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch9_irq_mode(
        &self,
    ) -> crate::common::Reg<tom::Ch9IrqMode_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(616usize)) }
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch9_irq_notify(
        &self,
    ) -> crate::common::Reg<tom::Ch9IrqNotify_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(604usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch9_sr0(&self) -> crate::common::Reg<tom::Ch9Sr0_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(580usize)) }
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch9_sr1(&self) -> crate::common::Reg<tom::Ch9Sr1_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(584usize)) }
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn ch9_stat(&self) -> crate::common::Reg<tom::Ch9Stat_SPEC, crate::common::R> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(600usize)) }
    }
    #[doc = "TOM0 TGC0 Action Time Base Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn tgc0_act_tb(&self) -> crate::common::Reg<tom::Tgc0ActTb_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(52usize)) }
    }
    #[doc = "TOM0 TGC0 Enable Disable Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn tgc0_endis_ctrl(
        &self,
    ) -> crate::common::Reg<tom::Tgc0EndisCtrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(112usize)) }
    }
    #[doc = "TOM0 TGC0 Enable Disable Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn tgc0_endis_stat(
        &self,
    ) -> crate::common::Reg<tom::Tgc0EndisStat_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(116usize)) }
    }
    #[doc = "TOM0 TGC0 Force Update Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn tgc0_fupd_ctrl(
        &self,
    ) -> crate::common::Reg<tom::Tgc0FupdCtrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(56usize)) }
    }
    #[doc = "TOM0 TGC0 Global Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn tgc0_glb_ctrl(
        &self,
    ) -> crate::common::Reg<tom::Tgc0GlbCtrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(48usize)) }
    }
    #[doc = "TOM0 TGC0 Internal Trigger Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn tgc0_int_trig(
        &self,
    ) -> crate::common::Reg<tom::Tgc0IntTrig_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(60usize)) }
    }
    #[doc = "TOM0 TGC0 Output Enable Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn tgc0_outen_ctrl(
        &self,
    ) -> crate::common::Reg<tom::Tgc0OutenCtrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(120usize)) }
    }
    #[doc = "TOM0 TGC0 Output Enable Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn tgc0_outen_stat(
        &self,
    ) -> crate::common::Reg<tom::Tgc0OutenStat_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(124usize)) }
    }
    #[doc = "TOM0 TGC1 Action Time Base Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn tgc1_act_tb(&self) -> crate::common::Reg<tom::Tgc1ActTb_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(564usize)) }
    }
    #[doc = "TOM0 TGC1 Enable Disable Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn tgc1_endis_ctrl(
        &self,
    ) -> crate::common::Reg<tom::Tgc1EndisCtrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(624usize)) }
    }
    #[doc = "TOM0 TGC1 Enable Disable Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn tgc1_endis_stat(
        &self,
    ) -> crate::common::Reg<tom::Tgc1EndisStat_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(628usize)) }
    }
    #[doc = "TOM0 TGC1 Force Update Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn tgc1_fupd_ctrl(
        &self,
    ) -> crate::common::Reg<tom::Tgc1FupdCtrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(568usize)) }
    }
    #[doc = "TOM0 TGC1 Global Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn tgc1_glb_ctrl(
        &self,
    ) -> crate::common::Reg<tom::Tgc1GlbCtrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(560usize)) }
    }
    #[doc = "TOM0 TGC1 Internal Trigger Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn tgc1_int_trig(
        &self,
    ) -> crate::common::Reg<tom::Tgc1IntTrig_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(572usize)) }
    }
    #[doc = "TOM0 TGC1 Output Enable Control Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn tgc1_outen_ctrl(
        &self,
    ) -> crate::common::Reg<tom::Tgc1OutenCtrl_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(632usize)) }
    }
    #[doc = "TOM0 TGC1 Output Enable Status Register\n resetvalue={Application Reset:0x0}"]
    #[inline(always)]
    pub const fn tgc1_outen_stat(
        &self,
    ) -> crate::common::Reg<tom::Tgc1OutenStat_SPEC, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(636usize)) }
    }
}
pub mod tom {
    #[allow(unused_imports)]
    use crate::common::*;
    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch0Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Cm0 = crate::RegValueT<Ch0Cm0_SPEC>;

    impl Ch0Cm0 {
        #[doc = "TOM CCU0 compare register. Setting CM0  lt  CM1 configures a duty cycle of 100 ."]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch0Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch0Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Cm0 {
        #[inline(always)]
        fn default() -> Ch0Cm0 {
            <crate::RegValueT<Ch0Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch0Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Cm1 = crate::RegValueT<Ch0Cm1_SPEC>;

    impl Ch0Cm1 {
        #[doc = "TOM CCU1 compare register. Setting CM1   0 configures a duty cycle of 0   independent of the        configured value of CM0."]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch0Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch0Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Cm1 {
        #[inline(always)]
        fn default() -> Ch0Cm1 {
            <crate::RegValueT<Ch0Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch0Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Cn0 = crate::RegValueT<Ch0Cn0_SPEC>;

    impl Ch0Cn0 {
        #[doc = "TOM CCU0 counter register. This counter is stopped if the TOM channel is disabled and not reset on        an enable event of TOM channel."]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch0Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch0Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Cn0 {
        #[inline(always)]
        fn default() -> Ch0Cn0 {
            <crate::RegValueT<Ch0Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch0Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    pub type Ch0Ctrl = crate::RegValueT<Ch0Ctrl_SPEC>;

    impl Ch0Ctrl {
        #[doc = "SR0 is used to generate a trigger on output TOM i  CH x  OUT T if equal to CN0. Note  This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for duty cycle. If the output is disabled  the output TOM OUT x  is set to the inverse        value of SL. Reset value depends on the hardware configuration chosen by silicon        vendor."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source select for channel. The register CLK SRC is updated with the value of CLK SRC SR together        with the update of register CM0 and CM1. The input of the FX clock divider depends on the value of FXCLK SEL  see        CMU . This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done          either by an end of a period or a forced update. If clock of channel is stopped  i.e. ECLK SRC 0 and CLK SRC  101   110   111             the channel can only be restarted by resetting CLK SRC SR to a value          of 000 to 100 and forcing an update via the force update mechanism. If ECLK SRC 0   ECLK SRC 1"]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch0Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC"]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode"]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch0Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. On TOM channel 2  SPEM 1 has special meaning. If SPEM   1  the signal          SPE NIPD triggers the reset of CN0 independent of RST CN0. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG  x   of module TOM CH x"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE trigger to reset CN0. For TOM channel 2  6 and 7  this bit defines  in combination with bit        SPEM  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset        by TOM input signal SPE i  NIPD. For TOM channel 8 and 9  this bit defines only if CN0 reset is defined          by input signal SPE i  NIPD or by configuration of RST CCU0. The          output TOM i  CH x  OUT is not affected. The configuration bit SPEM is          not available for these channels  and thus assumed to be 0. If a configuration of SPEM   SPE TRIG   0   1 or 1   0 is chosen  i.e.          CN0 is reset by signal SPE i  NIPD   the one shot mode in          corresponding TOM channel should also be enabled by setting bit OSM 1          to generate one PWM pulse in case of trigger SPE i  NIPD. In SPE module  one of the trigger signals TOM i  CH2 TRIG CCU1           TOM i  CH6 TRIG CCU1  TOM i  CH7 TRIG CCU1  TOM i  CH8 TRIG CCU1  or          TOM i  CH9 TRIG CCU1 can be used to trigger the update of register          SPE i  OUT CTRL. If SPEM 0   SPEM 1"]
        #[inline(always)]
        pub fn spe_trig(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. In this mode  the counter CN0 counts for only one period. The length of        period is defined by CM0. A write access to the register CN0 triggers        the start of counting."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. Note  This bit enables the PCM mode of channel 15."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE output mode enable for channel. Note  The SPE output mode is only implemented for TOM instances connected to an SPE module  and only for TOM channels 0 to 7. Note  For TOM channel 2  6 and 7  this bit defines  in combination with bit SPE TRIG  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset by TOM input signal SPE i  NIPD ."]
        #[inline(always)]
        pub fn spem(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Gated Counter Mode enable. The Gated Counter mode is only available for TOM instances connected to        an SPE module  and only for channels 0 to 7."]
        #[inline(always)]
        pub fn gcm(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch0Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch0Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Ctrl {
        #[inline(always)]
        fn default() -> Ch0Ctrl {
            <crate::RegValueT<Ch0Ctrl_SPEC> as RegisterValue<_>>::new(2048)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch0IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0IrqEn = crate::RegValueT<Ch0IrqEn_SPEC>;

    impl Ch0IrqEn {
        #[doc = "TOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch0IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch0IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM CCU1TC IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch0IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch0IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0IrqEn {
        #[inline(always)]
        fn default() -> Ch0IrqEn {
            <crate::RegValueT<Ch0IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch0IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0IrqForcint = crate::RegValueT<Ch0IrqForcint_SPEC>;

    impl Ch0IrqForcint {
        #[doc = "Trigger TOM CCU0TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch0IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch0IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TOM CCU1TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_ccu1tc0(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch0IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch0IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0IrqForcint {
        #[inline(always)]
        fn default() -> Ch0IrqForcint {
            <crate::RegValueT<Ch0IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch0IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0IrqMode = crate::RegValueT<Ch0IrqMode_SPEC>;

    impl Ch0IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch0IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch0IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0IrqMode {
        #[inline(always)]
        fn default() -> Ch0IrqMode {
            <crate::RegValueT<Ch0IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch0IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0IrqNotify = crate::RegValueT<Ch0IrqNotify_SPEC>;

    impl Ch0IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch0IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch0IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch0IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch0IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0IrqNotify {
        #[inline(always)]
        fn default() -> Ch0IrqNotify {
            <crate::RegValueT<Ch0IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch0Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Sr0 = crate::RegValueT<Ch0Sr0_SPEC>;

    impl Ch0Sr0 {
        #[doc = "TOM channel x shadow register SR0 for update of compare register CM0"]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch0Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch0Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Sr0 {
        #[inline(always)]
        fn default() -> Ch0Sr0 {
            <crate::RegValueT<Ch0Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch0Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Sr1 = crate::RegValueT<Ch0Sr1_SPEC>;

    impl Ch0Sr1 {
        #[doc = "TOM channel x shadow register SR1 for update of compare register CM1"]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch0Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch0Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Sr1 {
        #[inline(always)]
        fn default() -> Ch0Sr1 {
            <crate::RegValueT<Ch0Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch0Stat_SPEC;
    impl crate::sealed::RegSpec for Ch0Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch0Stat = crate::RegValueT<Ch0Stat_SPEC>;

    impl Ch0Stat {
        #[doc = "Output level of output TOM OUT x . Reset value is the inverted value of SL bit  which depends on the        hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch0Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch0Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch0Stat {
        #[inline(always)]
        fn default() -> Ch0Stat {
            <crate::RegValueT<Ch0Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch10Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch10Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch10Cm0 = crate::RegValueT<Ch10Cm0_SPEC>;

    impl Ch10Cm0 {
        #[doc = "TOM CCU0 compare register. Setting CM0  lt  CM1 configures a duty cycle of 100 ."]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch10Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch10Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch10Cm0 {
        #[inline(always)]
        fn default() -> Ch10Cm0 {
            <crate::RegValueT<Ch10Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch10Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch10Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch10Cm1 = crate::RegValueT<Ch10Cm1_SPEC>;

    impl Ch10Cm1 {
        #[doc = "TOM CCU1 compare register. Setting CM1   0 configures a duty cycle of 0   independent of the        configured value of CM0."]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch10Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch10Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch10Cm1 {
        #[inline(always)]
        fn default() -> Ch10Cm1 {
            <crate::RegValueT<Ch10Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch10Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch10Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch10Cn0 = crate::RegValueT<Ch10Cn0_SPEC>;

    impl Ch10Cn0 {
        #[doc = "TOM CCU0 counter register. This counter is stopped if the TOM channel is disabled and not reset on        an enable event of TOM channel."]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch10Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch10Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch10Cn0 {
        #[inline(always)]
        fn default() -> Ch10Cn0 {
            <crate::RegValueT<Ch10Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch10Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch10Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    pub type Ch10Ctrl = crate::RegValueT<Ch10Ctrl_SPEC>;

    impl Ch10Ctrl {
        #[doc = "SR0 is used to generate a trigger on output TOM i  CH x  OUT T if equal to CN0. Note  This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch10Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch10Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for duty cycle. If the output is disabled  the output TOM OUT x  is set to the inverse        value of SL. Reset value depends on the hardware configuration chosen by silicon        vendor."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch10Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch10Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source select for channel. The register CLK SRC is updated with the value of CLK SRC SR together        with the update of register CM0 and CM1. The input of the FX clock divider depends on the value of FXCLK SEL  see        CMU . This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done          either by an end of a period or a forced update. If clock of channel is stopped  i.e. ECLK SRC 0 and CLK SRC  101   110   111             the channel can only be restarted by resetting CLK SRC SR to a value          of 000 to 100 and forcing an update via the force update mechanism. If ECLK SRC 0   ECLK SRC 1"]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch10Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch10Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC"]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch10Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch10Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch10Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch10Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode"]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch10Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch10Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. On TOM channel 2  SPEM 1 has special meaning. If SPEM   1  the signal          SPE NIPD triggers the reset of CN0 independent of RST CN0. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch10Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch10Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch10Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch10Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch10Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch10Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch10Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch10Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG  x   of module TOM CH x"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch10Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch10Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE trigger to reset CN0. For TOM channel 2  6 and 7  this bit defines  in combination with bit        SPEM  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset        by TOM input signal SPE i  NIPD. For TOM channel 8 and 9  this bit defines only if CN0 reset is defined          by input signal SPE i  NIPD or by configuration of RST CCU0. The          output TOM i  CH x  OUT is not affected. The configuration bit SPEM is          not available for these channels  and thus assumed to be 0. If a configuration of SPEM   SPE TRIG   0   1 or 1   0 is chosen  i.e.          CN0 is reset by signal SPE i  NIPD   the one shot mode in          corresponding TOM channel should also be enabled by setting bit OSM 1          to generate one PWM pulse in case of trigger SPE i  NIPD. In SPE module  one of the trigger signals TOM i  CH2 TRIG CCU1           TOM i  CH6 TRIG CCU1  TOM i  CH7 TRIG CCU1  TOM i  CH8 TRIG CCU1  or          TOM i  CH9 TRIG CCU1 can be used to trigger the update of register          SPE i  OUT CTRL. If SPEM 0   SPEM 1"]
        #[inline(always)]
        pub fn spe_trig(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch10Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch10Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. In this mode  the counter CN0 counts for only one period. The length of        period is defined by CM0. A write access to the register CN0 triggers        the start of counting."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch10Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch10Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. Note  This bit enables the PCM mode of channel 15."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch10Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch10Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE output mode enable for channel. Note  The SPE output mode is only implemented for TOM instances connected to an SPE module  and only for TOM channels 0 to 7. Note  For TOM channel 2  6 and 7  this bit defines  in combination with bit SPE TRIG  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset by TOM input signal SPE i  NIPD ."]
        #[inline(always)]
        pub fn spem(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch10Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch10Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Gated Counter Mode enable. The Gated Counter mode is only available for TOM instances connected to        an SPE module  and only for channels 0 to 7."]
        #[inline(always)]
        pub fn gcm(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch10Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch10Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch10Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch10Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch10Ctrl {
        #[inline(always)]
        fn default() -> Ch10Ctrl {
            <crate::RegValueT<Ch10Ctrl_SPEC> as RegisterValue<_>>::new(2048)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch10IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch10IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch10IrqEn = crate::RegValueT<Ch10IrqEn_SPEC>;

    impl Ch10IrqEn {
        #[doc = "TOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch10IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch10IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM CCU1TC IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch10IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch10IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch10IrqEn {
        #[inline(always)]
        fn default() -> Ch10IrqEn {
            <crate::RegValueT<Ch10IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch10IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch10IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch10IrqForcint = crate::RegValueT<Ch10IrqForcint_SPEC>;

    impl Ch10IrqForcint {
        #[doc = "Trigger TOM CCU0TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch10IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch10IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TOM CCU1TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_ccu1tc0(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch10IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch10IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch10IrqForcint {
        #[inline(always)]
        fn default() -> Ch10IrqForcint {
            <crate::RegValueT<Ch10IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch10IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch10IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch10IrqMode = crate::RegValueT<Ch10IrqMode_SPEC>;

    impl Ch10IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch10IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch10IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch10IrqMode {
        #[inline(always)]
        fn default() -> Ch10IrqMode {
            <crate::RegValueT<Ch10IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch10IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch10IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch10IrqNotify = crate::RegValueT<Ch10IrqNotify_SPEC>;

    impl Ch10IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch10IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch10IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch10IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch10IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch10IrqNotify {
        #[inline(always)]
        fn default() -> Ch10IrqNotify {
            <crate::RegValueT<Ch10IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch10Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch10Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch10Sr0 = crate::RegValueT<Ch10Sr0_SPEC>;

    impl Ch10Sr0 {
        #[doc = "TOM channel x shadow register SR0 for update of compare register CM0"]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch10Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch10Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch10Sr0 {
        #[inline(always)]
        fn default() -> Ch10Sr0 {
            <crate::RegValueT<Ch10Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch10Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch10Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch10Sr1 = crate::RegValueT<Ch10Sr1_SPEC>;

    impl Ch10Sr1 {
        #[doc = "TOM channel x shadow register SR1 for update of compare register CM1"]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch10Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch10Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch10Sr1 {
        #[inline(always)]
        fn default() -> Ch10Sr1 {
            <crate::RegValueT<Ch10Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch10Stat_SPEC;
    impl crate::sealed::RegSpec for Ch10Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch10Stat = crate::RegValueT<Ch10Stat_SPEC>;

    impl Ch10Stat {
        #[doc = "Output level of output TOM OUT x . Reset value is the inverted value of SL bit  which depends on the        hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch10Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch10Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch10Stat {
        #[inline(always)]
        fn default() -> Ch10Stat {
            <crate::RegValueT<Ch10Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch11Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch11Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch11Cm0 = crate::RegValueT<Ch11Cm0_SPEC>;

    impl Ch11Cm0 {
        #[doc = "TOM CCU0 compare register. Setting CM0  lt  CM1 configures a duty cycle of 100 ."]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch11Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch11Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch11Cm0 {
        #[inline(always)]
        fn default() -> Ch11Cm0 {
            <crate::RegValueT<Ch11Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch11Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch11Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch11Cm1 = crate::RegValueT<Ch11Cm1_SPEC>;

    impl Ch11Cm1 {
        #[doc = "TOM CCU1 compare register. Setting CM1   0 configures a duty cycle of 0   independent of the        configured value of CM0."]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch11Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch11Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch11Cm1 {
        #[inline(always)]
        fn default() -> Ch11Cm1 {
            <crate::RegValueT<Ch11Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch11Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch11Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch11Cn0 = crate::RegValueT<Ch11Cn0_SPEC>;

    impl Ch11Cn0 {
        #[doc = "TOM CCU0 counter register. This counter is stopped if the TOM channel is disabled and not reset on        an enable event of TOM channel."]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch11Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch11Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch11Cn0 {
        #[inline(always)]
        fn default() -> Ch11Cn0 {
            <crate::RegValueT<Ch11Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch11Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch11Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    pub type Ch11Ctrl = crate::RegValueT<Ch11Ctrl_SPEC>;

    impl Ch11Ctrl {
        #[doc = "SR0 is used to generate a trigger on output TOM i  CH x  OUT T if equal to CN0. Note  This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch11Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch11Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for duty cycle. If the output is disabled  the output TOM OUT x  is set to the inverse        value of SL. Reset value depends on the hardware configuration chosen by silicon        vendor."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch11Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch11Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source select for channel. The register CLK SRC is updated with the value of CLK SRC SR together        with the update of register CM0 and CM1. The input of the FX clock divider depends on the value of FXCLK SEL  see        CMU . This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done          either by an end of a period or a forced update. If clock of channel is stopped  i.e. ECLK SRC 0 and CLK SRC  101   110   111             the channel can only be restarted by resetting CLK SRC SR to a value          of 000 to 100 and forcing an update via the force update mechanism. If ECLK SRC 0   ECLK SRC 1"]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch11Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch11Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC"]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch11Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch11Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch11Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch11Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode"]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch11Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch11Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. On TOM channel 2  SPEM 1 has special meaning. If SPEM   1  the signal          SPE NIPD triggers the reset of CN0 independent of RST CN0. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch11Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch11Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch11Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch11Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch11Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch11Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch11Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch11Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG  x   of module TOM CH x"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch11Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch11Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE trigger to reset CN0. For TOM channel 2  6 and 7  this bit defines  in combination with bit        SPEM  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset        by TOM input signal SPE i  NIPD. For TOM channel 8 and 9  this bit defines only if CN0 reset is defined          by input signal SPE i  NIPD or by configuration of RST CCU0. The          output TOM i  CH x  OUT is not affected. The configuration bit SPEM is          not available for these channels  and thus assumed to be 0. If a configuration of SPEM   SPE TRIG   0   1 or 1   0 is chosen  i.e.          CN0 is reset by signal SPE i  NIPD   the one shot mode in          corresponding TOM channel should also be enabled by setting bit OSM 1          to generate one PWM pulse in case of trigger SPE i  NIPD. In SPE module  one of the trigger signals TOM i  CH2 TRIG CCU1           TOM i  CH6 TRIG CCU1  TOM i  CH7 TRIG CCU1  TOM i  CH8 TRIG CCU1  or          TOM i  CH9 TRIG CCU1 can be used to trigger the update of register          SPE i  OUT CTRL. If SPEM 0   SPEM 1"]
        #[inline(always)]
        pub fn spe_trig(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch11Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch11Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. In this mode  the counter CN0 counts for only one period. The length of        period is defined by CM0. A write access to the register CN0 triggers        the start of counting."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch11Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch11Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. Note  This bit enables the PCM mode of channel 15."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch11Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch11Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE output mode enable for channel. Note  The SPE output mode is only implemented for TOM instances connected to an SPE module  and only for TOM channels 0 to 7. Note  For TOM channel 2  6 and 7  this bit defines  in combination with bit SPE TRIG  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset by TOM input signal SPE i  NIPD ."]
        #[inline(always)]
        pub fn spem(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch11Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch11Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Gated Counter Mode enable. The Gated Counter mode is only available for TOM instances connected to        an SPE module  and only for channels 0 to 7."]
        #[inline(always)]
        pub fn gcm(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch11Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch11Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch11Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch11Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch11Ctrl {
        #[inline(always)]
        fn default() -> Ch11Ctrl {
            <crate::RegValueT<Ch11Ctrl_SPEC> as RegisterValue<_>>::new(2048)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch11IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch11IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch11IrqEn = crate::RegValueT<Ch11IrqEn_SPEC>;

    impl Ch11IrqEn {
        #[doc = "TOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch11IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch11IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM CCU1TC IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch11IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch11IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch11IrqEn {
        #[inline(always)]
        fn default() -> Ch11IrqEn {
            <crate::RegValueT<Ch11IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch11IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch11IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch11IrqForcint = crate::RegValueT<Ch11IrqForcint_SPEC>;

    impl Ch11IrqForcint {
        #[doc = "Trigger TOM CCU0TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch11IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch11IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TOM CCU1TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_ccu1tc0(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch11IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch11IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch11IrqForcint {
        #[inline(always)]
        fn default() -> Ch11IrqForcint {
            <crate::RegValueT<Ch11IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch11IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch11IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch11IrqMode = crate::RegValueT<Ch11IrqMode_SPEC>;

    impl Ch11IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch11IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch11IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch11IrqMode {
        #[inline(always)]
        fn default() -> Ch11IrqMode {
            <crate::RegValueT<Ch11IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch11IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch11IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch11IrqNotify = crate::RegValueT<Ch11IrqNotify_SPEC>;

    impl Ch11IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch11IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch11IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch11IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch11IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch11IrqNotify {
        #[inline(always)]
        fn default() -> Ch11IrqNotify {
            <crate::RegValueT<Ch11IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch11Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch11Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch11Sr0 = crate::RegValueT<Ch11Sr0_SPEC>;

    impl Ch11Sr0 {
        #[doc = "TOM channel x shadow register SR0 for update of compare register CM0"]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch11Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch11Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch11Sr0 {
        #[inline(always)]
        fn default() -> Ch11Sr0 {
            <crate::RegValueT<Ch11Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch11Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch11Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch11Sr1 = crate::RegValueT<Ch11Sr1_SPEC>;

    impl Ch11Sr1 {
        #[doc = "TOM channel x shadow register SR1 for update of compare register CM1"]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch11Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch11Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch11Sr1 {
        #[inline(always)]
        fn default() -> Ch11Sr1 {
            <crate::RegValueT<Ch11Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch11Stat_SPEC;
    impl crate::sealed::RegSpec for Ch11Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch11Stat = crate::RegValueT<Ch11Stat_SPEC>;

    impl Ch11Stat {
        #[doc = "Output level of output TOM OUT x . Reset value is the inverted value of SL bit  which depends on the        hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch11Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch11Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch11Stat {
        #[inline(always)]
        fn default() -> Ch11Stat {
            <crate::RegValueT<Ch11Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch12Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch12Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch12Cm0 = crate::RegValueT<Ch12Cm0_SPEC>;

    impl Ch12Cm0 {
        #[doc = "TOM CCU0 compare register. Setting CM0  lt  CM1 configures a duty cycle of 100 ."]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch12Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch12Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch12Cm0 {
        #[inline(always)]
        fn default() -> Ch12Cm0 {
            <crate::RegValueT<Ch12Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch12Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch12Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch12Cm1 = crate::RegValueT<Ch12Cm1_SPEC>;

    impl Ch12Cm1 {
        #[doc = "TOM CCU1 compare register. Setting CM1   0 configures a duty cycle of 0   independent of the        configured value of CM0."]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch12Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch12Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch12Cm1 {
        #[inline(always)]
        fn default() -> Ch12Cm1 {
            <crate::RegValueT<Ch12Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch12Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch12Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch12Cn0 = crate::RegValueT<Ch12Cn0_SPEC>;

    impl Ch12Cn0 {
        #[doc = "TOM CCU0 counter register. This counter is stopped if the TOM channel is disabled and not reset on        an enable event of TOM channel."]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch12Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch12Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch12Cn0 {
        #[inline(always)]
        fn default() -> Ch12Cn0 {
            <crate::RegValueT<Ch12Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch12Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch12Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    pub type Ch12Ctrl = crate::RegValueT<Ch12Ctrl_SPEC>;

    impl Ch12Ctrl {
        #[doc = "SR0 is used to generate a trigger on output TOM i  CH x  OUT T if equal to CN0. Note  This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch12Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch12Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for duty cycle. If the output is disabled  the output TOM OUT x  is set to the inverse        value of SL. Reset value depends on the hardware configuration chosen by silicon        vendor."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch12Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch12Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source select for channel. The register CLK SRC is updated with the value of CLK SRC SR together        with the update of register CM0 and CM1. The input of the FX clock divider depends on the value of FXCLK SEL  see        CMU . This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done          either by an end of a period or a forced update. If clock of channel is stopped  i.e. ECLK SRC 0 and CLK SRC  101   110   111             the channel can only be restarted by resetting CLK SRC SR to a value          of 000 to 100 and forcing an update via the force update mechanism. If ECLK SRC 0   ECLK SRC 1"]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch12Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch12Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC"]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch12Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch12Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch12Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch12Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode"]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch12Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch12Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. On TOM channel 2  SPEM 1 has special meaning. If SPEM   1  the signal          SPE NIPD triggers the reset of CN0 independent of RST CN0. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch12Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch12Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch12Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch12Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch12Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch12Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch12Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch12Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG  x   of module TOM CH x"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch12Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch12Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE trigger to reset CN0. For TOM channel 2  6 and 7  this bit defines  in combination with bit        SPEM  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset        by TOM input signal SPE i  NIPD. For TOM channel 8 and 9  this bit defines only if CN0 reset is defined          by input signal SPE i  NIPD or by configuration of RST CCU0. The          output TOM i  CH x  OUT is not affected. The configuration bit SPEM is          not available for these channels  and thus assumed to be 0. If a configuration of SPEM   SPE TRIG   0   1 or 1   0 is chosen  i.e.          CN0 is reset by signal SPE i  NIPD   the one shot mode in          corresponding TOM channel should also be enabled by setting bit OSM 1          to generate one PWM pulse in case of trigger SPE i  NIPD. In SPE module  one of the trigger signals TOM i  CH2 TRIG CCU1           TOM i  CH6 TRIG CCU1  TOM i  CH7 TRIG CCU1  TOM i  CH8 TRIG CCU1  or          TOM i  CH9 TRIG CCU1 can be used to trigger the update of register          SPE i  OUT CTRL. If SPEM 0   SPEM 1"]
        #[inline(always)]
        pub fn spe_trig(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch12Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch12Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. In this mode  the counter CN0 counts for only one period. The length of        period is defined by CM0. A write access to the register CN0 triggers        the start of counting."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch12Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch12Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. Note  This bit enables the PCM mode of channel 15."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch12Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch12Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE output mode enable for channel. Note  The SPE output mode is only implemented for TOM instances connected to an SPE module  and only for TOM channels 0 to 7. Note  For TOM channel 2  6 and 7  this bit defines  in combination with bit SPE TRIG  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset by TOM input signal SPE i  NIPD ."]
        #[inline(always)]
        pub fn spem(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch12Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch12Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Gated Counter Mode enable. The Gated Counter mode is only available for TOM instances connected to        an SPE module  and only for channels 0 to 7."]
        #[inline(always)]
        pub fn gcm(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch12Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch12Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch12Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch12Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch12Ctrl {
        #[inline(always)]
        fn default() -> Ch12Ctrl {
            <crate::RegValueT<Ch12Ctrl_SPEC> as RegisterValue<_>>::new(2048)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch12IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch12IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch12IrqEn = crate::RegValueT<Ch12IrqEn_SPEC>;

    impl Ch12IrqEn {
        #[doc = "TOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch12IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch12IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM CCU1TC IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch12IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch12IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch12IrqEn {
        #[inline(always)]
        fn default() -> Ch12IrqEn {
            <crate::RegValueT<Ch12IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch12IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch12IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch12IrqForcint = crate::RegValueT<Ch12IrqForcint_SPEC>;

    impl Ch12IrqForcint {
        #[doc = "Trigger TOM CCU0TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch12IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch12IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TOM CCU1TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_ccu1tc0(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch12IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch12IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch12IrqForcint {
        #[inline(always)]
        fn default() -> Ch12IrqForcint {
            <crate::RegValueT<Ch12IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch12IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch12IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch12IrqMode = crate::RegValueT<Ch12IrqMode_SPEC>;

    impl Ch12IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch12IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch12IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch12IrqMode {
        #[inline(always)]
        fn default() -> Ch12IrqMode {
            <crate::RegValueT<Ch12IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch12IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch12IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch12IrqNotify = crate::RegValueT<Ch12IrqNotify_SPEC>;

    impl Ch12IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch12IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch12IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch12IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch12IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch12IrqNotify {
        #[inline(always)]
        fn default() -> Ch12IrqNotify {
            <crate::RegValueT<Ch12IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch12Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch12Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch12Sr0 = crate::RegValueT<Ch12Sr0_SPEC>;

    impl Ch12Sr0 {
        #[doc = "TOM channel x shadow register SR0 for update of compare register CM0"]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch12Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch12Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch12Sr0 {
        #[inline(always)]
        fn default() -> Ch12Sr0 {
            <crate::RegValueT<Ch12Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch12Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch12Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch12Sr1 = crate::RegValueT<Ch12Sr1_SPEC>;

    impl Ch12Sr1 {
        #[doc = "TOM channel x shadow register SR1 for update of compare register CM1"]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch12Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch12Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch12Sr1 {
        #[inline(always)]
        fn default() -> Ch12Sr1 {
            <crate::RegValueT<Ch12Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch12Stat_SPEC;
    impl crate::sealed::RegSpec for Ch12Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch12Stat = crate::RegValueT<Ch12Stat_SPEC>;

    impl Ch12Stat {
        #[doc = "Output level of output TOM OUT x . Reset value is the inverted value of SL bit  which depends on the        hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch12Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch12Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch12Stat {
        #[inline(always)]
        fn default() -> Ch12Stat {
            <crate::RegValueT<Ch12Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch13Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch13Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch13Cm0 = crate::RegValueT<Ch13Cm0_SPEC>;

    impl Ch13Cm0 {
        #[doc = "TOM CCU0 compare register. Setting CM0  lt  CM1 configures a duty cycle of 100 ."]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch13Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch13Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch13Cm0 {
        #[inline(always)]
        fn default() -> Ch13Cm0 {
            <crate::RegValueT<Ch13Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch13Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch13Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch13Cm1 = crate::RegValueT<Ch13Cm1_SPEC>;

    impl Ch13Cm1 {
        #[doc = "TOM CCU1 compare register. Setting CM1   0 configures a duty cycle of 0   independent of the        configured value of CM0."]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch13Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch13Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch13Cm1 {
        #[inline(always)]
        fn default() -> Ch13Cm1 {
            <crate::RegValueT<Ch13Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch13Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch13Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch13Cn0 = crate::RegValueT<Ch13Cn0_SPEC>;

    impl Ch13Cn0 {
        #[doc = "TOM CCU0 counter register. This counter is stopped if the TOM channel is disabled and not reset on        an enable event of TOM channel."]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch13Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch13Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch13Cn0 {
        #[inline(always)]
        fn default() -> Ch13Cn0 {
            <crate::RegValueT<Ch13Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch13Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch13Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    pub type Ch13Ctrl = crate::RegValueT<Ch13Ctrl_SPEC>;

    impl Ch13Ctrl {
        #[doc = "SR0 is used to generate a trigger on output TOM i  CH x  OUT T if equal to CN0. Note  This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch13Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch13Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for duty cycle. If the output is disabled  the output TOM OUT x  is set to the inverse        value of SL. Reset value depends on the hardware configuration chosen by silicon        vendor."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch13Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch13Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source select for channel. The register CLK SRC is updated with the value of CLK SRC SR together        with the update of register CM0 and CM1. The input of the FX clock divider depends on the value of FXCLK SEL  see        CMU . This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done          either by an end of a period or a forced update. If clock of channel is stopped  i.e. ECLK SRC 0 and CLK SRC  101   110   111             the channel can only be restarted by resetting CLK SRC SR to a value          of 000 to 100 and forcing an update via the force update mechanism. If ECLK SRC 0   ECLK SRC 1"]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch13Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch13Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC"]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch13Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch13Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch13Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch13Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode"]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch13Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch13Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. On TOM channel 2  SPEM 1 has special meaning. If SPEM   1  the signal          SPE NIPD triggers the reset of CN0 independent of RST CN0. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch13Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch13Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch13Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch13Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch13Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch13Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch13Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch13Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG  x   of module TOM CH x"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch13Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch13Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE trigger to reset CN0. For TOM channel 2  6 and 7  this bit defines  in combination with bit        SPEM  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset        by TOM input signal SPE i  NIPD. For TOM channel 8 and 9  this bit defines only if CN0 reset is defined          by input signal SPE i  NIPD or by configuration of RST CCU0. The          output TOM i  CH x  OUT is not affected. The configuration bit SPEM is          not available for these channels  and thus assumed to be 0. If a configuration of SPEM   SPE TRIG   0   1 or 1   0 is chosen  i.e.          CN0 is reset by signal SPE i  NIPD   the one shot mode in          corresponding TOM channel should also be enabled by setting bit OSM 1          to generate one PWM pulse in case of trigger SPE i  NIPD. In SPE module  one of the trigger signals TOM i  CH2 TRIG CCU1           TOM i  CH6 TRIG CCU1  TOM i  CH7 TRIG CCU1  TOM i  CH8 TRIG CCU1  or          TOM i  CH9 TRIG CCU1 can be used to trigger the update of register          SPE i  OUT CTRL. If SPEM 0   SPEM 1"]
        #[inline(always)]
        pub fn spe_trig(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch13Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch13Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. In this mode  the counter CN0 counts for only one period. The length of        period is defined by CM0. A write access to the register CN0 triggers        the start of counting."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch13Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch13Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. Note  This bit enables the PCM mode of channel 15."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch13Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch13Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE output mode enable for channel. Note  The SPE output mode is only implemented for TOM instances connected to an SPE module  and only for TOM channels 0 to 7. Note  For TOM channel 2  6 and 7  this bit defines  in combination with bit SPE TRIG  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset by TOM input signal SPE i  NIPD ."]
        #[inline(always)]
        pub fn spem(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch13Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch13Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Gated Counter Mode enable. The Gated Counter mode is only available for TOM instances connected to        an SPE module  and only for channels 0 to 7."]
        #[inline(always)]
        pub fn gcm(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch13Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch13Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch13Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch13Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch13Ctrl {
        #[inline(always)]
        fn default() -> Ch13Ctrl {
            <crate::RegValueT<Ch13Ctrl_SPEC> as RegisterValue<_>>::new(2048)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch13IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch13IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch13IrqEn = crate::RegValueT<Ch13IrqEn_SPEC>;

    impl Ch13IrqEn {
        #[doc = "TOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch13IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch13IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM CCU1TC IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch13IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch13IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch13IrqEn {
        #[inline(always)]
        fn default() -> Ch13IrqEn {
            <crate::RegValueT<Ch13IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch13IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch13IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch13IrqForcint = crate::RegValueT<Ch13IrqForcint_SPEC>;

    impl Ch13IrqForcint {
        #[doc = "Trigger TOM CCU0TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch13IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch13IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TOM CCU1TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_ccu1tc0(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch13IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch13IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch13IrqForcint {
        #[inline(always)]
        fn default() -> Ch13IrqForcint {
            <crate::RegValueT<Ch13IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch13IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch13IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch13IrqMode = crate::RegValueT<Ch13IrqMode_SPEC>;

    impl Ch13IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch13IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch13IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch13IrqMode {
        #[inline(always)]
        fn default() -> Ch13IrqMode {
            <crate::RegValueT<Ch13IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch13IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch13IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch13IrqNotify = crate::RegValueT<Ch13IrqNotify_SPEC>;

    impl Ch13IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch13IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch13IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch13IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch13IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch13IrqNotify {
        #[inline(always)]
        fn default() -> Ch13IrqNotify {
            <crate::RegValueT<Ch13IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch13Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch13Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch13Sr0 = crate::RegValueT<Ch13Sr0_SPEC>;

    impl Ch13Sr0 {
        #[doc = "TOM channel x shadow register SR0 for update of compare register CM0"]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch13Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch13Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch13Sr0 {
        #[inline(always)]
        fn default() -> Ch13Sr0 {
            <crate::RegValueT<Ch13Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch13Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch13Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch13Sr1 = crate::RegValueT<Ch13Sr1_SPEC>;

    impl Ch13Sr1 {
        #[doc = "TOM channel x shadow register SR1 for update of compare register CM1"]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch13Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch13Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch13Sr1 {
        #[inline(always)]
        fn default() -> Ch13Sr1 {
            <crate::RegValueT<Ch13Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch13Stat_SPEC;
    impl crate::sealed::RegSpec for Ch13Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch13Stat = crate::RegValueT<Ch13Stat_SPEC>;

    impl Ch13Stat {
        #[doc = "Output level of output TOM OUT x . Reset value is the inverted value of SL bit  which depends on the        hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch13Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch13Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch13Stat {
        #[inline(always)]
        fn default() -> Ch13Stat {
            <crate::RegValueT<Ch13Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch14Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch14Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch14Cm0 = crate::RegValueT<Ch14Cm0_SPEC>;

    impl Ch14Cm0 {
        #[doc = "TOM CCU0 compare register. Setting CM0  lt  CM1 configures a duty cycle of 100 ."]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch14Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch14Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch14Cm0 {
        #[inline(always)]
        fn default() -> Ch14Cm0 {
            <crate::RegValueT<Ch14Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch14Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch14Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch14Cm1 = crate::RegValueT<Ch14Cm1_SPEC>;

    impl Ch14Cm1 {
        #[doc = "TOM CCU1 compare register. Setting CM1   0 configures a duty cycle of 0   independent of the        configured value of CM0."]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch14Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch14Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch14Cm1 {
        #[inline(always)]
        fn default() -> Ch14Cm1 {
            <crate::RegValueT<Ch14Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch14Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch14Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch14Cn0 = crate::RegValueT<Ch14Cn0_SPEC>;

    impl Ch14Cn0 {
        #[doc = "TOM CCU0 counter register. This counter is stopped if the TOM channel is disabled and not reset on        an enable event of TOM channel."]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch14Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch14Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch14Cn0 {
        #[inline(always)]
        fn default() -> Ch14Cn0 {
            <crate::RegValueT<Ch14Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch14Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch14Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    pub type Ch14Ctrl = crate::RegValueT<Ch14Ctrl_SPEC>;

    impl Ch14Ctrl {
        #[doc = "SR0 is used to generate a trigger on output TOM i  CH x  OUT T if equal to CN0. Note  This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch14Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch14Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for duty cycle. If the output is disabled  the output TOM OUT x  is set to the inverse        value of SL. Reset value depends on the hardware configuration chosen by silicon        vendor."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch14Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch14Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source select for channel. The register CLK SRC is updated with the value of CLK SRC SR together        with the update of register CM0 and CM1. The input of the FX clock divider depends on the value of FXCLK SEL  see        CMU . This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done          either by an end of a period or a forced update. If clock of channel is stopped  i.e. ECLK SRC 0 and CLK SRC  101   110   111             the channel can only be restarted by resetting CLK SRC SR to a value          of 000 to 100 and forcing an update via the force update mechanism. If ECLK SRC 0   ECLK SRC 1"]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch14Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch14Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC"]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch14Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch14Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch14Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch14Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode"]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch14Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch14Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. On TOM channel 2  SPEM 1 has special meaning. If SPEM   1  the signal          SPE NIPD triggers the reset of CN0 independent of RST CN0. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch14Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch14Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch14Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch14Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch14Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch14Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch14Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch14Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG  x   of module TOM CH x"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch14Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch14Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE trigger to reset CN0. For TOM channel 2  6 and 7  this bit defines  in combination with bit        SPEM  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset        by TOM input signal SPE i  NIPD. For TOM channel 8 and 9  this bit defines only if CN0 reset is defined          by input signal SPE i  NIPD or by configuration of RST CCU0. The          output TOM i  CH x  OUT is not affected. The configuration bit SPEM is          not available for these channels  and thus assumed to be 0. If a configuration of SPEM   SPE TRIG   0   1 or 1   0 is chosen  i.e.          CN0 is reset by signal SPE i  NIPD   the one shot mode in          corresponding TOM channel should also be enabled by setting bit OSM 1          to generate one PWM pulse in case of trigger SPE i  NIPD. In SPE module  one of the trigger signals TOM i  CH2 TRIG CCU1           TOM i  CH6 TRIG CCU1  TOM i  CH7 TRIG CCU1  TOM i  CH8 TRIG CCU1  or          TOM i  CH9 TRIG CCU1 can be used to trigger the update of register          SPE i  OUT CTRL. If SPEM 0   SPEM 1"]
        #[inline(always)]
        pub fn spe_trig(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch14Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch14Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. In this mode  the counter CN0 counts for only one period. The length of        period is defined by CM0. A write access to the register CN0 triggers        the start of counting."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch14Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch14Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. Note  This bit enables the PCM mode of channel 15."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch14Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch14Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE output mode enable for channel. Note  The SPE output mode is only implemented for TOM instances connected to an SPE module  and only for TOM channels 0 to 7. Note  For TOM channel 2  6 and 7  this bit defines  in combination with bit SPE TRIG  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset by TOM input signal SPE i  NIPD ."]
        #[inline(always)]
        pub fn spem(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch14Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch14Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Gated Counter Mode enable. The Gated Counter mode is only available for TOM instances connected to        an SPE module  and only for channels 0 to 7."]
        #[inline(always)]
        pub fn gcm(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch14Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch14Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch14Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch14Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch14Ctrl {
        #[inline(always)]
        fn default() -> Ch14Ctrl {
            <crate::RegValueT<Ch14Ctrl_SPEC> as RegisterValue<_>>::new(2048)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch14IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch14IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch14IrqEn = crate::RegValueT<Ch14IrqEn_SPEC>;

    impl Ch14IrqEn {
        #[doc = "TOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch14IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch14IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM CCU1TC IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch14IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch14IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch14IrqEn {
        #[inline(always)]
        fn default() -> Ch14IrqEn {
            <crate::RegValueT<Ch14IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch14IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch14IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch14IrqForcint = crate::RegValueT<Ch14IrqForcint_SPEC>;

    impl Ch14IrqForcint {
        #[doc = "Trigger TOM CCU0TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch14IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch14IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TOM CCU1TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_ccu1tc0(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch14IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch14IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch14IrqForcint {
        #[inline(always)]
        fn default() -> Ch14IrqForcint {
            <crate::RegValueT<Ch14IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch14IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch14IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch14IrqMode = crate::RegValueT<Ch14IrqMode_SPEC>;

    impl Ch14IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch14IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch14IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch14IrqMode {
        #[inline(always)]
        fn default() -> Ch14IrqMode {
            <crate::RegValueT<Ch14IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch14IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch14IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch14IrqNotify = crate::RegValueT<Ch14IrqNotify_SPEC>;

    impl Ch14IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch14IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch14IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch14IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch14IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch14IrqNotify {
        #[inline(always)]
        fn default() -> Ch14IrqNotify {
            <crate::RegValueT<Ch14IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch14Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch14Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch14Sr0 = crate::RegValueT<Ch14Sr0_SPEC>;

    impl Ch14Sr0 {
        #[doc = "TOM channel x shadow register SR0 for update of compare register CM0"]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch14Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch14Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch14Sr0 {
        #[inline(always)]
        fn default() -> Ch14Sr0 {
            <crate::RegValueT<Ch14Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch14Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch14Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch14Sr1 = crate::RegValueT<Ch14Sr1_SPEC>;

    impl Ch14Sr1 {
        #[doc = "TOM channel x shadow register SR1 for update of compare register CM1"]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch14Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch14Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch14Sr1 {
        #[inline(always)]
        fn default() -> Ch14Sr1 {
            <crate::RegValueT<Ch14Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch14Stat_SPEC;
    impl crate::sealed::RegSpec for Ch14Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch14Stat = crate::RegValueT<Ch14Stat_SPEC>;

    impl Ch14Stat {
        #[doc = "Output level of output TOM OUT x . Reset value is the inverted value of SL bit  which depends on the        hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch14Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch14Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch14Stat {
        #[inline(always)]
        fn default() -> Ch14Stat {
            <crate::RegValueT<Ch14Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch15Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch15Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch15Cm0 = crate::RegValueT<Ch15Cm0_SPEC>;

    impl Ch15Cm0 {
        #[doc = "TOM CCU0 compare register. Setting CM0  lt  CM1 configures a duty cycle of 100 ."]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch15Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch15Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch15Cm0 {
        #[inline(always)]
        fn default() -> Ch15Cm0 {
            <crate::RegValueT<Ch15Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch15Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch15Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch15Cm1 = crate::RegValueT<Ch15Cm1_SPEC>;

    impl Ch15Cm1 {
        #[doc = "TOM CCU1 compare register. Setting CM1   0 configures a duty cycle of 0   independent of the        configured value of CM0."]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch15Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch15Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch15Cm1 {
        #[inline(always)]
        fn default() -> Ch15Cm1 {
            <crate::RegValueT<Ch15Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch15Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch15Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch15Cn0 = crate::RegValueT<Ch15Cn0_SPEC>;

    impl Ch15Cn0 {
        #[doc = "TOM CCU0 counter register. This counter is stopped if the TOM channel is disabled and not reset on        an enable event of TOM channel."]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch15Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch15Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch15Cn0 {
        #[inline(always)]
        fn default() -> Ch15Cn0 {
            <crate::RegValueT<Ch15Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch15Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch15Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    pub type Ch15Ctrl = crate::RegValueT<Ch15Ctrl_SPEC>;

    impl Ch15Ctrl {
        #[doc = "SR0 is used to generate a trigger on output TOM i  CH x  OUT T if equal to CN0. Note  This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch15Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch15Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for duty cycle. If the output is disabled  the output TOM OUT x  is set to the inverse        value of SL. Reset value depends on the hardware configuration chosen by silicon        vendor."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch15Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch15Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source select for channel. The register CLK SRC is updated with the value of CLK SRC SR together        with the update of register CM0 and CM1. The input of the FX clock divider depends on the value of FXCLK SEL  see        CMU . This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done          either by an end of a period or a forced update. If clock of channel is stopped  i.e. ECLK SRC 0 and CLK SRC  101   110   111             the channel can only be restarted by resetting CLK SRC SR to a value          of 000 to 100 and forcing an update via the force update mechanism. If ECLK SRC 0   ECLK SRC 1"]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch15Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch15Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC"]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch15Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch15Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch15Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch15Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode"]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch15Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch15Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. On TOM channel 2  SPEM 1 has special meaning. If SPEM   1  the signal          SPE NIPD triggers the reset of CN0 independent of RST CN0. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch15Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch15Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch15Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch15Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch15Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch15Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch15Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch15Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG  x   of module TOM CH x"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch15Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch15Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE trigger to reset CN0. For TOM channel 2  6 and 7  this bit defines  in combination with bit        SPEM  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset        by TOM input signal SPE i  NIPD. For TOM channel 8 and 9  this bit defines only if CN0 reset is defined          by input signal SPE i  NIPD or by configuration of RST CCU0. The          output TOM i  CH x  OUT is not affected. The configuration bit SPEM is          not available for these channels  and thus assumed to be 0. If a configuration of SPEM   SPE TRIG   0   1 or 1   0 is chosen  i.e.          CN0 is reset by signal SPE i  NIPD   the one shot mode in          corresponding TOM channel should also be enabled by setting bit OSM 1          to generate one PWM pulse in case of trigger SPE i  NIPD. In SPE module  one of the trigger signals TOM i  CH2 TRIG CCU1           TOM i  CH6 TRIG CCU1  TOM i  CH7 TRIG CCU1  TOM i  CH8 TRIG CCU1  or          TOM i  CH9 TRIG CCU1 can be used to trigger the update of register          SPE i  OUT CTRL. If SPEM 0   SPEM 1"]
        #[inline(always)]
        pub fn spe_trig(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch15Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch15Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. In this mode  the counter CN0 counts for only one period. The length of        period is defined by CM0. A write access to the register CN0 triggers        the start of counting."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch15Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch15Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. Note  This bit enables the PCM mode of channel 15."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch15Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch15Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE output mode enable for channel. Note  The SPE output mode is only implemented for TOM instances connected to an SPE module  and only for TOM channels 0 to 7. Note  For TOM channel 2  6 and 7  this bit defines  in combination with bit SPE TRIG  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset by TOM input signal SPE i  NIPD ."]
        #[inline(always)]
        pub fn spem(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch15Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch15Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Gated Counter Mode enable. The Gated Counter mode is only available for TOM instances connected to        an SPE module  and only for channels 0 to 7."]
        #[inline(always)]
        pub fn gcm(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch15Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch15Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch15Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch15Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch15Ctrl {
        #[inline(always)]
        fn default() -> Ch15Ctrl {
            <crate::RegValueT<Ch15Ctrl_SPEC> as RegisterValue<_>>::new(2048)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch15IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch15IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch15IrqEn = crate::RegValueT<Ch15IrqEn_SPEC>;

    impl Ch15IrqEn {
        #[doc = "TOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch15IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch15IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM CCU1TC IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch15IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch15IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch15IrqEn {
        #[inline(always)]
        fn default() -> Ch15IrqEn {
            <crate::RegValueT<Ch15IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch15IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch15IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch15IrqForcint = crate::RegValueT<Ch15IrqForcint_SPEC>;

    impl Ch15IrqForcint {
        #[doc = "Trigger TOM CCU0TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch15IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch15IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TOM CCU1TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_ccu1tc0(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch15IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch15IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch15IrqForcint {
        #[inline(always)]
        fn default() -> Ch15IrqForcint {
            <crate::RegValueT<Ch15IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch15IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch15IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch15IrqMode = crate::RegValueT<Ch15IrqMode_SPEC>;

    impl Ch15IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch15IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch15IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch15IrqMode {
        #[inline(always)]
        fn default() -> Ch15IrqMode {
            <crate::RegValueT<Ch15IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch15IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch15IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch15IrqNotify = crate::RegValueT<Ch15IrqNotify_SPEC>;

    impl Ch15IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch15IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch15IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch15IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch15IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch15IrqNotify {
        #[inline(always)]
        fn default() -> Ch15IrqNotify {
            <crate::RegValueT<Ch15IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch15Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch15Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch15Sr0 = crate::RegValueT<Ch15Sr0_SPEC>;

    impl Ch15Sr0 {
        #[doc = "TOM channel x shadow register SR0 for update of compare register CM0"]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch15Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch15Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch15Sr0 {
        #[inline(always)]
        fn default() -> Ch15Sr0 {
            <crate::RegValueT<Ch15Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch15Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch15Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch15Sr1 = crate::RegValueT<Ch15Sr1_SPEC>;

    impl Ch15Sr1 {
        #[doc = "TOM channel x shadow register SR1 for update of compare register CM1"]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch15Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch15Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch15Sr1 {
        #[inline(always)]
        fn default() -> Ch15Sr1 {
            <crate::RegValueT<Ch15Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch15Stat_SPEC;
    impl crate::sealed::RegSpec for Ch15Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch15Stat = crate::RegValueT<Ch15Stat_SPEC>;

    impl Ch15Stat {
        #[doc = "Output level of output TOM OUT x . Reset value is the inverted value of SL bit  which depends on the        hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch15Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch15Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch15Stat {
        #[inline(always)]
        fn default() -> Ch15Stat {
            <crate::RegValueT<Ch15Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch1Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Cm0 = crate::RegValueT<Ch1Cm0_SPEC>;

    impl Ch1Cm0 {
        #[doc = "TOM CCU0 compare register. Setting CM0  lt  CM1 configures a duty cycle of 100 ."]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch1Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch1Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Cm0 {
        #[inline(always)]
        fn default() -> Ch1Cm0 {
            <crate::RegValueT<Ch1Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch1Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Cm1 = crate::RegValueT<Ch1Cm1_SPEC>;

    impl Ch1Cm1 {
        #[doc = "TOM CCU1 compare register. Setting CM1   0 configures a duty cycle of 0   independent of the        configured value of CM0."]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch1Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch1Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Cm1 {
        #[inline(always)]
        fn default() -> Ch1Cm1 {
            <crate::RegValueT<Ch1Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch1Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Cn0 = crate::RegValueT<Ch1Cn0_SPEC>;

    impl Ch1Cn0 {
        #[doc = "TOM CCU0 counter register. This counter is stopped if the TOM channel is disabled and not reset on        an enable event of TOM channel."]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch1Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch1Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Cn0 {
        #[inline(always)]
        fn default() -> Ch1Cn0 {
            <crate::RegValueT<Ch1Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch1Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    pub type Ch1Ctrl = crate::RegValueT<Ch1Ctrl_SPEC>;

    impl Ch1Ctrl {
        #[doc = "SR0 is used to generate a trigger on output TOM i  CH x  OUT T if equal to CN0. Note  This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for duty cycle. If the output is disabled  the output TOM OUT x  is set to the inverse        value of SL. Reset value depends on the hardware configuration chosen by silicon        vendor."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source select for channel. The register CLK SRC is updated with the value of CLK SRC SR together        with the update of register CM0 and CM1. The input of the FX clock divider depends on the value of FXCLK SEL  see        CMU . This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done          either by an end of a period or a forced update. If clock of channel is stopped  i.e. ECLK SRC 0 and CLK SRC  101   110   111             the channel can only be restarted by resetting CLK SRC SR to a value          of 000 to 100 and forcing an update via the force update mechanism. If ECLK SRC 0   ECLK SRC 1"]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch1Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC"]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode"]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch1Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. On TOM channel 2  SPEM 1 has special meaning. If SPEM   1  the signal          SPE NIPD triggers the reset of CN0 independent of RST CN0. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG  x   of module TOM CH x"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE trigger to reset CN0. For TOM channel 2  6 and 7  this bit defines  in combination with bit        SPEM  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset        by TOM input signal SPE i  NIPD. For TOM channel 8 and 9  this bit defines only if CN0 reset is defined          by input signal SPE i  NIPD or by configuration of RST CCU0. The          output TOM i  CH x  OUT is not affected. The configuration bit SPEM is          not available for these channels  and thus assumed to be 0. If a configuration of SPEM   SPE TRIG   0   1 or 1   0 is chosen  i.e.          CN0 is reset by signal SPE i  NIPD   the one shot mode in          corresponding TOM channel should also be enabled by setting bit OSM 1          to generate one PWM pulse in case of trigger SPE i  NIPD. In SPE module  one of the trigger signals TOM i  CH2 TRIG CCU1           TOM i  CH6 TRIG CCU1  TOM i  CH7 TRIG CCU1  TOM i  CH8 TRIG CCU1  or          TOM i  CH9 TRIG CCU1 can be used to trigger the update of register          SPE i  OUT CTRL. If SPEM 0   SPEM 1"]
        #[inline(always)]
        pub fn spe_trig(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. In this mode  the counter CN0 counts for only one period. The length of        period is defined by CM0. A write access to the register CN0 triggers        the start of counting."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. Note  This bit enables the PCM mode of channel 15."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE output mode enable for channel. Note  The SPE output mode is only implemented for TOM instances connected to an SPE module  and only for TOM channels 0 to 7. Note  For TOM channel 2  6 and 7  this bit defines  in combination with bit SPE TRIG  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset by TOM input signal SPE i  NIPD ."]
        #[inline(always)]
        pub fn spem(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Gated Counter Mode enable. The Gated Counter mode is only available for TOM instances connected to        an SPE module  and only for channels 0 to 7."]
        #[inline(always)]
        pub fn gcm(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch1Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch1Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Ctrl {
        #[inline(always)]
        fn default() -> Ch1Ctrl {
            <crate::RegValueT<Ch1Ctrl_SPEC> as RegisterValue<_>>::new(2048)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch1IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1IrqEn = crate::RegValueT<Ch1IrqEn_SPEC>;

    impl Ch1IrqEn {
        #[doc = "TOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch1IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch1IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM CCU1TC IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch1IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch1IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1IrqEn {
        #[inline(always)]
        fn default() -> Ch1IrqEn {
            <crate::RegValueT<Ch1IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch1IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1IrqForcint = crate::RegValueT<Ch1IrqForcint_SPEC>;

    impl Ch1IrqForcint {
        #[doc = "Trigger TOM CCU0TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch1IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch1IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TOM CCU1TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_ccu1tc0(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch1IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch1IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1IrqForcint {
        #[inline(always)]
        fn default() -> Ch1IrqForcint {
            <crate::RegValueT<Ch1IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch1IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1IrqMode = crate::RegValueT<Ch1IrqMode_SPEC>;

    impl Ch1IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch1IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch1IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1IrqMode {
        #[inline(always)]
        fn default() -> Ch1IrqMode {
            <crate::RegValueT<Ch1IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch1IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1IrqNotify = crate::RegValueT<Ch1IrqNotify_SPEC>;

    impl Ch1IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch1IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch1IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch1IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch1IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1IrqNotify {
        #[inline(always)]
        fn default() -> Ch1IrqNotify {
            <crate::RegValueT<Ch1IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch1Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Sr0 = crate::RegValueT<Ch1Sr0_SPEC>;

    impl Ch1Sr0 {
        #[doc = "TOM channel x shadow register SR0 for update of compare register CM0"]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch1Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch1Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Sr0 {
        #[inline(always)]
        fn default() -> Ch1Sr0 {
            <crate::RegValueT<Ch1Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch1Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Sr1 = crate::RegValueT<Ch1Sr1_SPEC>;

    impl Ch1Sr1 {
        #[doc = "TOM channel x shadow register SR1 for update of compare register CM1"]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch1Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch1Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Sr1 {
        #[inline(always)]
        fn default() -> Ch1Sr1 {
            <crate::RegValueT<Ch1Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch1Stat_SPEC;
    impl crate::sealed::RegSpec for Ch1Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch1Stat = crate::RegValueT<Ch1Stat_SPEC>;

    impl Ch1Stat {
        #[doc = "Output level of output TOM OUT x . Reset value is the inverted value of SL bit  which depends on the        hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch1Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch1Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch1Stat {
        #[inline(always)]
        fn default() -> Ch1Stat {
            <crate::RegValueT<Ch1Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch2Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Cm0 = crate::RegValueT<Ch2Cm0_SPEC>;

    impl Ch2Cm0 {
        #[doc = "TOM CCU0 compare register. Setting CM0  lt  CM1 configures a duty cycle of 100 ."]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch2Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch2Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Cm0 {
        #[inline(always)]
        fn default() -> Ch2Cm0 {
            <crate::RegValueT<Ch2Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch2Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Cm1 = crate::RegValueT<Ch2Cm1_SPEC>;

    impl Ch2Cm1 {
        #[doc = "TOM CCU1 compare register. Setting CM1   0 configures a duty cycle of 0   independent of the        configured value of CM0."]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch2Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch2Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Cm1 {
        #[inline(always)]
        fn default() -> Ch2Cm1 {
            <crate::RegValueT<Ch2Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch2Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Cn0 = crate::RegValueT<Ch2Cn0_SPEC>;

    impl Ch2Cn0 {
        #[doc = "TOM CCU0 counter register. This counter is stopped if the TOM channel is disabled and not reset on        an enable event of TOM channel."]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch2Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch2Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Cn0 {
        #[inline(always)]
        fn default() -> Ch2Cn0 {
            <crate::RegValueT<Ch2Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch2Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    pub type Ch2Ctrl = crate::RegValueT<Ch2Ctrl_SPEC>;

    impl Ch2Ctrl {
        #[doc = "SR0 is used to generate a trigger on output TOM i  CH x  OUT T if equal to CN0. Note  This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for duty cycle. If the output is disabled  the output TOM OUT x  is set to the inverse        value of SL. Reset value depends on the hardware configuration chosen by silicon        vendor."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source select for channel. The register CLK SRC is updated with the value of CLK SRC SR together        with the update of register CM0 and CM1. The input of the FX clock divider depends on the value of FXCLK SEL  see        CMU . This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done          either by an end of a period or a forced update. If clock of channel is stopped  i.e. ECLK SRC 0 and CLK SRC  101   110   111             the channel can only be restarted by resetting CLK SRC SR to a value          of 000 to 100 and forcing an update via the force update mechanism. If ECLK SRC 0   ECLK SRC 1"]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch2Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC"]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode"]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch2Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. On TOM channel 2  SPEM 1 has special meaning. If SPEM   1  the signal          SPE NIPD triggers the reset of CN0 independent of RST CN0. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG  x   of module TOM CH x"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE trigger to reset CN0. For TOM channel 2  6 and 7  this bit defines  in combination with bit        SPEM  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset        by TOM input signal SPE i  NIPD. For TOM channel 8 and 9  this bit defines only if CN0 reset is defined          by input signal SPE i  NIPD or by configuration of RST CCU0. The          output TOM i  CH x  OUT is not affected. The configuration bit SPEM is          not available for these channels  and thus assumed to be 0. If a configuration of SPEM   SPE TRIG   0   1 or 1   0 is chosen  i.e.          CN0 is reset by signal SPE i  NIPD   the one shot mode in          corresponding TOM channel should also be enabled by setting bit OSM 1          to generate one PWM pulse in case of trigger SPE i  NIPD. In SPE module  one of the trigger signals TOM i  CH2 TRIG CCU1           TOM i  CH6 TRIG CCU1  TOM i  CH7 TRIG CCU1  TOM i  CH8 TRIG CCU1  or          TOM i  CH9 TRIG CCU1 can be used to trigger the update of register          SPE i  OUT CTRL. If SPEM 0   SPEM 1"]
        #[inline(always)]
        pub fn spe_trig(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. In this mode  the counter CN0 counts for only one period. The length of        period is defined by CM0. A write access to the register CN0 triggers        the start of counting."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. Note  This bit enables the PCM mode of channel 15."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE output mode enable for channel. Note  The SPE output mode is only implemented for TOM instances connected to an SPE module  and only for TOM channels 0 to 7. Note  For TOM channel 2  6 and 7  this bit defines  in combination with bit SPE TRIG  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset by TOM input signal SPE i  NIPD ."]
        #[inline(always)]
        pub fn spem(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Gated Counter Mode enable. The Gated Counter mode is only available for TOM instances connected to        an SPE module  and only for channels 0 to 7."]
        #[inline(always)]
        pub fn gcm(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch2Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch2Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Ctrl {
        #[inline(always)]
        fn default() -> Ch2Ctrl {
            <crate::RegValueT<Ch2Ctrl_SPEC> as RegisterValue<_>>::new(2048)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch2IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2IrqEn = crate::RegValueT<Ch2IrqEn_SPEC>;

    impl Ch2IrqEn {
        #[doc = "TOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch2IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch2IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM CCU1TC IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch2IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch2IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2IrqEn {
        #[inline(always)]
        fn default() -> Ch2IrqEn {
            <crate::RegValueT<Ch2IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch2IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2IrqForcint = crate::RegValueT<Ch2IrqForcint_SPEC>;

    impl Ch2IrqForcint {
        #[doc = "Trigger TOM CCU0TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch2IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch2IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TOM CCU1TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_ccu1tc0(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch2IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch2IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2IrqForcint {
        #[inline(always)]
        fn default() -> Ch2IrqForcint {
            <crate::RegValueT<Ch2IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch2IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2IrqMode = crate::RegValueT<Ch2IrqMode_SPEC>;

    impl Ch2IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch2IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch2IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2IrqMode {
        #[inline(always)]
        fn default() -> Ch2IrqMode {
            <crate::RegValueT<Ch2IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch2IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2IrqNotify = crate::RegValueT<Ch2IrqNotify_SPEC>;

    impl Ch2IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch2IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch2IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch2IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch2IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2IrqNotify {
        #[inline(always)]
        fn default() -> Ch2IrqNotify {
            <crate::RegValueT<Ch2IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch2Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Sr0 = crate::RegValueT<Ch2Sr0_SPEC>;

    impl Ch2Sr0 {
        #[doc = "TOM channel x shadow register SR0 for update of compare register CM0"]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch2Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch2Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Sr0 {
        #[inline(always)]
        fn default() -> Ch2Sr0 {
            <crate::RegValueT<Ch2Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch2Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Sr1 = crate::RegValueT<Ch2Sr1_SPEC>;

    impl Ch2Sr1 {
        #[doc = "TOM channel x shadow register SR1 for update of compare register CM1"]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch2Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch2Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Sr1 {
        #[inline(always)]
        fn default() -> Ch2Sr1 {
            <crate::RegValueT<Ch2Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch2Stat_SPEC;
    impl crate::sealed::RegSpec for Ch2Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch2Stat = crate::RegValueT<Ch2Stat_SPEC>;

    impl Ch2Stat {
        #[doc = "Output level of output TOM OUT x . Reset value is the inverted value of SL bit  which depends on the        hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch2Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch2Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch2Stat {
        #[inline(always)]
        fn default() -> Ch2Stat {
            <crate::RegValueT<Ch2Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch3Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Cm0 = crate::RegValueT<Ch3Cm0_SPEC>;

    impl Ch3Cm0 {
        #[doc = "TOM CCU0 compare register. Setting CM0  lt  CM1 configures a duty cycle of 100 ."]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch3Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch3Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Cm0 {
        #[inline(always)]
        fn default() -> Ch3Cm0 {
            <crate::RegValueT<Ch3Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch3Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Cm1 = crate::RegValueT<Ch3Cm1_SPEC>;

    impl Ch3Cm1 {
        #[doc = "TOM CCU1 compare register. Setting CM1   0 configures a duty cycle of 0   independent of the        configured value of CM0."]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch3Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch3Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Cm1 {
        #[inline(always)]
        fn default() -> Ch3Cm1 {
            <crate::RegValueT<Ch3Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch3Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Cn0 = crate::RegValueT<Ch3Cn0_SPEC>;

    impl Ch3Cn0 {
        #[doc = "TOM CCU0 counter register. This counter is stopped if the TOM channel is disabled and not reset on        an enable event of TOM channel."]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch3Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch3Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Cn0 {
        #[inline(always)]
        fn default() -> Ch3Cn0 {
            <crate::RegValueT<Ch3Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch3Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    pub type Ch3Ctrl = crate::RegValueT<Ch3Ctrl_SPEC>;

    impl Ch3Ctrl {
        #[doc = "SR0 is used to generate a trigger on output TOM i  CH x  OUT T if equal to CN0. Note  This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for duty cycle. If the output is disabled  the output TOM OUT x  is set to the inverse        value of SL. Reset value depends on the hardware configuration chosen by silicon        vendor."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source select for channel. The register CLK SRC is updated with the value of CLK SRC SR together        with the update of register CM0 and CM1. The input of the FX clock divider depends on the value of FXCLK SEL  see        CMU . This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done          either by an end of a period or a forced update. If clock of channel is stopped  i.e. ECLK SRC 0 and CLK SRC  101   110   111             the channel can only be restarted by resetting CLK SRC SR to a value          of 000 to 100 and forcing an update via the force update mechanism. If ECLK SRC 0   ECLK SRC 1"]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch3Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC"]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode"]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch3Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. On TOM channel 2  SPEM 1 has special meaning. If SPEM   1  the signal          SPE NIPD triggers the reset of CN0 independent of RST CN0. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG  x   of module TOM CH x"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE trigger to reset CN0. For TOM channel 2  6 and 7  this bit defines  in combination with bit        SPEM  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset        by TOM input signal SPE i  NIPD. For TOM channel 8 and 9  this bit defines only if CN0 reset is defined          by input signal SPE i  NIPD or by configuration of RST CCU0. The          output TOM i  CH x  OUT is not affected. The configuration bit SPEM is          not available for these channels  and thus assumed to be 0. If a configuration of SPEM   SPE TRIG   0   1 or 1   0 is chosen  i.e.          CN0 is reset by signal SPE i  NIPD   the one shot mode in          corresponding TOM channel should also be enabled by setting bit OSM 1          to generate one PWM pulse in case of trigger SPE i  NIPD. In SPE module  one of the trigger signals TOM i  CH2 TRIG CCU1           TOM i  CH6 TRIG CCU1  TOM i  CH7 TRIG CCU1  TOM i  CH8 TRIG CCU1  or          TOM i  CH9 TRIG CCU1 can be used to trigger the update of register          SPE i  OUT CTRL. If SPEM 0   SPEM 1"]
        #[inline(always)]
        pub fn spe_trig(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. In this mode  the counter CN0 counts for only one period. The length of        period is defined by CM0. A write access to the register CN0 triggers        the start of counting."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. Note  This bit enables the PCM mode of channel 15."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE output mode enable for channel. Note  The SPE output mode is only implemented for TOM instances connected to an SPE module  and only for TOM channels 0 to 7. Note  For TOM channel 2  6 and 7  this bit defines  in combination with bit SPE TRIG  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset by TOM input signal SPE i  NIPD ."]
        #[inline(always)]
        pub fn spem(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Gated Counter Mode enable. The Gated Counter mode is only available for TOM instances connected to        an SPE module  and only for channels 0 to 7."]
        #[inline(always)]
        pub fn gcm(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch3Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch3Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Ctrl {
        #[inline(always)]
        fn default() -> Ch3Ctrl {
            <crate::RegValueT<Ch3Ctrl_SPEC> as RegisterValue<_>>::new(2048)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch3IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3IrqEn = crate::RegValueT<Ch3IrqEn_SPEC>;

    impl Ch3IrqEn {
        #[doc = "TOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch3IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch3IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM CCU1TC IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch3IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch3IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3IrqEn {
        #[inline(always)]
        fn default() -> Ch3IrqEn {
            <crate::RegValueT<Ch3IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch3IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3IrqForcint = crate::RegValueT<Ch3IrqForcint_SPEC>;

    impl Ch3IrqForcint {
        #[doc = "Trigger TOM CCU0TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch3IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch3IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TOM CCU1TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_ccu1tc0(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch3IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch3IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3IrqForcint {
        #[inline(always)]
        fn default() -> Ch3IrqForcint {
            <crate::RegValueT<Ch3IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch3IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3IrqMode = crate::RegValueT<Ch3IrqMode_SPEC>;

    impl Ch3IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch3IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch3IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3IrqMode {
        #[inline(always)]
        fn default() -> Ch3IrqMode {
            <crate::RegValueT<Ch3IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch3IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3IrqNotify = crate::RegValueT<Ch3IrqNotify_SPEC>;

    impl Ch3IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch3IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch3IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch3IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch3IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3IrqNotify {
        #[inline(always)]
        fn default() -> Ch3IrqNotify {
            <crate::RegValueT<Ch3IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch3Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Sr0 = crate::RegValueT<Ch3Sr0_SPEC>;

    impl Ch3Sr0 {
        #[doc = "TOM channel x shadow register SR0 for update of compare register CM0"]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch3Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch3Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Sr0 {
        #[inline(always)]
        fn default() -> Ch3Sr0 {
            <crate::RegValueT<Ch3Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch3Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Sr1 = crate::RegValueT<Ch3Sr1_SPEC>;

    impl Ch3Sr1 {
        #[doc = "TOM channel x shadow register SR1 for update of compare register CM1"]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch3Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch3Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Sr1 {
        #[inline(always)]
        fn default() -> Ch3Sr1 {
            <crate::RegValueT<Ch3Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch3Stat_SPEC;
    impl crate::sealed::RegSpec for Ch3Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch3Stat = crate::RegValueT<Ch3Stat_SPEC>;

    impl Ch3Stat {
        #[doc = "Output level of output TOM OUT x . Reset value is the inverted value of SL bit  which depends on the        hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch3Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch3Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch3Stat {
        #[inline(always)]
        fn default() -> Ch3Stat {
            <crate::RegValueT<Ch3Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch4Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Cm0 = crate::RegValueT<Ch4Cm0_SPEC>;

    impl Ch4Cm0 {
        #[doc = "TOM CCU0 compare register. Setting CM0  lt  CM1 configures a duty cycle of 100 ."]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch4Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch4Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Cm0 {
        #[inline(always)]
        fn default() -> Ch4Cm0 {
            <crate::RegValueT<Ch4Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch4Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Cm1 = crate::RegValueT<Ch4Cm1_SPEC>;

    impl Ch4Cm1 {
        #[doc = "TOM CCU1 compare register. Setting CM1   0 configures a duty cycle of 0   independent of the        configured value of CM0."]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch4Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch4Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Cm1 {
        #[inline(always)]
        fn default() -> Ch4Cm1 {
            <crate::RegValueT<Ch4Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch4Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Cn0 = crate::RegValueT<Ch4Cn0_SPEC>;

    impl Ch4Cn0 {
        #[doc = "TOM CCU0 counter register. This counter is stopped if the TOM channel is disabled and not reset on        an enable event of TOM channel."]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch4Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch4Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Cn0 {
        #[inline(always)]
        fn default() -> Ch4Cn0 {
            <crate::RegValueT<Ch4Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch4Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    pub type Ch4Ctrl = crate::RegValueT<Ch4Ctrl_SPEC>;

    impl Ch4Ctrl {
        #[doc = "SR0 is used to generate a trigger on output TOM i  CH x  OUT T if equal to CN0. Note  This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for duty cycle. If the output is disabled  the output TOM OUT x  is set to the inverse        value of SL. Reset value depends on the hardware configuration chosen by silicon        vendor."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source select for channel. The register CLK SRC is updated with the value of CLK SRC SR together        with the update of register CM0 and CM1. The input of the FX clock divider depends on the value of FXCLK SEL  see        CMU . This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done          either by an end of a period or a forced update. If clock of channel is stopped  i.e. ECLK SRC 0 and CLK SRC  101   110   111             the channel can only be restarted by resetting CLK SRC SR to a value          of 000 to 100 and forcing an update via the force update mechanism. If ECLK SRC 0   ECLK SRC 1"]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch4Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC"]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode"]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch4Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. On TOM channel 2  SPEM 1 has special meaning. If SPEM   1  the signal          SPE NIPD triggers the reset of CN0 independent of RST CN0. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG  x   of module TOM CH x"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE trigger to reset CN0. For TOM channel 2  6 and 7  this bit defines  in combination with bit        SPEM  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset        by TOM input signal SPE i  NIPD. For TOM channel 8 and 9  this bit defines only if CN0 reset is defined          by input signal SPE i  NIPD or by configuration of RST CCU0. The          output TOM i  CH x  OUT is not affected. The configuration bit SPEM is          not available for these channels  and thus assumed to be 0. If a configuration of SPEM   SPE TRIG   0   1 or 1   0 is chosen  i.e.          CN0 is reset by signal SPE i  NIPD   the one shot mode in          corresponding TOM channel should also be enabled by setting bit OSM 1          to generate one PWM pulse in case of trigger SPE i  NIPD. In SPE module  one of the trigger signals TOM i  CH2 TRIG CCU1           TOM i  CH6 TRIG CCU1  TOM i  CH7 TRIG CCU1  TOM i  CH8 TRIG CCU1  or          TOM i  CH9 TRIG CCU1 can be used to trigger the update of register          SPE i  OUT CTRL. If SPEM 0   SPEM 1"]
        #[inline(always)]
        pub fn spe_trig(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. In this mode  the counter CN0 counts for only one period. The length of        period is defined by CM0. A write access to the register CN0 triggers        the start of counting."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. Note  This bit enables the PCM mode of channel 15."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE output mode enable for channel. Note  The SPE output mode is only implemented for TOM instances connected to an SPE module  and only for TOM channels 0 to 7. Note  For TOM channel 2  6 and 7  this bit defines  in combination with bit SPE TRIG  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset by TOM input signal SPE i  NIPD ."]
        #[inline(always)]
        pub fn spem(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Gated Counter Mode enable. The Gated Counter mode is only available for TOM instances connected to        an SPE module  and only for channels 0 to 7."]
        #[inline(always)]
        pub fn gcm(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch4Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch4Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Ctrl {
        #[inline(always)]
        fn default() -> Ch4Ctrl {
            <crate::RegValueT<Ch4Ctrl_SPEC> as RegisterValue<_>>::new(2048)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch4IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4IrqEn = crate::RegValueT<Ch4IrqEn_SPEC>;

    impl Ch4IrqEn {
        #[doc = "TOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch4IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch4IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM CCU1TC IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch4IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch4IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4IrqEn {
        #[inline(always)]
        fn default() -> Ch4IrqEn {
            <crate::RegValueT<Ch4IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch4IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4IrqForcint = crate::RegValueT<Ch4IrqForcint_SPEC>;

    impl Ch4IrqForcint {
        #[doc = "Trigger TOM CCU0TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch4IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch4IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TOM CCU1TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_ccu1tc0(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch4IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch4IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4IrqForcint {
        #[inline(always)]
        fn default() -> Ch4IrqForcint {
            <crate::RegValueT<Ch4IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch4IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4IrqMode = crate::RegValueT<Ch4IrqMode_SPEC>;

    impl Ch4IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch4IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch4IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4IrqMode {
        #[inline(always)]
        fn default() -> Ch4IrqMode {
            <crate::RegValueT<Ch4IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch4IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4IrqNotify = crate::RegValueT<Ch4IrqNotify_SPEC>;

    impl Ch4IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch4IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch4IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch4IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch4IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4IrqNotify {
        #[inline(always)]
        fn default() -> Ch4IrqNotify {
            <crate::RegValueT<Ch4IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch4Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Sr0 = crate::RegValueT<Ch4Sr0_SPEC>;

    impl Ch4Sr0 {
        #[doc = "TOM channel x shadow register SR0 for update of compare register CM0"]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch4Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch4Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Sr0 {
        #[inline(always)]
        fn default() -> Ch4Sr0 {
            <crate::RegValueT<Ch4Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch4Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Sr1 = crate::RegValueT<Ch4Sr1_SPEC>;

    impl Ch4Sr1 {
        #[doc = "TOM channel x shadow register SR1 for update of compare register CM1"]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch4Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch4Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Sr1 {
        #[inline(always)]
        fn default() -> Ch4Sr1 {
            <crate::RegValueT<Ch4Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch4Stat_SPEC;
    impl crate::sealed::RegSpec for Ch4Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch4Stat = crate::RegValueT<Ch4Stat_SPEC>;

    impl Ch4Stat {
        #[doc = "Output level of output TOM OUT x . Reset value is the inverted value of SL bit  which depends on the        hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch4Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch4Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch4Stat {
        #[inline(always)]
        fn default() -> Ch4Stat {
            <crate::RegValueT<Ch4Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch5Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Cm0 = crate::RegValueT<Ch5Cm0_SPEC>;

    impl Ch5Cm0 {
        #[doc = "TOM CCU0 compare register. Setting CM0  lt  CM1 configures a duty cycle of 100 ."]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch5Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch5Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Cm0 {
        #[inline(always)]
        fn default() -> Ch5Cm0 {
            <crate::RegValueT<Ch5Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch5Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Cm1 = crate::RegValueT<Ch5Cm1_SPEC>;

    impl Ch5Cm1 {
        #[doc = "TOM CCU1 compare register. Setting CM1   0 configures a duty cycle of 0   independent of the        configured value of CM0."]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch5Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch5Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Cm1 {
        #[inline(always)]
        fn default() -> Ch5Cm1 {
            <crate::RegValueT<Ch5Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch5Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Cn0 = crate::RegValueT<Ch5Cn0_SPEC>;

    impl Ch5Cn0 {
        #[doc = "TOM CCU0 counter register. This counter is stopped if the TOM channel is disabled and not reset on        an enable event of TOM channel."]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch5Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch5Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Cn0 {
        #[inline(always)]
        fn default() -> Ch5Cn0 {
            <crate::RegValueT<Ch5Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch5Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    pub type Ch5Ctrl = crate::RegValueT<Ch5Ctrl_SPEC>;

    impl Ch5Ctrl {
        #[doc = "SR0 is used to generate a trigger on output TOM i  CH x  OUT T if equal to CN0. Note  This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for duty cycle. If the output is disabled  the output TOM OUT x  is set to the inverse        value of SL. Reset value depends on the hardware configuration chosen by silicon        vendor."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source select for channel. The register CLK SRC is updated with the value of CLK SRC SR together        with the update of register CM0 and CM1. The input of the FX clock divider depends on the value of FXCLK SEL  see        CMU . This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done          either by an end of a period or a forced update. If clock of channel is stopped  i.e. ECLK SRC 0 and CLK SRC  101   110   111             the channel can only be restarted by resetting CLK SRC SR to a value          of 000 to 100 and forcing an update via the force update mechanism. If ECLK SRC 0   ECLK SRC 1"]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch5Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC"]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode"]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch5Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. On TOM channel 2  SPEM 1 has special meaning. If SPEM   1  the signal          SPE NIPD triggers the reset of CN0 independent of RST CN0. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG  x   of module TOM CH x"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE trigger to reset CN0. For TOM channel 2  6 and 7  this bit defines  in combination with bit        SPEM  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset        by TOM input signal SPE i  NIPD. For TOM channel 8 and 9  this bit defines only if CN0 reset is defined          by input signal SPE i  NIPD or by configuration of RST CCU0. The          output TOM i  CH x  OUT is not affected. The configuration bit SPEM is          not available for these channels  and thus assumed to be 0. If a configuration of SPEM   SPE TRIG   0   1 or 1   0 is chosen  i.e.          CN0 is reset by signal SPE i  NIPD   the one shot mode in          corresponding TOM channel should also be enabled by setting bit OSM 1          to generate one PWM pulse in case of trigger SPE i  NIPD. In SPE module  one of the trigger signals TOM i  CH2 TRIG CCU1           TOM i  CH6 TRIG CCU1  TOM i  CH7 TRIG CCU1  TOM i  CH8 TRIG CCU1  or          TOM i  CH9 TRIG CCU1 can be used to trigger the update of register          SPE i  OUT CTRL. If SPEM 0   SPEM 1"]
        #[inline(always)]
        pub fn spe_trig(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. In this mode  the counter CN0 counts for only one period. The length of        period is defined by CM0. A write access to the register CN0 triggers        the start of counting."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. Note  This bit enables the PCM mode of channel 15."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE output mode enable for channel. Note  The SPE output mode is only implemented for TOM instances connected to an SPE module  and only for TOM channels 0 to 7. Note  For TOM channel 2  6 and 7  this bit defines  in combination with bit SPE TRIG  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset by TOM input signal SPE i  NIPD ."]
        #[inline(always)]
        pub fn spem(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Gated Counter Mode enable. The Gated Counter mode is only available for TOM instances connected to        an SPE module  and only for channels 0 to 7."]
        #[inline(always)]
        pub fn gcm(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch5Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch5Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Ctrl {
        #[inline(always)]
        fn default() -> Ch5Ctrl {
            <crate::RegValueT<Ch5Ctrl_SPEC> as RegisterValue<_>>::new(2048)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch5IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5IrqEn = crate::RegValueT<Ch5IrqEn_SPEC>;

    impl Ch5IrqEn {
        #[doc = "TOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch5IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch5IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM CCU1TC IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch5IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch5IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5IrqEn {
        #[inline(always)]
        fn default() -> Ch5IrqEn {
            <crate::RegValueT<Ch5IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch5IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5IrqForcint = crate::RegValueT<Ch5IrqForcint_SPEC>;

    impl Ch5IrqForcint {
        #[doc = "Trigger TOM CCU0TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch5IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch5IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TOM CCU1TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_ccu1tc0(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch5IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch5IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5IrqForcint {
        #[inline(always)]
        fn default() -> Ch5IrqForcint {
            <crate::RegValueT<Ch5IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch5IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5IrqMode = crate::RegValueT<Ch5IrqMode_SPEC>;

    impl Ch5IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch5IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch5IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5IrqMode {
        #[inline(always)]
        fn default() -> Ch5IrqMode {
            <crate::RegValueT<Ch5IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch5IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5IrqNotify = crate::RegValueT<Ch5IrqNotify_SPEC>;

    impl Ch5IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch5IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch5IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch5IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch5IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5IrqNotify {
        #[inline(always)]
        fn default() -> Ch5IrqNotify {
            <crate::RegValueT<Ch5IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch5Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Sr0 = crate::RegValueT<Ch5Sr0_SPEC>;

    impl Ch5Sr0 {
        #[doc = "TOM channel x shadow register SR0 for update of compare register CM0"]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch5Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch5Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Sr0 {
        #[inline(always)]
        fn default() -> Ch5Sr0 {
            <crate::RegValueT<Ch5Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch5Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Sr1 = crate::RegValueT<Ch5Sr1_SPEC>;

    impl Ch5Sr1 {
        #[doc = "TOM channel x shadow register SR1 for update of compare register CM1"]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch5Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch5Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Sr1 {
        #[inline(always)]
        fn default() -> Ch5Sr1 {
            <crate::RegValueT<Ch5Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch5Stat_SPEC;
    impl crate::sealed::RegSpec for Ch5Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch5Stat = crate::RegValueT<Ch5Stat_SPEC>;

    impl Ch5Stat {
        #[doc = "Output level of output TOM OUT x . Reset value is the inverted value of SL bit  which depends on the        hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch5Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch5Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch5Stat {
        #[inline(always)]
        fn default() -> Ch5Stat {
            <crate::RegValueT<Ch5Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch6Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Cm0 = crate::RegValueT<Ch6Cm0_SPEC>;

    impl Ch6Cm0 {
        #[doc = "TOM CCU0 compare register. Setting CM0  lt  CM1 configures a duty cycle of 100 ."]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch6Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch6Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Cm0 {
        #[inline(always)]
        fn default() -> Ch6Cm0 {
            <crate::RegValueT<Ch6Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch6Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Cm1 = crate::RegValueT<Ch6Cm1_SPEC>;

    impl Ch6Cm1 {
        #[doc = "TOM CCU1 compare register. Setting CM1   0 configures a duty cycle of 0   independent of the        configured value of CM0."]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch6Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch6Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Cm1 {
        #[inline(always)]
        fn default() -> Ch6Cm1 {
            <crate::RegValueT<Ch6Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch6Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Cn0 = crate::RegValueT<Ch6Cn0_SPEC>;

    impl Ch6Cn0 {
        #[doc = "TOM CCU0 counter register. This counter is stopped if the TOM channel is disabled and not reset on        an enable event of TOM channel."]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch6Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch6Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Cn0 {
        #[inline(always)]
        fn default() -> Ch6Cn0 {
            <crate::RegValueT<Ch6Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch6Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    pub type Ch6Ctrl = crate::RegValueT<Ch6Ctrl_SPEC>;

    impl Ch6Ctrl {
        #[doc = "SR0 is used to generate a trigger on output TOM i  CH x  OUT T if equal to CN0. Note  This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for duty cycle. If the output is disabled  the output TOM OUT x  is set to the inverse        value of SL. Reset value depends on the hardware configuration chosen by silicon        vendor."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source select for channel. The register CLK SRC is updated with the value of CLK SRC SR together        with the update of register CM0 and CM1. The input of the FX clock divider depends on the value of FXCLK SEL  see        CMU . This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done          either by an end of a period or a forced update. If clock of channel is stopped  i.e. ECLK SRC 0 and CLK SRC  101   110   111             the channel can only be restarted by resetting CLK SRC SR to a value          of 000 to 100 and forcing an update via the force update mechanism. If ECLK SRC 0   ECLK SRC 1"]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch6Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC"]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode"]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch6Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. On TOM channel 2  SPEM 1 has special meaning. If SPEM   1  the signal          SPE NIPD triggers the reset of CN0 independent of RST CN0. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG  x   of module TOM CH x"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE trigger to reset CN0. For TOM channel 2  6 and 7  this bit defines  in combination with bit        SPEM  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset        by TOM input signal SPE i  NIPD. For TOM channel 8 and 9  this bit defines only if CN0 reset is defined          by input signal SPE i  NIPD or by configuration of RST CCU0. The          output TOM i  CH x  OUT is not affected. The configuration bit SPEM is          not available for these channels  and thus assumed to be 0. If a configuration of SPEM   SPE TRIG   0   1 or 1   0 is chosen  i.e.          CN0 is reset by signal SPE i  NIPD   the one shot mode in          corresponding TOM channel should also be enabled by setting bit OSM 1          to generate one PWM pulse in case of trigger SPE i  NIPD. In SPE module  one of the trigger signals TOM i  CH2 TRIG CCU1           TOM i  CH6 TRIG CCU1  TOM i  CH7 TRIG CCU1  TOM i  CH8 TRIG CCU1  or          TOM i  CH9 TRIG CCU1 can be used to trigger the update of register          SPE i  OUT CTRL. If SPEM 0   SPEM 1"]
        #[inline(always)]
        pub fn spe_trig(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. In this mode  the counter CN0 counts for only one period. The length of        period is defined by CM0. A write access to the register CN0 triggers        the start of counting."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. Note  This bit enables the PCM mode of channel 15."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE output mode enable for channel. Note  The SPE output mode is only implemented for TOM instances connected to an SPE module  and only for TOM channels 0 to 7. Note  For TOM channel 2  6 and 7  this bit defines  in combination with bit SPE TRIG  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset by TOM input signal SPE i  NIPD ."]
        #[inline(always)]
        pub fn spem(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Gated Counter Mode enable. The Gated Counter mode is only available for TOM instances connected to        an SPE module  and only for channels 0 to 7."]
        #[inline(always)]
        pub fn gcm(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch6Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch6Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Ctrl {
        #[inline(always)]
        fn default() -> Ch6Ctrl {
            <crate::RegValueT<Ch6Ctrl_SPEC> as RegisterValue<_>>::new(2048)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch6IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6IrqEn = crate::RegValueT<Ch6IrqEn_SPEC>;

    impl Ch6IrqEn {
        #[doc = "TOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch6IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch6IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM CCU1TC IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch6IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch6IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6IrqEn {
        #[inline(always)]
        fn default() -> Ch6IrqEn {
            <crate::RegValueT<Ch6IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch6IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6IrqForcint = crate::RegValueT<Ch6IrqForcint_SPEC>;

    impl Ch6IrqForcint {
        #[doc = "Trigger TOM CCU0TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch6IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch6IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TOM CCU1TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_ccu1tc0(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch6IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch6IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6IrqForcint {
        #[inline(always)]
        fn default() -> Ch6IrqForcint {
            <crate::RegValueT<Ch6IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch6IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6IrqMode = crate::RegValueT<Ch6IrqMode_SPEC>;

    impl Ch6IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch6IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch6IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6IrqMode {
        #[inline(always)]
        fn default() -> Ch6IrqMode {
            <crate::RegValueT<Ch6IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch6IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6IrqNotify = crate::RegValueT<Ch6IrqNotify_SPEC>;

    impl Ch6IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch6IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch6IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch6IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch6IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6IrqNotify {
        #[inline(always)]
        fn default() -> Ch6IrqNotify {
            <crate::RegValueT<Ch6IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch6Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Sr0 = crate::RegValueT<Ch6Sr0_SPEC>;

    impl Ch6Sr0 {
        #[doc = "TOM channel x shadow register SR0 for update of compare register CM0"]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch6Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch6Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Sr0 {
        #[inline(always)]
        fn default() -> Ch6Sr0 {
            <crate::RegValueT<Ch6Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch6Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Sr1 = crate::RegValueT<Ch6Sr1_SPEC>;

    impl Ch6Sr1 {
        #[doc = "TOM channel x shadow register SR1 for update of compare register CM1"]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch6Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch6Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Sr1 {
        #[inline(always)]
        fn default() -> Ch6Sr1 {
            <crate::RegValueT<Ch6Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch6Stat_SPEC;
    impl crate::sealed::RegSpec for Ch6Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch6Stat = crate::RegValueT<Ch6Stat_SPEC>;

    impl Ch6Stat {
        #[doc = "Output level of output TOM OUT x . Reset value is the inverted value of SL bit  which depends on the        hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch6Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch6Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch6Stat {
        #[inline(always)]
        fn default() -> Ch6Stat {
            <crate::RegValueT<Ch6Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch7Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Cm0 = crate::RegValueT<Ch7Cm0_SPEC>;

    impl Ch7Cm0 {
        #[doc = "TOM CCU0 compare register. Setting CM0  lt  CM1 configures a duty cycle of 100 ."]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch7Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch7Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Cm0 {
        #[inline(always)]
        fn default() -> Ch7Cm0 {
            <crate::RegValueT<Ch7Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch7Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Cm1 = crate::RegValueT<Ch7Cm1_SPEC>;

    impl Ch7Cm1 {
        #[doc = "TOM CCU1 compare register. Setting CM1   0 configures a duty cycle of 0   independent of the        configured value of CM0."]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch7Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch7Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Cm1 {
        #[inline(always)]
        fn default() -> Ch7Cm1 {
            <crate::RegValueT<Ch7Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch7Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Cn0 = crate::RegValueT<Ch7Cn0_SPEC>;

    impl Ch7Cn0 {
        #[doc = "TOM CCU0 counter register. This counter is stopped if the TOM channel is disabled and not reset on        an enable event of TOM channel."]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch7Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch7Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Cn0 {
        #[inline(always)]
        fn default() -> Ch7Cn0 {
            <crate::RegValueT<Ch7Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch7Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    pub type Ch7Ctrl = crate::RegValueT<Ch7Ctrl_SPEC>;

    impl Ch7Ctrl {
        #[doc = "SR0 is used to generate a trigger on output TOM i  CH x  OUT T if equal to CN0. Note  This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for duty cycle. If the output is disabled  the output TOM OUT x  is set to the inverse        value of SL. Reset value depends on the hardware configuration chosen by silicon        vendor."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source select for channel. The register CLK SRC is updated with the value of CLK SRC SR together        with the update of register CM0 and CM1. The input of the FX clock divider depends on the value of FXCLK SEL  see        CMU . This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done          either by an end of a period or a forced update. If clock of channel is stopped  i.e. ECLK SRC 0 and CLK SRC  101   110   111             the channel can only be restarted by resetting CLK SRC SR to a value          of 000 to 100 and forcing an update via the force update mechanism. If ECLK SRC 0   ECLK SRC 1"]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch7Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC"]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode"]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch7Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. On TOM channel 2  SPEM 1 has special meaning. If SPEM   1  the signal          SPE NIPD triggers the reset of CN0 independent of RST CN0. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG  x   of module TOM CH x"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE trigger to reset CN0. For TOM channel 2  6 and 7  this bit defines  in combination with bit        SPEM  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset        by TOM input signal SPE i  NIPD. For TOM channel 8 and 9  this bit defines only if CN0 reset is defined          by input signal SPE i  NIPD or by configuration of RST CCU0. The          output TOM i  CH x  OUT is not affected. The configuration bit SPEM is          not available for these channels  and thus assumed to be 0. If a configuration of SPEM   SPE TRIG   0   1 or 1   0 is chosen  i.e.          CN0 is reset by signal SPE i  NIPD   the one shot mode in          corresponding TOM channel should also be enabled by setting bit OSM 1          to generate one PWM pulse in case of trigger SPE i  NIPD. In SPE module  one of the trigger signals TOM i  CH2 TRIG CCU1           TOM i  CH6 TRIG CCU1  TOM i  CH7 TRIG CCU1  TOM i  CH8 TRIG CCU1  or          TOM i  CH9 TRIG CCU1 can be used to trigger the update of register          SPE i  OUT CTRL. If SPEM 0   SPEM 1"]
        #[inline(always)]
        pub fn spe_trig(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. In this mode  the counter CN0 counts for only one period. The length of        period is defined by CM0. A write access to the register CN0 triggers        the start of counting."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. Note  This bit enables the PCM mode of channel 15."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE output mode enable for channel. Note  The SPE output mode is only implemented for TOM instances connected to an SPE module  and only for TOM channels 0 to 7. Note  For TOM channel 2  6 and 7  this bit defines  in combination with bit SPE TRIG  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset by TOM input signal SPE i  NIPD ."]
        #[inline(always)]
        pub fn spem(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Gated Counter Mode enable. The Gated Counter mode is only available for TOM instances connected to        an SPE module  and only for channels 0 to 7."]
        #[inline(always)]
        pub fn gcm(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch7Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch7Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Ctrl {
        #[inline(always)]
        fn default() -> Ch7Ctrl {
            <crate::RegValueT<Ch7Ctrl_SPEC> as RegisterValue<_>>::new(2048)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch7IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7IrqEn = crate::RegValueT<Ch7IrqEn_SPEC>;

    impl Ch7IrqEn {
        #[doc = "TOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch7IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch7IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM CCU1TC IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch7IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch7IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7IrqEn {
        #[inline(always)]
        fn default() -> Ch7IrqEn {
            <crate::RegValueT<Ch7IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch7IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7IrqForcint = crate::RegValueT<Ch7IrqForcint_SPEC>;

    impl Ch7IrqForcint {
        #[doc = "Trigger TOM CCU0TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch7IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch7IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TOM CCU1TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_ccu1tc0(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch7IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch7IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7IrqForcint {
        #[inline(always)]
        fn default() -> Ch7IrqForcint {
            <crate::RegValueT<Ch7IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch7IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7IrqMode = crate::RegValueT<Ch7IrqMode_SPEC>;

    impl Ch7IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch7IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch7IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7IrqMode {
        #[inline(always)]
        fn default() -> Ch7IrqMode {
            <crate::RegValueT<Ch7IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch7IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7IrqNotify = crate::RegValueT<Ch7IrqNotify_SPEC>;

    impl Ch7IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch7IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch7IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch7IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch7IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7IrqNotify {
        #[inline(always)]
        fn default() -> Ch7IrqNotify {
            <crate::RegValueT<Ch7IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch7Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Sr0 = crate::RegValueT<Ch7Sr0_SPEC>;

    impl Ch7Sr0 {
        #[doc = "TOM channel x shadow register SR0 for update of compare register CM0"]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch7Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch7Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Sr0 {
        #[inline(always)]
        fn default() -> Ch7Sr0 {
            <crate::RegValueT<Ch7Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch7Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Sr1 = crate::RegValueT<Ch7Sr1_SPEC>;

    impl Ch7Sr1 {
        #[doc = "TOM channel x shadow register SR1 for update of compare register CM1"]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch7Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch7Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Sr1 {
        #[inline(always)]
        fn default() -> Ch7Sr1 {
            <crate::RegValueT<Ch7Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch7Stat_SPEC;
    impl crate::sealed::RegSpec for Ch7Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch7Stat = crate::RegValueT<Ch7Stat_SPEC>;

    impl Ch7Stat {
        #[doc = "Output level of output TOM OUT x . Reset value is the inverted value of SL bit  which depends on the        hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch7Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch7Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch7Stat {
        #[inline(always)]
        fn default() -> Ch7Stat {
            <crate::RegValueT<Ch7Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch8Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch8Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch8Cm0 = crate::RegValueT<Ch8Cm0_SPEC>;

    impl Ch8Cm0 {
        #[doc = "TOM CCU0 compare register. Setting CM0  lt  CM1 configures a duty cycle of 100 ."]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch8Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch8Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch8Cm0 {
        #[inline(always)]
        fn default() -> Ch8Cm0 {
            <crate::RegValueT<Ch8Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch8Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch8Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch8Cm1 = crate::RegValueT<Ch8Cm1_SPEC>;

    impl Ch8Cm1 {
        #[doc = "TOM CCU1 compare register. Setting CM1   0 configures a duty cycle of 0   independent of the        configured value of CM0."]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch8Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch8Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch8Cm1 {
        #[inline(always)]
        fn default() -> Ch8Cm1 {
            <crate::RegValueT<Ch8Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch8Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch8Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch8Cn0 = crate::RegValueT<Ch8Cn0_SPEC>;

    impl Ch8Cn0 {
        #[doc = "TOM CCU0 counter register. This counter is stopped if the TOM channel is disabled and not reset on        an enable event of TOM channel."]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch8Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch8Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch8Cn0 {
        #[inline(always)]
        fn default() -> Ch8Cn0 {
            <crate::RegValueT<Ch8Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch8Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch8Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    pub type Ch8Ctrl = crate::RegValueT<Ch8Ctrl_SPEC>;

    impl Ch8Ctrl {
        #[doc = "SR0 is used to generate a trigger on output TOM i  CH x  OUT T if equal to CN0. Note  This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch8Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch8Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for duty cycle. If the output is disabled  the output TOM OUT x  is set to the inverse        value of SL. Reset value depends on the hardware configuration chosen by silicon        vendor."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch8Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch8Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source select for channel. The register CLK SRC is updated with the value of CLK SRC SR together        with the update of register CM0 and CM1. The input of the FX clock divider depends on the value of FXCLK SEL  see        CMU . This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done          either by an end of a period or a forced update. If clock of channel is stopped  i.e. ECLK SRC 0 and CLK SRC  101   110   111             the channel can only be restarted by resetting CLK SRC SR to a value          of 000 to 100 and forcing an update via the force update mechanism. If ECLK SRC 0   ECLK SRC 1"]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch8Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch8Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC"]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch8Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch8Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch8Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch8Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode"]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch8Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch8Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. On TOM channel 2  SPEM 1 has special meaning. If SPEM   1  the signal          SPE NIPD triggers the reset of CN0 independent of RST CN0. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch8Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch8Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch8Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch8Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch8Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch8Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch8Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch8Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG  x   of module TOM CH x"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch8Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch8Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE trigger to reset CN0. For TOM channel 2  6 and 7  this bit defines  in combination with bit        SPEM  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset        by TOM input signal SPE i  NIPD. For TOM channel 8 and 9  this bit defines only if CN0 reset is defined          by input signal SPE i  NIPD or by configuration of RST CCU0. The          output TOM i  CH x  OUT is not affected. The configuration bit SPEM is          not available for these channels  and thus assumed to be 0. If a configuration of SPEM   SPE TRIG   0   1 or 1   0 is chosen  i.e.          CN0 is reset by signal SPE i  NIPD   the one shot mode in          corresponding TOM channel should also be enabled by setting bit OSM 1          to generate one PWM pulse in case of trigger SPE i  NIPD. In SPE module  one of the trigger signals TOM i  CH2 TRIG CCU1           TOM i  CH6 TRIG CCU1  TOM i  CH7 TRIG CCU1  TOM i  CH8 TRIG CCU1  or          TOM i  CH9 TRIG CCU1 can be used to trigger the update of register          SPE i  OUT CTRL. If SPEM 0   SPEM 1"]
        #[inline(always)]
        pub fn spe_trig(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch8Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch8Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. In this mode  the counter CN0 counts for only one period. The length of        period is defined by CM0. A write access to the register CN0 triggers        the start of counting."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch8Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch8Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. Note  This bit enables the PCM mode of channel 15."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch8Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch8Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE output mode enable for channel. Note  The SPE output mode is only implemented for TOM instances connected to an SPE module  and only for TOM channels 0 to 7. Note  For TOM channel 2  6 and 7  this bit defines  in combination with bit SPE TRIG  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset by TOM input signal SPE i  NIPD ."]
        #[inline(always)]
        pub fn spem(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch8Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch8Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Gated Counter Mode enable. The Gated Counter mode is only available for TOM instances connected to        an SPE module  and only for channels 0 to 7."]
        #[inline(always)]
        pub fn gcm(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch8Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch8Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch8Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch8Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch8Ctrl {
        #[inline(always)]
        fn default() -> Ch8Ctrl {
            <crate::RegValueT<Ch8Ctrl_SPEC> as RegisterValue<_>>::new(2048)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch8IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch8IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch8IrqEn = crate::RegValueT<Ch8IrqEn_SPEC>;

    impl Ch8IrqEn {
        #[doc = "TOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch8IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch8IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM CCU1TC IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch8IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch8IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch8IrqEn {
        #[inline(always)]
        fn default() -> Ch8IrqEn {
            <crate::RegValueT<Ch8IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch8IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch8IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch8IrqForcint = crate::RegValueT<Ch8IrqForcint_SPEC>;

    impl Ch8IrqForcint {
        #[doc = "Trigger TOM CCU0TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch8IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch8IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TOM CCU1TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_ccu1tc0(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch8IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch8IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch8IrqForcint {
        #[inline(always)]
        fn default() -> Ch8IrqForcint {
            <crate::RegValueT<Ch8IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch8IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch8IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch8IrqMode = crate::RegValueT<Ch8IrqMode_SPEC>;

    impl Ch8IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch8IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch8IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch8IrqMode {
        #[inline(always)]
        fn default() -> Ch8IrqMode {
            <crate::RegValueT<Ch8IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch8IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch8IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch8IrqNotify = crate::RegValueT<Ch8IrqNotify_SPEC>;

    impl Ch8IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch8IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch8IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch8IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch8IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch8IrqNotify {
        #[inline(always)]
        fn default() -> Ch8IrqNotify {
            <crate::RegValueT<Ch8IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch8Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch8Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch8Sr0 = crate::RegValueT<Ch8Sr0_SPEC>;

    impl Ch8Sr0 {
        #[doc = "TOM channel x shadow register SR0 for update of compare register CM0"]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch8Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch8Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch8Sr0 {
        #[inline(always)]
        fn default() -> Ch8Sr0 {
            <crate::RegValueT<Ch8Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch8Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch8Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch8Sr1 = crate::RegValueT<Ch8Sr1_SPEC>;

    impl Ch8Sr1 {
        #[doc = "TOM channel x shadow register SR1 for update of compare register CM1"]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch8Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch8Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch8Sr1 {
        #[inline(always)]
        fn default() -> Ch8Sr1 {
            <crate::RegValueT<Ch8Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch8Stat_SPEC;
    impl crate::sealed::RegSpec for Ch8Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch8Stat = crate::RegValueT<Ch8Stat_SPEC>;

    impl Ch8Stat {
        #[doc = "Output level of output TOM OUT x . Reset value is the inverted value of SL bit  which depends on the        hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch8Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch8Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch8Stat {
        #[inline(always)]
        fn default() -> Ch8Stat {
            <crate::RegValueT<Ch8Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch9Cm0_SPEC;
    impl crate::sealed::RegSpec for Ch9Cm0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch9Cm0 = crate::RegValueT<Ch9Cm0_SPEC>;

    impl Ch9Cm0 {
        #[doc = "TOM CCU0 compare register. Setting CM0  lt  CM1 configures a duty cycle of 100 ."]
        #[inline(always)]
        pub fn cm0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch9Cm0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch9Cm0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch9Cm0 {
        #[inline(always)]
        fn default() -> Ch9Cm0 {
            <crate::RegValueT<Ch9Cm0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch9Cm1_SPEC;
    impl crate::sealed::RegSpec for Ch9Cm1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch9Cm1 = crate::RegValueT<Ch9Cm1_SPEC>;

    impl Ch9Cm1 {
        #[doc = "TOM CCU1 compare register. Setting CM1   0 configures a duty cycle of 0   independent of the        configured value of CM0."]
        #[inline(always)]
        pub fn cm1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch9Cm1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch9Cm1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch9Cm1 {
        #[inline(always)]
        fn default() -> Ch9Cm1 {
            <crate::RegValueT<Ch9Cm1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch9Cn0_SPEC;
    impl crate::sealed::RegSpec for Ch9Cn0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Counter Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch9Cn0 = crate::RegValueT<Ch9Cn0_SPEC>;

    impl Ch9Cn0 {
        #[doc = "TOM CCU0 counter register. This counter is stopped if the TOM channel is disabled and not reset on        an enable event of TOM channel."]
        #[inline(always)]
        pub fn cn0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch9Cn0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch9Cn0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch9Cn0 {
        #[inline(always)]
        fn default() -> Ch9Cn0 {
            <crate::RegValueT<Ch9Cn0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch9Ctrl_SPEC;
    impl crate::sealed::RegSpec for Ch9Ctrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Control Register\n resetvalue={Application Reset:0x0800}"]
    pub type Ch9Ctrl = crate::RegValueT<Ch9Ctrl_SPEC>;

    impl Ch9Ctrl {
        #[doc = "SR0 is used to generate a trigger on output TOM i  CH x  OUT T if equal to CN0. Note  This bit should only be set if RST CCU0 of this channel is 0."]
        #[inline(always)]
        pub fn sr0_trig(
            self,
        ) -> crate::common::RegisterFieldBool<7, 1, 0, Ch9Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<7,1,0,Ch9Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Signal level for duty cycle. If the output is disabled  the output TOM OUT x  is set to the inverse        value of SL. Reset value depends on the hardware configuration chosen by silicon        vendor."]
        #[inline(always)]
        pub fn sl(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Ch9Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<11,1,0,Ch9Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Clock source select for channel. The register CLK SRC is updated with the value of CLK SRC SR together        with the update of register CM0 and CM1. The input of the FX clock divider depends on the value of FXCLK SEL  see        CMU . This register is a shadow register for the register CLK SRC. Thus  if          the CMU CLK source for PWM generation should be changed during          operation  the old CMU CLK has to operate until the update of the ATOM          channels internal CLK SRC register by the CLK SRC SR content is done          either by an end of a period or a forced update. If clock of channel is stopped  i.e. ECLK SRC 0 and CLK SRC  101   110   111             the channel can only be restarted by resetting CLK SRC SR to a value          of 000 to 100 and forcing an update via the force update mechanism. If ECLK SRC 0   ECLK SRC 1"]
        #[inline(always)]
        pub fn clk_src_sr(
            self,
        ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, Ch9Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x7,1,0,u8, Ch9Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Extend CLK SRC"]
        #[inline(always)]
        pub fn eclk_src(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Ch9Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<15,1,0,Ch9Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output pulse length of one SYS CLK period"]
        #[inline(always)]
        pub fn trig_pulse(
            self,
        ) -> crate::common::RegisterFieldBool<17, 1, 0, Ch9Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<17,1,0,Ch9Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Up down counter mode"]
        #[inline(always)]
        pub fn udmode(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Ch9Ctrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Ch9Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset source of CCU0. On TOM channel 2  SPEM 1 has special meaning. If SPEM   1  the signal          SPE NIPD triggers the reset of CN0 independent of RST CN0. This bit should only be set if bit OSM 0  i.e. in continuous mode ."]
        #[inline(always)]
        pub fn rst_ccu0(
            self,
        ) -> crate::common::RegisterFieldBool<20, 1, 0, Ch9Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<20,1,0,Ch9Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Enable trigger of one shot pulse by trigger signal OSM TRIG. Note  This bit should only be set if bit OSM 1 and bit RST CCU0 0."]
        #[inline(always)]
        pub fn osm_trig(
            self,
        ) -> crate::common::RegisterFieldBool<21, 1, 0, Ch9Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<21,1,0,Ch9Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select TIM EXT CAPTURE x  as trigger signal"]
        #[inline(always)]
        pub fn ext_trig(
            self,
        ) -> crate::common::RegisterFieldBool<22, 1, 0, Ch9Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<22,1,0,Ch9Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TIM EXT CAPTURE x  as potential output signal TRIG  x"]
        #[inline(always)]
        pub fn exttrigout(
            self,
        ) -> crate::common::RegisterFieldBool<23, 1, 0, Ch9Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<23,1,0,Ch9Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger output selection  output signal TRIG  x   of module TOM CH x"]
        #[inline(always)]
        pub fn trigout(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Ch9Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Ch9Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE trigger to reset CN0. For TOM channel 2  6 and 7  this bit defines  in combination with bit        SPEM  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset        by TOM input signal SPE i  NIPD. For TOM channel 8 and 9  this bit defines only if CN0 reset is defined          by input signal SPE i  NIPD or by configuration of RST CCU0. The          output TOM i  CH x  OUT is not affected. The configuration bit SPEM is          not available for these channels  and thus assumed to be 0. If a configuration of SPEM   SPE TRIG   0   1 or 1   0 is chosen  i.e.          CN0 is reset by signal SPE i  NIPD   the one shot mode in          corresponding TOM channel should also be enabled by setting bit OSM 1          to generate one PWM pulse in case of trigger SPE i  NIPD. In SPE module  one of the trigger signals TOM i  CH2 TRIG CCU1           TOM i  CH6 TRIG CCU1  TOM i  CH7 TRIG CCU1  TOM i  CH8 TRIG CCU1  or          TOM i  CH9 TRIG CCU1 can be used to trigger the update of register          SPE i  OUT CTRL. If SPEM 0   SPEM 1"]
        #[inline(always)]
        pub fn spe_trig(
            self,
        ) -> crate::common::RegisterFieldBool<25, 1, 0, Ch9Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<25,1,0,Ch9Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "One shot mode. In this mode  the counter CN0 counts for only one period. The length of        period is defined by CM0. A write access to the register CN0 triggers        the start of counting."]
        #[inline(always)]
        pub fn osm(
            self,
        ) -> crate::common::RegisterFieldBool<26, 1, 0, Ch9Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<26,1,0,Ch9Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Bit reversing of output of counter register CN0. Note  This bit enables the PCM mode of channel 15."]
        #[inline(always)]
        pub fn bitrev(
            self,
        ) -> crate::common::RegisterFieldBool<27, 1, 0, Ch9Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<27,1,0,Ch9Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "SPE output mode enable for channel. Note  The SPE output mode is only implemented for TOM instances connected to an SPE module  and only for TOM channels 0 to 7. Note  For TOM channel 2  6 and 7  this bit defines  in combination with bit SPE TRIG  the source of output pin TOM i  CH x  OUT  and if CN0 can be reset by TOM input signal SPE i  NIPD ."]
        #[inline(always)]
        pub fn spem(
            self,
        ) -> crate::common::RegisterFieldBool<28, 1, 0, Ch9Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<28,1,0,Ch9Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Gated Counter Mode enable. The Gated Counter mode is only available for TOM instances connected to        an SPE module  and only for channels 0 to 7."]
        #[inline(always)]
        pub fn gcm(
            self,
        ) -> crate::common::RegisterFieldBool<29, 1, 0, Ch9Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<29,1,0,Ch9Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "FREEZE"]
        #[inline(always)]
        pub fn freeze(
            self,
        ) -> crate::common::RegisterFieldBool<31, 1, 0, Ch9Ctrl_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<31,1,0,Ch9Ctrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch9Ctrl {
        #[inline(always)]
        fn default() -> Ch9Ctrl {
            <crate::RegValueT<Ch9Ctrl_SPEC> as RegisterValue<_>>::new(2048)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch9IrqEn_SPEC;
    impl crate::sealed::RegSpec for Ch9IrqEn_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Enable Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch9IrqEn = crate::RegValueT<Ch9IrqEn_SPEC>;

    impl Ch9IrqEn {
        #[doc = "TOM CCU0TC IRQ interrupt enable"]
        #[inline(always)]
        pub fn ccu0tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch9IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<0,1,0,Ch9IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM CCU1TC IRQ interrupt enable. Coding see bit 0."]
        #[inline(always)]
        pub fn ccu1tc_irq_en(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch9IrqEn_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<1,1,0,Ch9IrqEn_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch9IrqEn {
        #[inline(always)]
        fn default() -> Ch9IrqEn {
            <crate::RegValueT<Ch9IrqEn_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch9IrqForcint_SPEC;
    impl crate::sealed::RegSpec for Ch9IrqForcint_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Force Interrupt Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch9IrqForcint = crate::RegValueT<Ch9IrqForcint_SPEC>;

    impl Ch9IrqForcint {
        #[doc = "Trigger TOM CCU0TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL"]
        #[inline(always)]
        pub fn trg_ccu0tc0(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch9IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch9IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Trigger TOM CCU1TC0 IRQ interrupt by software. This bit is cleared automatically after write. This bit is write protected by bit RF PROT of register GTM CTRL."]
        #[inline(always)]
        pub fn trg_ccu1tc0(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch9IrqForcint_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch9IrqForcint_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch9IrqForcint {
        #[inline(always)]
        fn default() -> Ch9IrqForcint {
            <crate::RegValueT<Ch9IrqForcint_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch9IrqMode_SPEC;
    impl crate::sealed::RegSpec for Ch9IrqMode_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Mode Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch9IrqMode = crate::RegValueT<Ch9IrqMode_SPEC>;

    impl Ch9IrqMode {
        #[doc = "IRQ mode selection. The interrupt modes are described in CROSSREFERENCE ."]
        #[inline(always)]
        pub fn irq_mode(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Ch9IrqMode_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Ch9IrqMode_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch9IrqMode {
        #[inline(always)]
        fn default() -> Ch9IrqMode {
            <crate::RegValueT<Ch9IrqMode_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch9IrqNotify_SPEC;
    impl crate::sealed::RegSpec for Ch9IrqNotify_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Interrupt Notification Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch9IrqNotify = crate::RegValueT<Ch9IrqNotify_SPEC>;

    impl Ch9IrqNotify {
        #[doc = "CCU0 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM0. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu0tc(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch9IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<0,1,0,Ch9IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "CCU1 Trigger condition interrupt for channel x. The notification of the interrupt is only triggered one time after        reaching the condition CN0  gt   CM1. To enable re trigger of the        notification  first the condition CN0  lt  CM1 has to be reached. Note  This bit will be cleared on a CPU write access of value 1. A        read access leaves the bit unchanged. Note  This        description differs to the description in the Bosch spec."]
        #[inline(always)]
        pub fn ccu1tc(
            self,
        ) -> crate::common::RegisterFieldBool<1, 1, 0, Ch9IrqNotify_SPEC, crate::common::RW>
        {
            crate::common::RegisterFieldBool::<1,1,0,Ch9IrqNotify_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch9IrqNotify {
        #[inline(always)]
        fn default() -> Ch9IrqNotify {
            <crate::RegValueT<Ch9IrqNotify_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch9Sr0_SPEC;
    impl crate::sealed::RegSpec for Ch9Sr0_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU0 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch9Sr0 = crate::RegValueT<Ch9Sr0_SPEC>;

    impl Ch9Sr0 {
        #[doc = "TOM channel x shadow register SR0 for update of compare register CM0"]
        #[inline(always)]
        pub fn sr0(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch9Sr0_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch9Sr0_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch9Sr0 {
        #[inline(always)]
        fn default() -> Ch9Sr0 {
            <crate::RegValueT<Ch9Sr0_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch9Sr1_SPEC;
    impl crate::sealed::RegSpec for Ch9Sr1_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 CCU1 Compare Shadow Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch9Sr1 = crate::RegValueT<Ch9Sr1_SPEC>;

    impl Ch9Sr1 {
        #[doc = "TOM channel x shadow register SR1 for update of compare register CM1"]
        #[inline(always)]
        pub fn sr1(
            self,
        ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Ch9Sr1_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffff,1,0,u16, Ch9Sr1_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch9Sr1 {
        #[inline(always)]
        fn default() -> Ch9Sr1 {
            <crate::RegValueT<Ch9Sr1_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Ch9Stat_SPEC;
    impl crate::sealed::RegSpec for Ch9Stat_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 Channel 15 Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Ch9Stat = crate::RegValueT<Ch9Stat_SPEC>;

    impl Ch9Stat {
        #[doc = "Output level of output TOM OUT x . Reset value is the inverted value of SL bit  which depends on the        hardware configuration chosen by silicon vendor."]
        #[inline(always)]
        pub fn ol(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Ch9Stat_SPEC, crate::common::R> {
            crate::common::RegisterFieldBool::<0,1,0,Ch9Stat_SPEC,crate::common::R>::from_register(self,0)
        }
    }
    impl core::default::Default for Ch9Stat {
        #[inline(always)]
        fn default() -> Ch9Stat {
            <crate::RegValueT<Ch9Stat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Tgc0ActTb_SPEC;
    impl crate::sealed::RegSpec for Tgc0ActTb_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 TGC0 Action Time Base Register\n resetvalue={Application Reset:0x0}"]
    pub type Tgc0ActTb = crate::RegValueT<Tgc0ActTb_SPEC>;

    impl Tgc0ActTb {
        #[doc = "Time base value. Specifies the signed compare value with selected signal TBU TS x          x 0..2 If selected TBU TS x  value is in the interval   ACT TB   007FFFFFh  ACT TB    the event is in        the past  and the trigger is generated immediately. Otherwise  the event        is in the future  and the trigger is generated if selected TBU TS x  is        equal to ACT TB ."]
        #[inline(always)]
        pub fn act_tb(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Tgc0ActTb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Tgc0ActTb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Set trigger request. This flag is reset automatically if the selected time base unit   TBU TS0 or TBU TS1 or TBU TS2  if        present  has reached the value ACT TB and the update of the register was        triggered."]
        #[inline(always)]
        pub fn tb_trig(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Tgc0ActTb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Tgc0ActTb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection of time base used for comparison. The bit combination 0b10 is only applicable if the TBU of the device        contains three time base channels. Otherwise  this bit combination is        also reserved. Please refer to GTM Architecture block diagram on page 3        to determine the number of channels for TBU of this device."]
        #[inline(always)]
        pub fn tbu_sel(
            self,
        ) -> crate::common::RegisterField<25, 0x3, 1, 0, u8, Tgc0ActTb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<25,0x3,1,0,u8, Tgc0ActTb_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Tgc0ActTb {
        #[inline(always)]
        fn default() -> Tgc0ActTb {
            <crate::RegValueT<Tgc0ActTb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Tgc0EndisCtrl_SPEC;
    impl crate::sealed::RegSpec for Tgc0EndisCtrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 TGC0 Enable Disable Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Tgc0EndisCtrl = crate::RegValueT<Tgc0EndisCtrl_SPEC>;

    impl Tgc0EndisCtrl {
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible  If the output is disabled  OUTEN 0  0   the TOM channel 0 output        TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl0(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Tgc0EndisCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Tgc0EndisCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible  If the output is disabled  OUTEN 0  0   the TOM channel 0 output        TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl1(
            self,
        ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, Tgc0EndisCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<2,0x3,1,0,u8, Tgc0EndisCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible  If the output is disabled  OUTEN 0  0   the TOM channel 0 output        TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl2(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Tgc0EndisCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Tgc0EndisCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible  If the output is disabled  OUTEN 0  0   the TOM channel 0 output        TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl3(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Tgc0EndisCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, Tgc0EndisCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible  If the output is disabled  OUTEN 0  0   the TOM channel 0 output        TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl4(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Tgc0EndisCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, Tgc0EndisCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible  If the output is disabled  OUTEN 0  0   the TOM channel 0 output        TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl5(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, Tgc0EndisCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, Tgc0EndisCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible  If the output is disabled  OUTEN 0  0   the TOM channel 0 output        TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl6(
            self,
        ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, Tgc0EndisCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x3,1,0,u8, Tgc0EndisCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible  If the output is disabled  OUTEN 0  0   the TOM channel 0 output        TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl7(
            self,
        ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, Tgc0EndisCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<14,0x3,1,0,u8, Tgc0EndisCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Tgc0EndisCtrl {
        #[inline(always)]
        fn default() -> Tgc0EndisCtrl {
            <crate::RegValueT<Tgc0EndisCtrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Tgc0EndisStat_SPEC;
    impl crate::sealed::RegSpec for Tgc0EndisStat_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 TGC0 Enable Disable Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Tgc0EndisStat = crate::RegValueT<Tgc0EndisStat_SPEC>;

    impl Tgc0EndisStat {
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn endis_stat0(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Tgc0EndisStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Tgc0EndisStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn endis_stat1(
            self,
        ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, Tgc0EndisStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<2,0x3,1,0,u8, Tgc0EndisStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn endis_stat2(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Tgc0EndisStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Tgc0EndisStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn endis_stat3(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Tgc0EndisStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, Tgc0EndisStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn endis_stat4(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Tgc0EndisStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, Tgc0EndisStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn endis_stat5(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, Tgc0EndisStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, Tgc0EndisStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn endis_stat6(
            self,
        ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, Tgc0EndisStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x3,1,0,u8, Tgc0EndisStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn endis_stat7(
            self,
        ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, Tgc0EndisStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<14,0x3,1,0,u8, Tgc0EndisStat_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Tgc0EndisStat {
        #[inline(always)]
        fn default() -> Tgc0EndisStat {
            <crate::RegValueT<Tgc0EndisStat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Tgc0FupdCtrl_SPEC;
    impl crate::sealed::RegSpec for Tgc0FupdCtrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 TGC0 Force Update Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Tgc0FupdCtrl = crate::RegValueT<Tgc0FupdCtrl_SPEC>;

    impl Tgc0FupdCtrl {
        #[doc = "Force update of TOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by        HOST TRIG  ACT TB compare match  or internal trigger. Write   Read  The force update request is stored and executed synchronized to the        selected FXCLK."]
        #[inline(always)]
        pub fn fupd_ctrl0(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Tgc0FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Tgc0FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Force update of TOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by        HOST TRIG  ACT TB compare match  or internal trigger. Write   Read  The force update request is stored and executed synchronized to the        selected FXCLK."]
        #[inline(always)]
        pub fn fupd_ctrl1(
            self,
        ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, Tgc0FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<2,0x3,1,0,u8, Tgc0FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Force update of TOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by        HOST TRIG  ACT TB compare match  or internal trigger. Write   Read  The force update request is stored and executed synchronized to the        selected FXCLK."]
        #[inline(always)]
        pub fn fupd_ctrl2(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Tgc0FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Tgc0FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Force update of TOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by        HOST TRIG  ACT TB compare match  or internal trigger. Write   Read  The force update request is stored and executed synchronized to the        selected FXCLK."]
        #[inline(always)]
        pub fn fupd_ctrl3(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Tgc0FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, Tgc0FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Force update of TOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by        HOST TRIG  ACT TB compare match  or internal trigger. Write   Read  The force update request is stored and executed synchronized to the        selected FXCLK."]
        #[inline(always)]
        pub fn fupd_ctrl4(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Tgc0FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, Tgc0FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Force update of TOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by        HOST TRIG  ACT TB compare match  or internal trigger. Write   Read  The force update request is stored and executed synchronized to the        selected FXCLK."]
        #[inline(always)]
        pub fn fupd_ctrl5(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, Tgc0FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, Tgc0FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Force update of TOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by        HOST TRIG  ACT TB compare match  or internal trigger. Write   Read  The force update request is stored and executed synchronized to the        selected FXCLK."]
        #[inline(always)]
        pub fn fupd_ctrl6(
            self,
        ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, Tgc0FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x3,1,0,u8, Tgc0FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Force update of TOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by        HOST TRIG  ACT TB compare match  or internal trigger. Write   Read  The force update request is stored and executed synchronized to the        selected FXCLK."]
        #[inline(always)]
        pub fn fupd_ctrl7(
            self,
        ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, Tgc0FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<14,0x3,1,0,u8, Tgc0FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch0(
            self,
        ) -> crate::common::RegisterField<16, 0x3, 1, 0, u8, Tgc0FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x3,1,0,u8, Tgc0FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch1(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Tgc0FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Tgc0FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch2(
            self,
        ) -> crate::common::RegisterField<20, 0x3, 1, 0, u8, Tgc0FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<20,0x3,1,0,u8, Tgc0FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch3(
            self,
        ) -> crate::common::RegisterField<22, 0x3, 1, 0, u8, Tgc0FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<22,0x3,1,0,u8, Tgc0FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch4(
            self,
        ) -> crate::common::RegisterField<24, 0x3, 1, 0, u8, Tgc0FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x3,1,0,u8, Tgc0FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch5(
            self,
        ) -> crate::common::RegisterField<26, 0x3, 1, 0, u8, Tgc0FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<26,0x3,1,0,u8, Tgc0FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch6(
            self,
        ) -> crate::common::RegisterField<28, 0x3, 1, 0, u8, Tgc0FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<28,0x3,1,0,u8, Tgc0FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch7(
            self,
        ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, Tgc0FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<30,0x3,1,0,u8, Tgc0FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Tgc0FupdCtrl {
        #[inline(always)]
        fn default() -> Tgc0FupdCtrl {
            <crate::RegValueT<Tgc0FupdCtrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Tgc0GlbCtrl_SPEC;
    impl crate::sealed::RegSpec for Tgc0GlbCtrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 TGC0 Global Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Tgc0GlbCtrl = crate::RegValueT<Tgc0GlbCtrl_SPEC>;

    impl Tgc0GlbCtrl {
        #[doc = "Trigger request signal  see TGC0  TGC1  to update the register ENDIS STAT and OUTEN STAT. This flag is reset automatically after triggering the update."]
        #[inline(always)]
        pub fn host_trig(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Tgc0GlbCtrl_SPEC, crate::common::W> {
            crate::common::RegisterFieldBool::<0,1,0,Tgc0GlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        register are set to their reset values and channel x operation is        stopped immediately. The SR flip flop SOUR is set to  1 ."]
        #[inline(always)]
        pub fn rst_ch0(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Tgc0GlbCtrl_SPEC, crate::common::W> {
            crate::common::RegisterFieldBool::<8,1,0,Tgc0GlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        register are set to their reset values and channel x operation is        stopped immediately. The SR flip flop SOUR is set to  1 ."]
        #[inline(always)]
        pub fn rst_ch1(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Tgc0GlbCtrl_SPEC, crate::common::W> {
            crate::common::RegisterFieldBool::<9,1,0,Tgc0GlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        register are set to their reset values and channel x operation is        stopped immediately. The SR flip flop SOUR is set to  1 ."]
        #[inline(always)]
        pub fn rst_ch2(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Tgc0GlbCtrl_SPEC, crate::common::W>
        {
            crate::common::RegisterFieldBool::<10,1,0,Tgc0GlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        register are set to their reset values and channel x operation is        stopped immediately. The SR flip flop SOUR is set to  1 ."]
        #[inline(always)]
        pub fn rst_ch3(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Tgc0GlbCtrl_SPEC, crate::common::W>
        {
            crate::common::RegisterFieldBool::<11,1,0,Tgc0GlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        register are set to their reset values and channel x operation is        stopped immediately. The SR flip flop SOUR is set to  1 ."]
        #[inline(always)]
        pub fn rst_ch4(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, Tgc0GlbCtrl_SPEC, crate::common::W>
        {
            crate::common::RegisterFieldBool::<12,1,0,Tgc0GlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        register are set to their reset values and channel x operation is        stopped immediately. The SR flip flop SOUR is set to  1 ."]
        #[inline(always)]
        pub fn rst_ch5(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, Tgc0GlbCtrl_SPEC, crate::common::W>
        {
            crate::common::RegisterFieldBool::<13,1,0,Tgc0GlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        register are set to their reset values and channel x operation is        stopped immediately. The SR flip flop SOUR is set to  1 ."]
        #[inline(always)]
        pub fn rst_ch6(
            self,
        ) -> crate::common::RegisterFieldBool<14, 1, 0, Tgc0GlbCtrl_SPEC, crate::common::W>
        {
            crate::common::RegisterFieldBool::<14,1,0,Tgc0GlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        register are set to their reset values and channel x operation is        stopped immediately. The SR flip flop SOUR is set to  1 ."]
        #[inline(always)]
        pub fn rst_ch7(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Tgc0GlbCtrl_SPEC, crate::common::W>
        {
            crate::common::RegisterFieldBool::<15,1,0,Tgc0GlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl0(
            self,
        ) -> crate::common::RegisterField<16, 0x3, 1, 0, u8, Tgc0GlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x3,1,0,u8, Tgc0GlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl1(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Tgc0GlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Tgc0GlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl2(
            self,
        ) -> crate::common::RegisterField<20, 0x3, 1, 0, u8, Tgc0GlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<20,0x3,1,0,u8, Tgc0GlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl3(
            self,
        ) -> crate::common::RegisterField<22, 0x3, 1, 0, u8, Tgc0GlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<22,0x3,1,0,u8, Tgc0GlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl4(
            self,
        ) -> crate::common::RegisterField<24, 0x3, 1, 0, u8, Tgc0GlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x3,1,0,u8, Tgc0GlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl5(
            self,
        ) -> crate::common::RegisterField<26, 0x3, 1, 0, u8, Tgc0GlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<26,0x3,1,0,u8, Tgc0GlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl6(
            self,
        ) -> crate::common::RegisterField<28, 0x3, 1, 0, u8, Tgc0GlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<28,0x3,1,0,u8, Tgc0GlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl7(
            self,
        ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, Tgc0GlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<30,0x3,1,0,u8, Tgc0GlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Tgc0GlbCtrl {
        #[inline(always)]
        fn default() -> Tgc0GlbCtrl {
            <crate::RegValueT<Tgc0GlbCtrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Tgc0IntTrig_SPEC;
    impl crate::sealed::RegSpec for Tgc0IntTrig_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 TGC0 Internal Trigger Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Tgc0IntTrig = crate::RegValueT<Tgc0IntTrig_SPEC>;

    impl Tgc0IntTrig {
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig0(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Tgc0IntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Tgc0IntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig1(
            self,
        ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, Tgc0IntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<2,0x3,1,0,u8, Tgc0IntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig2(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Tgc0IntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Tgc0IntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig3(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Tgc0IntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, Tgc0IntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig4(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Tgc0IntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, Tgc0IntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig5(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, Tgc0IntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, Tgc0IntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig6(
            self,
        ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, Tgc0IntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x3,1,0,u8, Tgc0IntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig7(
            self,
        ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, Tgc0IntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<14,0x3,1,0,u8, Tgc0IntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Tgc0IntTrig {
        #[inline(always)]
        fn default() -> Tgc0IntTrig {
            <crate::RegValueT<Tgc0IntTrig_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Tgc0OutenCtrl_SPEC;
    impl crate::sealed::RegSpec for Tgc0OutenCtrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 TGC0 Output Enable Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Tgc0OutenCtrl = crate::RegValueT<Tgc0OutenCtrl_SPEC>;

    impl Tgc0OutenCtrl {
        #[doc = "Output TOM i  CH7 OUT enable disable update value. Write of following double bit values is possible  If the channel is disabled  ENDIS 0  0  or the output is disabled         OUTEN 0  0   the TOM channel 0 output TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl0(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Tgc0OutenCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Tgc0OutenCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output TOM i  CH7 OUT enable disable update value. Write of following double bit values is possible  If the channel is disabled  ENDIS 0  0  or the output is disabled         OUTEN 0  0   the TOM channel 0 output TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl1(
            self,
        ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, Tgc0OutenCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<2,0x3,1,0,u8, Tgc0OutenCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output TOM i  CH7 OUT enable disable update value. Write of following double bit values is possible  If the channel is disabled  ENDIS 0  0  or the output is disabled         OUTEN 0  0   the TOM channel 0 output TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl2(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Tgc0OutenCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Tgc0OutenCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output TOM i  CH7 OUT enable disable update value. Write of following double bit values is possible  If the channel is disabled  ENDIS 0  0  or the output is disabled         OUTEN 0  0   the TOM channel 0 output TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl3(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Tgc0OutenCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, Tgc0OutenCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output TOM i  CH7 OUT enable disable update value. Write of following double bit values is possible  If the channel is disabled  ENDIS 0  0  or the output is disabled         OUTEN 0  0   the TOM channel 0 output TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl4(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Tgc0OutenCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, Tgc0OutenCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output TOM i  CH7 OUT enable disable update value. Write of following double bit values is possible  If the channel is disabled  ENDIS 0  0  or the output is disabled         OUTEN 0  0   the TOM channel 0 output TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl5(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, Tgc0OutenCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, Tgc0OutenCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output TOM i  CH7 OUT enable disable update value. Write of following double bit values is possible  If the channel is disabled  ENDIS 0  0  or the output is disabled         OUTEN 0  0   the TOM channel 0 output TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl6(
            self,
        ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, Tgc0OutenCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x3,1,0,u8, Tgc0OutenCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output TOM i  CH7 OUT enable disable update value. Write of following double bit values is possible  If the channel is disabled  ENDIS 0  0  or the output is disabled         OUTEN 0  0   the TOM channel 0 output TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl7(
            self,
        ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, Tgc0OutenCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<14,0x3,1,0,u8, Tgc0OutenCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Tgc0OutenCtrl {
        #[inline(always)]
        fn default() -> Tgc0OutenCtrl {
            <crate::RegValueT<Tgc0OutenCtrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Tgc0OutenStat_SPEC;
    impl crate::sealed::RegSpec for Tgc0OutenStat_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 TGC0 Output Enable Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Tgc0OutenStat = crate::RegValueT<Tgc0OutenStat_SPEC>;

    impl Tgc0OutenStat {
        #[doc = "Control status of output TOM i  CH7 OUT. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn outen_stat0(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Tgc0OutenStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Tgc0OutenStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Control status of output TOM i  CH7 OUT. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn outen_stat1(
            self,
        ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, Tgc0OutenStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<2,0x3,1,0,u8, Tgc0OutenStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Control status of output TOM i  CH7 OUT. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn outen_stat2(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Tgc0OutenStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Tgc0OutenStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Control status of output TOM i  CH7 OUT. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn outen_stat3(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Tgc0OutenStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, Tgc0OutenStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Control status of output TOM i  CH7 OUT. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn outen_stat4(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Tgc0OutenStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, Tgc0OutenStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Control status of output TOM i  CH7 OUT. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn outen_stat5(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, Tgc0OutenStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, Tgc0OutenStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Control status of output TOM i  CH7 OUT. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn outen_stat6(
            self,
        ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, Tgc0OutenStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x3,1,0,u8, Tgc0OutenStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Control status of output TOM i  CH7 OUT. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn outen_stat7(
            self,
        ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, Tgc0OutenStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<14,0x3,1,0,u8, Tgc0OutenStat_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Tgc0OutenStat {
        #[inline(always)]
        fn default() -> Tgc0OutenStat {
            <crate::RegValueT<Tgc0OutenStat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Tgc1ActTb_SPEC;
    impl crate::sealed::RegSpec for Tgc1ActTb_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 TGC1 Action Time Base Register\n resetvalue={Application Reset:0x0}"]
    pub type Tgc1ActTb = crate::RegValueT<Tgc1ActTb_SPEC>;

    impl Tgc1ActTb {
        #[doc = "Time base value. Specifies the signed compare value with selected signal TBU TS x          x 0..2 If selected TBU TS x  value is in the interval   ACT TB   007FFFFFh  ACT TB    the event is in        the past  and the trigger is generated immediately. Otherwise  the event        is in the future  and the trigger is generated if selected TBU TS x  is        equal to ACT TB ."]
        #[inline(always)]
        pub fn act_tb(
            self,
        ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Tgc1ActTb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0xffffff,1,0,u32, Tgc1ActTb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Set trigger request. This flag is reset automatically if the selected time base unit   TBU TS0 or TBU TS1 or TBU TS2  if        present  has reached the value ACT TB and the update of the register was        triggered."]
        #[inline(always)]
        pub fn tb_trig(
            self,
        ) -> crate::common::RegisterFieldBool<24, 1, 0, Tgc1ActTb_SPEC, crate::common::RW> {
            crate::common::RegisterFieldBool::<24,1,0,Tgc1ActTb_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Selection of time base used for comparison. The bit combination 0b10 is only applicable if the TBU of the device        contains three time base channels. Otherwise  this bit combination is        also reserved. Please refer to GTM Architecture block diagram on page 3        to determine the number of channels for TBU of this device."]
        #[inline(always)]
        pub fn tbu_sel(
            self,
        ) -> crate::common::RegisterField<25, 0x3, 1, 0, u8, Tgc1ActTb_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<25,0x3,1,0,u8, Tgc1ActTb_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Tgc1ActTb {
        #[inline(always)]
        fn default() -> Tgc1ActTb {
            <crate::RegValueT<Tgc1ActTb_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Tgc1EndisCtrl_SPEC;
    impl crate::sealed::RegSpec for Tgc1EndisCtrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 TGC1 Enable Disable Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Tgc1EndisCtrl = crate::RegValueT<Tgc1EndisCtrl_SPEC>;

    impl Tgc1EndisCtrl {
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible  If the output is disabled  OUTEN 0  0   the TOM channel 0 output        TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl0(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Tgc1EndisCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Tgc1EndisCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible  If the output is disabled  OUTEN 0  0   the TOM channel 0 output        TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl1(
            self,
        ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, Tgc1EndisCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<2,0x3,1,0,u8, Tgc1EndisCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible  If the output is disabled  OUTEN 0  0   the TOM channel 0 output        TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl2(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Tgc1EndisCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Tgc1EndisCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible  If the output is disabled  OUTEN 0  0   the TOM channel 0 output        TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl3(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Tgc1EndisCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, Tgc1EndisCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible  If the output is disabled  OUTEN 0  0   the TOM channel 0 output        TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl4(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Tgc1EndisCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, Tgc1EndisCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible  If the output is disabled  OUTEN 0  0   the TOM channel 0 output        TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl5(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, Tgc1EndisCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, Tgc1EndisCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible  If the output is disabled  OUTEN 0  0   the TOM channel 0 output        TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl6(
            self,
        ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, Tgc1EndisCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x3,1,0,u8, Tgc1EndisCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible  If the output is disabled  OUTEN 0  0   the TOM channel 0 output        TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn endis_ctrl7(
            self,
        ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, Tgc1EndisCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<14,0x3,1,0,u8, Tgc1EndisCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Tgc1EndisCtrl {
        #[inline(always)]
        fn default() -> Tgc1EndisCtrl {
            <crate::RegValueT<Tgc1EndisCtrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Tgc1EndisStat_SPEC;
    impl crate::sealed::RegSpec for Tgc1EndisStat_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 TGC1 Enable Disable Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Tgc1EndisStat = crate::RegValueT<Tgc1EndisStat_SPEC>;

    impl Tgc1EndisStat {
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn endis_stat0(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Tgc1EndisStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Tgc1EndisStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn endis_stat1(
            self,
        ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, Tgc1EndisStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<2,0x3,1,0,u8, Tgc1EndisStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn endis_stat2(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Tgc1EndisStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Tgc1EndisStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn endis_stat3(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Tgc1EndisStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, Tgc1EndisStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn endis_stat4(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Tgc1EndisStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, Tgc1EndisStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn endis_stat5(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, Tgc1EndisStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, Tgc1EndisStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn endis_stat6(
            self,
        ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, Tgc1EndisStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x3,1,0,u8, Tgc1EndisStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable disable update value. If FREEZE   0  If a TOM channel is disabled  the counter CN0 is stopped and the output        register of SOU unit is set to the inverse value of control bit SL. On        an enable event  the counter CN0 starts counting from its current value. If FREEZE   1  If a TOM channel is disabled  the counter CN0 is stopped. On an enable        event  the counter CN0 starts counting from its current value. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn endis_stat7(
            self,
        ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, Tgc1EndisStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<14,0x3,1,0,u8, Tgc1EndisStat_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Tgc1EndisStat {
        #[inline(always)]
        fn default() -> Tgc1EndisStat {
            <crate::RegValueT<Tgc1EndisStat_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Tgc1FupdCtrl_SPEC;
    impl crate::sealed::RegSpec for Tgc1FupdCtrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 TGC1 Force Update Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Tgc1FupdCtrl = crate::RegValueT<Tgc1FupdCtrl_SPEC>;

    impl Tgc1FupdCtrl {
        #[doc = "Force update of TOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by        HOST TRIG  ACT TB compare match  or internal trigger. Write   Read  The force update request is stored and executed synchronized to the        selected FXCLK."]
        #[inline(always)]
        pub fn fupd_ctrl0(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Tgc1FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Tgc1FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Force update of TOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by        HOST TRIG  ACT TB compare match  or internal trigger. Write   Read  The force update request is stored and executed synchronized to the        selected FXCLK."]
        #[inline(always)]
        pub fn fupd_ctrl1(
            self,
        ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, Tgc1FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<2,0x3,1,0,u8, Tgc1FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Force update of TOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by        HOST TRIG  ACT TB compare match  or internal trigger. Write   Read  The force update request is stored and executed synchronized to the        selected FXCLK."]
        #[inline(always)]
        pub fn fupd_ctrl2(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Tgc1FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Tgc1FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Force update of TOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by        HOST TRIG  ACT TB compare match  or internal trigger. Write   Read  The force update request is stored and executed synchronized to the        selected FXCLK."]
        #[inline(always)]
        pub fn fupd_ctrl3(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Tgc1FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, Tgc1FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Force update of TOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by        HOST TRIG  ACT TB compare match  or internal trigger. Write   Read  The force update request is stored and executed synchronized to the        selected FXCLK."]
        #[inline(always)]
        pub fn fupd_ctrl4(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Tgc1FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, Tgc1FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Force update of TOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by        HOST TRIG  ACT TB compare match  or internal trigger. Write   Read  The force update request is stored and executed synchronized to the        selected FXCLK."]
        #[inline(always)]
        pub fn fupd_ctrl5(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, Tgc1FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, Tgc1FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Force update of TOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by        HOST TRIG  ACT TB compare match  or internal trigger. Write   Read  The force update request is stored and executed synchronized to the        selected FXCLK."]
        #[inline(always)]
        pub fn fupd_ctrl6(
            self,
        ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, Tgc1FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x3,1,0,u8, Tgc1FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Force update of TOM channel 7 operation registers. If enabled  force update of register CM0  CM1 and CLK SRC triggered by        HOST TRIG  ACT TB compare match  or internal trigger. Write   Read  The force update request is stored and executed synchronized to the        selected FXCLK."]
        #[inline(always)]
        pub fn fupd_ctrl7(
            self,
        ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, Tgc1FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<14,0x3,1,0,u8, Tgc1FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch0(
            self,
        ) -> crate::common::RegisterField<16, 0x3, 1, 0, u8, Tgc1FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x3,1,0,u8, Tgc1FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch1(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Tgc1FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Tgc1FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch2(
            self,
        ) -> crate::common::RegisterField<20, 0x3, 1, 0, u8, Tgc1FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<20,0x3,1,0,u8, Tgc1FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch3(
            self,
        ) -> crate::common::RegisterField<22, 0x3, 1, 0, u8, Tgc1FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<22,0x3,1,0,u8, Tgc1FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch4(
            self,
        ) -> crate::common::RegisterField<24, 0x3, 1, 0, u8, Tgc1FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x3,1,0,u8, Tgc1FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch5(
            self,
        ) -> crate::common::RegisterField<26, 0x3, 1, 0, u8, Tgc1FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<26,0x3,1,0,u8, Tgc1FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch6(
            self,
        ) -> crate::common::RegisterField<28, 0x3, 1, 0, u8, Tgc1FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<28,0x3,1,0,u8, Tgc1FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Reset CN0 of channel 7 on force update event. If enabled  reset CN0 triggered by HOST TRIG  ACT TB compare match  or        internal trigger. Write   Read"]
        #[inline(always)]
        pub fn rstcn0_ch7(
            self,
        ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, Tgc1FupdCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<30,0x3,1,0,u8, Tgc1FupdCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Tgc1FupdCtrl {
        #[inline(always)]
        fn default() -> Tgc1FupdCtrl {
            <crate::RegValueT<Tgc1FupdCtrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Tgc1GlbCtrl_SPEC;
    impl crate::sealed::RegSpec for Tgc1GlbCtrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 TGC1 Global Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Tgc1GlbCtrl = crate::RegValueT<Tgc1GlbCtrl_SPEC>;

    impl Tgc1GlbCtrl {
        #[doc = "Trigger request signal  see TGC0  TGC1  to update the register ENDIS STAT and OUTEN STAT. This flag is reset automatically after triggering the update."]
        #[inline(always)]
        pub fn host_trig(
            self,
        ) -> crate::common::RegisterFieldBool<0, 1, 0, Tgc1GlbCtrl_SPEC, crate::common::W> {
            crate::common::RegisterFieldBool::<0,1,0,Tgc1GlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        register are set to their reset values and channel x operation is        stopped immediately. The SR flip flop SOUR is set to  1 ."]
        #[inline(always)]
        pub fn rst_ch0(
            self,
        ) -> crate::common::RegisterFieldBool<8, 1, 0, Tgc1GlbCtrl_SPEC, crate::common::W> {
            crate::common::RegisterFieldBool::<8,1,0,Tgc1GlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        register are set to their reset values and channel x operation is        stopped immediately. The SR flip flop SOUR is set to  1 ."]
        #[inline(always)]
        pub fn rst_ch1(
            self,
        ) -> crate::common::RegisterFieldBool<9, 1, 0, Tgc1GlbCtrl_SPEC, crate::common::W> {
            crate::common::RegisterFieldBool::<9,1,0,Tgc1GlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        register are set to their reset values and channel x operation is        stopped immediately. The SR flip flop SOUR is set to  1 ."]
        #[inline(always)]
        pub fn rst_ch2(
            self,
        ) -> crate::common::RegisterFieldBool<10, 1, 0, Tgc1GlbCtrl_SPEC, crate::common::W>
        {
            crate::common::RegisterFieldBool::<10,1,0,Tgc1GlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        register are set to their reset values and channel x operation is        stopped immediately. The SR flip flop SOUR is set to  1 ."]
        #[inline(always)]
        pub fn rst_ch3(
            self,
        ) -> crate::common::RegisterFieldBool<11, 1, 0, Tgc1GlbCtrl_SPEC, crate::common::W>
        {
            crate::common::RegisterFieldBool::<11,1,0,Tgc1GlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        register are set to their reset values and channel x operation is        stopped immediately. The SR flip flop SOUR is set to  1 ."]
        #[inline(always)]
        pub fn rst_ch4(
            self,
        ) -> crate::common::RegisterFieldBool<12, 1, 0, Tgc1GlbCtrl_SPEC, crate::common::W>
        {
            crate::common::RegisterFieldBool::<12,1,0,Tgc1GlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        register are set to their reset values and channel x operation is        stopped immediately. The SR flip flop SOUR is set to  1 ."]
        #[inline(always)]
        pub fn rst_ch5(
            self,
        ) -> crate::common::RegisterFieldBool<13, 1, 0, Tgc1GlbCtrl_SPEC, crate::common::W>
        {
            crate::common::RegisterFieldBool::<13,1,0,Tgc1GlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        register are set to their reset values and channel x operation is        stopped immediately. The SR flip flop SOUR is set to  1 ."]
        #[inline(always)]
        pub fn rst_ch6(
            self,
        ) -> crate::common::RegisterFieldBool<14, 1, 0, Tgc1GlbCtrl_SPEC, crate::common::W>
        {
            crate::common::RegisterFieldBool::<14,1,0,Tgc1GlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "Software reset of channel 7. This bit is cleared automatically after write by CPU. The channel        register are set to their reset values and channel x operation is        stopped immediately. The SR flip flop SOUR is set to  1 ."]
        #[inline(always)]
        pub fn rst_ch7(
            self,
        ) -> crate::common::RegisterFieldBool<15, 1, 0, Tgc1GlbCtrl_SPEC, crate::common::W>
        {
            crate::common::RegisterFieldBool::<15,1,0,Tgc1GlbCtrl_SPEC,crate::common::W>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl0(
            self,
        ) -> crate::common::RegisterField<16, 0x3, 1, 0, u8, Tgc1GlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<16,0x3,1,0,u8, Tgc1GlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl1(
            self,
        ) -> crate::common::RegisterField<18, 0x3, 1, 0, u8, Tgc1GlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<18,0x3,1,0,u8, Tgc1GlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl2(
            self,
        ) -> crate::common::RegisterField<20, 0x3, 1, 0, u8, Tgc1GlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<20,0x3,1,0,u8, Tgc1GlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl3(
            self,
        ) -> crate::common::RegisterField<22, 0x3, 1, 0, u8, Tgc1GlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<22,0x3,1,0,u8, Tgc1GlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl4(
            self,
        ) -> crate::common::RegisterField<24, 0x3, 1, 0, u8, Tgc1GlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<24,0x3,1,0,u8, Tgc1GlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl5(
            self,
        ) -> crate::common::RegisterField<26, 0x3, 1, 0, u8, Tgc1GlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<26,0x3,1,0,u8, Tgc1GlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl6(
            self,
        ) -> crate::common::RegisterField<28, 0x3, 1, 0, u8, Tgc1GlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<28,0x3,1,0,u8, Tgc1GlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "TOM channel 7 enable update of register CM0  CM1 and CLK SRC from SR0  SR1 and CLK SRC SR. Write   Read"]
        #[inline(always)]
        pub fn upen_ctrl7(
            self,
        ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, Tgc1GlbCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<30,0x3,1,0,u8, Tgc1GlbCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Tgc1GlbCtrl {
        #[inline(always)]
        fn default() -> Tgc1GlbCtrl {
            <crate::RegValueT<Tgc1GlbCtrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Tgc1IntTrig_SPEC;
    impl crate::sealed::RegSpec for Tgc1IntTrig_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 TGC1 Internal Trigger Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Tgc1IntTrig = crate::RegValueT<Tgc1IntTrig_SPEC>;

    impl Tgc1IntTrig {
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig0(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Tgc1IntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Tgc1IntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig1(
            self,
        ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, Tgc1IntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<2,0x3,1,0,u8, Tgc1IntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig2(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Tgc1IntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Tgc1IntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig3(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Tgc1IntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, Tgc1IntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig4(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Tgc1IntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, Tgc1IntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig5(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, Tgc1IntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, Tgc1IntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig6(
            self,
        ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, Tgc1IntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x3,1,0,u8, Tgc1IntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Select input signal TRIG 7 as a trigger source. Write   Read"]
        #[inline(always)]
        pub fn int_trig7(
            self,
        ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, Tgc1IntTrig_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<14,0x3,1,0,u8, Tgc1IntTrig_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Tgc1IntTrig {
        #[inline(always)]
        fn default() -> Tgc1IntTrig {
            <crate::RegValueT<Tgc1IntTrig_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Tgc1OutenCtrl_SPEC;
    impl crate::sealed::RegSpec for Tgc1OutenCtrl_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 TGC1 Output Enable Control Register\n resetvalue={Application Reset:0x0}"]
    pub type Tgc1OutenCtrl = crate::RegValueT<Tgc1OutenCtrl_SPEC>;

    impl Tgc1OutenCtrl {
        #[doc = "Output TOM i  CH7 OUT enable disable update value. Write of following double bit values is possible  If the channel is disabled  ENDIS 0  0  or the output is disabled         OUTEN 0  0   the TOM channel 0 output TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl0(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Tgc1OutenCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Tgc1OutenCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output TOM i  CH7 OUT enable disable update value. Write of following double bit values is possible  If the channel is disabled  ENDIS 0  0  or the output is disabled         OUTEN 0  0   the TOM channel 0 output TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl1(
            self,
        ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, Tgc1OutenCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<2,0x3,1,0,u8, Tgc1OutenCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output TOM i  CH7 OUT enable disable update value. Write of following double bit values is possible  If the channel is disabled  ENDIS 0  0  or the output is disabled         OUTEN 0  0   the TOM channel 0 output TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl2(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Tgc1OutenCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Tgc1OutenCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output TOM i  CH7 OUT enable disable update value. Write of following double bit values is possible  If the channel is disabled  ENDIS 0  0  or the output is disabled         OUTEN 0  0   the TOM channel 0 output TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl3(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Tgc1OutenCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, Tgc1OutenCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output TOM i  CH7 OUT enable disable update value. Write of following double bit values is possible  If the channel is disabled  ENDIS 0  0  or the output is disabled         OUTEN 0  0   the TOM channel 0 output TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl4(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Tgc1OutenCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, Tgc1OutenCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output TOM i  CH7 OUT enable disable update value. Write of following double bit values is possible  If the channel is disabled  ENDIS 0  0  or the output is disabled         OUTEN 0  0   the TOM channel 0 output TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl5(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, Tgc1OutenCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, Tgc1OutenCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output TOM i  CH7 OUT enable disable update value. Write of following double bit values is possible  If the channel is disabled  ENDIS 0  0  or the output is disabled         OUTEN 0  0   the TOM channel 0 output TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl6(
            self,
        ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, Tgc1OutenCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x3,1,0,u8, Tgc1OutenCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Output TOM i  CH7 OUT enable disable update value. Write of following double bit values is possible  If the channel is disabled  ENDIS 0  0  or the output is disabled         OUTEN 0  0   the TOM channel 0 output TOM i  CH0 OUT is the inverted value of bit SL."]
        #[inline(always)]
        pub fn outen_ctrl7(
            self,
        ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, Tgc1OutenCtrl_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<14,0x3,1,0,u8, Tgc1OutenCtrl_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Tgc1OutenCtrl {
        #[inline(always)]
        fn default() -> Tgc1OutenCtrl {
            <crate::RegValueT<Tgc1OutenCtrl_SPEC> as RegisterValue<_>>::new(0)
        }
    }

    #[doc(hidden)]
    #[derive(Copy, Clone, Eq, PartialEq)]
    pub struct Tgc1OutenStat_SPEC;
    impl crate::sealed::RegSpec for Tgc1OutenStat_SPEC {
        type DataType = u32;
    }
    #[doc = "TOM0 TGC1 Output Enable Status Register\n resetvalue={Application Reset:0x0}"]
    pub type Tgc1OutenStat = crate::RegValueT<Tgc1OutenStat_SPEC>;

    impl Tgc1OutenStat {
        #[doc = "Control status of output TOM i  CH7 OUT. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn outen_stat0(
            self,
        ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Tgc1OutenStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<0,0x3,1,0,u8, Tgc1OutenStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Control status of output TOM i  CH7 OUT. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn outen_stat1(
            self,
        ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, Tgc1OutenStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<2,0x3,1,0,u8, Tgc1OutenStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Control status of output TOM i  CH7 OUT. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn outen_stat2(
            self,
        ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Tgc1OutenStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<4,0x3,1,0,u8, Tgc1OutenStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Control status of output TOM i  CH7 OUT. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn outen_stat3(
            self,
        ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, Tgc1OutenStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<6,0x3,1,0,u8, Tgc1OutenStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Control status of output TOM i  CH7 OUT. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn outen_stat4(
            self,
        ) -> crate::common::RegisterField<8, 0x3, 1, 0, u8, Tgc1OutenStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<8,0x3,1,0,u8, Tgc1OutenStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Control status of output TOM i  CH7 OUT. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn outen_stat5(
            self,
        ) -> crate::common::RegisterField<10, 0x3, 1, 0, u8, Tgc1OutenStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<10,0x3,1,0,u8, Tgc1OutenStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Control status of output TOM i  CH7 OUT. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn outen_stat6(
            self,
        ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, Tgc1OutenStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<12,0x3,1,0,u8, Tgc1OutenStat_SPEC,crate::common::RW>::from_register(self,0)
        }
        #[doc = "Control status of output TOM i  CH7 OUT. Write of following double bit values is possible"]
        #[inline(always)]
        pub fn outen_stat7(
            self,
        ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, Tgc1OutenStat_SPEC, crate::common::RW>
        {
            crate::common::RegisterField::<14,0x3,1,0,u8, Tgc1OutenStat_SPEC,crate::common::RW>::from_register(self,0)
        }
    }
    impl core::default::Default for Tgc1OutenStat {
        #[inline(always)]
        fn default() -> Tgc1OutenStat {
            <crate::RegValueT<Tgc1OutenStat_SPEC> as RegisterValue<_>>::new(0)
        }
    }
}
